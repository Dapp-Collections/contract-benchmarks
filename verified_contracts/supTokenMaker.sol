pragma solidity 0.4.24;

/** Contact <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1a727f766a5a797574797f6a6e69347375">[emailÂ protected]</a> or visit http://concepts.io for questions about this token contract */&#13;
&#13;
/** &#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a * b;&#13;
    assert(a == 0 || c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a / b;&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
interface ERC20 {&#13;
    function transferFrom(address _from, address _to, uint _value) external returns (bool);&#13;
    function approve(address _spender, uint _value) external returns (bool);&#13;
    function allowance(address _owner, address _spender) external constant returns (uint);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint _value);&#13;
}&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
&#13;
  address public owner;&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor () internal{&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) onlyOwner public {&#13;
    require(newOwner != address(0) &amp;&amp; msg.sender==owner);&#13;
    owner = newOwner;&#13;
  }&#13;
}&#13;
contract tokenCreator is Ownable{&#13;
&#13;
    string internal _symbol;&#13;
    string internal _name;&#13;
    uint8 internal _decimals;&#13;
    uint internal _totalSupply = 500000000;&#13;
    mapping (address =&gt; uint256) internal _balanceOf;&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) internal _allowed;&#13;
&#13;
    constructor(string symbol, string name, uint8 decimals, uint totalSupply) public {&#13;
        _symbol = symbol;&#13;
        _name = name;&#13;
        _decimals = decimals;&#13;
        _totalSupply = _calcTokens(decimals,totalSupply);&#13;
    }&#13;
&#13;
   function _calcTokens(uint256 decimals, uint256 amount) internal pure returns (uint256){&#13;
      uint256 c = amount * 10**decimals;&#13;
      return c;&#13;
   }&#13;
&#13;
    function name() public constant returns (string) {&#13;
        return _name;&#13;
    }&#13;
&#13;
    function symbol() public constant returns (string) {&#13;
        return _symbol;&#13;
    }&#13;
&#13;
    function decimals() public constant returns (uint8) {&#13;
        return _decimals;&#13;
    }&#13;
&#13;
    function totalSupply() public constant returns (uint) {&#13;
        return _totalSupply;&#13;
    }&#13;
&#13;
    function balanceOf(address _addr) public constant returns (uint);&#13;
    function transfer(address _to, uint _value) public returns (bool);&#13;
    event Transfer(address indexed _from, address indexed _to, uint _value);&#13;
}&#13;
contract supTokenMaker is tokenCreator("REPLY", "True Reply Research Token", 18, 500000000), ERC20 {&#13;
    using SafeMath for uint256;&#13;
&#13;
    event TokenTransferRequest(string method,address from, address backer, uint amount);&#13;
&#13;
    constructor() public {&#13;
        _balanceOf[msg.sender] = _totalSupply;&#13;
    }&#13;
&#13;
    function totalSupply() public constant returns (uint) {&#13;
        return _totalSupply;&#13;
    }&#13;
&#13;
    function balanceOf(address _addr) public constant returns (uint) {&#13;
        return _balanceOf[_addr];&#13;
    }&#13;
&#13;
    function transfer(address _to, uint _value) public returns (bool) {&#13;
        emit TokenTransferRequest("transfer",msg.sender, _to, _value);&#13;
        require(_value &gt; 0 &amp;&amp; _value &lt;= _balanceOf[msg.sender]);&#13;
&#13;
        _balanceOf[msg.sender] = _balanceOf[msg.sender].sub(_value);&#13;
        _balanceOf[_to] = _balanceOf[_to].add(_value);&#13;
        emit Transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
    function transferFrom(address _from, address _to, uint _value) public returns (bool) {&#13;
        emit TokenTransferRequest("transferFrom",_from, _to, _value);&#13;
        require(_to != address(0) &amp;&amp; _value &lt;= _balanceOf[_from] &amp;&amp; _value &lt;= _allowed[_from][msg.sender] &amp;&amp; _value &gt; 0);&#13;
&#13;
        _balanceOf[_from] =  _balanceOf[_from].sub(_value);&#13;
        _balanceOf[_to] = _balanceOf[_to].add(_value);&#13;
        _allowed[_from][msg.sender] = _allowed[_from][msg.sender].sub(_value);&#13;
&#13;
        emit Transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function approve(address _spender, uint _value) public returns (bool) {&#13;
        _allowed[msg.sender][_spender] = _value;&#13;
        emit Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function allowance(address _owner, address _spender) public constant returns (uint) {&#13;
        return _allowed[_owner][_spender];&#13;
    }&#13;
}
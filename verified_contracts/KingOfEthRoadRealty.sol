// File: contracts/GodMode.sol

/****************************************************
 *
 * Copyright 2018 BurzNest LLC. All rights reserved.
 *
 * The contents of this file are provided for review
 * and educational purposes ONLY. You MAY NOT use,
 * copy, distribute, or modify this software without
 * explicit written permission from BurzNest LLC.
 *
 ****************************************************/

pragma solidity ^0.4.24;

/// @title God Mode
/// @author Anthony Burzillo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cdafb8bfb78dafb8bfb7a3a8beb9e3aea2a0">[email protected]</a>&gt;&#13;
/// @dev This contract provides a basic interface for God&#13;
///  in a contract as well as the ability for God to pause&#13;
///  the contract&#13;
contract GodMode {&#13;
    /// @dev Is the contract paused?&#13;
    bool public isPaused;&#13;
&#13;
    /// @dev God's address&#13;
    address public god;&#13;
&#13;
    /// @dev Only God can run this function&#13;
    modifier onlyGod()&#13;
    {&#13;
        require(god == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This function can only be run while the contract&#13;
    ///  is not paused&#13;
    modifier notPaused()&#13;
    {&#13;
        require(!isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This event is fired when the contract is paused&#13;
    event GodPaused();&#13;
&#13;
    /// @dev This event is fired when the contract is unpaused&#13;
    event GodUnpaused();&#13;
&#13;
    constructor() public&#13;
    {&#13;
        // Make the creator of the contract God&#13;
        god = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev God can change the address of God&#13;
    /// @param _newGod The new address for God&#13;
    function godChangeGod(address _newGod) public onlyGod&#13;
    {&#13;
        god = _newGod;&#13;
    }&#13;
&#13;
    /// @dev God can pause the game&#13;
    function godPause() public onlyGod&#13;
    {&#13;
        isPaused = true;&#13;
&#13;
        emit GodPaused();&#13;
    }&#13;
&#13;
    /// @dev God can unpause the game&#13;
    function godUnpause() public onlyGod&#13;
    {&#13;
        isPaused = false;&#13;
&#13;
        emit GodUnpaused();&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthAbstractInterface.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
/// @title King of Eth Abstract Interface&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="88eafdfaf2c8eafdfaf2e6edfbfca6ebe7e5">[email protected]</a>&gt;&#13;
/// @dev Abstract interface contract for titles and taxes&#13;
contract KingOfEthAbstractInterface {&#13;
    /// @dev The address of the current King&#13;
    address public king;&#13;
&#13;
    /// @dev The address of the current Wayfarer&#13;
    address public wayfarer;&#13;
&#13;
    /// @dev Anyone can pay taxes&#13;
    function payTaxes() public payable;&#13;
}&#13;
&#13;
// File: contracts/KingOfEthReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="224057505862405750584c4751560c414d4f">[email protected]</a>&gt;&#13;
/// @dev Functionality to allow contracts to reference the king contract&#13;
contract KingOfEthReferencer is GodMode {&#13;
    /// @dev The address of the king contract&#13;
    address public kingOfEthContract;&#13;
&#13;
    /// @dev Only the king contract can run this&#13;
    modifier onlyKingOfEthContract()&#13;
    {&#13;
        require(kingOfEthContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can change the king contract&#13;
    /// @param _kingOfEthContract The new address&#13;
    function godSetKingOfEthContract(address _kingOfEthContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        kingOfEthContract = _kingOfEthContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthRoadsAbstractInterface.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
/// @title King of Eth: Roads Abstract Interface&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="620017101822001710180c0711164c010d0f">[email protected]</a>&gt;&#13;
/// @dev Abstract interface contract for roads&#13;
contract KingOfEthRoadsAbstractInterface {&#13;
    /// @dev Get the owner of the road at some location&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road (either&#13;
    ///  0 for right or 1 for down)&#13;
    /// @return The address of the owner&#13;
    function ownerOf(uint _x, uint _y, uint8 _direction) public view returns(address);&#13;
&#13;
    /// @dev The road realty contract can transfer road ownership&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    /// @param _from The previous owner of road&#13;
    /// @param _to The new owner of road&#13;
    function roadRealtyTransferOwnership(&#13;
          uint _x&#13;
        , uint _y&#13;
        , uint8 _direction&#13;
        , address _from&#13;
        , address _to&#13;
    ) public;&#13;
}&#13;
&#13;
// File: contracts/KingOfEthRoadsReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth: Roads Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="751700070f351700070f1b1006015b161a18">[email protected]</a>&gt;&#13;
/// @dev Provides functionality to reference the roads contract&#13;
contract KingOfEthRoadsReferencer is GodMode {&#13;
    /// @dev The roads contract's address&#13;
    address public roadsContract;&#13;
&#13;
    /// @dev Only the roads contract can run this function&#13;
    modifier onlyRoadsContract()&#13;
    {&#13;
        require(roadsContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can set the realty contract&#13;
    /// @param _roadsContract The new address&#13;
    function godSetRoadsContract(address _roadsContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        roadsContract = _roadsContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthRoadRealty.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title King of Eth: Road Realty&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6f0d1a1d152f0d1a1d15010a1c1b410c0002">[email protected]</a>&gt;&#13;
/// @dev Contract for controlling sales of roads&#13;
contract KingOfEthRoadRealty is&#13;
      GodMode&#13;
    , KingOfEthReferencer&#13;
    , KingOfEthRoadsReferencer&#13;
{&#13;
    /// @dev The number that divides the amount payed for any sale to produce&#13;
    ///  the amount payed in taxes&#13;
    uint public constant taxDivisor = 25;&#13;
&#13;
    /// @dev Mapping from the x, y coordinates and the direction (0 for right and&#13;
    ///  1 for down) of a road to the  current sale price (0 if there is no sale)&#13;
    mapping (uint =&gt; mapping (uint =&gt; uint[2])) roadPrices;&#13;
&#13;
    /// @dev Fired when there is a new road for sale&#13;
    event RoadForSale(&#13;
          uint x&#13;
        , uint y&#13;
        , uint8 direction&#13;
        , address owner&#13;
        , uint amount&#13;
    );&#13;
&#13;
    /// @dev Fired when the owner changes the price of a road&#13;
    event RoadPriceChanged(&#13;
          uint x&#13;
        , uint y&#13;
        , uint8 direction&#13;
        , uint amount&#13;
    );&#13;
&#13;
    /// @dev Fired when a road is sold&#13;
    event RoadSold(&#13;
          uint x&#13;
        , uint y&#13;
        , uint8 direction&#13;
        , address from&#13;
        , address to&#13;
        , uint amount&#13;
    );&#13;
&#13;
    /// @dev Fired when the sale for a road is cancelled by the owner&#13;
    event RoadSaleCancelled(&#13;
          uint x&#13;
        , uint y&#13;
        , uint8 direction&#13;
        , address owner&#13;
    );&#13;
&#13;
    /// @dev Only the owner of the road at a location can run this&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    modifier onlyRoadOwner(uint _x, uint _y, uint8 _direction)&#13;
    {&#13;
        require(KingOfEthRoadsAbstractInterface(roadsContract).ownerOf(_x, _y, _direction) == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This can only be run if there is *not* an existing sale for a road&#13;
    ///  at a location&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    modifier noExistingRoadSale(uint _x, uint _y, uint8 _direction)&#13;
    {&#13;
        require(0 == roadPrices[_x][_y][_direction]);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This can only be run if there is an existing sale for a house&#13;
    ///  at a location&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    modifier existingRoadSale(uint _x, uint _y, uint8 _direction)&#13;
    {&#13;
        require(0 != roadPrices[_x][_y][_direction]);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @param _kingOfEthContract The address of the king contract&#13;
    constructor(address _kingOfEthContract) public&#13;
    {&#13;
        kingOfEthContract = _kingOfEthContract;&#13;
    }&#13;
&#13;
    /// @dev The roads contract can cancel a sale when a road is transfered&#13;
    ///  to another player&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    function roadsCancelRoadSale(uint _x, uint _y, uint8 _direction)&#13;
        public&#13;
        onlyRoadsContract&#13;
    {&#13;
        // If there is indeed a sale&#13;
        if(0 != roadPrices[_x][_y][_direction])&#13;
        {&#13;
            // Cancel the sale&#13;
            roadPrices[_x][_y][_direction] = 0;&#13;
&#13;
            emit RoadSaleCancelled(_x, _y, _direction, msg.sender);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev The owner of a road can start a sale&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    /// @param _askingPrice The price that must be payed by another player&#13;
    ///  to purchase the road&#13;
    function startRoadSale(&#13;
          uint _x&#13;
        , uint _y&#13;
        , uint8 _direction&#13;
        , uint _askingPrice&#13;
    )&#13;
        public&#13;
        notPaused&#13;
        onlyRoadOwner(_x, _y, _direction)&#13;
        noExistingRoadSale(_x, _y, _direction)&#13;
    {&#13;
        // Require that the price is at least 0&#13;
        require(0 != _askingPrice);&#13;
&#13;
        // Record the price&#13;
        roadPrices[_x][_y][_direction] = _askingPrice;&#13;
&#13;
        emit RoadForSale(_x, _y, _direction, msg.sender, _askingPrice);&#13;
    }&#13;
&#13;
    /// @dev The owner of a road can change the price of a sale&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    /// @param _askingPrice The new price that must be payed by another&#13;
    ///  player to purchase the road&#13;
    function changeRoadPrice(&#13;
          uint _x&#13;
        , uint _y&#13;
        , uint8 _direction&#13;
        , uint _askingPrice&#13;
    )&#13;
        public&#13;
        notPaused&#13;
        onlyRoadOwner(_x, _y, _direction)&#13;
        existingRoadSale(_x, _y, _direction)&#13;
    {&#13;
        // Require that the price is at least 0&#13;
        require(0 != _askingPrice);&#13;
&#13;
        // Record the price&#13;
        roadPrices[_x][_y][_direction] = _askingPrice;&#13;
&#13;
        emit RoadPriceChanged(_x, _y, _direction, _askingPrice);&#13;
    }&#13;
&#13;
    /// @dev Anyone can purchase a road as long as the sale exists&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    function purchaseRoad(uint _x, uint _y, uint8 _direction)&#13;
        public&#13;
        payable&#13;
        notPaused&#13;
        existingRoadSale(_x, _y, _direction)&#13;
    {&#13;
        // Require that the exact price was paid&#13;
        require(roadPrices[_x][_y][_direction] == msg.value);&#13;
&#13;
        // End the sale&#13;
        roadPrices[_x][_y][_direction] = 0;&#13;
&#13;
        // Calculate the taxes to be paid&#13;
        uint taxCut = msg.value / taxDivisor;&#13;
&#13;
        // Pay the taxes&#13;
        KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(taxCut)();&#13;
&#13;
        KingOfEthRoadsAbstractInterface _roadsContract = KingOfEthRoadsAbstractInterface(roadsContract);&#13;
&#13;
        // Determine the previous owner&#13;
        address _oldOwner = _roadsContract.ownerOf(_x, _y, _direction);&#13;
&#13;
        // Send the buyer the house&#13;
        _roadsContract.roadRealtyTransferOwnership(&#13;
              _x&#13;
            , _y&#13;
            , _direction&#13;
            , _oldOwner&#13;
            , msg.sender&#13;
        );&#13;
&#13;
        // Send the previous owner his share&#13;
        _oldOwner.transfer(msg.value - taxCut);&#13;
&#13;
        emit RoadSold(&#13;
              _x&#13;
            , _y&#13;
            , _direction&#13;
            , _oldOwner&#13;
            , msg.sender&#13;
            , msg.value&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev The owner of a road can cancel a sale&#13;
    /// @param _x The x coordinate of the road&#13;
    /// @param _y The y coordinate of the road&#13;
    /// @param _direction The direction of the road&#13;
    function cancelRoadSale(uint _x, uint _y, uint8 _direction)&#13;
        public&#13;
        notPaused&#13;
        onlyRoadOwner(_x, _y, _direction)&#13;
        existingRoadSale(_x, _y, _direction)&#13;
    {&#13;
        // Cancel the sale&#13;
        roadPrices[_x][_y][_direction] = 0;&#13;
&#13;
        emit RoadSaleCancelled(_x, _y, _direction, msg.sender);&#13;
    }&#13;
}
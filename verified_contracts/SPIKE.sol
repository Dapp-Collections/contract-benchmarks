pragma solidity ^0.4.18;

// ----------------------------------------------------------------------------------------------
// Spike Token by Aly Pte.
// An ERC20 standard
//
// author: Spike Team
// Contact: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d6b5bab3bbb3b896b7f8baaf">[emailÂ protected]</a>&#13;
&#13;
contract ERC20Interface {&#13;
    // Get the total token supply&#13;
    function totalSupply() public constant returns (uint256 _totalSupply);&#13;
&#13;
    // Get the account balance of another account with address _owner&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance);&#13;
&#13;
    // Send _value amount of tokens to address _to&#13;
    function transfer(address _to, uint256 _value) public returns (bool success);&#13;
&#13;
    // Triggered when tokens are transferred.&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
&#13;
    // Triggered whenever approve(address _spender, uint256 _value) is called.&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
}&#13;
&#13;
contract Spike is ERC20Interface {&#13;
    uint public constant decimals = 5;&#13;
&#13;
    string public constant symbol = "SPIKE";&#13;
    string public constant name = "SPIKE";&#13;
&#13;
    bool public _selling = false;//initial not selling&#13;
    uint public _totalSupply = 10 ** 14; // total supply is 10^14 unit, equivalent to 10^9 Spike&#13;
    uint public _originalBuyPrice = 3 * 10**8; // original buy 1ETH = 3000 Spike = 3 * 10**8 unit&#13;
&#13;
    // Owner of this contract&#13;
    address public owner;&#13;
&#13;
    // Balances Spike for each account&#13;
    mapping(address =&gt; uint256) balances;&#13;
&#13;
    // List of approved investors&#13;
    mapping(address =&gt; bool) approvedInvestorList;&#13;
&#13;
    // mapping Deposit&#13;
    mapping(address =&gt; uint256) deposit;&#13;
&#13;
    // buyers buy token deposit&#13;
    address[] buyers;&#13;
&#13;
    // icoPercent&#13;
    uint _icoPercent = 30;&#13;
&#13;
    // _icoSupply is the avalable unit. Initially, it is _totalSupply&#13;
    uint public _icoSupply = _totalSupply * _icoPercent / 100;&#13;
&#13;
    // minimum buy 0.3 ETH&#13;
    uint public _minimumBuy = 3 * 10 ** 17;&#13;
&#13;
    // maximum buy 30 ETH&#13;
    uint public _maximumBuy = 30 * 10 ** 18;&#13;
&#13;
    /**&#13;
     * Functions with this modifier can only be executed by the owner&#13;
     */&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier can only be executed by users except owners&#13;
     */&#13;
    modifier onlyNotOwner() {&#13;
        require(msg.sender != owner);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier check on sale status&#13;
     * Only allow sale if _selling is on&#13;
     */&#13;
    modifier onSale() {&#13;
        require(_selling &amp;&amp; (_icoSupply &gt; 0) );&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier check the validity of original buy price&#13;
     */&#13;
    modifier validOriginalBuyPrice() {&#13;
        require(_originalBuyPrice &gt; 0);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier check the validity of address is investor&#13;
     */&#13;
    modifier validInvestor() {&#13;
        require(approvedInvestorList[msg.sender]);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier check the validity of msg value&#13;
     * value must greater than equal minimumBuyPrice&#13;
     * total deposit must less than equal maximumBuyPrice&#13;
     */&#13;
    modifier validValue(){&#13;
        // require value &gt;= _minimumBuy AND total deposit of msg.sender &lt;= maximumBuyPrice&#13;
        require ( (msg.value &gt;= _minimumBuy) &amp;&amp;&#13;
            ( (deposit[msg.sender] + msg.value) &lt;= _maximumBuy) );&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier check the validity of range [a, b] &lt;= [0, buyers.length-1]&#13;
     */&#13;
    modifier validRange(uint a, uint b){&#13;
        require ( (a&gt;=0 &amp;&amp; a&lt;=b) &amp;&amp;&#13;
            (b&lt;buyers.length) );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Fallback function allows to buy ether.&#13;
    function()&#13;
    public&#13;
    payable {&#13;
        buySpike();&#13;
    }&#13;
&#13;
    /// @dev buy function allows to buy ether. for using optional data&#13;
    function buySpike()&#13;
    public&#13;
    payable&#13;
    onSale&#13;
    validValue {&#13;
        // check the first buy =&gt; push to Array&#13;
        if (deposit[msg.sender] == 0 &amp;&amp; msg.value &gt; 0){&#13;
            // add new buyer to List&#13;
            buyers.push(msg.sender);&#13;
        }&#13;
        // increase amount deposit of buyer&#13;
        deposit[msg.sender] += msg.value;&#13;
    }&#13;
&#13;
    /// @dev Constructor&#13;
    function Spike()&#13;
    public {&#13;
        owner = msg.sender;&#13;
        // buyers = new address[](1);&#13;
        balances[owner] = _totalSupply;&#13;
        Transfer(0x0, owner, _totalSupply);&#13;
    }&#13;
&#13;
    /// @dev Gets totalSupply&#13;
    /// @return Total supply&#13;
    function totalSupply()&#13;
    public&#13;
    constant&#13;
    returns (uint256) {&#13;
        return _totalSupply;&#13;
    }&#13;
&#13;
    /// @dev set new icoPercent&#13;
    /// @param newIcoPercent new value of icoPercent&#13;
    function setIcoPercent(uint256 newIcoPercent)&#13;
    public&#13;
    onlyOwner {&#13;
        _icoPercent = newIcoPercent;&#13;
        _icoSupply = _totalSupply * _icoPercent / 100;&#13;
    }&#13;
&#13;
    /// @dev set new _minimumBuy&#13;
    /// @param newMinimumBuy new value of _minimumBuy&#13;
    function setMinimumBuy(uint256 newMinimumBuy)&#13;
    public&#13;
    onlyOwner {&#13;
        _minimumBuy = newMinimumBuy;&#13;
    }&#13;
&#13;
    /// @dev set new _maximumBuy&#13;
    /// @param newMaximumBuy new value of _maximumBuy&#13;
    function setMaximumBuy(uint256 newMaximumBuy)&#13;
    public&#13;
    onlyOwner {&#13;
        _maximumBuy = newMaximumBuy;&#13;
    }&#13;
&#13;
    /// @dev Gets account's balance&#13;
    /// @param _addr Address of the account&#13;
    /// @return Account balance&#13;
    function balanceOf(address _addr)&#13;
    public&#13;
    constant&#13;
    returns (uint256) {&#13;
        return balances[_addr];&#13;
    }&#13;
&#13;
    /// @dev check address is approved investor&#13;
    /// @param _addr address&#13;
    function isApprovedInvestor(address _addr)&#13;
    public&#13;
    constant&#13;
    returns (bool) {&#13;
        return approvedInvestorList[_addr];&#13;
    }&#13;
&#13;
    /// @dev filter buyers in list buyers&#13;
    /// @param isInvestor type buyers, is investor or not&#13;
    function filterBuyers(bool isInvestor)&#13;
    private&#13;
    constant&#13;
    returns(address[] filterList){&#13;
        address[] memory filterTmp = new address[](buyers.length);&#13;
        uint count = 0;&#13;
        for (uint i = 0; i &lt; buyers.length; i++){&#13;
            if(approvedInvestorList[buyers[i]] == isInvestor){&#13;
                filterTmp[count] = buyers[i];&#13;
                count++;&#13;
            }&#13;
        }&#13;
&#13;
        filterList = new address[](count);&#13;
        for (i = 0; i &lt; count; i++){&#13;
            if(filterTmp[i] != 0x0){&#13;
                filterList[i] = filterTmp[i];&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev filter buyers are investor in list deposited&#13;
    function getInvestorBuyers()&#13;
    public&#13;
    constant&#13;
    returns(address[]){&#13;
        return filterBuyers(true);&#13;
    }&#13;
&#13;
    /// @dev filter normal Buyers in list buyer deposited&#13;
    function getNormalBuyers()&#13;
    public&#13;
    constant&#13;
    returns(address[]){&#13;
        return filterBuyers(false);&#13;
    }&#13;
&#13;
    /// @dev get all buyer&#13;
    function getAllBuyers()&#13;
    public&#13;
    constant&#13;
    returns(address[]){&#13;
        return buyers;&#13;
    }&#13;
&#13;
    /// @dev get ETH deposit&#13;
    /// @param _addr address get deposit&#13;
    /// @return amount deposit of an buyer&#13;
    function getDeposit(address _addr)&#13;
    public&#13;
    constant&#13;
    returns(uint256){&#13;
        return deposit[_addr];&#13;
    }&#13;
&#13;
    /// @dev delivery token for buyer&#13;
    /// @param a start point&#13;
    /// @param b end point&#13;
    function deliveryToken(uint a, uint b)&#13;
    public&#13;
    onlyOwner&#13;
    validOriginalBuyPrice&#13;
    validRange(a, b) {&#13;
        //sumary deposit of investors&#13;
        uint256 sum = 0;&#13;
        // make sure balances owner greater than _icoSupply&#13;
        require(balances[owner] &gt;= _icoSupply);&#13;
&#13;
        for (uint i = a; i &lt;= b; i++){&#13;
            if(approvedInvestorList[buyers[i]]) {&#13;
&#13;
                // compute amount token of each buyer&#13;
                uint256 requestedUnits = (deposit[buyers[i]] * _originalBuyPrice) / 10**18;&#13;
&#13;
                //check requestedUnits &gt; _icoSupply&#13;
                if(requestedUnits &lt;= _icoSupply &amp;&amp; requestedUnits &gt; 0 ){&#13;
                    // prepare transfer data&#13;
                    balances[owner] -= requestedUnits;&#13;
                    balances[buyers[i]] += requestedUnits;&#13;
                    _icoSupply -= requestedUnits;&#13;
&#13;
                    // submit transfer&#13;
                    Transfer(owner, buyers[i], requestedUnits);&#13;
&#13;
                    // reset deposit of buyer&#13;
                    sum += deposit[buyers[i]];&#13;
                    deposit[buyers[i]] = 0;&#13;
                }&#13;
            }&#13;
        }&#13;
        //transfer total ETH of investors to owner&#13;
        owner.transfer(sum);&#13;
    }&#13;
&#13;
    /// @dev return ETH for normal buyers in range [a, b]&#13;
    /// @param a start point&#13;
    /// @param b end point&#13;
    function returnETHforUnqualifiedBuyers(uint a, uint b)&#13;
    public&#13;
    validRange(a, b)&#13;
    onlyOwner{&#13;
        for(uint i = a; i &lt;= b; i++){&#13;
            // buyer not approve investor&#13;
            if (!approvedInvestorList[buyers[i]]) {&#13;
                // get deposit of buyer&#13;
                uint256 buyerDeposit = deposit[buyers[i]];&#13;
                // reset deposit of buyer&#13;
                deposit[buyers[i]] = 0;&#13;
                // return deposit amount for buyer&#13;
                buyers[i].transfer(buyerDeposit);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Transfers the balance from Multisig wallet to an account&#13;
    /// @param _to Recipient address&#13;
    /// @param _amount Transfered amount in unit&#13;
    /// @return Transfer status&#13;
    function transfer(address _to, uint256 _amount)&#13;
    public&#13;
    returns (bool) {&#13;
        // if sender's balance has enough unit and amount &gt;= 0,&#13;
        //      and the sum is not overflow,&#13;
        // then do transfer&#13;
        if ( (balances[msg.sender] &gt;= _amount) &amp;&amp;&#13;
        (_amount &gt;= 0) &amp;&amp;&#13;
            (balances[_to] + _amount &gt; balances[_to]) ) {&#13;
&#13;
            balances[msg.sender] -= _amount;&#13;
            balances[_to] += _amount;&#13;
            Transfer(msg.sender, _to, _amount);&#13;
&#13;
            return true;&#13;
&#13;
        } else {&#13;
            revert();&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Enables sale&#13;
    function turnOnSale() onlyOwner&#13;
    public {&#13;
        _selling = true;&#13;
    }&#13;
&#13;
    /// @dev Disables sale&#13;
    function turnOffSale() onlyOwner&#13;
    public {&#13;
        _selling = false;&#13;
    }&#13;
&#13;
    /// @dev Gets selling status&#13;
    function isSellingNow()&#13;
    public&#13;
    constant&#13;
    returns (bool) {&#13;
        return _selling;&#13;
    }&#13;
&#13;
    /// @dev Updates buy price (owner ONLY)&#13;
    /// @param newBuyPrice New buy price (in unit)&#13;
    function setBuyPrice(uint newBuyPrice)&#13;
    onlyOwner&#13;
    public {&#13;
        _originalBuyPrice = newBuyPrice;&#13;
    }&#13;
&#13;
    /// @dev Adds list of new investors to the investors list and approve all&#13;
    /// @param newInvestorList Array of new investors addresses to be added&#13;
    function addInvestorList(address[] newInvestorList)&#13;
    onlyOwner&#13;
    public {&#13;
        for (uint i = 0; i &lt; newInvestorList.length; i++){&#13;
            approvedInvestorList[newInvestorList[i]] = true;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Removes list of investors from list&#13;
    /// @param investorList Array of addresses of investors to be removed&#13;
    function removeInvestorList(address[] investorList)&#13;
    onlyOwner&#13;
    public {&#13;
        for (uint i = 0; i &lt; investorList.length; i++){&#13;
            approvedInvestorList[investorList[i]] = false;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Withdraws Ether in contract (Owner only)&#13;
    /// @return Status of withdrawal&#13;
    function withdraw() onlyOwner&#13;
    public&#13;
    returns (bool) {&#13;
        return owner.send(this.balance);&#13;
    }&#13;
}&#13;
&#13;
/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.&#13;
/// @author Stefan George - &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ddaea9b8bbbcb3f3bab8b2afbab89dbeb2b3aeb8b3aea4aef3b3b8a9">[emailÂ protected]</a>&gt;&#13;
contract MultiSigWallet {&#13;
&#13;
    uint constant public MAX_OWNER_COUNT = 50;&#13;
&#13;
    event Confirmation(address indexed sender, uint indexed transactionId);&#13;
    event Revocation(address indexed sender, uint indexed transactionId);&#13;
    event Submission(uint indexed transactionId);&#13;
    event Execution(uint indexed transactionId);&#13;
    event ExecutionFailure(uint indexed transactionId);&#13;
    event Deposit(address indexed sender, uint value);&#13;
    event OwnerAddition(address indexed owner);&#13;
    event OwnerRemoval(address indexed owner);&#13;
    event RequirementChange(uint required);&#13;
    event CoinCreation(address coin);&#13;
&#13;
    mapping (uint =&gt; Transaction) public transactions;&#13;
    mapping (uint =&gt; mapping (address =&gt; bool)) public confirmations;&#13;
    mapping (address =&gt; bool) public isOwner;&#13;
    address[] public owners;&#13;
    uint public required;&#13;
    uint public transactionCount;&#13;
    bool flag = true;&#13;
&#13;
    struct Transaction {&#13;
        address destination;&#13;
        uint value;&#13;
        bytes data;&#13;
        bool executed;&#13;
    }&#13;
&#13;
    modifier onlyWallet() {&#13;
        if (msg.sender != address(this))&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier ownerDoesNotExist(address owner) {&#13;
        if (isOwner[owner])&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier ownerExists(address owner) {&#13;
        if (!isOwner[owner])&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier transactionExists(uint transactionId) {&#13;
        if (transactions[transactionId].destination == 0)&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier confirmed(uint transactionId, address owner) {&#13;
        if (!confirmations[transactionId][owner])&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notConfirmed(uint transactionId, address owner) {&#13;
        if (confirmations[transactionId][owner])&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notExecuted(uint transactionId) {&#13;
        if (transactions[transactionId].executed)&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notNull(address _address) {&#13;
        if (_address == 0)&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier validRequirement(uint ownerCount, uint _required) {&#13;
        if (   ownerCount &gt; MAX_OWNER_COUNT&#13;
        || _required &gt; ownerCount&#13;
        || _required == 0&#13;
        || ownerCount == 0)&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Fallback function allows to deposit ether.&#13;
    function()&#13;
    payable&#13;
    {&#13;
        if (msg.value &gt; 0)&#13;
            Deposit(msg.sender, msg.value);&#13;
    }&#13;
&#13;
    /*&#13;
     * Public functions&#13;
     */&#13;
    /// @dev Contract constructor sets initial owners and required number of confirmations.&#13;
    /// @param _owners List of initial owners.&#13;
    /// @param _required Number of required confirmations.&#13;
    function MultiSigWallet(address[] _owners, uint _required)&#13;
    public&#13;
    validRequirement(_owners.length, _required)&#13;
    {&#13;
        for (uint i=0; i&lt;_owners.length; i++) {&#13;
            if (isOwner[_owners[i]] || _owners[i] == 0)&#13;
                revert();&#13;
            isOwner[_owners[i]] = true;&#13;
        }&#13;
        owners = _owners;&#13;
        required = _required;&#13;
    }&#13;
&#13;
    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of new owner.&#13;
    function addOwner(address owner)&#13;
    public&#13;
    onlyWallet&#13;
    ownerDoesNotExist(owner)&#13;
    notNull(owner)&#13;
    validRequirement(owners.length + 1, required)&#13;
    {&#13;
        isOwner[owner] = true;&#13;
        owners.push(owner);&#13;
        OwnerAddition(owner);&#13;
    }&#13;
&#13;
    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of owner.&#13;
    function removeOwner(address owner)&#13;
    public&#13;
    onlyWallet&#13;
    ownerExists(owner)&#13;
    {&#13;
        isOwner[owner] = false;&#13;
        for (uint i=0; i&lt;owners.length - 1; i++)&#13;
            if (owners[i] == owner) {&#13;
                owners[i] = owners[owners.length - 1];&#13;
                break;&#13;
            }&#13;
        owners.length -= 1;&#13;
        if (required &gt; owners.length)&#13;
            changeRequirement(owners.length);&#13;
        OwnerRemoval(owner);&#13;
    }&#13;
&#13;
    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of owner to be replaced.&#13;
    /// @param owner Address of new owner.&#13;
    function replaceOwner(address owner, address newOwner)&#13;
    public&#13;
    onlyWallet&#13;
    ownerExists(owner)&#13;
    ownerDoesNotExist(newOwner)&#13;
    {&#13;
        for (uint i=0; i&lt;owners.length; i++)&#13;
            if (owners[i] == owner) {&#13;
                owners[i] = newOwner;&#13;
                break;&#13;
            }&#13;
        isOwner[owner] = false;&#13;
        isOwner[newOwner] = true;&#13;
        OwnerRemoval(owner);&#13;
        OwnerAddition(newOwner);&#13;
    }&#13;
&#13;
    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.&#13;
    /// @param _required Number of required confirmations.&#13;
    function changeRequirement(uint _required)&#13;
    public&#13;
    onlyWallet&#13;
    validRequirement(owners.length, _required)&#13;
    {&#13;
        required = _required;&#13;
        RequirementChange(_required);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to submit and confirm a transaction.&#13;
    /// @param destination Transaction target address.&#13;
    /// @param value Transaction ether value.&#13;
    /// @param data Transaction data payload.&#13;
    /// @return Returns transaction ID.&#13;
    function submitTransaction(address destination, uint value, bytes data)&#13;
    public&#13;
    returns (uint transactionId)&#13;
    {&#13;
        transactionId = addTransaction(destination, value, data);&#13;
        confirmTransaction(transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to confirm a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function confirmTransaction(uint transactionId)&#13;
    public&#13;
    ownerExists(msg.sender)&#13;
    transactionExists(transactionId)&#13;
    notConfirmed(transactionId, msg.sender)&#13;
    {&#13;
        confirmations[transactionId][msg.sender] = true;&#13;
        Confirmation(msg.sender, transactionId);&#13;
        executeTransaction(transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to revoke a confirmation for a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function revokeConfirmation(uint transactionId)&#13;
    public&#13;
    ownerExists(msg.sender)&#13;
    confirmed(transactionId, msg.sender)&#13;
    notExecuted(transactionId)&#13;
    {&#13;
        confirmations[transactionId][msg.sender] = false;&#13;
        Revocation(msg.sender, transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows anyone to execute a confirmed transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function executeTransaction(uint transactionId)&#13;
    public&#13;
    notExecuted(transactionId)&#13;
    {&#13;
        if (isConfirmed(transactionId)) {&#13;
            Transaction tx = transactions[transactionId];&#13;
            tx.executed = true;&#13;
            if (tx.destination.call.value(tx.value)(tx.data))&#13;
                Execution(transactionId);&#13;
            else {&#13;
                ExecutionFailure(transactionId);&#13;
                tx.executed = false;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Returns the confirmation status of a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Confirmation status.&#13;
    function isConfirmed(uint transactionId)&#13;
    public&#13;
    constant&#13;
    returns (bool)&#13;
    {&#13;
        uint count = 0;&#13;
        for (uint i=0; i&lt;owners.length; i++) {&#13;
            if (confirmations[transactionId][owners[i]])&#13;
                count += 1;&#13;
            if (count == required)&#13;
                return true;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * Internal functions&#13;
     */&#13;
    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.&#13;
    /// @param destination Transaction target address.&#13;
    /// @param value Transaction ether value.&#13;
    /// @param data Transaction data payload.&#13;
    /// @return Returns transaction ID.&#13;
    function addTransaction(address destination, uint value, bytes data)&#13;
    internal&#13;
    notNull(destination)&#13;
    returns (uint transactionId)&#13;
    {&#13;
        transactionId = transactionCount;&#13;
        transactions[transactionId] = Transaction({&#13;
            destination: destination,&#13;
            value: value,&#13;
            data: data,&#13;
            executed: false&#13;
            });&#13;
        transactionCount += 1;&#13;
        Submission(transactionId);&#13;
    }&#13;
&#13;
    /*&#13;
     * Web3 call functions&#13;
     */&#13;
    /// @dev Returns number of confirmations of a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Number of confirmations.&#13;
    function getConfirmationCount(uint transactionId)&#13;
    public&#13;
    constant&#13;
    returns (uint count)&#13;
    {&#13;
        for (uint i=0; i&lt;owners.length; i++)&#13;
            if (confirmations[transactionId][owners[i]])&#13;
                count += 1;&#13;
    }&#13;
&#13;
    /// @dev Returns total number of transactions after filers are applied.&#13;
    /// @param pending Include pending transactions.&#13;
    /// @param executed Include executed transactions.&#13;
    /// @return Total number of transactions after filters are applied.&#13;
    function getTransactionCount(bool pending, bool executed)&#13;
    public&#13;
    constant&#13;
    returns (uint count)&#13;
    {&#13;
        for (uint i=0; i&lt;transactionCount; i++)&#13;
            if (   pending &amp;&amp; !transactions[i].executed&#13;
            || executed &amp;&amp; transactions[i].executed)&#13;
                count += 1;&#13;
    }&#13;
&#13;
    /// @dev Returns list of owners.&#13;
    /// @return List of owner addresses.&#13;
    function getOwners()&#13;
    public&#13;
    constant&#13;
    returns (address[])&#13;
    {&#13;
        return owners;&#13;
    }&#13;
&#13;
    /// @dev Returns array with owner addresses, which confirmed transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Returns array of owner addresses.&#13;
    function getConfirmations(uint transactionId)&#13;
    public&#13;
    constant&#13;
    returns (address[] _confirmations)&#13;
    {&#13;
        address[] memory confirmationsTemp = new address[](owners.length);&#13;
        uint count = 0;&#13;
        uint i;&#13;
        for (i=0; i&lt;owners.length; i++)&#13;
            if (confirmations[transactionId][owners[i]]) {&#13;
                confirmationsTemp[count] = owners[i];&#13;
                count += 1;&#13;
            }&#13;
        _confirmations = new address[](count);&#13;
        for (i=0; i&lt;count; i++)&#13;
            _confirmations[i] = confirmationsTemp[i];&#13;
    }&#13;
&#13;
    /// @dev Returns list of transaction IDs in defined range.&#13;
    /// @param from Index start position of transaction array.&#13;
    /// @param to Index end position of transaction array.&#13;
    /// @param pending Include pending transactions.&#13;
    /// @param executed Include executed transactions.&#13;
    /// @return Returns array of transaction IDs.&#13;
    function getTransactionIds(uint from, uint to, bool pending, bool executed)&#13;
    public&#13;
    constant&#13;
    returns (uint[] _transactionIds)&#13;
    {&#13;
        uint[] memory transactionIdsTemp = new uint[](transactionCount);&#13;
        uint count = 0;&#13;
        uint i;&#13;
        for (i=0; i&lt;transactionCount; i++)&#13;
            if (   pending &amp;&amp; !transactions[i].executed&#13;
            || executed &amp;&amp; transactions[i].executed)&#13;
            {&#13;
                transactionIdsTemp[count] = i;&#13;
                count += 1;&#13;
            }&#13;
        _transactionIds = new uint[](to - from);&#13;
        for (i=from; i&lt;to; i++)&#13;
            _transactionIds[i - from] = transactionIdsTemp[i];&#13;
    }&#13;
&#13;
    /// @dev Create new coin.&#13;
    function createCoin()&#13;
    external&#13;
    onlyWallet&#13;
    {&#13;
        require(flag == true);&#13;
        CoinCreation(new Spike());&#13;
        flag = false;&#13;
    }&#13;
}
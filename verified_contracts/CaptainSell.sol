pragma solidity ^0.4.18;
/* ==================================================================== */
/* Copyright (c) 2018 The Priate Conquest Project.  All rights reserved.
/* 
/* https://www.pirateconquest.com One of the world's slg games of blockchain 
/*  
/* authors <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ff8d9e969186bf9396899a8c8b9e8dd19c9092">[email protected]</a>/<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="feb491909087d0b88bbe9297889b8d8a9f8cd09d9193">[email protected]</a>&#13;
/*                 &#13;
/* ==================================================================== */&#13;
interface CaptainTokenInterface {&#13;
  function CreateCaptainToken(address _owner,uint256 _price, uint32 _captainId, uint32 _color,uint32 _atk, uint32 _defense,uint32 _level,uint256 _exp) public;&#13;
}&#13;
&#13;
interface CaptainGameConfigInterface {&#13;
  function getCardInfo(uint32 cardId) external constant returns (uint32,uint32,uint32, uint32,uint32,uint256,uint256);&#13;
  function getSellable(uint32 _captainId) external returns (bool);&#13;
}&#13;
contract CaptainSell {&#13;
&#13;
  address devAddress;&#13;
  function CaptainSell() public {&#13;
    devAddress = msg.sender;&#13;
  }&#13;
&#13;
  CaptainTokenInterface public captains;&#13;
  CaptainGameConfigInterface public config; &#13;
  /// @dev The BuyToken event is fired whenever a token is sold.&#13;
  event BuyToken(uint256 tokenId, uint256 oldPrice, address prevOwner, address winner);&#13;
  &#13;
  //mapping&#13;
  mapping(uint32 =&gt; uint256) captainToCount; &#13;
  /// @notice No tipping!&#13;
  /// @dev Reject all Ether from being sent here, unless it's from one of the&#13;
  ///  two auction contracts. (Hopefully, we can prevent user accidents.)&#13;
  function() external payable {&#13;
  }&#13;
&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == devAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  //setting configuration&#13;
  function setGameConfigContract(address _address) external onlyOwner {&#13;
    config = CaptainGameConfigInterface(_address);&#13;
  }&#13;
&#13;
  //setting configuration&#13;
  function setCaptainTokenContract(address _address) external onlyOwner {&#13;
    captains = CaptainTokenInterface(_address);&#13;
  }&#13;
&#13;
&#13;
  function prepurchase(uint32 _captainId) external payable {&#13;
    uint32 color;&#13;
    uint32 atk;&#13;
    uint32 defense;&#13;
    uint256 price;&#13;
    uint256 captainCount;&#13;
    uint256 SellCount = captainToCount[_captainId];&#13;
    (color,atk,,,defense,price,captainCount) = config.getCardInfo(_captainId);&#13;
    require(config.getSellable(_captainId) == true);&#13;
    SellCount += 1;&#13;
    require(SellCount&lt;=captainCount);&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(msg.sender != address(0));&#13;
    &#13;
    // Making sure sent amount is greater than or equal to the sellingPrice&#13;
    require(msg.value &gt;= price);&#13;
    captains.CreateCaptainToken(msg.sender,price,_captainId,color,atk, defense,1,0);&#13;
    captainToCount[_captainId] = SellCount;&#13;
&#13;
    //transfer&#13;
    devAddress.transfer(msg.value);&#13;
    //event &#13;
    BuyToken(_captainId, price,address(this),msg.sender);&#13;
  }&#13;
&#13;
  function getCaptainCount(uint32 _captainId) external constant returns (uint256) {&#13;
    return captainToCount[_captainId];&#13;
  }&#13;
&#13;
  //@notice withraw all by dev&#13;
  function withdraw() external onlyOwner {&#13;
    require(this.balance&gt;0);&#13;
    msg.sender.transfer(this.balance);&#13;
  }&#13;
&#13;
}
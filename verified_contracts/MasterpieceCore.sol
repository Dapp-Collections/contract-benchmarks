pragma solidity ^0.4.19;


/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

    /**
    * @dev Multiplies two numbers, throws on overflow.
    */
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    /**
    * @dev Integer division of two numbers, truncating the quotient.
    */
    function div(uint256 a, uint256 b) internal pure returns (uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    /**
    * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
    */
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {
        assert(b <= a);
        return a - b;
    }

    /**
    * @dev Adds two numbers, throws on overflow.
    */
    function add(uint256 a, uint256 b) internal pure returns (uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}


/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender
     * account.
     */
    function Ownable() public {
        owner = msg.sender;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }

}


/**
 * @title Pausable
 * @dev Base contract which allows children to implement an emergency stop mechanism.
 */
contract Pausable is Ownable {
    event Pause();
    event Unpause();

    bool public paused = false;

    /**
     * @dev modifier to allow actions only when the contract IS paused
     */
    modifier whenNotPaused() {
        require(!paused);
        _;
    }

    /**
     * @dev modifier to allow actions only when the contract IS NOT paused
     */
    modifier whenPaused {
        require(paused);
        _;
    }

    /**
     * @dev called by the owner to pause, triggers stopped state
     */
    function pause()
        public
        onlyOwner
        whenNotPaused
        returns (bool)
    {
        paused = true;
        Pause();
        return true;
    }

    /**
     * @dev called by the owner to unpause, returns to normal state
     */
    function unpause()
        public
        onlyOwner
        whenPaused
        returns (bool)
    {
        paused = false;
        Unpause();
        return true;
    }
}


/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bdd9d8c9d8fddcc5d4d2d0c7d8d393ded2">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);&#13;
    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);&#13;
&#13;
    // Required methods for ERC-721 Compatibility.&#13;
    function approve(address _to, uint256 _tokenId) external;&#13;
    function transfer(address _to, uint256 _tokenId) external;&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
    function ownerOf(uint256 _tokenId) external view returns (address _owner);&#13;
&#13;
    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool);&#13;
&#13;
    function totalSupply() public view returns (uint256 total);&#13;
    function balanceOf(address _owner) public view returns (uint256 _balance);&#13;
}&#13;
&#13;
&#13;
contract MasterpieceAccessControl {&#13;
    /// - CEO: The CEO can reassign other roles, change the addresses of dependent smart contracts,&#13;
    /// and pause/unpause the MasterpieceCore contract.&#13;
    /// - CFO: The CFO can withdraw funds from its auction and sale contracts.&#13;
    /// - Curator: The Curator can mint regular and promo Masterpieces.&#13;
&#13;
    /// @dev The addresses of the accounts (or contracts) that can execute actions within each role.&#13;
    address public ceoAddress;&#13;
    address public cfoAddress;&#13;
    address public curatorAddress;&#13;
&#13;
    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.&#13;
    bool public paused = false;&#13;
&#13;
    /// @dev Event is fired when contract is forked.&#13;
    event ContractFork(address newContract);&#13;
&#13;
    /// @dev Access-modifier for CEO-only functionality.&#13;
    modifier onlyCEO() {&#13;
        require(msg.sender == ceoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access-modifier for CFO-only functionality.&#13;
    modifier onlyCFO() {&#13;
        require(msg.sender == cfoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access-modifier for Curator-only functionality.&#13;
    modifier onlyCurator() {&#13;
        require(msg.sender == curatorAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access-modifier for C-level-only functionality.&#13;
    modifier onlyCLevel() {&#13;
        require(&#13;
            msg.sender == ceoAddress ||&#13;
            msg.sender == cfoAddress ||&#13;
            msg.sender == curatorAddress&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// Assigns a new address to the CEO role. Only available to the current CEO.&#13;
    /// @param _newCEO The address of the new CEO&#13;
    function setCEO(address _newCEO) external onlyCEO {&#13;
        require(_newCEO != address(0));&#13;
&#13;
        ceoAddress = _newCEO;&#13;
    }&#13;
&#13;
    /// Assigns a new address to act as the CFO. Only available to the current CEO.&#13;
    /// @param _newCFO The address of the new CFO&#13;
    function setCFO(address _newCFO) external onlyCEO {&#13;
        require(_newCFO != address(0));&#13;
&#13;
        cfoAddress = _newCFO;&#13;
    }&#13;
&#13;
    /// Assigns a new address to the Curator role. Only available to the current CEO.&#13;
    /// @param _newCurator The address of the new Curator&#13;
    function setCurator(address _newCurator) external onlyCEO {&#13;
        require(_newCurator != address(0));&#13;
&#13;
        curatorAddress = _newCurator;&#13;
    }&#13;
&#13;
    /*** Pausable functionality adapted from OpenZeppelin ***/&#13;
    /// @dev Modifier to allow actions only when the contract IS NOT paused&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS paused&#13;
    modifier whenPaused {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Called by any "C-level" role to pause the contract. Used only when&#13;
    ///  a bug or exploit is detected and we need to limit damage.&#13;
    function pause()&#13;
        external&#13;
        onlyCLevel&#13;
        whenNotPaused&#13;
    {&#13;
        paused = true;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the CEO, since&#13;
    ///  one reason we may pause the contract is when CFO or COO accounts are&#13;
    ///  compromised.&#13;
    /// @notice This is public rather than external so it can be called by&#13;
    ///  derived contracts.&#13;
    function unpause()&#13;
        public&#13;
        onlyCEO&#13;
        whenPaused&#13;
    {&#13;
        // can't unpause if contract was forked&#13;
        paused = false;&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// Core functionality for CrytpoMasterpieces.&#13;
contract MasterpieceBase is MasterpieceAccessControl {&#13;
&#13;
    /*** DATA TYPES ***/&#13;
    /// The main masterpiece struct.&#13;
    struct Masterpiece {&#13;
        /// Name of the masterpiece&#13;
        string name;&#13;
        /// Name of the artist who created the masterpiece&#13;
        string artist;&#13;
        // The timestamp from the block when this masterpiece was created&#13;
        uint64 birthTime;&#13;
    }&#13;
&#13;
    /*** EVENTS ***/&#13;
    /// The Birth event is fired whenever a new masterpiece comes into existence.&#13;
    event Birth(address owner, uint256 tokenId, uint256 snatchWindow, string name, string artist);&#13;
    /// Transfer event as defined in current draft of ERC721. Fired every time masterpiece ownership&#13;
    /// is assigned, including births.&#13;
    event TransferToken(address from, address to, uint256 tokenId);&#13;
    /// The TokenSold event is fired whenever a token is sold.&#13;
    event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 price, address prevOwner, address owner, string name);&#13;
&#13;
    /*** STORAGE ***/&#13;
    /// An array containing all Masterpieces in existence. The id of each masterpiece&#13;
    /// is an index in this array.&#13;
    Masterpiece[] masterpieces;&#13;
&#13;
    /// @dev The address of the ClockAuction contract that handles sale auctions&#13;
    /// for Masterpieces that users want to sell for less than or equal to the&#13;
    /// next price, which is automatically set by the contract.&#13;
    SaleClockAuction public saleAuction;&#13;
&#13;
    /// @dev A mapping from masterpiece ids to the address that owns them.&#13;
    mapping (uint256 =&gt; address) public masterpieceToOwner;&#13;
&#13;
    /// @dev A mapping from masterpiece ids to their snatch window.&#13;
    mapping (uint256 =&gt; uint256) public masterpieceToSnatchWindow;&#13;
&#13;
    /// @dev A mapping from owner address to count of masterpieces that address owns.&#13;
    /// Used internally inside balanceOf() to resolve ownership count.&#13;
    mapping (address =&gt; uint256) public ownerMasterpieceCount;&#13;
&#13;
    /// @dev A mapping from masterpiece ids to an address that has been approved to call&#13;
    ///  transferFrom(). Each masterpiece can only have 1 approved address for transfer&#13;
    ///  at any time. A 0 value means no approval is outstanding.&#13;
    mapping (uint256 =&gt; address) public masterpieceToApproved;&#13;
&#13;
    // @dev A mapping from masterpiece ids to their price.&#13;
    mapping (uint256 =&gt; uint256) public masterpieceToPrice;&#13;
&#13;
    // @dev Returns the snatch window of the given token.&#13;
    function snatchWindowOf(uint256 _tokenId)&#13;
        public&#13;
        view&#13;
        returns (uint256 price)&#13;
    {&#13;
        return masterpieceToSnatchWindow[_tokenId];&#13;
    }&#13;
&#13;
    /// @dev Assigns ownership of a specific masterpiece to an address.&#13;
    function _transfer(address _from, address _to, uint256 _tokenId) internal {&#13;
        // Transfer ownership and update owner masterpiece counts.&#13;
        ownerMasterpieceCount[_to]++;&#13;
        masterpieceToOwner[_tokenId] = _to;&#13;
        // When creating new tokens _from is 0x0, but we can't account that address.&#13;
        if (_from != address(0)) {&#13;
            ownerMasterpieceCount[_from]--;&#13;
            // clear any previously approved ownership exchange&#13;
            delete masterpieceToApproved[_tokenId];&#13;
        }&#13;
        // Fire the transfer event.&#13;
        TransferToken(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev An internal method that creates a new masterpiece and stores it.&#13;
    /// @param _name The name of the masterpiece, e.g. Mona Lisa&#13;
    /// @param _artist The artist who created this masterpiece, e.g. Leonardo Da Vinci&#13;
    /// @param _owner The initial owner of this masterpiece&#13;
    function _createMasterpiece(&#13;
        string _name,&#13;
        string _artist,&#13;
        uint256 _price,&#13;
        uint256 _snatchWindow,&#13;
        address _owner&#13;
    )&#13;
        internal&#13;
        returns (uint)&#13;
    {&#13;
        Masterpiece memory _masterpiece = Masterpiece({&#13;
            name: _name,&#13;
            artist: _artist,&#13;
            birthTime: uint64(now)&#13;
        });&#13;
        uint256 newMasterpieceId = masterpieces.push(_masterpiece) - 1;&#13;
&#13;
        // Fire the birth event.&#13;
        Birth(&#13;
            _owner,&#13;
            newMasterpieceId,&#13;
            _snatchWindow,&#13;
            _masterpiece.name,&#13;
            _masterpiece.artist&#13;
        );&#13;
&#13;
        // Set the price for the masterpiece.&#13;
        masterpieceToPrice[newMasterpieceId] = _price;&#13;
&#13;
        // Set the snatch window for the masterpiece.&#13;
        masterpieceToSnatchWindow[newMasterpieceId] = _snatchWindow;&#13;
&#13;
        // This will assign ownership, and also fire the Transfer event as per ERC-721 draft.&#13;
        _transfer(0, _owner, newMasterpieceId);&#13;
&#13;
        return newMasterpieceId;&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// Pricing logic for CrytpoMasterpieces.&#13;
contract MasterpiecePricing is MasterpieceBase {&#13;
&#13;
    /*** CONSTANTS ***/&#13;
    // Pricing steps.&#13;
    uint128 private constant FIRST_STEP_LIMIT = 0.05 ether;&#13;
    uint128 private constant SECOND_STEP_LIMIT = 0.5 ether;&#13;
    uint128 private constant THIRD_STEP_LIMIT = 2.0 ether;&#13;
    uint128 private constant FOURTH_STEP_LIMIT = 5.0 ether;&#13;
&#13;
    /// @dev Computes the next listed price.&#13;
    /// @notice This contract doesn't handle setting the Masterpiece's next listing price.&#13;
    /// This next price is only used from inside bid() in MasterpieceAuction and inside&#13;
    /// purchase() in MasterpieceSale to set the next listed price.&#13;
    function setNextPriceOf(uint256 tokenId, uint256 salePrice)&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // The next price of any token can only be set by the sale auction contract.&#13;
        // To set the next price for a token sold through the regular sale, use only&#13;
        // computeNextPrice and directly update the mapping.&#13;
        require(msg.sender == address(saleAuction));&#13;
        masterpieceToPrice[tokenId] = computeNextPrice(salePrice);&#13;
    }&#13;
&#13;
    /// @dev Computes next price of token given the current sale price.&#13;
    function computeNextPrice(uint256 salePrice)&#13;
        internal&#13;
        pure&#13;
        returns (uint256)&#13;
    {&#13;
        if (salePrice &lt; FIRST_STEP_LIMIT) {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 200), 95);&#13;
        } else if (salePrice &lt; SECOND_STEP_LIMIT) {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 135), 96);&#13;
        } else if (salePrice &lt; THIRD_STEP_LIMIT) {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 125), 97);&#13;
        } else if (salePrice &lt; FOURTH_STEP_LIMIT) {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 120), 97);&#13;
        } else {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 115), 98);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Computes the payment for the token, which is the sale price of the token&#13;
    /// minus the house's cut.&#13;
    function computePayment(uint256 salePrice)&#13;
        internal&#13;
        pure&#13;
        returns (uint256)&#13;
    {&#13;
        if (salePrice &lt; FIRST_STEP_LIMIT) {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 95), 100);&#13;
        } else if (salePrice &lt; SECOND_STEP_LIMIT) {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 96), 100);&#13;
        } else if (salePrice &lt; FOURTH_STEP_LIMIT) {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 97), 100);&#13;
        } else {&#13;
            return SafeMath.div(SafeMath.mul(salePrice, 98), 100);&#13;
        }&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// Methods required for Non-Fungible Token Transactions in adherence to ERC721.&#13;
contract MasterpieceOwnership is MasterpiecePricing, ERC721 {&#13;
&#13;
    /// Name of the collection of NFTs managed by this contract, as defined in ERC721.&#13;
    string public constant NAME = "Masterpieces";&#13;
    /// Symbol referencing the entire collection of NFTs managed in this contract, as&#13;
    /// defined in ERC721.&#13;
    string public constant SYMBOL = "CMP";&#13;
&#13;
    bytes4 public constant INTERFACE_SIGNATURE_ERC165 =&#13;
    bytes4(keccak256("supportsInterface(bytes4)"));&#13;
&#13;
    bytes4 public constant INTERFACE_SIGNATURE_ERC721 =&#13;
    bytes4(keccak256("name()")) ^&#13;
    bytes4(keccak256("symbol()")) ^&#13;
    bytes4(keccak256("totalSupply()")) ^&#13;
    bytes4(keccak256("balanceOf(address)")) ^&#13;
    bytes4(keccak256("ownerOf(uint256)")) ^&#13;
    bytes4(keccak256("approve(address,uint256)")) ^&#13;
    bytes4(keccak256("transfer(address,uint256)")) ^&#13;
    bytes4(keccak256("transferFrom(address,address,uint256)")) ^&#13;
    bytes4(keccak256("tokensOfOwner(address)")) ^&#13;
    bytes4(keccak256("tokenMetadata(uint256,string)"));&#13;
&#13;
    /// @dev Grant another address the right to transfer a specific Masterpiece via&#13;
    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.&#13;
    /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
    ///  clear all approvals.&#13;
    /// @param _tokenId The ID of the Masterpiece that can be transferred if this call succeeds.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function approve(address _to, uint256 _tokenId)&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Only an owner can grant transfer approval.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Register the approval (replacing any previous approval).&#13;
        _approve(_tokenId, _to);&#13;
&#13;
        // Fire approval event upon successful approval.&#13;
        Approval(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Transfers a Masterpiece to another address. If transferring to a smart&#13;
    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 or else your&#13;
    /// Masterpiece may be lost forever.&#13;
    /// @param _to The address of the recipient, can be a user or contract.&#13;
    /// @param _tokenId The ID of the Masterpiece to transfer.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function transfer(address _to, uint256 _tokenId)&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any Masterpieces (except very briefly&#13;
        // after a Masterpiece is created.&#13;
        require(_to != address(this));&#13;
        // Disallow transfers to the auction contract to prevent accidental&#13;
        // misuse. Auction contracts should only take ownership of Masterpieces&#13;
        // through the approve and transferFrom flow.&#13;
        require(_to != address(saleAuction));&#13;
        // You can only send your own Masterpiece.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Reassign ownership, clear pending approvals, fire Transfer event.&#13;
        _transfer(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Transfer a Masterpiece owned by another address, for which the calling address&#13;
    ///  has previously been granted transfer approval by the owner.&#13;
    /// @param _from The address that owns the Masterpiece to be transfered.&#13;
    /// @param _to The address that should take ownership of the Masterpiece. Can be any&#13;
    /// address, including the caller.&#13;
    /// @param _tokenId The ID of the Masterpiece to be transferred.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId)&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Check for approval and valid ownership&#13;
        require(_approvedFor(msg.sender, _tokenId));&#13;
        require(_owns(_from, _tokenId));&#13;
&#13;
        // Reassign ownership (also clears pending approvals and fires Transfer event).&#13;
        _transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Returns a list of all Masterpiece IDs assigned to an address.&#13;
    /// @param _owner The owner whose Masterpieces we are interested in.&#13;
    ///  This method MUST NEVER be called by smart contract code. First, it is fairly&#13;
    ///  expensive (it walks the entire Masterpiece array looking for Masterpieces belonging&#13;
    /// to owner), but it also returns a dynamic array, which is only supported for web3&#13;
    /// calls, and not contract-to-contract calls. Thus, this method is external rather&#13;
    /// than public.&#13;
    function tokensOfOwner(address _owner)&#13;
        external&#13;
        view&#13;
        returns(uint256[] ownerTokens)&#13;
    {&#13;
        uint256 tokenCount = balanceOf(_owner);&#13;
&#13;
        if (tokenCount == 0) {&#13;
            // Returns an empty array&#13;
            return new uint256[](0);&#13;
        } else {&#13;
            uint256[] memory result = new uint256[](tokenCount);&#13;
            uint256 totalMasterpieces = totalSupply();&#13;
            uint256 resultIndex = 0;&#13;
&#13;
            uint256 masterpieceId;&#13;
            for (masterpieceId = 0; masterpieceId &lt;= totalMasterpieces; masterpieceId++) {&#13;
                if (masterpieceToOwner[masterpieceId] == _owner) {&#13;
                    result[resultIndex] = masterpieceId;&#13;
                    resultIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            return result;&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).&#13;
    ///  Returns true for any standardized interfaces implemented by this contract. We implement&#13;
    ///  ERC-165 (obviously!) and ERC-721.&#13;
    function supportsInterface(bytes4 _interfaceID)&#13;
        external&#13;
        view&#13;
        returns (bool)&#13;
    {&#13;
        return ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721));&#13;
    }&#13;
&#13;
    // @notice Optional for ERC-20 compliance.&#13;
    function name() external pure returns (string) {&#13;
        return NAME;&#13;
    }&#13;
&#13;
    // @notice Optional for ERC-20 compliance.&#13;
    function symbol() external pure returns (string) {&#13;
        return SYMBOL;&#13;
    }&#13;
&#13;
    /// @dev Returns the address currently assigned ownership of a given Masterpiece.&#13;
    /// @notice Required for ERC-721 compliance.&#13;
    function ownerOf(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns (address owner)&#13;
    {&#13;
        owner = masterpieceToOwner[_tokenId];&#13;
        require(owner != address(0));&#13;
    }&#13;
&#13;
    /// @dev Returns the total number of Masterpieces currently in existence.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function totalSupply() public view returns (uint) {&#13;
        return masterpieces.length;&#13;
    }&#13;
&#13;
    /// @dev Returns the number of Masterpieces owned by a specific address.&#13;
    /// @param _owner The owner address to check.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function balanceOf(address _owner)&#13;
        public&#13;
        view&#13;
        returns (uint256 count)&#13;
    {&#13;
        return ownerMasterpieceCount[_owner];&#13;
    }&#13;
&#13;
    /// @dev Checks if a given address is the current owner of a particular Masterpiece.&#13;
    /// @param _claimant the address we are validating against.&#13;
    /// @param _tokenId Masterpiece id, only valid when &gt; 0&#13;
    function _owns(address _claimant, uint256 _tokenId)&#13;
        internal&#13;
        view&#13;
        returns (bool)&#13;
    {&#13;
        return masterpieceToOwner[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous&#13;
    /// approval. Setting _approved to address(0) clears all transfer approval.&#13;
    /// NOTE: _approve() does NOT send the Approval event. This is intentional because&#13;
    /// _approve() and transferFrom() are used together for putting Masterpieces on auction, and&#13;
    /// there is no value in spamming the log with Approval events in that case.&#13;
    function _approve(uint256 _tokenId, address _approved) internal {&#13;
        masterpieceToApproved[_tokenId] = _approved;&#13;
    }&#13;
&#13;
    /// @dev Checks if a given address currently has transferApproval for a particular Masterpiece.&#13;
    /// @param _claimant the address we are confirming Masterpiece is approved for.&#13;
    /// @param _tokenId Masterpiece id, only valid when &gt; 0&#13;
    function _approvedFor(address _claimant, uint256 _tokenId)&#13;
        internal&#13;
        view&#13;
        returns (bool)&#13;
    {&#13;
        return masterpieceToApproved[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// Safety check on _to address to prevent against an unexpected 0x0 default.&#13;
    function _addressNotNull(address _to) internal pure returns (bool) {&#13;
        return _to != address(0);&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title Auction Core&#13;
/// @dev Contains models, variables, and internal methods for the auction.&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract ClockAuctionBase {&#13;
&#13;
    // Represents an auction on an NFT&#13;
    struct Auction {&#13;
        // Current owner of NFT&#13;
        address seller;&#13;
        // Price (in wei) at beginning of auction&#13;
        uint128 startingPrice;&#13;
        // Price (in wei) at end of auction&#13;
        uint128 endingPrice;&#13;
        // Duration (in seconds) of auction&#13;
        uint64 duration;&#13;
        // Time when auction started&#13;
        // NOTE: 0 if this auction has been concluded&#13;
        uint64 startedAt;&#13;
    }&#13;
&#13;
    // Reference to contract tracking NFT ownership&#13;
    MasterpieceOwnership public nonFungibleContract;&#13;
&#13;
    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).&#13;
    // Values 0-10,000 map to 0%-100%&#13;
    uint256 public ownerCut;&#13;
&#13;
    // Map from token ID to their corresponding auction.&#13;
    mapping (uint256 =&gt; Auction) public tokenIdToAuction;&#13;
&#13;
    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);&#13;
    event AuctionSuccessful(uint256 tokenId, uint256 price, address winner);&#13;
    event AuctionCancelled(uint256 tokenId);&#13;
&#13;
    /// @dev Returns true if the claimant owns the token.&#13;
    /// @param _claimant - Address claiming to own the token.&#13;
    /// @param _tokenId - ID of token whose ownership to verify.&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);&#13;
    }&#13;
&#13;
    /// @dev Escrows the NFT, assigning ownership to this contract.&#13;
    /// Throws if the escrow fails.&#13;
    /// @param _owner - Current owner address of token to escrow.&#13;
    /// @param _tokenId - ID of token whose approval to verify.&#13;
    function _escrow(address _owner, uint256 _tokenId) internal {&#13;
        // it will throw if transfer fails&#13;
        nonFungibleContract.transferFrom(_owner, this, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Transfers an NFT owned by this contract to another address.&#13;
    /// Returns true if the transfer succeeds.&#13;
    /// @param _receiver - Address to transfer NFT to.&#13;
    /// @param _tokenId - ID of token to transfer.&#13;
    function _transfer(address _receiver, uint256 _tokenId) internal {&#13;
        // it will throw if transfer fails&#13;
        nonFungibleContract.transfer(_receiver, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Adds an auction to the list of open auctions. Also fires the&#13;
    ///  AuctionCreated event.&#13;
    /// @param _tokenId The ID of the token to be put on auction.&#13;
    /// @param _auction Auction to add.&#13;
    function _addAuction(uint256 _tokenId, Auction _auction) internal {&#13;
        // Require that all auctions have a duration of&#13;
        // at least one minute. (Keeps our math from getting hairy!)&#13;
        require(_auction.duration &gt;= 1 minutes);&#13;
&#13;
        tokenIdToAuction[_tokenId] = _auction;&#13;
&#13;
        AuctionCreated(&#13;
            uint256(_tokenId),&#13;
            uint256(_auction.startingPrice),&#13;
            uint256(_auction.endingPrice),&#13;
            uint256(_auction.duration)&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction unconditionally.&#13;
    function _cancelAuction(uint256 _tokenId, address _seller) internal {&#13;
        _removeAuction(_tokenId);&#13;
        _transfer(_seller, _tokenId);&#13;
        AuctionCancelled(_tokenId);&#13;
    }&#13;
&#13;
    /// @dev Computes the price and transfers winnings.&#13;
    /// Does NOT transfer ownership of token.&#13;
    function _bid(uint256 _tokenId, uint256 _bidAmount)&#13;
        internal&#13;
        returns (uint256)&#13;
    {&#13;
        // Get a reference to the auction struct&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        // Explicitly check that this auction is currently live.&#13;
        // (Because of how Ethereum mappings work, we can't just count&#13;
        // on the lookup above failing. An invalid _tokenId will just&#13;
        // return an auction object that is all zeros.)&#13;
        require(_isOnAuction(auction));&#13;
        // Check that the bid is greater than or equal to the current price&#13;
        uint256 price = _currentPrice(auction);&#13;
        require(_bidAmount &gt;= price);&#13;
        // Grab a reference to the seller before the auction struct gets deleted.&#13;
        address seller = auction.seller;&#13;
        // Remove the auction before sending the fees to the sender so we can't have a reentrancy attack.&#13;
        _removeAuction(_tokenId);&#13;
        if (price &gt; 0) {&#13;
            // Calculate the auctioneer's cut.&#13;
            uint256 auctioneerCut = _computeCut(price);&#13;
            uint256 sellerProceeds = price - auctioneerCut;&#13;
            // NOTE: Doing a transfer() in the middle of a complex&#13;
            // method like this is generally discouraged because of&#13;
            // reentrancy attacks and DoS attacks if the seller is&#13;
            // a contract with an invalid fallback function. We explicitly&#13;
            // guard against reentrancy attacks by removing the auction&#13;
            // before calling transfer(), and the only thing the seller&#13;
            // can DoS is the sale of their own asset! (And if it's an&#13;
            // accident, they can call cancelAuction(). )&#13;
            seller.transfer(sellerProceeds);&#13;
            _transfer(msg.sender, _tokenId);&#13;
            // Update the next listing price of the token.&#13;
            nonFungibleContract.setNextPriceOf(_tokenId, price);&#13;
        }&#13;
&#13;
        // Calculate any excess funds included with the bid. If the excess&#13;
        // is anything worth worrying about, transfer it back to bidder.&#13;
        // NOTE: We checked above that the bid amount is greater than or&#13;
        // equal to the price so this cannot underflow.&#13;
        uint256 bidExcess = _bidAmount - price;&#13;
&#13;
        // Return the funds. Similar to the previous transfer, this is&#13;
        // not susceptible to a re-entry attack because the auction is&#13;
        // removed before any transfers occur.&#13;
        msg.sender.transfer(bidExcess);&#13;
&#13;
        // Tell the world!&#13;
        AuctionSuccessful(_tokenId, price, msg.sender);&#13;
&#13;
        return price;&#13;
    }&#13;
&#13;
    /// @dev Removes an auction from the list of open auctions.&#13;
    /// @param _tokenId - ID of NFT on auction.&#13;
    function _removeAuction(uint256 _tokenId) internal {&#13;
        delete tokenIdToAuction[_tokenId];&#13;
    }&#13;
&#13;
    /// @dev Returns true if the NFT is on auction.&#13;
    /// @param _auction - Auction to check.&#13;
    function _isOnAuction(Auction storage _auction)&#13;
        internal&#13;
        view&#13;
        returns (bool)&#13;
    {&#13;
        return (_auction.startedAt &gt; 0);&#13;
    }&#13;
&#13;
    /// @dev Returns current price of an NFT on auction. Broken into two&#13;
    ///  functions (this one, that computes the duration from the auction&#13;
    ///  structure, and the other that does the price computation) so we&#13;
    ///  can easily test that the price computation works correctly.&#13;
    function _currentPrice(Auction storage _auction)&#13;
        internal&#13;
        view&#13;
        returns (uint256)&#13;
    {&#13;
        uint256 secondsPassed = 0;&#13;
&#13;
        // A bit of insurance against negative values (or wraparound).&#13;
        // Probably not necessary (since Ethereum guarnatees that the&#13;
        // now variable doesn't ever go backwards).&#13;
        if (now &gt; _auction.startedAt) {&#13;
            secondsPassed = now - _auction.startedAt;&#13;
        }&#13;
&#13;
        return _computeCurrentPrice(&#13;
            _auction.startingPrice,&#13;
            _auction.endingPrice,&#13;
            _auction.duration,&#13;
            secondsPassed&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Computes the current price of an auction. Factored out&#13;
    ///  from _currentPrice so we can run extensive unit tests.&#13;
    ///  When testing, make this function public and turn on&#13;
    ///  `Current price computation` test suite.&#13;
    function _computeCurrentPrice(&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration,&#13;
        uint256 _secondsPassed&#13;
    )&#13;
        internal&#13;
        pure&#13;
        returns (uint256)&#13;
    {&#13;
        // NOTE: We don't use SafeMath (or similar) in this function because&#13;
        //  all of our public functions carefully cap the maximum values for&#13;
        //  time (at 64-bits) and currency (at 128-bits). _duration is&#13;
        //  also known to be non-zero (see the require() statement in&#13;
        //  _addAuction())&#13;
        if (_secondsPassed &gt;= _duration) {&#13;
            // We've reached the end of the dynamic pricing portion&#13;
            // of the auction, just return the end price.&#13;
            return _endingPrice;&#13;
        } else {&#13;
            // Starting price can be higher than ending price (and often is!), so&#13;
            // this delta can be negative.&#13;
            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);&#13;
&#13;
            // This multiplication can't overflow, _secondsPassed will easily fit within&#13;
            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product&#13;
            // will always fit within 256-bits.&#13;
            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);&#13;
&#13;
            // currentPriceChange can be negative, but if so, will have a magnitude&#13;
            // less that _startingPrice. Thus, this result will always end up positive.&#13;
            int256 currentPrice = int256(_startingPrice) + currentPriceChange;&#13;
&#13;
            return uint256(currentPrice);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Computes owner's cut of a sale.&#13;
    /// @param _price - Sale price of NFT.&#13;
    function _computeCut(uint256 _price) internal view returns (uint256) {&#13;
        // NOTE: We don't use SafeMath (or similar) in this function because&#13;
        //  all of our entry functions carefully cap the maximum values for&#13;
        //  currency (at 128-bits), and ownerCut &lt;= 10000 (see the require()&#13;
        //  statement in the ClockAuction constructor). The result of this&#13;
        //  function is always guaranteed to be &lt;= _price.&#13;
        return _price * ownerCut / 10000;&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// @title Clock auction for non-fungible tokens.&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract ClockAuction is Pausable, ClockAuctionBase {&#13;
&#13;
    /// @dev The ERC-165 interface signature for ERC-721.&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/165&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/721&#13;
    bytes4 public constant INTERFACE_SIGNATURE_ERC721 = bytes4(0x9a20483d);&#13;
&#13;
    /// @dev Constructor creates a reference to the NFT ownership contract&#13;
    ///  and verifies the owner cut is in the valid range.&#13;
    /// @param _nftAddress - address of a deployed contract implementing&#13;
    ///  the Nonfungible Interface.&#13;
    /// @param _cut - percent cut the owner takes on each auction, must be&#13;
    ///  between 0-10,000.&#13;
    function ClockAuction(address _nftAddress, uint256 _cut) public {&#13;
        require(_cut &lt;= 10000);&#13;
        ownerCut = _cut;&#13;
&#13;
        MasterpieceOwnership candidateContract = MasterpieceOwnership(_nftAddress);&#13;
        require(candidateContract.supportsInterface(INTERFACE_SIGNATURE_ERC721));&#13;
        nonFungibleContract = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Remove all Ether from the contract, which is the owner's cuts&#13;
    ///  as well as any Ether sent directly to the contract address.&#13;
    ///  Always transfers to the NFT contract, but can be called either by&#13;
    ///  the owner or the NFT contract.&#13;
    function withdrawBalance() external {&#13;
        address nftAddress = address(nonFungibleContract);&#13;
&#13;
        require(&#13;
            msg.sender == owner ||&#13;
            msg.sender == nftAddress&#13;
        );&#13;
        // We are using this boolean method to make sure that even if one fails it will still work&#13;
        bool res = nftAddress.send(this.balance);&#13;
    }&#13;
&#13;
    /// @dev Creates and begins a new auction.&#13;
    /// @param _tokenId - ID of token to auction, sender must be owner.&#13;
    /// @param _startingPrice - Price of item (in wei) at beginning of auction.&#13;
    /// @param _endingPrice - Price of item (in wei) at end of auction.&#13;
    /// @param _duration - Length of time to move between starting&#13;
    ///  price and ending price (in seconds).&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createAuction(&#13;
        uint256 _tokenId,&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration,&#13;
        address _seller&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_startingPrice == uint256(uint128(_startingPrice)));&#13;
        require(_endingPrice == uint256(uint128(_endingPrice)));&#13;
        require(_duration == uint256(uint64(_duration)));&#13;
&#13;
        require(_owns(msg.sender, _tokenId));&#13;
        _escrow(msg.sender, _tokenId);&#13;
        Auction memory auction = Auction(&#13;
            _seller,&#13;
            uint128(_startingPrice),&#13;
            uint128(_endingPrice),&#13;
            uint64(_duration),&#13;
            uint64(now)&#13;
        );&#13;
        _addAuction(_tokenId, auction);&#13;
    }&#13;
&#13;
    /// @dev Bids on an open auction, completing the auction and transferring&#13;
    ///  ownership of the NFT if enough Ether is supplied.&#13;
    /// @param _tokenId - ID of token to bid on.&#13;
    function bid(uint256 _tokenId)&#13;
        external&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        // _bid will throw if the bid or funds transfer fails&#13;
        _bid(_tokenId, msg.value);&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction that hasn't been won yet.&#13;
    ///  Returns the NFT to original owner.&#13;
    /// @notice This is a state-modifying function that can&#13;
    ///  be called while the contract is paused.&#13;
    /// @param _tokenId - ID of token on auction&#13;
    function cancelAuction(uint256 _tokenId)&#13;
        external&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        address seller = auction.seller;&#13;
        require(msg.sender == seller);&#13;
        _cancelAuction(_tokenId, seller);&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction when the contract is paused.&#13;
    ///  Only the owner may do this, and NFTs are returned to&#13;
    ///  the seller. This should only be used in emergencies.&#13;
    /// @param _tokenId - ID of the NFT on auction to cancel.&#13;
    function cancelAuctionWhenPaused(uint256 _tokenId)&#13;
        external&#13;
        whenPaused&#13;
        onlyOwner&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        _cancelAuction(_tokenId, auction.seller);&#13;
    }&#13;
&#13;
    /// @dev Returns auction info for an NFT on auction.&#13;
    /// @param _tokenId - ID of NFT on auction.&#13;
    function getAuction(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns&#13;
    (&#13;
        address seller,&#13;
        uint256 startingPrice,&#13;
        uint256 endingPrice,&#13;
        uint256 duration,&#13;
        uint256 startedAt&#13;
    ) {&#13;
            Auction storage auction = tokenIdToAuction[_tokenId];&#13;
            require(_isOnAuction(auction));&#13;
            return (&#13;
                auction.seller,&#13;
                auction.startingPrice,&#13;
                auction.endingPrice,&#13;
                auction.duration,&#13;
                auction.startedAt&#13;
            );&#13;
        }&#13;
&#13;
    /// @dev Returns the current price of an auction.&#13;
    /// @param _tokenId - ID of the token price we are checking.&#13;
    function getCurrentPrice(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns (uint256)&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        return _currentPrice(auction);&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// @title Clock auction&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract SaleClockAuction is ClockAuction {&#13;
&#13;
    // @dev Sanity check that allows us to ensure that we are pointing to the&#13;
    //  right auction in our setSaleAuctionAddress() call.&#13;
    bool public isSaleClockAuction = true;&#13;
&#13;
    // Delegate constructor&#13;
    function SaleClockAuction(address _nftAddr, uint256 _cut) public&#13;
        ClockAuction(_nftAddr, _cut) {}&#13;
&#13;
    /// @dev Creates and begins a new auction.&#13;
    /// @param _tokenId - ID of token to auction, sender must be owner.&#13;
    /// @param _startingPrice - Price of item (in wei) at beginning of auction.&#13;
    /// @param _endingPrice - Price of item (in wei) at end of auction.&#13;
    /// @param _duration - Length of auction (in seconds).&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createAuction(&#13;
        uint256 _tokenId,&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration,&#13;
        address _seller&#13;
    )&#13;
        external&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_startingPrice == uint256(uint128(_startingPrice)));&#13;
        require(_endingPrice == uint256(uint128(_endingPrice)));&#13;
        require(_duration == uint256(uint64(_duration)));&#13;
&#13;
        require(msg.sender == address(nonFungibleContract));&#13;
        _escrow(_seller, _tokenId);&#13;
        Auction memory auction = Auction(&#13;
            _seller,&#13;
            uint128(_startingPrice),&#13;
            uint128(_endingPrice),&#13;
            uint64(_duration),&#13;
            uint64(now)&#13;
        );&#13;
        _addAuction(_tokenId, auction);&#13;
    }&#13;
&#13;
    /// @dev Places a bid for the Masterpiece. Requires the sender&#13;
    /// is the Masterpiece Core contract because all bid methods&#13;
    /// should be wrapped.&#13;
    function bid(uint256 _tokenId)&#13;
        external&#13;
        payable&#13;
    {&#13;
        /* require(msg.sender == address(nonFungibleContract)); */&#13;
        // _bid checks that token ID is valid and will throw if bid fails&#13;
        _bid(_tokenId, msg.value);&#13;
    }&#13;
}&#13;
&#13;
&#13;
contract MasterpieceAuction is MasterpieceOwnership {&#13;
&#13;
    /// @dev Transfers the balance of the sale auction contract&#13;
    /// to the MasterpieceCore contract. We use two-step withdrawal to&#13;
    /// prevent two transfer calls in the auction bid function.&#13;
    function withdrawAuctionBalances()&#13;
        external&#13;
        onlyCLevel&#13;
    {&#13;
        saleAuction.withdrawBalance();&#13;
    }&#13;
&#13;
    /// @notice The auction contract variable (saleAuction) is defined in MasterpieceBase&#13;
    /// to allow us to refer to them in MasterpieceOwnership to prevent accidental transfers.&#13;
    /// @dev Sets the reference to the sale auction.&#13;
    /// @param _address - Address of sale contract.&#13;
    function setSaleAuctionAddress(address _address)&#13;
        external&#13;
        onlyCEO&#13;
    {&#13;
        SaleClockAuction candidateContract = SaleClockAuction(_address);&#13;
&#13;
        // NOTE: verify that a contract is what we expect -&#13;
        // https://github.com/Lunyr/crowdsale-contracts/blob/&#13;
        // cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117&#13;
        require(candidateContract.isSaleClockAuction());&#13;
&#13;
        // Set the new contract address&#13;
        saleAuction = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev The owner of a Masterpiece can put it up for auction.&#13;
    function createSaleAuction(&#13;
        uint256 _tokenId,&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Check that the Masterpiece to be put on an auction sale is owned by&#13;
        // its current owner. If it's already in an auction, this validation&#13;
        // will fail because the MasterpieceAuction contract owns the&#13;
        // Masterpiece once it is put on an auction sale.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
        _approve(_tokenId, saleAuction);&#13;
        // Sale auction throws if inputs are invalid and clears&#13;
        // transfer approval after escrow&#13;
        saleAuction.createAuction(&#13;
            _tokenId,&#13;
            _startingPrice,&#13;
            _endingPrice,&#13;
            _duration,&#13;
            msg.sender&#13;
        );&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
contract MasterpieceSale is MasterpieceAuction {&#13;
&#13;
    // Allows someone to send ether and obtain the token&#13;
    function purchase(uint256 _tokenId)&#13;
        public&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        address newOwner = msg.sender;&#13;
        address oldOwner = masterpieceToOwner[_tokenId];&#13;
        uint256 salePrice = masterpieceToPrice[_tokenId];&#13;
&#13;
        // Require that the masterpiece is either currently owned by the Masterpiece&#13;
        // Core contract or was born within the snatch window.&#13;
        require(&#13;
            (oldOwner == address(this)) ||&#13;
            (now - masterpieces[_tokenId].birthTime &lt;= masterpieceToSnatchWindow[_tokenId])&#13;
        );&#13;
&#13;
        // Require that the owner of the token is not sending to self.&#13;
        require(oldOwner != newOwner);&#13;
&#13;
        // Require that the Masterpiece is not in an auction by checking that&#13;
        // the Sale Clock Auction contract is not the owner.&#13;
        require(address(oldOwner) != address(saleAuction));&#13;
&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_addressNotNull(newOwner));&#13;
&#13;
        // Check that sent amount is greater than or equal to the sale price&#13;
        require(msg.value &gt;= salePrice);&#13;
&#13;
        uint256 payment = uint256(computePayment(salePrice));&#13;
        uint256 purchaseExcess = SafeMath.sub(msg.value, salePrice);&#13;
&#13;
        // Set next listing price.&#13;
        masterpieceToPrice[_tokenId] = computeNextPrice(salePrice);&#13;
&#13;
        // Transfer the Masterpiece to the buyer.&#13;
        _transfer(oldOwner, newOwner, _tokenId);&#13;
&#13;
        // Pay seller of the Masterpiece if they are not this contract.&#13;
        if (oldOwner != address(this)) {&#13;
            oldOwner.transfer(payment);&#13;
        }&#13;
&#13;
        TokenSold(_tokenId, salePrice, masterpieceToPrice[_tokenId], oldOwner, newOwner, masterpieces[_tokenId].name);&#13;
&#13;
        // Reimburse the buyer of any excess paid.&#13;
        msg.sender.transfer(purchaseExcess);&#13;
    }&#13;
&#13;
    function priceOf(uint256 _tokenId)&#13;
        public&#13;
        view&#13;
        returns (uint256 price)&#13;
    {&#13;
        return masterpieceToPrice[_tokenId];&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
contract MasterpieceMinting is MasterpieceSale {&#13;
&#13;
    /*** CONSTANTS ***/&#13;
    /// @dev Starting price of a regular Masterpiece.&#13;
    uint128 private constant STARTING_PRICE = 0.001 ether;&#13;
    /// @dev Limit of number of promo masterpieces that can be created.&#13;
    uint16 private constant PROMO_CREATION_LIMIT = 10000;&#13;
&#13;
    /// @dev Counts the number of Promotional Masterpieces the contract owner has created.&#13;
    uint16 public promoMasterpiecesCreatedCount;&#13;
    /// @dev Reference to contract tracking Non Fungible Token ownership&#13;
    ERC721 public nonFungibleContract;&#13;
&#13;
    /// @dev Creates a new Masterpiece with the given name and artist.&#13;
    function createMasterpiece(&#13;
        string _name,&#13;
        string _artist,&#13;
        uint256 _snatchWindow&#13;
    )&#13;
        public&#13;
        onlyCurator&#13;
        returns (uint)&#13;
    {&#13;
        uint256 masterpieceId = _createMasterpiece(_name, _artist, STARTING_PRICE, _snatchWindow, address(this));&#13;
        return masterpieceId;&#13;
    }&#13;
&#13;
    /// @dev Creates a new promotional Masterpiece with the given name, artist, starting&#13;
    /// price, and owner. If the owner or the price is not set, we default them to the&#13;
    /// curator's address and the starting price for all masterpieces.&#13;
    function createPromoMasterpiece(&#13;
        string _name,&#13;
        string _artist,&#13;
        uint256 _snatchWindow,&#13;
        uint256 _price,&#13;
        address _owner&#13;
    )&#13;
        public&#13;
        onlyCurator&#13;
        returns (uint)&#13;
    {&#13;
        require(promoMasterpiecesCreatedCount &lt; PROMO_CREATION_LIMIT);&#13;
&#13;
        address masterpieceOwner = _owner;&#13;
        if (masterpieceOwner == address(0)) {&#13;
            masterpieceOwner = curatorAddress;&#13;
        }&#13;
&#13;
        if (_price &lt;= 0) {&#13;
            _price = STARTING_PRICE;&#13;
        }&#13;
&#13;
        uint256 masterpieceId = _createMasterpiece(_name, _artist, _price, _snatchWindow, masterpieceOwner);&#13;
        promoMasterpiecesCreatedCount++;&#13;
        return masterpieceId;&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// CryptoMasterpieces: Collectible fine art masterpieces on the Ethereum blockchain.&#13;
contract MasterpieceCore is MasterpieceMinting {&#13;
&#13;
    // - MasterpieceAccessControl: This contract defines which users are granted the given roles that are&#13;
    // required to execute specific operations.&#13;
    //&#13;
    // - MasterpieceBase: This contract inherits from the MasterpieceAccessControl contract and defines&#13;
    // the core functionality of CryptoMasterpieces, including the data types, storage, and constants.&#13;
    //&#13;
    // - MasterpiecePricing: This contract inherits from the MasterpieceBase contract and defines&#13;
    // the pricing logic for CryptoMasterpieces. With every purchase made through the Core contract or&#13;
    // through a sale auction, the next listed price will multiply based on 5 price tiers. This ensures&#13;
    // that the Masterpiece bought through CryptoMasterpieces will always be adjusted to its fair market&#13;
    // value.&#13;
    //&#13;
    // - MasterpieceOwnership: This contract inherits from the MasterpiecePricing contract and the ERC-721&#13;
    // (https://github.com/ethereum/EIPs/issues/721) contract and implements the methods required for&#13;
    //  Non-Fungible Token Transactions.&#13;
    //&#13;
    // - MasterpieceAuction: This contract inherits from the MasterpieceOwnership contract. It defines&#13;
    // the Dutch "clock" auction mechanism for owners of a masterpiece to place it on sale. The auction&#13;
    // starts off at the automatically generated next price and until it is sold, decrements the price&#13;
    // as time passes. The owner of the masterpiece can cancel the auction at any point and the price&#13;
    // cannot go lower than the price that the owner bought the masterpiece for.&#13;
    //&#13;
    // - MasterpieceSale: This contract inherits from the MasterpieceAuction contract. It defines the&#13;
    // tiered pricing logic and handles all sales. It also checks that a Masterpiece is not in an&#13;
    // auction before approving a purchase.&#13;
    //&#13;
    // - MasterpieceMinting: This contract inherits from the MasterpieceSale contract. It defines the&#13;
    // creation of new regular and promotional masterpieces.&#13;
&#13;
    // Set in case the core contract is broken and a fork is required&#13;
    address public newContractAddress;&#13;
&#13;
    function MasterpieceCore() public {&#13;
        // Starts paused.&#13;
        paused = true;&#13;
&#13;
        // The creator of the contract is the initial CEO&#13;
        ceoAddress = msg.sender;&#13;
&#13;
        // The creator of the contract is also the initial Curator&#13;
        curatorAddress = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev Used to mark the smart contract as upgraded, in case there is a serious&#13;
    ///  breaking bug. This method does nothing but keep track of the new contract and&#13;
    ///  emit a message indicating that the new address is set. It's up to clients of this&#13;
    ///  contract to update to the new contract address in that case. (This contract will&#13;
    ///  be paused indefinitely if such an upgrade takes place.)&#13;
    /// @param _v2Address new address&#13;
    function setNewAddress(address _v2Address)&#13;
        external&#13;
        onlyCEO&#13;
        whenPaused&#13;
    {&#13;
        // See README.md for updgrade plan&#13;
        newContractAddress = _v2Address;&#13;
        ContractFork(_v2Address);&#13;
    }&#13;
&#13;
    /// @dev Withdraw all Ether from the contract. This includes the fee on every&#13;
    /// masterpiece sold and any Ether sent directly to the contract address.&#13;
    /// Only the CFO can withdraw the balance or specify the address to send&#13;
    /// the balance to.&#13;
    function withdrawBalance(address _to) external onlyCFO {&#13;
        // We are using this boolean method to make sure that even if one fails it will still work&#13;
        if (_to == address(0)) {&#13;
            cfoAddress.transfer(this.balance);&#13;
        } else {&#13;
            _to.transfer(this.balance);&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Returns all the relevant information about a specific masterpiece.&#13;
    /// @param _tokenId The tokenId of the masterpiece of interest.&#13;
    function getMasterpiece(uint256 _tokenId) external view returns (&#13;
        string name,&#13;
        string artist,&#13;
        uint256 birthTime,&#13;
        uint256 snatchWindow,&#13;
        uint256 sellingPrice,&#13;
        address owner&#13;
    ) {&#13;
        Masterpiece storage masterpiece = masterpieces[_tokenId];&#13;
        name = masterpiece.name;&#13;
        artist = masterpiece.artist;&#13;
        birthTime = uint256(masterpiece.birthTime);&#13;
        snatchWindow = masterpieceToSnatchWindow[_tokenId];&#13;
        sellingPrice = masterpieceToPrice[_tokenId];&#13;
        owner = masterpieceToOwner[_tokenId];&#13;
    }&#13;
&#13;
    /// @dev Override unpause so it requires all external contract addresses&#13;
    ///  to be set before contract can be unpaused. Also, we can't have&#13;
    ///  newContractAddress set either, because then the contract was upgraded.&#13;
    /// @notice This is public rather than external so we can call super.unpause&#13;
    ///  without using an expensive call.&#13;
    function unpause()&#13;
        public&#13;
        onlyCEO&#13;
        whenPaused&#13;
    {&#13;
        require(saleAuction != address(0));&#13;
        require(newContractAddress == address(0));&#13;
&#13;
        // Actually unpause the contract.&#13;
        super.unpause();&#13;
    }&#13;
&#13;
}
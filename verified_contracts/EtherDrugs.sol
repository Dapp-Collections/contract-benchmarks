pragma solidity ^0.4.18;

///EtherDrugs

/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="741011001134150c1d1b190e111a5a171b">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
    function approve(address _to, uint256 _tokenId) public;&#13;
    function balanceOf(address _owner) public view returns (uint256 balance);&#13;
    function implementsERC721() public pure returns (bool);&#13;
    function ownerOf(uint256 _tokenId) public view returns (address addr);&#13;
    function takeOwnership(uint256 _tokenId) public;&#13;
    function totalSupply() public view returns (uint256 total);&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
    function transfer(address _to, uint256 _tokenId) public;&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint256 tokenId);&#13;
    event Approval(address indexed owner, address indexed approved, uint256 tokenId);&#13;
}&#13;
&#13;
contract EtherDrugs is ERC721 {&#13;
&#13;
  /*** EVENTS ***/&#13;
  event Birth(uint256 tokenId, bytes32 name, address owner);&#13;
  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name);&#13;
  event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
  /*** STRUCTS ***/&#13;
  struct Drug {&#13;
    bytes32 name;&#13;
    address owner;&#13;
    uint256 price;&#13;
    uint256 last_price;&#13;
    address approve_transfer_to;&#13;
  }&#13;
&#13;
  /*** CONSTANTS ***/&#13;
  string public constant NAME = "EtherDrugs";&#13;
  string public constant SYMBOL = "DRUG";&#13;
  &#13;
  bool public gameOpen = false;&#13;
&#13;
  /*** STORAGE ***/&#13;
  mapping (address =&gt; uint256) private ownerCount;&#13;
  mapping (uint256 =&gt; address) public lastBuyer;&#13;
&#13;
  address public ceoAddress;&#13;
  mapping (uint256 =&gt; address) public extra;&#13;
  &#13;
  uint256 drug_count;&#13;
 &#13;
  mapping (uint256 =&gt; Drug) private drugs;&#13;
&#13;
  /*** ACCESS MODIFIERS ***/&#13;
  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }&#13;
&#13;
  /*** ACCESS MODIFIES ***/&#13;
  function setCEO(address _newCEO) public onlyCEO {&#13;
    require(_newCEO != address(0));&#13;
    ceoAddress = _newCEO;&#13;
  }&#13;
&#13;
  function setLast(uint256 _id, address _newExtra) public onlyCEO {&#13;
    require(_newExtra != address(0));&#13;
    lastBuyer[_id] = _newExtra;&#13;
  }&#13;
&#13;
  /*** DEFAULT METHODS ***/&#13;
  function symbol() public pure returns (string) { return SYMBOL; }&#13;
  function name() public pure returns (string) { return NAME; }&#13;
  function implementsERC721() public pure returns (bool) { return true; }&#13;
&#13;
  /*** CONSTRUCTOR ***/&#13;
  function EtherDrugs() public {&#13;
    ceoAddress = msg.sender;&#13;
    lastBuyer[1] = msg.sender;&#13;
    lastBuyer[2] = msg.sender;&#13;
    lastBuyer[3] = msg.sender;&#13;
    lastBuyer[4] = msg.sender;&#13;
    lastBuyer[5] = msg.sender;&#13;
    lastBuyer[6] = msg.sender;&#13;
    lastBuyer[7] = msg.sender;&#13;
    lastBuyer[8] = msg.sender;&#13;
    lastBuyer[9] = msg.sender;&#13;
  }&#13;
&#13;
  /*** INTERFACE METHODS ***/&#13;
&#13;
  function createDrug(bytes32 _name, uint256 _price) public onlyCEO {&#13;
    require(msg.sender != address(0));&#13;
    _create_drug(_name, address(this), _price, 0);&#13;
  }&#13;
&#13;
  function createPromoDrug(bytes32 _name, address _owner, uint256 _price, uint256 _last_price) public onlyCEO {&#13;
    require(msg.sender != address(0));&#13;
    require(_owner != address(0));&#13;
    _create_drug(_name, _owner, _price, _last_price);&#13;
  }&#13;
&#13;
  function openGame() public onlyCEO {&#13;
    require(msg.sender != address(0));&#13;
    gameOpen = true;&#13;
  }&#13;
&#13;
  function totalSupply() public view returns (uint256 total) {&#13;
    return drug_count;&#13;
  }&#13;
&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return ownerCount[_owner];&#13;
  }&#13;
  function priceOf(uint256 _drug_id) public view returns (uint256 price) {&#13;
    return drugs[_drug_id].price;&#13;
  }&#13;
&#13;
  function getDrug(uint256 _drug_id) public view returns (&#13;
    uint256 id,&#13;
    bytes32 drug_name,&#13;
    address owner,&#13;
    uint256 price,&#13;
    uint256 last_price&#13;
  ) {&#13;
    id = _drug_id;&#13;
    drug_name = drugs[_drug_id].name;&#13;
    owner = drugs[_drug_id].owner;&#13;
    price = drugs[_drug_id].price;&#13;
    last_price = drugs[_drug_id].last_price;&#13;
  }&#13;
  &#13;
  function getDrugs() public view returns (uint256[], bytes32[], address[], uint256[]) {&#13;
    uint256[] memory ids = new uint256[](drug_count);&#13;
    bytes32[] memory names = new bytes32[](drug_count);&#13;
    address[] memory owners = new address[](drug_count);&#13;
    uint256[] memory prices = new uint256[](drug_count);&#13;
    for(uint256 _id = 0; _id &lt; drug_count; _id++){&#13;
      ids[_id] = _id;&#13;
      names[_id] = drugs[_id].name;&#13;
      owners[_id] = drugs[_id].owner;&#13;
      prices[_id] = drugs[_id].price;&#13;
    }&#13;
    return (ids, names, owners, prices);&#13;
  }&#13;
  &#13;
  function purchase(uint256 _drug_id) public payable {&#13;
    require(gameOpen == true);&#13;
    Drug storage drug = drugs[_drug_id];&#13;
&#13;
    require(drug.owner != msg.sender);&#13;
    require(msg.sender != address(0));  &#13;
    require(msg.value &gt;= drug.price);&#13;
&#13;
    uint256 excess = SafeMath.sub(msg.value, drug.price);&#13;
    uint256 half_diff = SafeMath.div(SafeMath.sub(drug.price, drug.last_price), 2);&#13;
    uint256 reward = SafeMath.add(half_diff, drug.last_price);&#13;
  &#13;
    lastBuyer[1].send(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 69))); //69% goes to last buyer&#13;
    lastBuyer[6].send(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 2)));  //2% goes to 6th last buyer, else ceo&#13;
    lastBuyer[9].send(uint256(SafeMath.mul(SafeMath.div(half_diff, 100), 2)));  //2% goes to 9th last buyer, else ceo&#13;
&#13;
    if(drug.owner == address(this)){&#13;
      ceoAddress.send(reward);&#13;
    } else {&#13;
      drug.owner.send(reward);&#13;
    }&#13;
    &#13;
    &#13;
    drug.last_price = drug.price;&#13;
    address _old_owner = drug.owner;&#13;
    &#13;
    if(drug.price &lt; 1690000000000000000){ // 1.69 eth&#13;
        drug.price = SafeMath.mul(SafeMath.div(drug.price, 100), 169); // 1.69x&#13;
    } else {&#13;
        drug.price = SafeMath.mul(SafeMath.div(drug.price, 100), 125); // 1.2x&#13;
    }&#13;
    drug.owner = msg.sender;&#13;
&#13;
    lastBuyer[9] = lastBuyer[8];&#13;
    lastBuyer[8] = lastBuyer[7];&#13;
    lastBuyer[7] = lastBuyer[6];&#13;
    lastBuyer[6] = lastBuyer[5];&#13;
    lastBuyer[5] = lastBuyer[4];&#13;
    lastBuyer[4] = lastBuyer[3];&#13;
    lastBuyer[3] = lastBuyer[2];&#13;
    lastBuyer[2] = lastBuyer[1];&#13;
    lastBuyer[1] = msg.sender;&#13;
&#13;
    Transfer(_old_owner, drug.owner, _drug_id);&#13;
    TokenSold(_drug_id, drug.last_price, drug.price, _old_owner, drug.owner, drug.name);&#13;
&#13;
    msg.sender.send(excess);&#13;
  }&#13;
&#13;
  function payout() public onlyCEO {&#13;
    ceoAddress.send(this.balance);&#13;
  }&#13;
&#13;
  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {&#13;
    uint256 tokenCount = balanceOf(_owner);&#13;
    if (tokenCount == 0) {&#13;
      return new uint256[](0);&#13;
    } else {&#13;
      uint256[] memory result = new uint256[](tokenCount);&#13;
      uint256 resultIndex = 0;&#13;
      for (uint256 drugId = 0; drugId &lt;= totalSupply(); drugId++) {&#13;
        if (drugs[drugId].owner == _owner) {&#13;
          result[resultIndex] = drugId;&#13;
          resultIndex++;&#13;
        }&#13;
      }&#13;
      return result;&#13;
    }&#13;
  }&#13;
&#13;
  /*** ERC-721 compliance. ***/&#13;
&#13;
  function approve(address _to, uint256 _drug_id) public {&#13;
    require(msg.sender == drugs[_drug_id].owner);&#13;
    drugs[_drug_id].approve_transfer_to = _to;&#13;
    Approval(msg.sender, _to, _drug_id);&#13;
  }&#13;
  function ownerOf(uint256 _drug_id) public view returns (address owner){&#13;
    owner = drugs[_drug_id].owner;&#13;
    require(owner != address(0));&#13;
  }&#13;
  function takeOwnership(uint256 _drug_id) public {&#13;
    address oldOwner = drugs[_drug_id].owner;&#13;
    require(msg.sender != address(0));&#13;
    require(drugs[_drug_id].approve_transfer_to == msg.sender);&#13;
    _transfer(oldOwner, msg.sender, _drug_id);&#13;
  }&#13;
  function transfer(address _to, uint256 _drug_id) public {&#13;
    require(msg.sender != address(0));&#13;
    require(msg.sender == drugs[_drug_id].owner);&#13;
    _transfer(msg.sender, _to, _drug_id);&#13;
  }&#13;
  function transferFrom(address _from, address _to, uint256 _drug_id) public {&#13;
    require(_from == drugs[_drug_id].owner);&#13;
    require(drugs[_drug_id].approve_transfer_to == _to);&#13;
    require(_to != address(0));&#13;
    _transfer(_from, _to, _drug_id);&#13;
  }&#13;
&#13;
  /*** PRIVATE METHODS ***/&#13;
&#13;
  function _create_drug(bytes32 _name, address _owner, uint256 _price, uint256 _last_price) private {&#13;
    // Params: name, owner, price, is_for_sale, is_public, share_price, increase, fee, share_count,&#13;
    drugs[drug_count] = Drug({&#13;
      name: _name,&#13;
      owner: _owner,&#13;
      price: _price,&#13;
      last_price: _last_price,&#13;
      approve_transfer_to: address(0)&#13;
    });&#13;
    &#13;
    Drug storage drug = drugs[drug_count];&#13;
    &#13;
    Birth(drug_count, _name, _owner);&#13;
    Transfer(address(this), _owner, drug_count);&#13;
    drug_count++;&#13;
  }&#13;
&#13;
  function _transfer(address _from, address _to, uint256 _drug_id) private {&#13;
    drugs[_drug_id].owner = _to;&#13;
    drugs[_drug_id].approve_transfer_to = address(0);&#13;
    ownerCount[_from] -= 1;&#13;
    ownerCount[_to] += 1;&#13;
    Transfer(_from, _to, _drug_id);&#13;
  }&#13;
}&#13;
&#13;
library SafeMath {&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a / b;&#13;
    return c;&#13;
  }&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}
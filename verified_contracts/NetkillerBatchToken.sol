pragma solidity ^0.4.24;

/******************************************/
/*       Netkiller Batch Token            */
/******************************************/
/* Author netkiller <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="48262d3c232124242d3a08253b26662b2725">[emailÂ protected]</a>&gt;   */&#13;
/* Home http://www.netkiller.cn           */&#13;
/* Version 2018-06-09 - Batch transfer    */&#13;
/******************************************/&#13;
&#13;
contract NetkillerBatchToken {&#13;
    address public owner;&#13;
    string public name;&#13;
    string public symbol;&#13;
    uint public decimals;&#13;
    uint256 public totalSupply;&#13;
&#13;
    mapping (address =&gt; uint256) public balanceOf;&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
    event Burn(address indexed from, uint256 value);&#13;
    event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
    &#13;
    mapping (address =&gt; bool) public frozenAccount;&#13;
    event FrozenFunds(address target, bool frozen);&#13;
&#13;
    bool lock = false;&#13;
&#13;
    constructor(&#13;
        uint256 initialSupply,&#13;
        string tokenName,&#13;
        string tokenSymbol,&#13;
        uint decimalUnits&#13;
    ) public {&#13;
        owner = msg.sender;&#13;
        name = tokenName;&#13;
        symbol = tokenSymbol; &#13;
        decimals = decimalUnits;&#13;
        totalSupply = initialSupply * 10 ** uint256(decimals);&#13;
        balanceOf[msg.sender] = totalSupply;&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier isLock {&#13;
        require(!lock);&#13;
        _;&#13;
    }&#13;
    &#13;
    function setLock(bool _lock) onlyOwner public{&#13;
        lock = _lock;&#13;
    }&#13;
&#13;
    function transferOwnership(address newOwner) onlyOwner public {&#13;
        if (newOwner != address(0)) {&#13;
            owner = newOwner;&#13;
        }&#13;
    }&#13;
 &#13;
&#13;
    function _transfer(address _from, address _to, uint _value) isLock internal {&#13;
        require (_to != 0x0);&#13;
        require (balanceOf[_from] &gt;= _value);&#13;
        require (balanceOf[_to] + _value &gt; balanceOf[_to]);&#13;
        require(!frozenAccount[_from]);&#13;
        require(!frozenAccount[_to]);&#13;
        balanceOf[_from] -= _value;&#13;
        balanceOf[_to] += _value;&#13;
        emit Transfer(_from, _to, _value);&#13;
    }&#13;
&#13;
    function transfer(address _to, uint256 _value) public returns (bool success) {&#13;
        _transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {&#13;
        require(_value &lt;= allowance[_from][msg.sender]);&#13;
        allowance[_from][msg.sender] -= _value;&#13;
        _transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function approve(address _spender, uint256 _value) public returns (bool success) {&#13;
        allowance[msg.sender][_spender] = _value;&#13;
        emit Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function burn(uint256 _value) onlyOwner public returns (bool success) {&#13;
        require(balanceOf[msg.sender] &gt;= _value);&#13;
        balanceOf[msg.sender] -= _value;&#13;
        totalSupply -= _value;&#13;
        emit Burn(msg.sender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {&#13;
        require(balanceOf[_from] &gt;= _value); &#13;
        require(_value &lt;= allowance[_from][msg.sender]); &#13;
        balanceOf[_from] -= _value;&#13;
        allowance[_from][msg.sender] -= _value;&#13;
        totalSupply -= _value;&#13;
        emit Burn(_from, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {&#13;
        uint256 _amount = mintedAmount * 10 ** uint256(decimals);&#13;
        balanceOf[target] += _amount;&#13;
        totalSupply += _amount;&#13;
        emit Transfer(this, target, _amount);&#13;
    }&#13;
    &#13;
    function freezeAccount(address target, bool freeze) onlyOwner public {&#13;
        frozenAccount[target] = freeze;&#13;
        emit FrozenFunds(target, freeze);&#13;
    }&#13;
&#13;
    function transferBatch(address[] _to, uint256 _value) public returns (bool success) {&#13;
        for (uint i=0; i&lt;_to.length; i++) {&#13;
            _transfer(msg.sender, _to[i], _value);&#13;
        }&#13;
        return true;&#13;
    }&#13;
}
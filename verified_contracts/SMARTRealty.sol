pragma solidity ^0.4.18;
/**
* SMARTRealty
* ERC-20 Token Standard Compliant + Crowdsale
* @author Oyewole A. Samuel <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="86e9ffe3f1e9eae3e7e4e7ffe9ebefc6e1ebe7efeaa8e5e9eb">[emailÂ protected]</a>&#13;
*/&#13;
&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
* @title Admin parameters&#13;
* @dev Define administration parameters for this contract&#13;
*/&#13;
contract admined {&#13;
    //This token contract is administered&#13;
    address public admin; //Admin address is public&#13;
    bool public lockSupply; //Mint and Burn Lock flag&#13;
    bool public lockTransfer; //Transfer Lock flag&#13;
    address public allowedAddress; //an address that can override lock condition&#13;
    bool public lockTokenSupply;&#13;
&#13;
    /**&#13;
    * @dev Contract constructor&#13;
    * define initial administrator&#13;
    */&#13;
    function admined() internal {&#13;
        admin = msg.sender; //Set initial admin to contract creator&#13;
        Admined(admin);&#13;
    }&#13;
&#13;
   /**&#13;
    * @dev Function to set an allowed address&#13;
    * @param _to The address to give privileges.&#13;
    */&#13;
    function setAllowedAddress(address _to) public {&#13;
        allowedAddress = _to;&#13;
        AllowedSet(_to);&#13;
    }&#13;
&#13;
    modifier onlyAdmin() { //A modifier to define admin-only functions&#13;
        require(msg.sender == admin);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier supplyLock() { //A modifier to lock mint and burn transactions&#13;
        require(lockSupply == false);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier transferLock() { //A modifier to lock transactions&#13;
        require(lockTransfer == false || allowedAddress == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
   /**&#13;
    * @dev Function to set new admin address&#13;
    * @param _newAdmin The address to transfer administration to&#13;
    */&#13;
    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered&#13;
        admin = _newAdmin;&#13;
        TransferAdminship(admin);&#13;
    }&#13;
&#13;
   /**&#13;
    * @dev Function to set mint and burn locks&#13;
    * @param _set boolean flag (true | false)&#13;
    */&#13;
    function setSupplyLock(bool _set) onlyAdmin public { //Only the admin can set a lock on supply&#13;
        lockSupply = _set;&#13;
        SetSupplyLock(_set);&#13;
    }&#13;
&#13;
   /**&#13;
    * @dev Function to set transfer lock&#13;
    * @param _set boolean flag (true | false)&#13;
    */&#13;
    function setTransferLock(bool _set) onlyAdmin public { //Only the admin can set a lock on transfers&#13;
        lockTransfer = _set;&#13;
        SetTransferLock(_set);&#13;
    }&#13;
&#13;
    function setLockTokenSupply(bool _set) onlyAdmin public {&#13;
        lockTokenSupply = _set;&#13;
        SetLockTokenSupply(_set);&#13;
    }&#13;
&#13;
    function getLockTokenSupply() returns (bool) {&#13;
        return lockTokenSupply;&#13;
    }&#13;
&#13;
    //All admin actions have a log for public review&#13;
    event AllowedSet(address _to);&#13;
    event SetSupplyLock(bool _set);&#13;
    event SetTransferLock(bool _set);&#13;
    event TransferAdminship(address newAdminister);&#13;
    event Admined(address administer);&#13;
    event SetLockTokenSupply(bool _set);&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * Token contract interface for external use&#13;
 */&#13;
contract ERC20TokenInterface {&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance);&#13;
    function transfer(address _to, uint256 _value) public returns (bool success);&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);&#13;
    function approve(address _spender, uint256 _value) public returns (bool success);&#13;
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);&#13;
}&#13;
&#13;
/**&#13;
* @title Token definition&#13;
* @dev Define token paramters including ERC20 ones&#13;
*/&#13;
contract StandardToken is ERC20TokenInterface, admined { //Standard definition of a ERC20Token&#13;
    using SafeMath for uint256;&#13;
    uint256 public totalSupply;&#13;
    mapping (address =&gt; uint256) balances; //A mapping of all balances per address&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) allowed; //A mapping of all allowances&#13;
    mapping (address =&gt; bool) frozen; //A mapping of frozen accounts&#13;
&#13;
    /**&#13;
    * @dev Get the balance of an specified address.&#13;
    * @param _owner The address to be query.&#13;
    */&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance) {&#13;
      return balances[_owner];&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev transfer token to a specified address&#13;
    * @param _to The address to transfer to.&#13;
    * @param _value The amount to be transferred.&#13;
    */&#13;
    function transfer(address _to, uint256 _value) transferLock public returns (bool success) {&#13;
        require(_to != address(0)); //If you dont want that people destroy token&#13;
        require(balances[msg.sender] &gt;= _value);&#13;
        require(frozen[msg.sender]==false);&#13;
        balances[msg.sender] = balances[msg.sender].safeSub(_value);&#13;
        balances[_to] = balances[_to].safeAdd(_value);&#13;
        Transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev transfer token from an address to another specified address using allowance&#13;
    * @param _from The address where token comes.&#13;
    * @param _to The address to transfer to.&#13;
    * @param _value The amount to be transferred.&#13;
    */&#13;
    function transferFrom(address _from, address _to, uint256 _value) transferLock public returns (bool success) {&#13;
        require(_to != address(0)); //If you dont want that people destroy token&#13;
        require(balances[_from] &gt;= _value &amp;&amp; allowed[_from][msg.sender] &gt;= _value);&#13;
        require(frozen[_from]==false);&#13;
        balances[_to] = balances[_to].safeAdd(_value);&#13;
        balances[_from] = balances[_from].safeSub(_value);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].safeSub(_value);&#13;
        Transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Assign allowance to an specified address to use the owner balance&#13;
    * @param _spender The address to be allowed to spend.&#13;
    * @param _value The amount to be allowed.&#13;
    */&#13;
    function approve(address _spender, uint256 _value) public returns (bool success) {&#13;
      allowed[msg.sender][_spender] = _value;&#13;
        Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Get the allowance of an specified address to use another address balance.&#13;
    * @param _owner The address of the owner of the tokens.&#13;
    * @param _spender The address of the allowed spender.&#13;
    */&#13;
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Mint token to an specified address.&#13;
    * @param _target The address of the receiver of the tokens.&#13;
    * @param _mintedAmount amount to mint.&#13;
    */&#13;
    function mintToken(address _target, uint256 _mintedAmount) onlyAdmin supplyLock public {&#13;
        balances[_target] = SafeMath.safeAdd(balances[_target], _mintedAmount);&#13;
        totalSupply = SafeMath.safeAdd(totalSupply, _mintedAmount);&#13;
        Transfer(0, this, _mintedAmount);&#13;
        Transfer(this, _target, _mintedAmount);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Burn token of an specified address.&#13;
    * @param _target The address of the holder of the tokens.&#13;
    * @param _burnedAmount amount to burn.&#13;
    */&#13;
    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin supplyLock public {&#13;
        balances[_target] = SafeMath.safeSub(balances[_target], _burnedAmount);&#13;
        totalSupply = SafeMath.safeSub(totalSupply, _burnedAmount);&#13;
        Burned(_target, _burnedAmount);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Frozen account.&#13;
    * @param _target The address to being frozen.&#13;
    * @param _flag The status of the frozen&#13;
    */&#13;
    function setFrozen(address _target,bool _flag) onlyAdmin public {&#13;
        frozen[_target]=_flag;&#13;
        FrozenStatus(_target,_flag);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Log Events&#13;
    */&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
    event Burned(address indexed _target, uint256 _value);&#13;
    event FrozenStatus(address _target,bool _flag);&#13;
}&#13;
&#13;
contract SMARTRealty is StandardToken{&#13;
    //using SafeMath for uint256;&#13;
    &#13;
    string public name = "SMARTRealty";&#13;
    string public symbol = "RLTY";&#13;
    uint8 public decimals = 8;&#13;
    string public version = "1.0.0";&#13;
&#13;
    uint public constant RATE = 1250; //1 RLTY = 0.0008 ETH&#13;
    address public owner;&#13;
    &#13;
    // amount of raised money in wei&#13;
    uint256 weiRaised;    &#13;
    &#13;
    struct ICOPhase {&#13;
        uint fromTimestamp; //ico starting timestamp&#13;
        uint toTimestamp; // ico end timestamp&#13;
        uint256 minimum; // Minimum purchase for each phase&#13;
        uint256 fundRaised;&#13;
        uint bonus; // In percent, ie 10 is a 10% for bonus&#13;
        uint totalNumberOfTokenPurchase; //number of token allowed for each phase&#13;
    }&#13;
    &#13;
    mapping(uint =&gt; ICOPhase) phases;&#13;
    uint icoPhaseCounter = 0;&#13;
    &#13;
    enum IcoStatus{Pending, Active, Inactive}&#13;
    IcoStatus status;    &#13;
    &#13;
    function SMARTRealty() public payable {&#13;
        &#13;
        owner = msg.sender;&#13;
        &#13;
        totalSupply = 500000000 * (10**uint256(decimals));          //500 million initial token creation&#13;
        &#13;
        //Tokens to creator wallet - For distribution        &#13;
        balances[owner] = 200000000 * (10**uint256(decimals)); //40% for public distribution&#13;
        &#13;
        //Initial Token Distribution&#13;
        balances[0xF9568bd772C9B517193275b3C2E0CDAd38E586bB] = 50000000 * (10**uint256(decimals)); //10% Development, Executive, and Advisory Teams&#13;
        balances[0x07ADB1D9399Bd1Fa4fD613D3179DFE883755Bb13] = 50000000 * (10**uint256(decimals)); //10% SMARTRealty Economy&#13;
        balances[0xd35909DbeEb5255D65b1ea14602C7f00ce3872f6] = 50000000 * (10**uint256(decimals)); //10% Marketing&#13;
        balances[0x9D2Fe4D5f1dc4FcA1f0Ea5f461C9fAA5D09b9CCE] = 50000000 * (10**uint256(decimals)); //10% SMARTMortgages&#13;
        balances[0x8Bb41848B6dD3D98b8849049b780dC3549568c89] = 25000000 * (10**uint256(decimals)); //5% Admin&#13;
        balances[0xC78DF195DE5717FB15FB3448D5C6893E8e7fB254] = 25000000 * (10**uint256(decimals)); //5% Contractors&#13;
        balances[0x4690678926BCf9B30985c06806d4568C0C498123] = 25000000 * (10**uint256(decimals)); //5% Legal&#13;
        balances[0x08AF803F0F90ccDBFCe046Bc113822cFf415e148] = 20000000 * (10**uint256(decimals)); //4% Bounties and Giveaways&#13;
        balances[0x8661dFb67dE4E5569da9859f5CB4Aa676cd5F480] = 5000000 * (10**uint256(decimals)); //1% Charitable Use&#13;
        &#13;
    }&#13;
    &#13;
    //Set ICO Status&#13;
    function activateICOStatus() public {&#13;
        status = IcoStatus.Active;&#13;
    }    &#13;
    &#13;
    //Set each Phase of your ICO here&#13;
    function setICOPhase(uint _fromTimestamp, uint _toTimestamp, uint256 _min, uint _bonus) onlyAdmin public returns (uint ICOPhaseId) {&#13;
        uint icoPhaseId = icoPhaseCounter++;&#13;
        ICOPhase storage ico = phases[icoPhaseId];&#13;
        ico.fromTimestamp = _fromTimestamp;&#13;
        ico.toTimestamp = _toTimestamp;&#13;
        ico.minimum = _min;&#13;
        ico.bonus = _bonus;&#13;
        //ico.totalNumberOfTokenPurchase = _numOfToken;&#13;
&#13;
        phases[icoPhaseId] = ico;&#13;
&#13;
        return icoPhaseId;&#13;
    }&#13;
    &#13;
    //Get current ICO Phase&#13;
    function getCurrentICOPhaseBonus() public view returns (uint _bonus, uint icoPhaseId) {&#13;
        require(icoPhaseCounter &gt; 0);&#13;
        uint currentTimestamp = block.timestamp; //Get the current block timestamp&#13;
&#13;
        for (uint i = 0; i &lt; icoPhaseCounter; i++) {&#13;
            &#13;
            ICOPhase storage ico = phases[i];&#13;
&#13;
            if (currentTimestamp &gt;= ico.fromTimestamp &amp;&amp; currentTimestamp &lt;= ico.toTimestamp) {&#13;
                return (ico.bonus, i);&#13;
            }&#13;
        }&#13;
&#13;
    }&#13;
    &#13;
    // Override this method to have a way to add business logic to your crowdsale when buying&#13;
    function getTokenAmount(uint256 weiAmount) internal returns(uint256 token, uint id) {&#13;
        var (bonus, phaseId) = getCurrentICOPhaseBonus();       //get current ICO phase information&#13;
        uint256 numOfTokens = weiAmount.safeMul(RATE);&#13;
        uint256 bonusToken = (bonus / 100) * numOfTokens;&#13;
        &#13;
        uint256 totalToken = numOfTokens.safeAdd(bonusToken);               //Total tokens to transfer&#13;
        return (totalToken, phaseId);&#13;
    }    &#13;
    &#13;
    // low level token purchase function&#13;
    function _buyTokens(address beneficiary) public payable {&#13;
        require(beneficiary != address(0) &amp;&amp; beneficiary != owner);&#13;
        &#13;
        uint256 weiAmount = msg.value;&#13;
        &#13;
        // calculate token amount to be created&#13;
        var (tokens, phaseId) = getTokenAmount(weiAmount);&#13;
        &#13;
        //update the current ICO Phase&#13;
        ICOPhase storage ico = phases[phaseId]; //get phase&#13;
        ico.fundRaised = ico.fundRaised.safeAdd(msg.value); //Update fundRaised for a particular phase&#13;
        phases[phaseId] = ico;&#13;
        &#13;
        // update state&#13;
        weiRaised = weiRaised.safeAdd(weiAmount);&#13;
        &#13;
        _transferToken(beneficiary, tokens);&#13;
        TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);&#13;
        &#13;
        forwardFunds();&#13;
    }&#13;
    &#13;
    function _transferToken(address _to, uint256 _amount) public returns (bool){&#13;
        balances[owner] = balances[owner].safeSub(_amount);&#13;
        balances[_to] = balances[_to].safeAdd(_amount);&#13;
        Transfer(address(0), _to, _amount);&#13;
        return true;        &#13;
    }&#13;
    &#13;
    // send ether to the fund collection wallet&#13;
    // override to create custom fund forwarding mechanisms&#13;
    function forwardFunds() internal {&#13;
        owner.transfer(msg.value);&#13;
    }    &#13;
&#13;
    // fallback function can be used to buy tokens&#13;
    function () external payable {&#13;
        _buyTokens(msg.sender);&#13;
    } &#13;
    &#13;
    &#13;
    event TokenPurchase(address _sender, address _beneficiary, uint256 weiAmount, uint256 tokens);&#13;
    &#13;
}
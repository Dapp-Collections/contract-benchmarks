pragma solidity ^0.4.24;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="acc8cddac9eccdc7c3c1cecd82cfc3c1">[emailÂ protected]</a>&#13;
// released under Apache 2.0 licence&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipRenounced(address indexed previousOwner);&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   * @notice Renouncing to ownership will leave the contract without an owner.&#13;
   * It will not be possible to call the functions with the `onlyOwner`&#13;
   * modifier anymore.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipRenounced(owner);&#13;
    owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address _newOwner) public onlyOwner {&#13;
    _transferOwnership(_newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address _newOwner) internal {&#13;
    require(_newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, _newOwner);&#13;
    owner = _newOwner;&#13;
  }&#13;
}&#13;
&#13;
library Roles {&#13;
  struct Role {&#13;
    mapping (address =&gt; bool) bearer;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev give an address access to this role&#13;
   */&#13;
  function add(Role storage role, address addr)&#13;
    internal&#13;
  {&#13;
    role.bearer[addr] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove an address' access to this role&#13;
   */&#13;
  function remove(Role storage role, address addr)&#13;
    internal&#13;
  {&#13;
    role.bearer[addr] = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev check if an address has this role&#13;
   * // reverts&#13;
   */&#13;
  function check(Role storage role, address addr)&#13;
    view&#13;
    internal&#13;
  {&#13;
    require(has(role, addr));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev check if an address has this role&#13;
   * @return bool&#13;
   */&#13;
  function has(Role storage role, address addr)&#13;
    view&#13;
    internal&#13;
    returns (bool)&#13;
  {&#13;
    return role.bearer[addr];&#13;
  }&#13;
}&#13;
&#13;
contract BasicToken is ERC20Basic {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  uint256 totalSupply_;&#13;
&#13;
  /**&#13;
  * @dev Total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return totalSupply_;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[msg.sender]);&#13;
&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    emit Transfer(msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) public view returns (uint256) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract MultiSigTransfer is Ownable {&#13;
  string public name = "MultiSigTransfer";&#13;
  string public symbol = "MST";&#13;
  bool public complete = false;&#13;
  bool public denied = false;&#13;
  uint32 public quantity;&#13;
  address public targetAddress;&#13;
  address public requesterAddress;&#13;
&#13;
  /**&#13;
  * @dev The multisig transfer contract ensures that no single administrator can&#13;
  * KVTs without approval of another administrator&#13;
  * @param _quantity The number of KVT to transfer&#13;
  * @param _targetAddress The receiver of the KVTs&#13;
  * @param _requesterAddress The administrator requesting the transfer&#13;
  */&#13;
  constructor(&#13;
    uint32 _quantity,&#13;
    address _targetAddress,&#13;
    address _requesterAddress&#13;
  ) public {&#13;
    quantity = _quantity;&#13;
    targetAddress = _targetAddress;&#13;
    requesterAddress = _requesterAddress;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Mark the transfer as approved / complete&#13;
  */&#13;
  function approveTransfer() public onlyOwner {&#13;
    require(denied == false, "cannot approve a denied transfer");&#13;
    require(complete == false, "cannot approve a complete transfer");&#13;
    complete = true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Mark the transfer as denied&#13;
  */&#13;
  function denyTransfer() public onlyOwner {&#13;
    require(denied == false, "cannot deny a transfer that is already denied");&#13;
    denied = true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Determine if the transfer is pending&#13;
  */&#13;
  function isPending() public view returns (bool) {&#13;
    return !complete;&#13;
  }&#13;
}&#13;
&#13;
contract RBAC {&#13;
  using Roles for Roles.Role;&#13;
&#13;
  mapping (string =&gt; Roles.Role) private roles;&#13;
&#13;
  event RoleAdded(address indexed operator, string role);&#13;
  event RoleRemoved(address indexed operator, string role);&#13;
&#13;
  /**&#13;
   * @dev reverts if addr does not have role&#13;
   * @param _operator address&#13;
   * @param _role the name of the role&#13;
   * // reverts&#13;
   */&#13;
  function checkRole(address _operator, string _role)&#13;
    view&#13;
    public&#13;
  {&#13;
    roles[_role].check(_operator);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev determine if addr has role&#13;
   * @param _operator address&#13;
   * @param _role the name of the role&#13;
   * @return bool&#13;
   */&#13;
  function hasRole(address _operator, string _role)&#13;
    view&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    return roles[_role].has(_operator);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev add a role to an address&#13;
   * @param _operator address&#13;
   * @param _role the name of the role&#13;
   */&#13;
  function addRole(address _operator, string _role)&#13;
    internal&#13;
  {&#13;
    roles[_role].add(_operator);&#13;
    emit RoleAdded(_operator, _role);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove a role from an address&#13;
   * @param _operator address&#13;
   * @param _role the name of the role&#13;
   */&#13;
  function removeRole(address _operator, string _role)&#13;
    internal&#13;
  {&#13;
    roles[_role].remove(_operator);&#13;
    emit RoleRemoved(_operator, _role);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev modifier to scope access to a single role (uses msg.sender as addr)&#13;
   * @param _role the name of the role&#13;
   * // reverts&#13;
   */&#13;
  modifier onlyRole(string _role)&#13;
  {&#13;
    checkRole(msg.sender, _role);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)&#13;
   * @param _roles the names of the roles to scope access to&#13;
   * // reverts&#13;
   *&#13;
   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this&#13;
   *  see: https://github.com/ethereum/solidity/issues/2467&#13;
   */&#13;
  // modifier onlyRoles(string[] _roles) {&#13;
  //     bool hasAnyRole = false;&#13;
  //     for (uint8 i = 0; i &lt; _roles.length; i++) {&#13;
  //         if (hasRole(msg.sender, _roles[i])) {&#13;
  //             hasAnyRole = true;&#13;
  //             break;&#13;
  //         }&#13;
  //     }&#13;
&#13;
  //     require(hasAnyRole);&#13;
&#13;
  //     _;&#13;
  // }&#13;
}&#13;
&#13;
contract KinesisVelocityToken is BasicToken, Ownable, RBAC {&#13;
  string public name = "KinesisVelocityToken";&#13;
  string public symbol = "KVT";&#13;
  uint8 public decimals = 0;&#13;
  string public constant ADMIN_ROLE = "ADMIN";&#13;
&#13;
  address[] public transfers;&#13;
&#13;
  uint public constant INITIAL_SUPPLY = 300000;&#13;
  uint public totalSupply = 0;&#13;
&#13;
  bool public isTransferable = false;&#13;
  bool public toggleTransferablePending = false;&#13;
  address public transferToggleRequester = address(0);&#13;
&#13;
  constructor() public {&#13;
    totalSupply = INITIAL_SUPPLY;&#13;
    balances[msg.sender] = INITIAL_SUPPLY;&#13;
    addRole(msg.sender, ADMIN_ROLE);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Determine if the address is the owner of the contract&#13;
  * @param _address The address to determine of ownership&#13;
  */&#13;
  function isOwner(address _address) public view returns (bool) {&#13;
    return owner == _address;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Returns the list of MultiSig transfers&#13;
  */&#13;
  function getTransfers() public view returns (address[]) {&#13;
    return transfers;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev The KVT ERC20 token uses adminstrators to handle transfering to the crowdsale, vesting and pre-purchasers&#13;
  */&#13;
  function isAdmin(address _address) public view returns (bool) {&#13;
    return hasRole(_address, ADMIN_ROLE);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Set an administrator as the owner, using Open Zepplin RBAC implementation&#13;
  */&#13;
  function setAdmin(address _newAdmin) public onlyOwner {&#13;
    return addRole(_newAdmin, ADMIN_ROLE);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Remove an administrator as the owner, using Open Zepplin RBAC implementation&#13;
  */&#13;
  function removeAdmin(address _oldAdmin) public onlyOwner {&#13;
    return removeRole(_oldAdmin, ADMIN_ROLE);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev As an administrator, request the token is made transferable&#13;
  * @param _toState The transfer state being requested&#13;
  */&#13;
  function setTransferable(bool _toState) public onlyRole(ADMIN_ROLE) {&#13;
    require(isTransferable != _toState, "to init a transfer toggle, the toState must change");&#13;
    toggleTransferablePending = true;&#13;
    transferToggleRequester = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev As an administrator who did not make the request, approve the transferable state change&#13;
  */&#13;
  function approveTransferableToggle() public onlyRole(ADMIN_ROLE) {&#13;
    require(toggleTransferablePending == true, "transfer toggle not in pending state");&#13;
    require(transferToggleRequester != msg.sender, "the requester cannot approve the transfer toggle");&#13;
    isTransferable = !isTransferable;&#13;
    toggleTransferablePending = false;&#13;
    transferToggleRequester = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function _transfer(address _to, address _from, uint256 _value) private returns (bool) {&#13;
    require(_value &lt;= balances[_from], "the balance in the from address is smaller than the tx value");&#13;
&#13;
    // SafeMath.sub will throw if there is not enough balance.&#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    emit Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Public transfer token function. This wrapper ensures the token is transferable&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0), "cannot transfer to the zero address");&#13;
&#13;
    /* We allow holders to return their Tokens to the contract owner at any point */&#13;
    if (_to != owner &amp;&amp; msg.sender != crowdsale) {&#13;
      require(isTransferable == true, "kvt is not yet transferable");&#13;
    }&#13;
&#13;
    /* Transfers from the owner address must use the administrative transfer */&#13;
    require(msg.sender != owner, "the owner of the kvt contract cannot transfer");&#13;
&#13;
    return _transfer(_to, msg.sender, _value);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Request an administrative transfer. This does not move tokens&#13;
  * @param _to The address to transfer to.&#13;
  * @param _quantity The amount to be transferred.&#13;
  */&#13;
  function adminTransfer(address _to, uint32 _quantity) public onlyRole(ADMIN_ROLE) {&#13;
    address newTransfer = new MultiSigTransfer(_quantity, _to, msg.sender);&#13;
    transfers.push(newTransfer);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Approve an administrative transfer. This moves the tokens if the requester&#13;
  * is an admin, but not the same admin as the one who made the request&#13;
  * @param _approvedTransfer The contract address of the multisignature transfer.&#13;
  */&#13;
  function approveTransfer(address _approvedTransfer) public onlyRole(ADMIN_ROLE) returns (bool) {&#13;
    MultiSigTransfer transferToApprove = MultiSigTransfer(_approvedTransfer);&#13;
&#13;
    uint32 transferQuantity = transferToApprove.quantity();&#13;
    address deliveryAddress = transferToApprove.targetAddress();&#13;
    address requesterAddress = transferToApprove.requesterAddress();&#13;
&#13;
    require(msg.sender != requesterAddress, "a requester cannot approve an admin transfer");&#13;
&#13;
    transferToApprove.approveTransfer();&#13;
    return _transfer(deliveryAddress, owner, transferQuantity);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Deny an administrative transfer. This ensures it cannot be approved.&#13;
  * @param _approvedTransfer The contract address of the multisignature transfer.&#13;
  */&#13;
  function denyTransfer(address _approvedTransfer) public onlyRole(ADMIN_ROLE) returns (bool) {&#13;
    MultiSigTransfer transferToApprove = MultiSigTransfer(_approvedTransfer);&#13;
    transferToApprove.denyTransfer();&#13;
  }&#13;
&#13;
  address public crowdsale = address(0);&#13;
&#13;
  /**&#13;
  * @dev Any admin can set the current crowdsale address, to allows transfers&#13;
  * from the crowdsale to the purchaser&#13;
  */&#13;
  function setCrowdsaleAddress(address _crowdsaleAddress) public onlyRole(ADMIN_ROLE) {&#13;
    crowdsale = _crowdsaleAddress;&#13;
  }&#13;
}
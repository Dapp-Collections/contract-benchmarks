///File: giveth-common-contracts/contracts/ERC20.sol

pragma solidity ^0.4.19;


/**
 * @title ERC20
 * @dev A standard interface for tokens.
 * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
 */
contract ERC20 {
  
    /// @dev Returns the total token supply
    function totalSupply() public constant returns (uint256 supply);

    /// @dev Returns the account balance of the account with address _owner
    function balanceOf(address _owner) public constant returns (uint256 balance);

    /// @dev Transfers _value number of tokens to address _to
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @dev Transfers _value number of tokens from address _from to address _to
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

}


///File: giveth-common-contracts/contracts/Owned.sol

pragma solidity ^0.4.19;


/// @title Owned
/// @author Adrià Massanet <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cbaaafb9a2aa8ba8a4afaea8a4a5bfaeb3bfe5a2a4">[email protected]</a>&gt;&#13;
/// @notice The Owned contract has an owner address, and provides basic &#13;
///  authorization control functions, this simplifies &amp; the implementation of&#13;
///  user permissions; this contract has three work flows for a change in&#13;
///  ownership, the first requires the new owner to validate that they have the&#13;
///  ability to accept ownership, the second allows the ownership to be&#13;
///  directly transfered without requiring acceptance, and the third allows for&#13;
///  the ownership to be removed to allow for decentralization &#13;
contract Owned {&#13;
&#13;
    address public owner;&#13;
    address public newOwnerCandidate;&#13;
&#13;
    event OwnershipRequested(address indexed by, address indexed to);&#13;
    event OwnershipTransferred(address indexed from, address indexed to);&#13;
    event OwnershipRemoved();&#13;
&#13;
    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract&#13;
    function Owned() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev `owner` is the only address that can call a function with this&#13;
    /// modifier&#13;
    modifier onlyOwner() {&#13;
        require (msg.sender == owner);&#13;
        _;&#13;
    }&#13;
    &#13;
    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must&#13;
    ///  be called first by the current `owner` then `acceptOwnership()` must be&#13;
    ///  called by the `newOwnerCandidate`&#13;
    /// @notice `onlyOwner` Proposes to transfer control of the contract to a&#13;
    ///  new owner&#13;
    /// @param _newOwnerCandidate The address being proposed as the new owner&#13;
    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {&#13;
        newOwnerCandidate = _newOwnerCandidate;&#13;
        OwnershipRequested(msg.sender, newOwnerCandidate);&#13;
    }&#13;
&#13;
    /// @notice Can only be called by the `newOwnerCandidate`, accepts the&#13;
    ///  transfer of ownership&#13;
    function acceptOwnership() public {&#13;
        require(msg.sender == newOwnerCandidate);&#13;
&#13;
        address oldOwner = owner;&#13;
        owner = newOwnerCandidate;&#13;
        newOwnerCandidate = 0x0;&#13;
&#13;
        OwnershipTransferred(oldOwner, owner);&#13;
    }&#13;
&#13;
    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can&#13;
    ///  be called and it will immediately assign ownership to the `newOwner`&#13;
    /// @notice `owner` can step down and assign some other address to this role&#13;
    /// @param _newOwner The address of the new owner&#13;
    function changeOwnership(address _newOwner) public onlyOwner {&#13;
        require(_newOwner != 0x0);&#13;
&#13;
        address oldOwner = owner;&#13;
        owner = _newOwner;&#13;
        newOwnerCandidate = 0x0;&#13;
&#13;
        OwnershipTransferred(oldOwner, owner);&#13;
    }&#13;
&#13;
    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can&#13;
    ///  be called and it will immediately assign ownership to the 0x0 address;&#13;
    ///  it requires a 0xdece be input as a parameter to prevent accidental use&#13;
    /// @notice Decentralizes the contract, this operation cannot be undone &#13;
    /// @param _dac `0xdac` has to be entered for this function to work&#13;
    function removeOwnership(address _dac) public onlyOwner {&#13;
        require(_dac == 0xdac);&#13;
        owner = 0x0;&#13;
        newOwnerCandidate = 0x0;&#13;
        OwnershipRemoved();     &#13;
    }&#13;
} &#13;
&#13;
&#13;
///File: giveth-common-contracts/contracts/Escapable.sol&#13;
&#13;
pragma solidity ^0.4.19;&#13;
/*&#13;
    Copyright 2016, Jordi Baylina&#13;
    Contributor: Adrià Massanet &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4c2d283e252d0c2f2328292f232238293438622523">[email protected]</a>&gt;&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @dev `Escapable` is a base level contract built off of the `Owned`&#13;
///  contract; it creates an escape hatch function that can be called in an&#13;
///  emergency that will allow designated addresses to send any ether or tokens&#13;
///  held in the contract to an `escapeHatchDestination` as long as they were&#13;
///  not blacklisted&#13;
contract Escapable is Owned {&#13;
    address public escapeHatchCaller;&#13;
    address public escapeHatchDestination;&#13;
    mapping (address=&gt;bool) private escapeBlacklist; // Token contract addresses&#13;
&#13;
    /// @notice The Constructor assigns the `escapeHatchDestination` and the&#13;
    ///  `escapeHatchCaller`&#13;
    /// @param _escapeHatchCaller The address of a trusted account or contract&#13;
    ///  to call `escapeHatch()` to send the ether in this contract to the&#13;
    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`&#13;
    ///  cannot move funds out of `escapeHatchDestination`&#13;
    /// @param _escapeHatchDestination The address of a safe location (usu a&#13;
    ///  Multisig) to send the ether held in this contract; if a neutral address&#13;
    ///  is required, the WHG Multisig is an option:&#13;
    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 &#13;
    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {&#13;
        escapeHatchCaller = _escapeHatchCaller;&#13;
        escapeHatchDestination = _escapeHatchDestination;&#13;
    }&#13;
&#13;
    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`&#13;
    ///  are the only addresses that can call a function with this modifier&#13;
    modifier onlyEscapeHatchCallerOrOwner {&#13;
        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Creates the blacklist of tokens that are not able to be taken&#13;
    ///  out of the contract; can only be done at the deployment, and the logic&#13;
    ///  to add to the blacklist will be in the constructor of a child contract&#13;
    /// @param _token the token contract address that is to be blacklisted &#13;
    function blacklistEscapeToken(address _token) internal {&#13;
        escapeBlacklist[_token] = true;&#13;
        EscapeHatchBlackistedToken(_token);&#13;
    }&#13;
&#13;
    /// @notice Checks to see if `_token` is in the blacklist of tokens&#13;
    /// @param _token the token address being queried&#13;
    /// @return False if `_token` is in the blacklist and can't be taken out of&#13;
    ///  the contract via the `escapeHatch()`&#13;
    function isTokenEscapable(address _token) view public returns (bool) {&#13;
        return !escapeBlacklist[_token];&#13;
    }&#13;
&#13;
    /// @notice The `escapeHatch()` should only be called as a last resort if a&#13;
    /// security issue is uncovered or something unexpected happened&#13;
    /// @param _token to transfer, use 0x0 for ether&#13;
    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   &#13;
        require(escapeBlacklist[_token]==false);&#13;
&#13;
        uint256 balance;&#13;
&#13;
        /// @dev Logic for ether&#13;
        if (_token == 0x0) {&#13;
            balance = this.balance;&#13;
            escapeHatchDestination.transfer(balance);&#13;
            EscapeHatchCalled(_token, balance);&#13;
            return;&#13;
        }&#13;
        /// @dev Logic for tokens&#13;
        ERC20 token = ERC20(_token);&#13;
        balance = token.balanceOf(this);&#13;
        require(token.transfer(escapeHatchDestination, balance));&#13;
        EscapeHatchCalled(_token, balance);&#13;
    }&#13;
&#13;
    /// @notice Changes the address assigned to call `escapeHatch()`&#13;
    /// @param _newEscapeHatchCaller The address of a trusted account or&#13;
    ///  contract to call `escapeHatch()` to send the value in this contract to&#13;
    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`&#13;
    ///  cannot move funds out of `escapeHatchDestination`&#13;
    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {&#13;
        escapeHatchCaller = _newEscapeHatchCaller;&#13;
    }&#13;
&#13;
    event EscapeHatchBlackistedToken(address token);&#13;
    event EscapeHatchCalled(address token, uint amount);&#13;
}&#13;
&#13;
&#13;
///File: ./contracts/lib/Pausable.sol&#13;
&#13;
pragma solidity ^0.4.21;&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is Owned {&#13;
    event Pause();&#13;
    event Unpause();&#13;
&#13;
    bool public paused = false;&#13;
&#13;
    /**&#13;
    * @dev Modifier to make a function callable only when the contract is not paused.&#13;
    */&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Modifier to make a function callable only when the contract is paused.&#13;
    */&#13;
    modifier whenPaused() {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev called by the owner to pause, triggers stopped state&#13;
    */&#13;
    function pause() onlyOwner whenNotPaused public {&#13;
        paused = true;&#13;
        emit Pause();&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev called by the owner to unpause, returns to normal state&#13;
    */&#13;
    function unpause() onlyOwner whenPaused public {&#13;
        paused = false;&#13;
        emit Unpause();&#13;
    }&#13;
}&#13;
&#13;
///File: ./contracts/lib/Vault.sol&#13;
&#13;
pragma solidity ^0.4.21;&#13;
&#13;
/*&#13;
    Copyright 2018, Jordi Baylina, RJ Ewing&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 */&#13;
&#13;
/// @title Vault Contract&#13;
/// @author Jordi Baylina, RJ Ewing&#13;
/// @notice This contract holds funds for Campaigns and automates payments. For&#13;
///  this iteration the funds will come straight from the Giveth Multisig as a&#13;
///  safety precaution, but once fully tested and optimized this contract will&#13;
///  be a safe place to store funds equipped with optional variable time delays&#13;
///  to allow for an optional escape hatch&#13;
&#13;
&#13;
&#13;
&#13;
/// @dev `Vault` is a higher level contract built off of the `Escapable`&#13;
///  contract that holds funds for Campaigns and automates payments.&#13;
contract Vault is Escapable, Pausable {&#13;
&#13;
    /// @dev `Payment` is a public structure that describes the details of&#13;
    ///  each payment making it easy to track the movement of funds&#13;
    ///  transparently&#13;
    struct Payment {&#13;
        string name;              // What is the purpose of this payment&#13;
        bytes32 reference;        // Reference of the payment.&#13;
        address spender;          // Who is sending the funds&#13;
        uint earliestPayTime;     // The earliest a payment can be made (Unix Time)&#13;
        bool canceled;            // If True then the payment has been canceled&#13;
        bool paid;                // If True then the payment has been paid&#13;
        address recipient;        // Who is receiving the funds&#13;
        address token;            // Token this payment represents&#13;
        uint amount;              // The amount of wei sent in the payment&#13;
        uint securityGuardDelay;  // The seconds `securityGuard` can delay payment&#13;
    }&#13;
&#13;
    Payment[] public authorizedPayments;&#13;
&#13;
    address public securityGuard;&#13;
    uint public absoluteMinTimeLock;&#13;
    uint public timeLock;&#13;
    uint public maxSecurityGuardDelay;&#13;
    bool public allowDisbursePaymentWhenPaused;&#13;
&#13;
    /// @dev The white list of approved addresses allowed to set up &amp;&amp; receive&#13;
    ///  payments from this vault&#13;
    mapping (address =&gt; bool) public allowedSpenders;&#13;
&#13;
    // @dev Events to make the payment movements easy to find on the blockchain&#13;
    event PaymentAuthorized(uint indexed idPayment, address indexed recipient, uint amount, address token, bytes32 reference);&#13;
    event PaymentExecuted(uint indexed idPayment, address indexed recipient, uint amount, address token);&#13;
    event PaymentCanceled(uint indexed idPayment);&#13;
    event SpenderAuthorization(address indexed spender, bool authorized);&#13;
&#13;
    /// @dev The address assigned the role of `securityGuard` is the only&#13;
    ///  addresses that can call a function with this modifier&#13;
    modifier onlySecurityGuard { &#13;
        require(msg.sender == securityGuard);&#13;
        _;&#13;
    }&#13;
&#13;
    /// By default, we dis-allow payment disburements if the contract is paused.&#13;
    /// However, to facilitate a migration of the bridge, we can allow&#13;
    /// disbursements when paused if explicitly set&#13;
    modifier disbursementsAllowed {&#13;
        require(!paused || allowDisbursePaymentWhenPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice The Constructor creates the Vault on the blockchain&#13;
    /// @param _escapeHatchCaller The address of a trusted account or contract to&#13;
    ///  call `escapeHatch()` to send the ether in this contract to the&#13;
    ///  `escapeHatchDestination` it would be ideal if `escapeHatchCaller` cannot move&#13;
    ///  funds out of `escapeHatchDestination`&#13;
    /// @param _escapeHatchDestination The address of a safe location (usu a&#13;
    ///  Multisig) to send the ether held in this contract in an emergency&#13;
    /// @param _absoluteMinTimeLock The minimum number of seconds `timelock` can&#13;
    ///  be set to, if set to 0 the `owner` can remove the `timeLock` completely&#13;
    /// @param _timeLock Initial number of seconds that payments are delayed&#13;
    ///  after they are authorized (a security precaution)&#13;
    /// @param _securityGuard Address that will be able to delay the payments&#13;
    ///  beyond the initial timelock requirements; can be set to 0x0 to remove&#13;
    ///  the `securityGuard` functionality&#13;
    /// @param _maxSecurityGuardDelay The maximum number of seconds in total&#13;
    ///   that `securityGuard` can delay a payment so that the owner can cancel&#13;
    ///   the payment if needed&#13;
    function Vault(&#13;
        address _escapeHatchCaller,&#13;
        address _escapeHatchDestination,&#13;
        uint _absoluteMinTimeLock,&#13;
        uint _timeLock,&#13;
        address _securityGuard,&#13;
        uint _maxSecurityGuardDelay&#13;
    ) Escapable(_escapeHatchCaller, _escapeHatchDestination) public&#13;
    {&#13;
        absoluteMinTimeLock = _absoluteMinTimeLock;&#13;
        timeLock = _timeLock;&#13;
        securityGuard = _securityGuard;&#13;
        maxSecurityGuardDelay = _maxSecurityGuardDelay;&#13;
    }&#13;
&#13;
/////////&#13;
// Helper functions&#13;
/////////&#13;
&#13;
    /// @notice States the total number of authorized payments in this contract&#13;
    /// @return The number of payments ever authorized even if they were canceled&#13;
    function numberOfAuthorizedPayments() public view returns (uint) {&#13;
        return authorizedPayments.length;&#13;
    }&#13;
&#13;
////////&#13;
// Spender Interface&#13;
////////&#13;
&#13;
    /// @notice only `allowedSpenders[]` Creates a new `Payment`&#13;
    /// @param _name Brief description of the payment that is authorized&#13;
    /// @param _reference External reference of the payment&#13;
    /// @param _recipient Destination of the payment&#13;
    /// @param _amount Amount to be paid in wei&#13;
    /// @param _paymentDelay Number of seconds the payment is to be delayed, if&#13;
    ///  this value is below `timeLock` then the `timeLock` determines the delay&#13;
    /// @return The Payment ID number for the new authorized payment&#13;
    function authorizePayment(&#13;
        string _name,&#13;
        bytes32 _reference,&#13;
        address _recipient,&#13;
        address _token,&#13;
        uint _amount,&#13;
        uint _paymentDelay&#13;
    ) whenNotPaused external returns(uint) {&#13;
&#13;
        // Fail if you arent on the `allowedSpenders` white list&#13;
        require(allowedSpenders[msg.sender]);&#13;
        uint idPayment = authorizedPayments.length;       // Unique Payment ID&#13;
        authorizedPayments.length++;&#13;
&#13;
        // The following lines fill out the payment struct&#13;
        Payment storage p = authorizedPayments[idPayment];&#13;
        p.spender = msg.sender;&#13;
&#13;
        // Overflow protection&#13;
        require(_paymentDelay &lt;= 10**18);&#13;
&#13;
        // Determines the earliest the recipient can receive payment (Unix time)&#13;
        p.earliestPayTime = _paymentDelay &gt;= timeLock ?&#13;
                                _getTime() + _paymentDelay :&#13;
                                _getTime() + timeLock;&#13;
        p.recipient = _recipient;&#13;
        p.amount = _amount;&#13;
        p.name = _name;&#13;
        p.reference = _reference;&#13;
        p.token = _token;&#13;
        emit PaymentAuthorized(idPayment, p.recipient, p.amount, p.token, p.reference);&#13;
        return idPayment;&#13;
    }&#13;
&#13;
    /// Anyone can call this function to disburse the payment to &#13;
    ///  the recipient after `earliestPayTime` has passed&#13;
    /// @param _idPayment The payment ID to be executed&#13;
    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {&#13;
        // Check that the `_idPayment` has been added to the payments struct&#13;
        require(_idPayment &lt; authorizedPayments.length);&#13;
&#13;
        Payment storage p = authorizedPayments[_idPayment];&#13;
&#13;
        // Checking for reasons not to execute the payment&#13;
        require(allowedSpenders[p.spender]);&#13;
        require(_getTime() &gt;= p.earliestPayTime);&#13;
        require(!p.canceled);&#13;
        require(!p.paid);&#13;
&#13;
        p.paid = true; // Set the payment to being paid&#13;
&#13;
        // Make the payment&#13;
        if (p.token == 0) {&#13;
            p.recipient.transfer(p.amount);&#13;
        } else {&#13;
            require(ERC20(p.token).transfer(p.recipient, p.amount));&#13;
        }&#13;
&#13;
        emit PaymentExecuted(_idPayment, p.recipient, p.amount, p.token);&#13;
    }&#13;
&#13;
    /// convience function to disburse multiple payments in a single tx&#13;
    function disburseAuthorizedPayments(uint[] _idPayments) public {&#13;
        for (uint i = 0; i &lt; _idPayments.length; i++) {&#13;
            uint _idPayment = _idPayments[i];&#13;
            disburseAuthorizedPayment(_idPayment);&#13;
        }&#13;
    }&#13;
&#13;
/////////&#13;
// SecurityGuard Interface&#13;
/////////&#13;
&#13;
    /// @notice `onlySecurityGuard` Delays a payment for a set number of seconds&#13;
    /// @param _idPayment ID of the payment to be delayed&#13;
    /// @param _delay The number of seconds to delay the payment&#13;
    function delayPayment(uint _idPayment, uint _delay) onlySecurityGuard external {&#13;
        require(_idPayment &lt; authorizedPayments.length);&#13;
&#13;
        // Overflow test&#13;
        require(_delay &lt;= 10**18);&#13;
&#13;
        Payment storage p = authorizedPayments[_idPayment];&#13;
&#13;
        require(p.securityGuardDelay + _delay &lt;= maxSecurityGuardDelay);&#13;
        require(!p.paid);&#13;
        require(!p.canceled);&#13;
&#13;
        p.securityGuardDelay += _delay;&#13;
        p.earliestPayTime += _delay;&#13;
    }&#13;
&#13;
////////&#13;
// Owner Interface&#13;
///////&#13;
&#13;
    /// @notice `onlyOwner` Cancel a payment all together&#13;
    /// @param _idPayment ID of the payment to be canceled.&#13;
    function cancelPayment(uint _idPayment) onlyOwner external {&#13;
        require(_idPayment &lt; authorizedPayments.length);&#13;
&#13;
        Payment storage p = authorizedPayments[_idPayment];&#13;
&#13;
        require(!p.canceled);&#13;
        require(!p.paid);&#13;
&#13;
        p.canceled = true;&#13;
        emit PaymentCanceled(_idPayment);&#13;
    }&#13;
&#13;
    /// @notice `onlyOwner` Adds a spender to the `allowedSpenders[]` white list&#13;
    /// @param _spender The address of the contract being authorized/unauthorized&#13;
    /// @param _authorize `true` if authorizing and `false` if unauthorizing&#13;
    function authorizeSpender(address _spender, bool _authorize) onlyOwner external {&#13;
        allowedSpenders[_spender] = _authorize;&#13;
        emit SpenderAuthorization(_spender, _authorize);&#13;
    }&#13;
&#13;
    /// @notice `onlyOwner` Sets the address of `securityGuard`&#13;
    /// @param _newSecurityGuard Address of the new security guard&#13;
    function setSecurityGuard(address _newSecurityGuard) onlyOwner external {&#13;
        securityGuard = _newSecurityGuard;&#13;
    }&#13;
&#13;
    /// @notice `onlyOwner` Changes `timeLock`; the new `timeLock` cannot be&#13;
    ///  lower than `absoluteMinTimeLock`&#13;
    /// @param _newTimeLock Sets the new minimum default `timeLock` in seconds;&#13;
    ///  pending payments maintain their `earliestPayTime`&#13;
    function setTimelock(uint _newTimeLock) onlyOwner external {&#13;
        require(_newTimeLock &gt;= absoluteMinTimeLock);&#13;
        timeLock = _newTimeLock;&#13;
    }&#13;
&#13;
    /// @notice `onlyOwner` Changes the maximum number of seconds&#13;
    /// `securityGuard` can delay a payment&#13;
    /// @param _maxSecurityGuardDelay The new maximum delay in seconds that&#13;
    ///  `securityGuard` can delay the payment's execution in total&#13;
    function setMaxSecurityGuardDelay(uint _maxSecurityGuardDelay) onlyOwner external {&#13;
        maxSecurityGuardDelay = _maxSecurityGuardDelay;&#13;
    }&#13;
&#13;
    /// @dev called by the owner to pause the contract. Triggers a stopped state &#13;
    ///  and resets allowDisbursePaymentWhenPaused to false&#13;
    function pause() onlyOwner whenNotPaused public {&#13;
        allowDisbursePaymentWhenPaused = false;&#13;
        super.pause();&#13;
    }&#13;
&#13;
    /// Owner can allow payment disbursement when the contract is paused. This is so the&#13;
    /// bridge can be upgraded without having to migrate any existing authorizedPayments&#13;
    /// @dev only callable whenPaused b/c pausing the contract will reset `allowDisbursePaymentWhenPaused` to false&#13;
    /// @param allowed `true` if allowing payments to be disbursed when paused, otherwise 'false'&#13;
    function setAllowDisbursePaymentWhenPaused(bool allowed) onlyOwner whenPaused public {&#13;
        allowDisbursePaymentWhenPaused = allowed;&#13;
    }&#13;
&#13;
    // for overidding during testing&#13;
    function _getTime() internal view returns (uint) {&#13;
        return now;&#13;
    }&#13;
&#13;
}&#13;
&#13;
///File: ./contracts/lib/FailClosedVault.sol&#13;
&#13;
pragma solidity ^0.4.21;&#13;
&#13;
/*&#13;
    Copyright 2018, RJ Ewing&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 */&#13;
&#13;
&#13;
&#13;
/**&#13;
* @dev `FailClosedVault` is a version of the vault that requires&#13;
*  the securityGuard to "see" each payment before it can be collected&#13;
*/&#13;
contract FailClosedVault is Vault {&#13;
    uint public securityGuardLastCheckin;&#13;
&#13;
    /**&#13;
    * @param _absoluteMinTimeLock For this version of the vault, it is recommended&#13;
    *   that this value is &gt; 24hrs. If not, it will require the securityGuard to checkIn&#13;
    *   multiple times a day. Also consider that `securityGuardLastCheckin &gt;= payment.earliestPayTime - timelock + 30mins);`&#13;
    *   is the condition to allow payments to be payed. The additional 30 mins is to reduce (not eliminate)&#13;
    *   the risk of front-running&#13;
    */&#13;
    function FailClosedVault(&#13;
        address _escapeHatchCaller,&#13;
        address _escapeHatchDestination,&#13;
        uint _absoluteMinTimeLock,&#13;
        uint _timeLock,&#13;
        address _securityGuard,&#13;
        uint _maxSecurityGuardDelay&#13;
    ) Vault(&#13;
        _escapeHatchCaller,&#13;
        _escapeHatchDestination, &#13;
        _absoluteMinTimeLock,&#13;
        _timeLock,&#13;
        _securityGuard,&#13;
        _maxSecurityGuardDelay&#13;
    ) public {&#13;
    }&#13;
&#13;
/////////////////////&#13;
// Spender Interface&#13;
/////////////////////&#13;
&#13;
    /**&#13;
    * Disburse an authorizedPayment to the recipient if all checks pass.&#13;
    *&#13;
    * @param _idPayment The payment ID to be disbursed&#13;
    */&#13;
    function disburseAuthorizedPayment(uint _idPayment) disbursementsAllowed public {&#13;
        // Check that the `_idPayment` has been added to the payments struct&#13;
        require(_idPayment &lt; authorizedPayments.length);&#13;
&#13;
        Payment storage p = authorizedPayments[_idPayment];&#13;
        // The current minimum delay for a payment is `timeLock`. Thus the following ensuress&#13;
        // that the `securityGuard` has checked in after the payment was created&#13;
        // @notice earliestPayTime is updated when a payment is delayed. Which may require&#13;
        // another checkIn before the payment can be collected.&#13;
        // @notice We add 30 mins to this to reduce (not eliminate) the risk of front-running&#13;
        require(securityGuardLastCheckin &gt;= p.earliestPayTime - timeLock + 30 minutes);&#13;
&#13;
        super.disburseAuthorizedPayment(_idPayment);&#13;
    }&#13;
&#13;
///////////////////////////&#13;
// SecurityGuard Interface&#13;
///////////////////////////&#13;
&#13;
    /**&#13;
    * @notice `onlySecurityGuard` can checkin. If they fail to checkin,&#13;
    * payments will not be allowed to be disbursed, unless the payment has&#13;
    * an `earliestPayTime` &lt;= `securityGuardLastCheckin`.&#13;
    * @notice To reduce the risk of a front-running attack on payments, it&#13;
    * is important that this is called with a resonable gasPrice set for the&#13;
    * current network congestion. If this tx is not mined, within 30 mins&#13;
    * of being sent, it is possible that a payment can be authorized w/o the&#13;
    * securityGuard's knowledge&#13;
    */&#13;
    function checkIn() onlySecurityGuard external {&#13;
        securityGuardLastCheckin = _getTime();&#13;
    }&#13;
}&#13;
&#13;
///File: ./contracts/GivethBridge.sol&#13;
&#13;
pragma solidity ^0.4.21;&#13;
&#13;
/*&#13;
    Copyright 2017, RJ Ewing &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5e2e3b2c372d2d31323139271e2e2c312a3130333f3732703d3133">[email protected]</a>&gt;&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/**&#13;
* @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)&#13;
* this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation&#13;
* will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there&#13;
* will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in&#13;
* the dapp&#13;
*/&#13;
contract GivethBridge is FailClosedVault {&#13;
&#13;
    mapping(address =&gt; bool) tokenWhitelist;&#13;
&#13;
    event Donate(uint64 giverId, uint64 receiverId, address token, uint amount);&#13;
    event DonateAndCreateGiver(address giver, uint64 receiverId, address token, uint amount);&#13;
    event EscapeFundsCalled(address token, uint amount);&#13;
&#13;
    //== constructor&#13;
&#13;
    /**&#13;
    * @param _escapeHatchCaller The address of a trusted account or contract to&#13;
    *  call `escapeHatch()` to send the ether in this contract to the&#13;
    *  `escapeHatchDestination` in the case on an emergency. it would be ideal &#13;
    *  if `escapeHatchCaller` cannot move funds out of `escapeHatchDestination`&#13;
    * @param _escapeHatchDestination The address of a safe location (usually a&#13;
    *  Multisig) to send the ether held in this contract in the case of an emergency&#13;
    * @param _absoluteMinTimeLock The minimum number of seconds `timelock` can&#13;
    *  be set to, if set to 0 the `owner` can remove the `timeLock` completely&#13;
    * @param _timeLock Minimum number of seconds that payments are delayed&#13;
    *  after they are authorized (a security precaution)&#13;
    * @param _securityGuard Address that will be able to delay the payments&#13;
    *  beyond the initial timelock requirements; can be set to 0x0 to remove&#13;
    *  the `securityGuard` functionality&#13;
    * @param _maxSecurityGuardDelay The maximum number of seconds in total&#13;
    *   that `securityGuard` can delay a payment so that the owner can cancel&#13;
    *   the payment if needed&#13;
    */&#13;
    function GivethBridge(&#13;
        address _escapeHatchCaller,&#13;
        address _escapeHatchDestination,&#13;
        uint _absoluteMinTimeLock,&#13;
        uint _timeLock,&#13;
        address _securityGuard,&#13;
        uint _maxSecurityGuardDelay&#13;
    ) FailClosedVault(&#13;
        _escapeHatchCaller,&#13;
        _escapeHatchDestination,&#13;
        _absoluteMinTimeLock,&#13;
        _timeLock,&#13;
        _securityGuard,&#13;
        _maxSecurityGuardDelay&#13;
    ) public&#13;
    {&#13;
        tokenWhitelist[0] = true; // enable eth transfers&#13;
    }&#13;
&#13;
    //== public methods&#13;
&#13;
    /**&#13;
    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)&#13;
    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation&#13;
    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there&#13;
    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in&#13;
    * the dapp&#13;
    *&#13;
    * @param giver The address to create a 'giver' pledge admin for in the liquidPledging contract&#13;
    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation&#13;
    */&#13;
    function donateAndCreateGiver(address giver, uint64 receiverId) payable external {&#13;
        donateAndCreateGiver(giver, receiverId, 0, 0);&#13;
    }&#13;
&#13;
    /**&#13;
    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)&#13;
    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation&#13;
    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there&#13;
    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in&#13;
    * the dapp&#13;
    *&#13;
    * @param giver The address to create a 'giver' pledge admin for in the liquidPledging contract&#13;
    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation&#13;
    * @param token The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted&#13;
    * @param _amount The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.&#13;
    */&#13;
    function donateAndCreateGiver(address giver, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {&#13;
        require(giver != 0);&#13;
        require(receiverId != 0);&#13;
        uint amount = _receiveDonation(token, _amount);&#13;
        emit DonateAndCreateGiver(giver, receiverId, token, amount);&#13;
    }&#13;
&#13;
    /**&#13;
    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)&#13;
    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation&#13;
    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there&#13;
    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in&#13;
    * the dapp&#13;
    *&#13;
    * @param giverId The adminId of the liquidPledging pledge admin who is donating&#13;
    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation&#13;
    */&#13;
    function donate(uint64 giverId, uint64 receiverId) payable external {&#13;
        donate(giverId, receiverId, 0, 0);&#13;
    }&#13;
&#13;
    /**&#13;
    * @notice It is not recommened to call this function outside of the giveth dapp (giveth.io)&#13;
    * this function is bridged to a side chain. If for some reason the sidechain tx fails, the donation&#13;
    * will end up in the givers control inside LiquidPledging contract. If you do not use the dapp, there&#13;
    * will be no way of notifying the sender/giver that the giver has to take action (withdraw/donate) in&#13;
    * the dapp&#13;
    *&#13;
    * @param giverId The adminId of the liquidPledging pledge admin who is donating&#13;
    * @param receiverId The adminId of the liquidPledging pledge admin receiving the donation&#13;
    * @param token The token to donate. If donating ETH, then 0x0. Note: the token must be whitelisted&#13;
    * @param _amount The amount of the token to donate. If donating ETH, then 0x0 as the msg.value will be used instead.&#13;
    */&#13;
    function donate(uint64 giverId, uint64 receiverId, address token, uint _amount) whenNotPaused payable public {&#13;
        require(giverId != 0);&#13;
        require(receiverId != 0);&#13;
        uint amount = _receiveDonation(token, _amount);&#13;
        emit Donate(giverId, receiverId, token, amount);&#13;
    }&#13;
&#13;
    /**&#13;
    * The `owner` can call this function to add/remove a token from the whitelist&#13;
    *&#13;
    * @param token The address of the token to update&#13;
    * @param accepted Wether or not to accept this token for donations&#13;
    */&#13;
    function whitelistToken(address token, bool accepted) whenNotPaused onlyOwner external {&#13;
        tokenWhitelist[token] = accepted;&#13;
    }&#13;
&#13;
    /**&#13;
    * Transfer tokens/eth to the escapeHatchDestination.&#13;
    * Used as a safety mechanism to prevent the bridge from holding too much value&#13;
    *&#13;
    * before being thoroughly battle-tested.&#13;
    * @param _token the token to transfer. 0x0 for ETH&#13;
    * @param _amount the amount to transfer&#13;
    */&#13;
    function escapeFunds(address _token, uint _amount) external onlyEscapeHatchCallerOrOwner {&#13;
        // @dev Logic for ether&#13;
        if (_token == 0) {&#13;
            escapeHatchDestination.transfer(_amount);&#13;
        // @dev Logic for tokens&#13;
        } else {&#13;
            ERC20 token = ERC20(_token);&#13;
            require(token.transfer(escapeHatchDestination, _amount));&#13;
        }&#13;
        emit EscapeFundsCalled(_token, _amount);&#13;
    }&#13;
&#13;
    //== internal methods&#13;
&#13;
    /**&#13;
    * @dev used to actually receive the donation. Will transfer the token to to this contract&#13;
    */&#13;
    function _receiveDonation(address token, uint _amount) internal returns(uint amount) {&#13;
        require(tokenWhitelist[token]);&#13;
        amount = _amount;&#13;
&#13;
        // eth donation&#13;
        if (token == 0) {&#13;
            amount = msg.value;&#13;
        }&#13;
&#13;
        require(amount &gt; 0);&#13;
&#13;
        if (token != 0) {&#13;
            require(ERC20(token).transferFrom(msg.sender, this, amount));&#13;
        }&#13;
    }&#13;
}
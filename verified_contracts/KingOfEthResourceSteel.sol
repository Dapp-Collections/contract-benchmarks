// File: contracts/GodMode.sol

/****************************************************
 *
 * Copyright 2018 BurzNest LLC. All rights reserved.
 *
 * The contents of this file are provided for review
 * and educational purposes ONLY. You MAY NOT use,
 * copy, distribute, or modify this software without
 * explicit written permission from BurzNest LLC.
 *
 ****************************************************/

pragma solidity ^0.4.24;

/// @title God Mode
/// @author Anthony Burzillo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="375542454d775542454d595244431954585a">[email protected]</a>&gt;&#13;
/// @dev This contract provides a basic interface for God&#13;
///  in a contract as well as the ability for God to pause&#13;
///  the contract&#13;
contract GodMode {&#13;
    /// @dev Is the contract paused?&#13;
    bool public isPaused;&#13;
&#13;
    /// @dev God's address&#13;
    address public god;&#13;
&#13;
    /// @dev Only God can run this function&#13;
    modifier onlyGod()&#13;
    {&#13;
        require(god == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This function can only be run while the contract&#13;
    ///  is not paused&#13;
    modifier notPaused()&#13;
    {&#13;
        require(!isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This event is fired when the contract is paused&#13;
    event GodPaused();&#13;
&#13;
    /// @dev This event is fired when the contract is unpaused&#13;
    event GodUnpaused();&#13;
&#13;
    constructor() public&#13;
    {&#13;
        // Make the creator of the contract God&#13;
        god = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev God can change the address of God&#13;
    /// @param _newGod The new address for God&#13;
    function godChangeGod(address _newGod) public onlyGod&#13;
    {&#13;
        god = _newGod;&#13;
    }&#13;
&#13;
    /// @dev God can pause the game&#13;
    function godPause() public onlyGod&#13;
    {&#13;
        isPaused = true;&#13;
&#13;
        emit GodPaused();&#13;
    }&#13;
&#13;
    /// @dev God can unpause the game&#13;
    function godUnpause() public onlyGod&#13;
    {&#13;
        isPaused = false;&#13;
&#13;
        emit GodUnpaused();&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthResourcesInterfaceReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth: Resources Interface Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b7d5c2c5cdf7d5c2c5cdd9d2c4c399d4d8da">[email protected]</a>&gt;&#13;
/// @dev Provides functionality to reference the resource interface contract&#13;
contract KingOfEthResourcesInterfaceReferencer is GodMode {&#13;
    /// @dev The interface contract's address&#13;
    address public interfaceContract;&#13;
&#13;
    /// @dev Only the interface contract can run this function&#13;
    modifier onlyInterfaceContract()&#13;
    {&#13;
        require(interfaceContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can set the realty contract&#13;
    /// @param _interfaceContract The new address&#13;
    function godSetInterfaceContract(address _interfaceContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        interfaceContract = _interfaceContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthResource.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
&#13;
/// @title ERC20Interface&#13;
/// @dev ERC20 token interface contract&#13;
contract ERC20Interface {&#13;
    function totalSupply() public constant returns(uint);&#13;
    function balanceOf(address _tokenOwner) public constant returns(uint balance);&#13;
    function allowance(address _tokenOwner, address _spender) public constant returns(uint remaining);&#13;
    function transfer(address _to, uint _tokens) public returns(bool success);&#13;
    function approve(address _spender, uint _tokens) public returns(bool success);&#13;
    function transferFrom(address _from, address _to, uint _tokens) public returns(bool success);&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint tokens);&#13;
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);&#13;
}&#13;
&#13;
/// @title King of Eth: Resource&#13;
/// @author Anthony Burzillo &lt;b<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7306010933110601091d1600075d101c1e">[email protected]</a>&gt;&#13;
/// @dev Common contract implementation for resources&#13;
contract KingOfEthResource is&#13;
      ERC20Interface&#13;
    , GodMode&#13;
    , KingOfEthResourcesInterfaceReferencer&#13;
{&#13;
    /// @dev Current resource supply&#13;
    uint public resourceSupply;&#13;
&#13;
    /// @dev ERC20 token's decimals&#13;
    uint8 public constant decimals = 0;&#13;
&#13;
    /// @dev mapping of addresses to holdings&#13;
    mapping (address =&gt; uint) holdings;&#13;
&#13;
    /// @dev mapping of addresses to amount of tokens frozen&#13;
    mapping (address =&gt; uint) frozenHoldings;&#13;
&#13;
    /// @dev mapping of addresses to mapping of allowances for an address&#13;
    mapping (address =&gt; mapping (address =&gt; uint)) allowances;&#13;
&#13;
    /// @dev ERC20 total supply&#13;
    /// @return The current total supply of the resource&#13;
    function totalSupply()&#13;
        public&#13;
        constant&#13;
        returns(uint)&#13;
    {&#13;
        return resourceSupply;&#13;
    }&#13;
&#13;
    /// @dev ERC20 balance of address&#13;
    /// @param _tokenOwner The address to look up&#13;
    /// @return The balance of the address&#13;
    function balanceOf(address _tokenOwner)&#13;
        public&#13;
        constant&#13;
        returns(uint balance)&#13;
    {&#13;
        return holdings[_tokenOwner];&#13;
    }&#13;
&#13;
    /// @dev Total resources frozen for an address&#13;
    /// @param _tokenOwner The address to look up&#13;
    /// @return The frozen balance of the address&#13;
    function frozenTokens(address _tokenOwner)&#13;
        public&#13;
        constant&#13;
        returns(uint balance)&#13;
    {&#13;
        return frozenHoldings[_tokenOwner];&#13;
    }&#13;
&#13;
    /// @dev The allowance for a spender on an account&#13;
    /// @param _tokenOwner The account that allows withdrawels&#13;
    /// @param _spender The account that is allowed to withdraw&#13;
    /// @return The amount remaining in the allowance&#13;
    function allowance(address _tokenOwner, address _spender)&#13;
        public&#13;
        constant&#13;
        returns(uint remaining)&#13;
    {&#13;
        return allowances[_tokenOwner][_spender];&#13;
    }&#13;
&#13;
    /// @dev Only run if player has at least some amount of tokens&#13;
    /// @param _owner The owner of the tokens&#13;
    /// @param _tokens The amount of tokens required&#13;
    modifier hasAvailableTokens(address _owner, uint _tokens)&#13;
    {&#13;
        require(holdings[_owner] - frozenHoldings[_owner] &gt;= _tokens);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Only run if player has at least some amount of tokens frozen&#13;
    /// @param _owner The owner of the tokens&#13;
    /// @param _tokens The amount of frozen tokens required&#13;
    modifier hasFrozenTokens(address _owner, uint _tokens)&#13;
    {&#13;
        require(frozenHoldings[_owner] &gt;= _tokens);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Set up the exact same state in each resource&#13;
    constructor() public&#13;
    {&#13;
        // God gets 200 to put on exchange&#13;
        holdings[msg.sender] = 200;&#13;
&#13;
        resourceSupply = 200;&#13;
    }&#13;
&#13;
    /// @dev The resources interface can burn tokens for building&#13;
    ///  roads or houses&#13;
    /// @param _owner The owner of the tokens&#13;
    /// @param _tokens The amount of tokens to burn&#13;
    function interfaceBurnTokens(address _owner, uint _tokens)&#13;
        public&#13;
        onlyInterfaceContract&#13;
        hasAvailableTokens(_owner, _tokens)&#13;
    {&#13;
        holdings[_owner] -= _tokens;&#13;
&#13;
        resourceSupply -= _tokens;&#13;
&#13;
        // Pretend the tokens were sent to 0x0&#13;
        emit Transfer(_owner, 0x0, _tokens);&#13;
    }&#13;
&#13;
    /// @dev The resources interface contract can mint tokens for houses&#13;
    /// @param _owner The owner of the tokens&#13;
    /// @param _tokens The amount of tokens to burn&#13;
    function interfaceMintTokens(address _owner, uint _tokens)&#13;
        public&#13;
        onlyInterfaceContract&#13;
    {&#13;
        holdings[_owner] += _tokens;&#13;
&#13;
        resourceSupply += _tokens;&#13;
&#13;
        // Pretend the tokens were sent from the interface contract&#13;
        emit Transfer(interfaceContract, _owner, _tokens);&#13;
    }&#13;
&#13;
    /// @dev The interface can freeze tokens&#13;
    /// @param _owner The owner of the tokens&#13;
    /// @param _tokens The amount of tokens to freeze&#13;
    function interfaceFreezeTokens(address _owner, uint _tokens)&#13;
        public&#13;
        onlyInterfaceContract&#13;
        hasAvailableTokens(_owner, _tokens)&#13;
    {&#13;
        frozenHoldings[_owner] += _tokens;&#13;
    }&#13;
&#13;
    /// @dev The interface can thaw tokens&#13;
    /// @param _owner The owner of the tokens&#13;
    /// @param _tokens The amount of tokens to thaw&#13;
    function interfaceThawTokens(address _owner, uint _tokens)&#13;
        public&#13;
        onlyInterfaceContract&#13;
        hasFrozenTokens(_owner, _tokens)&#13;
    {&#13;
        frozenHoldings[_owner] -= _tokens;&#13;
    }&#13;
&#13;
    /// @dev The interface can transfer tokens&#13;
    /// @param _from The owner of the tokens&#13;
    /// @param _to The new owner of the tokens&#13;
    /// @param _tokens The amount of tokens to transfer&#13;
    function interfaceTransfer(address _from, address _to, uint _tokens)&#13;
        public&#13;
        onlyInterfaceContract&#13;
    {&#13;
        assert(holdings[_from] &gt;= _tokens);&#13;
&#13;
        holdings[_from] -= _tokens;&#13;
        holdings[_to]   += _tokens;&#13;
&#13;
        emit Transfer(_from, _to, _tokens);&#13;
    }&#13;
&#13;
    /// @dev The interface can transfer frozend tokens&#13;
    /// @param _from The owner of the tokens&#13;
    /// @param _to The new owner of the tokens&#13;
    /// @param _tokens The amount of frozen tokens to transfer&#13;
    function interfaceFrozenTransfer(address _from, address _to, uint _tokens)&#13;
        public&#13;
        onlyInterfaceContract&#13;
        hasFrozenTokens(_from, _tokens)&#13;
    {&#13;
        // Make sure to deduct the tokens from both the total and frozen amounts&#13;
        holdings[_from]       -= _tokens;&#13;
        frozenHoldings[_from] -= _tokens;&#13;
        holdings[_to]         += _tokens;&#13;
&#13;
        emit Transfer(_from, _to, _tokens);&#13;
    }&#13;
&#13;
    /// @dev ERC20 transfer&#13;
    /// @param _to The address to transfer to&#13;
    /// @param _tokens The amount of tokens to transfer&#13;
    function transfer(address _to, uint _tokens)&#13;
        public&#13;
        hasAvailableTokens(msg.sender, _tokens)&#13;
        returns(bool success)&#13;
    {&#13;
        holdings[_to]        += _tokens;&#13;
        holdings[msg.sender] -= _tokens;&#13;
&#13;
        emit Transfer(msg.sender, _to, _tokens);&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev ERC20 approve&#13;
    /// @param _spender The address to approve&#13;
    /// @param _tokens The amount of tokens to approve&#13;
    function approve(address _spender, uint _tokens)&#13;
        public&#13;
        returns(bool success)&#13;
    {&#13;
        allowances[msg.sender][_spender] = _tokens;&#13;
&#13;
        emit Approval(msg.sender, _spender, _tokens);&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev ERC20 transfer from&#13;
    /// @param _from The address providing the allowance&#13;
    /// @param _to The address using the allowance&#13;
    /// @param _tokens The amount of tokens to transfer&#13;
    function transferFrom(address _from, address _to, uint _tokens)&#13;
        public&#13;
        hasAvailableTokens(_from, _tokens)&#13;
        returns(bool success)&#13;
    {&#13;
        require(allowances[_from][_to] &gt;= _tokens);&#13;
&#13;
        holdings[_to]          += _tokens;&#13;
        holdings[_from]        -= _tokens;&#13;
        allowances[_from][_to] -= _tokens;&#13;
&#13;
        emit Transfer(_from, _to, _tokens);&#13;
&#13;
        return true;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/resources/KingOfEthResourceSteel.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth Resource: Steel&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4e2c3b3c340e2c3b3c34202b3d3a602d2123">[email protected]</a>&gt;&#13;
/// @dev ERC20 contract for the steel resource&#13;
contract KingOfEthResourceSteel is KingOfEthResource {&#13;
    /// @dev The ERC20 token name&#13;
    string public constant name = "King of Eth Resource: Steel";&#13;
&#13;
    /// @dev The ERC20 token symbol&#13;
    string public constant symbol = "KEST";&#13;
}
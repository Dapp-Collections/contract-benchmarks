pragma solidity ^0.4.21;

/*
 * Abstract Token Smart Contract.  Copyright © 2017 by Grab A Meal.
 * Author: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b8dbd7d6ccd9dbccf8dfcad9dad9d5ddd9d496cfd7cad4dc">[email protected]</a>&#13;
 */&#13;
&#13;
 &#13;
 /*&#13;
 * Safe Math Smart Contract.  Copyright © 2017 by Grab A Meal.&#13;
 * Author: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="afccc0c1dbceccdbefc8ddcecdcec2cacec381d8c0ddc3cb">[email protected]</a>&#13;
 * https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/math/SafeMath.sol&#13;
 */&#13;
&#13;
contract SafeMath {&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
/**&#13;
 * ERC-20 standard token interface, as defined&#13;
 * &lt;a href="http://github.com/ethereum/EIPs/issues/20"&gt;here&lt;/a&gt;.&#13;
 */&#13;
contract Token {&#13;
  &#13;
  function totalSupply() constant returns (uint256 supply);&#13;
  function balanceOf(address _owner) constant returns (uint256 balance);&#13;
  function transfer(address _to, uint256 _value) returns (bool success);&#13;
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);&#13;
  function approve(address _spender, uint256 _value) returns (bool success);&#13;
  function allowance(address _owner, address _spender) constant returns (uint256 remaining);&#13;
  event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
}&#13;
&#13;
&#13;
&#13;
/**&#13;
 * Abstract Token Smart Contract that could be used as a base contract for&#13;
 * ERC-20 token contracts.&#13;
 */&#13;
contract AbstractToken is Token, SafeMath {&#13;
  /**&#13;
   * Create new Abstract Token contract.&#13;
   */&#13;
  function AbstractToken () {&#13;
    // Do nothing&#13;
  }&#13;
  &#13;
  /**&#13;
   * Get number of tokens currently belonging to given owner.&#13;
   *&#13;
   * @param _owner address to get number of tokens currently belonging to the&#13;
   *        owner of&#13;
   * @return number of tokens currently belonging to the owner of given address&#13;
   */&#13;
  function balanceOf(address _owner) constant returns (uint256 balance) {&#13;
    return accounts [_owner];&#13;
  }&#13;
&#13;
  /**&#13;
   * Transfer given number of tokens from message sender to given recipient.&#13;
   *&#13;
   * @param _to address to transfer tokens to the owner of&#13;
   * @param _value number of tokens to transfer to the owner of given address&#13;
   * @return true if tokens were transferred successfully, false otherwise&#13;
   * accounts [_to] + _value &gt; accounts [_to] for overflow check&#13;
   * which is already in safeMath&#13;
   */&#13;
  function transfer(address _to, uint256 _value) returns (bool success) {&#13;
    require(_to != address(0));&#13;
    if (accounts [msg.sender] &lt; _value) return false;&#13;
    if (_value &gt; 0 &amp;&amp; msg.sender != _to) {&#13;
      accounts [msg.sender] = safeSub (accounts [msg.sender], _value);&#13;
      accounts [_to] = safeAdd (accounts [_to], _value);&#13;
    }&#13;
    Transfer (msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * Transfer given number of tokens from given owner to given recipient.&#13;
   *&#13;
   * @param _from address to transfer tokens from the owner of&#13;
   * @param _to address to transfer tokens to the owner of&#13;
   * @param _value number of tokens to transfer from given owner to given&#13;
   *        recipient&#13;
   * @return true if tokens were transferred successfully, false otherwise&#13;
   * accounts [_to] + _value &gt; accounts [_to] for overflow check&#13;
   * which is already in safeMath&#13;
   */&#13;
  function transferFrom(address _from, address _to, uint256 _value)&#13;
  returns (bool success) {&#13;
    require(_to != address(0));&#13;
    if (allowances [_from][msg.sender] &lt; _value) return false;&#13;
    if (accounts [_from] &lt; _value) return false; &#13;
&#13;
    if (_value &gt; 0 &amp;&amp; _from != _to) {&#13;
	  allowances [_from][msg.sender] = safeSub (allowances [_from][msg.sender], _value);&#13;
      accounts [_from] = safeSub (accounts [_from], _value);&#13;
      accounts [_to] = safeAdd (accounts [_to], _value);&#13;
    }&#13;
    Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * Allow given spender to transfer given number of tokens from message sender.&#13;
   * @param _spender address to allow the owner of to transfer tokens from message sender&#13;
   * @param _value number of tokens to allow to transfer&#13;
   * @return true if token transfer was successfully approved, false otherwise&#13;
   */&#13;
   function approve (address _spender, uint256 _value) returns (bool success) {&#13;
    allowances [msg.sender][_spender] = _value;&#13;
    Approval (msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * Tell how many tokens given spender is currently allowed to transfer from&#13;
   * given owner.&#13;
   *&#13;
   * @param _owner address to get number of tokens allowed to be transferred&#13;
   *        from the owner of&#13;
   * @param _spender address to get number of tokens allowed to be transferred&#13;
   *        by the owner of&#13;
   * @return number of tokens given spender is currently allowed to transfer&#13;
   *         from given owner&#13;
   */&#13;
  function allowance(address _owner, address _spender) constant&#13;
  returns (uint256 remaining) {&#13;
    return allowances [_owner][_spender];&#13;
  }&#13;
&#13;
  /**&#13;
   * Mapping from addresses of token holders to the numbers of tokens belonging&#13;
   * to these token holders.&#13;
   */&#13;
  mapping (address =&gt; uint256) accounts;&#13;
&#13;
  /**&#13;
   * Mapping from addresses of token holders to the mapping of addresses of&#13;
   * spenders to the allowances set by these token holders to these spenders.&#13;
   */&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) private allowances;&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * GAM token smart contract.&#13;
 */&#13;
contract GAMToken is AbstractToken {&#13;
  /**&#13;
   * Maximum allowed number of tokens in circulation.&#13;
   * Total Supply 2000000000 GAM Tokens&#13;
   * 10^^10 is done for decimal places, this is standard practice as all ethers are actually wei in EVM&#13;
   */&#13;
   &#13;
   &#13;
  uint256 constant MAX_TOKEN_COUNT = 2000000000 * (10**10);&#13;
   &#13;
  /**&#13;
   * Address of the owner of this smart contract.&#13;
   */&#13;
  address private owner;&#13;
&#13;
  /**&#13;
   * Current number of tokens in circulation.&#13;
   */&#13;
  uint256 tokenCount = 0;&#13;
  &#13;
 &#13;
  /**&#13;
   * True if tokens transfers are currently frozen, false otherwise.&#13;
   */&#13;
  bool frozen = false;&#13;
  &#13;
  &#13;
  /**&#13;
   * Create new GAM token smart contract and make msg.sender the&#13;
   * owner of this smart contract.&#13;
   */&#13;
  function GAMToken () {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * Get total number of tokens in circulation.&#13;
   *&#13;
   * @return total number of tokens in circulation&#13;
   */&#13;
  function totalSupply() constant returns (uint256 supply) {&#13;
    return tokenCount;&#13;
  }&#13;
&#13;
  string constant public name = "Grab A Meal Token";&#13;
  string constant public symbol = "GAM";&#13;
  uint8 constant public decimals = 10;&#13;
  &#13;
  /**&#13;
   * Transfer given number of tokens from message sender to given recipient.&#13;
   *&#13;
   * @param _to address to transfer tokens to the owner of&#13;
   * @param _value number of tokens to transfer to the owner of given address&#13;
   * @return true if tokens were transferred successfully, false otherwise&#13;
   */&#13;
  function transfer(address _to, uint256 _value) returns (bool success) {&#13;
    if (frozen) return false;&#13;
    else return AbstractToken.transfer (_to, _value);&#13;
  }&#13;
&#13;
  /**&#13;
   * Transfer given number of tokens from given owner to given recipient.&#13;
   *&#13;
   * @param _from address to transfer tokens from the owner of&#13;
   * @param _to address to transfer tokens to the owner of&#13;
   * @param _value number of tokens to transfer from given owner to given&#13;
   *        recipient&#13;
   * @return true if tokens were transferred successfully, false otherwise&#13;
   */&#13;
  function transferFrom(address _from, address _to, uint256 _value)&#13;
    returns (bool success) {&#13;
    if (frozen) return false;&#13;
    else return AbstractToken.transferFrom (_from, _to, _value);&#13;
  }&#13;
&#13;
   /**&#13;
   * Change how many tokens given spender is allowed to transfer from message&#13;
   * spender.  In order to prevent double spending of allowance,&#13;
   * To change the approve amount you first have to reduce the addresses`&#13;
   * allowance to zero by calling `approve(_spender, 0)` if it is not&#13;
   * already 0 to mitigate the race condition described here:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param _spender address to allow the owner of to transfer tokens from&#13;
   *        message sender&#13;
   * @param _value number of tokens to allow to transfer&#13;
   * @return true if token transfer was successfully approved, false otherwise&#13;
   */&#13;
  function approve (address _spender, uint256 _value)&#13;
    returns (bool success) {&#13;
	require(allowance (msg.sender, _spender) == 0 || _value == 0);&#13;
    return AbstractToken.approve (_spender, _value);&#13;
  }&#13;
&#13;
  /**&#13;
   * Create _value new tokens and give new created tokens to msg.sender.&#13;
   * May only be called by smart contract owner.&#13;
   *&#13;
   * @param _value number of tokens to create&#13;
   * @return true if tokens were created successfully, false otherwise&#13;
   */&#13;
  function createTokens(uint256 _value)&#13;
    returns (bool success) {&#13;
    require (msg.sender == owner);&#13;
&#13;
    if (_value &gt; 0) {&#13;
      if (_value &gt; safeSub (MAX_TOKEN_COUNT, tokenCount)) return false;&#13;
	  &#13;
      accounts [msg.sender] = safeAdd (accounts [msg.sender], _value);&#13;
      tokenCount = safeAdd (tokenCount, _value);&#13;
      &#13;
	  &#13;
	  // adding transfer event and _from address as null address&#13;
	  Transfer(0x0, msg.sender, _value);&#13;
	  &#13;
	  return true;&#13;
    }&#13;
	&#13;
	  return false;&#13;
    &#13;
  }&#13;
  &#13;
  &#13;
  /**&#13;
   * For future use only whne we will need more tokens for our main application&#13;
   * Create mintedAmount new tokens and give new created tokens to target.&#13;
   * May only be called by smart contract owner.&#13;
   * @param mintedAmount number of tokens to create&#13;
   * @return true if tokens were created successfully, false otherwise&#13;
   */&#13;
  &#13;
  function mintToken(address target, uint256 mintedAmount) &#13;
  returns (bool success) {&#13;
    require (msg.sender == owner);&#13;
      if (mintedAmount &gt; 0) {&#13;
	  &#13;
      accounts [target] = safeAdd (accounts [target], mintedAmount);&#13;
      tokenCount = safeAdd (tokenCount, mintedAmount);&#13;
	  &#13;
	  // adding transfer event and _from address as null address&#13;
	  Transfer(0x0, target, mintedAmount);&#13;
	  &#13;
	   return true;&#13;
    }&#13;
	  return false;&#13;
   &#13;
    }&#13;
&#13;
  /**&#13;
   * Set new owner for the smart contract.&#13;
   * May only be called by smart contract owner.&#13;
   *&#13;
   * @param _newOwner address of new owner of the smart contract&#13;
   */&#13;
  function setOwner(address _newOwner) {&#13;
    require (msg.sender == owner);&#13;
&#13;
    owner = _newOwner;&#13;
  }&#13;
&#13;
  /**&#13;
   * Freeze token transfers.&#13;
   * May only be called by smart contract owner.&#13;
   */&#13;
  function freezeTransfers () {&#13;
    require (msg.sender == owner);&#13;
&#13;
    if (!frozen) {&#13;
      frozen = true;&#13;
      Freeze ();&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * Unfreeze token transfers.&#13;
   * May only be called by smart contract owner.&#13;
   */&#13;
  function unfreezeTransfers () {&#13;
    require (msg.sender == owner);&#13;
&#13;
    if (frozen) {&#13;
      frozen = false;&#13;
      Unfreeze ();&#13;
    }&#13;
  }&#13;
  &#13;
  /*A user is able to unintentionally send tokens to a contract &#13;
  * and if the contract is not prepared to refund them they will get stuck in the contract. &#13;
  * The same issue used to happen for Ether too but new Solidity versions added the payable modifier to&#13;
  * prevent unintended Ether transfers. However, there’s no such mechanism for token transfers.&#13;
  * so the below function is created&#13;
  */&#13;
  &#13;
  function refundTokens(address _token, address _refund, uint256 _value) {&#13;
    require (msg.sender == owner);&#13;
    require(_token != address(this));&#13;
    AbstractToken token = AbstractToken(_token);&#13;
    token.transfer(_refund, _value);&#13;
    RefundTokens(_token, _refund, _value);&#13;
  }&#13;
&#13;
  /**&#13;
   * Logged when token transfers were frozen.&#13;
   */&#13;
  event Freeze ();&#13;
&#13;
  /**&#13;
   * Logged when token transfers were unfrozen.&#13;
   */&#13;
  event Unfreeze ();&#13;
  &#13;
  /**&#13;
   * when accidentally send other tokens are refunded&#13;
   */&#13;
  &#13;
  event RefundTokens(address _token, address _refund, uint256 _value);&#13;
}
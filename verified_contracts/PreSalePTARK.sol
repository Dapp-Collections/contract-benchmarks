// Tarka Pre-Sale token smart contract.
// Developed by Phenom.Team <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8ce5e2eae3ccfce4e9e2e3e1a2f8e9ede1">[emailÂ protected]</a>&gt;&#13;
&#13;
pragma solidity ^0.4.15;&#13;
&#13;
&#13;
/**&#13;
 *   @title SafeMath&#13;
 *   @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
    function mul(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
        uint256 c = a * b;&#13;
        assert(a == 0 || c / a == b);&#13;
        return c;&#13;
    }&#13;
&#13;
    function div(uint256 a, uint256 b) internal constant returns(uint256) {&#13;
        assert(b &gt; 0);&#13;
        uint256 c = a / b;&#13;
        assert(a == b * c + a % b);&#13;
        return c;&#13;
    }&#13;
&#13;
    function sub(uint256 a, uint256 b) internal constant returns(uint256) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
    }&#13;
&#13;
    function add(uint256 a, uint256 b) internal constant returns(uint256) {&#13;
        uint256 c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
}&#13;
&#13;
contract PreSalePTARK {&#13;
    using SafeMath for uint256;&#13;
    //Owner address&#13;
    address public owner;&#13;
    //Public variables of the token&#13;
    string public name  = "Tarka Pre-Sale Token";&#13;
    string public symbol = "PTARK";&#13;
    uint8 public decimals = 18;&#13;
    uint256 public totalSupply = 0;&#13;
    mapping (address =&gt; uint256) public balances;&#13;
    // Events Log&#13;
    event Transfer(address _from, address _to, uint256 amount); &#13;
    event Burned(address _from, uint256 amount);&#13;
    // Modifiers&#13;
    // Allows execution by the contract owner only&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }  &#13;
&#13;
   /**&#13;
    *   @dev Contract constructor function sets owner address&#13;
    */&#13;
    function PreSalePTARK() {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Allows owner to transfer ownership of contract&#13;
    *   @param _newOwner      newOwner address&#13;
    */&#13;
    function transferOwnership(address _newOwner) external onlyOwner {&#13;
        require(_newOwner != address(0));&#13;
        owner = _newOwner;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Get balance of investor&#13;
    *   @param _investor     investor's address&#13;
    *   @return              balance of investor&#13;
    */&#13;
    function balanceOf(address _investor) public constant returns(uint256) {&#13;
        return balances[_investor];&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Mint tokens&#13;
    *   @param _investor     beneficiary address the tokens will be issued to&#13;
    *   @param _mintedAmount number of tokens to issue&#13;
    */&#13;
    function mintTokens(address _investor, uint256 _mintedAmount) external onlyOwner {&#13;
        require(_mintedAmount &gt; 0);&#13;
        balances[_investor] = balances[_investor].add(_mintedAmount);&#13;
        totalSupply = totalSupply.add(_mintedAmount);&#13;
        Transfer(this, _investor, _mintedAmount);&#13;
        &#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Burn Tokens&#13;
    *   @param _investor     token holder address which the tokens will be burnt&#13;
    */&#13;
    function burnTokens(address _investor) external onlyOwner {   &#13;
        require(balances[_investor] &gt; 0);&#13;
        uint256 tokens = balances[_investor];&#13;
        balances[_investor] = 0;&#13;
        totalSupply = totalSupply.sub(tokens);&#13;
        Burned(_investor, tokens);&#13;
    }&#13;
}
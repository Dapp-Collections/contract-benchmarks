pragma solidity ^0.4.18;

// ----------------------------------------------------------------------------------------------
// Gifto Token by Gifto Limited.
// An ERC20 standard
//
// author: Gifto Team
// Contact: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b7d3d6c3c0dfd9d0c2ced2d9f7d0dad6dedb99d4d8da">[emailÂ protected]</a>&#13;
&#13;
contract ERC20Interface {&#13;
    // Get the total token supply&#13;
    function totalSupply() public constant returns (uint256 _totalSupply);&#13;
 &#13;
    // Get the account balance of another account with address _owner&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance);&#13;
 &#13;
    // Send _value amount of tokens to address _to&#13;
    function transfer(address _to, uint256 _value) public returns (bool success);&#13;
  &#13;
    // Triggered when tokens are transferred.&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
 &#13;
    // Triggered whenever approve(address _spender, uint256 _value) is called.&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
}&#13;
 &#13;
contract Gifto is ERC20Interface {&#13;
    uint public constant decimals = 5;&#13;
&#13;
    string public constant symbol = "Gifto";&#13;
    string public constant name = "Gifto";&#13;
&#13;
    bool public _selling = false;//initial not selling&#13;
    uint public _totalSupply = 10 ** 14; // total supply is 10^14 unit, equivalent to 10^9 Gifto&#13;
    uint public _originalBuyPrice = 10 ** 10; // original buy in wei of one unit. Ajustable.&#13;
&#13;
    // Owner of this contract&#13;
    address public owner;&#13;
 &#13;
    // Balances Gifto for each account&#13;
    mapping(address =&gt; uint256) balances;&#13;
&#13;
    // List of approved investors&#13;
    mapping(address =&gt; bool) approvedInvestorList;&#13;
    &#13;
    // mapping Deposit&#13;
    mapping(address =&gt; uint256) deposit;&#13;
    &#13;
    // buyers buy token deposit&#13;
    address[] buyers;&#13;
    &#13;
    // icoPercent&#13;
    uint _icoPercent = 10;&#13;
    &#13;
    // _icoSupply is the avalable unit. Initially, it is _totalSupply&#13;
    uint public _icoSupply = _totalSupply * _icoPercent / 100;&#13;
    &#13;
    // minimum buy 0.1 ETH&#13;
    uint public _minimumBuy = 10 ** 17;&#13;
    &#13;
    // maximum buy 30 ETH&#13;
    uint public _maximumBuy = 30 * 10 ** 18;&#13;
    &#13;
    /**&#13;
     * Functions with this modifier can only be executed by the owner&#13;
     */&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier can only be executed by users except owners&#13;
     */&#13;
    modifier onlyNotOwner() {&#13;
        require(msg.sender != owner);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier check on sale status&#13;
     * Only allow sale if _selling is on&#13;
     */&#13;
    modifier onSale() {&#13;
        require(_selling &amp;&amp; (_icoSupply &gt; 0) );&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * Functions with this modifier check the validity of original buy price&#13;
     */&#13;
    modifier validOriginalBuyPrice() {&#13;
        require(_originalBuyPrice &gt; 0);&#13;
        _;&#13;
    }&#13;
    &#13;
    /**&#13;
     * Functions with this modifier check the validity of address is investor&#13;
     */&#13;
    modifier validInvestor() {&#13;
        require(approvedInvestorList[msg.sender]);&#13;
        _;&#13;
    }&#13;
    &#13;
    /**&#13;
     * Functions with this modifier check the validity of msg value&#13;
     * value must greater than equal minimumBuyPrice&#13;
     * total deposit must less than equal maximumBuyPrice&#13;
     */&#13;
    modifier validValue(){&#13;
        // if value &lt; _minimumBuy OR total deposit of msg.sender &gt; maximumBuyPrice&#13;
        require ( (msg.value &gt;= _minimumBuy) &amp;&amp;&#13;
                ( (deposit[msg.sender] + msg.value) &lt;= _maximumBuy) );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Fallback function allows to buy ether.&#13;
    function()&#13;
        public&#13;
        payable&#13;
        validValue {&#13;
        // check the first buy =&gt; push to Array&#13;
        if (deposit[msg.sender] == 0 &amp;&amp; msg.value != 0){&#13;
            // add new buyer to List&#13;
            buyers.push(msg.sender);&#13;
        }&#13;
        // increase amount deposit of buyer&#13;
        deposit[msg.sender] += msg.value;&#13;
    }&#13;
&#13;
    /// @dev Constructor&#13;
    function Gifto() &#13;
        public {&#13;
        owner = msg.sender;&#13;
        balances[owner] = _totalSupply;&#13;
        Transfer(0x0, owner, _totalSupply);&#13;
    }&#13;
    &#13;
    /// @dev Gets totalSupply&#13;
    /// @return Total supply&#13;
    function totalSupply()&#13;
        public &#13;
        constant &#13;
        returns (uint256) {&#13;
        return _totalSupply;&#13;
    }&#13;
    &#13;
    /// @dev set new icoPercent&#13;
    /// @param newIcoPercent new value of icoPercent&#13;
    function setIcoPercent(uint256 newIcoPercent)&#13;
        public &#13;
        onlyOwner&#13;
        returns (bool){&#13;
        _icoPercent = newIcoPercent;&#13;
        _icoSupply = _totalSupply * _icoPercent / 100;&#13;
    }&#13;
    &#13;
    /// @dev set new _minimumBuy&#13;
    /// @param newMinimumBuy new value of _minimumBuy&#13;
    function setMinimumBuy(uint256 newMinimumBuy)&#13;
        public &#13;
        onlyOwner&#13;
        returns (bool){&#13;
        _minimumBuy = newMinimumBuy;&#13;
    }&#13;
    &#13;
    /// @dev set new _maximumBuy&#13;
    /// @param newMaximumBuy new value of _maximumBuy&#13;
    function setMaximumBuy(uint256 newMaximumBuy)&#13;
        public &#13;
        onlyOwner&#13;
        returns (bool){&#13;
        _maximumBuy = newMaximumBuy;&#13;
    }&#13;
 &#13;
    /// @dev Gets account's balance&#13;
    /// @param _addr Address of the account&#13;
    /// @return Account balance&#13;
    function balanceOf(address _addr) &#13;
        public&#13;
        constant &#13;
        returns (uint256) {&#13;
        return balances[_addr];&#13;
    }&#13;
    &#13;
    /// @dev check address is approved investor&#13;
    /// @param _addr address&#13;
    function isApprovedInvestor(address _addr)&#13;
        public&#13;
        constant&#13;
        returns (bool) {&#13;
        return approvedInvestorList[_addr];&#13;
    }&#13;
    &#13;
    /// @dev filter buyers in list buyers&#13;
    /// @param isInvestor type buyers, is investor or not&#13;
    function filterBuyers(bool isInvestor)&#13;
        private&#13;
        constant&#13;
        returns(address[] filterList){&#13;
        address[] memory filterTmp = new address[](buyers.length);&#13;
        uint count = 0;&#13;
        for (uint i = 0; i &lt; buyers.length; i++){&#13;
            if(approvedInvestorList[buyers[i]] == isInvestor){&#13;
                filterTmp[count] = buyers[i];&#13;
                count++;&#13;
            }&#13;
        }&#13;
        &#13;
        filterList = new address[](count);&#13;
        for (i = 0; i &lt; count; i++){&#13;
            if(filterTmp[i] != 0x0){&#13;
                filterList[i] = filterTmp[i];&#13;
            }&#13;
        }&#13;
    }&#13;
    &#13;
    /// @dev filter buyers are investor in list deposited&#13;
    function getInvestorBuyers()&#13;
        public&#13;
        constant&#13;
        returns(address[]){&#13;
        return filterBuyers(true);&#13;
    }&#13;
    &#13;
    /// @dev filter normal Buyers in list buyer deposited&#13;
    function getNormalBuyers()&#13;
        public&#13;
        constant&#13;
        returns(address[]){&#13;
        return filterBuyers(false);&#13;
    }&#13;
    &#13;
    /// @dev get ETH deposit&#13;
    /// @param _addr address get deposit&#13;
    /// @return amount deposit of an buyer&#13;
    function getDeposit(address _addr)&#13;
        public&#13;
        constant&#13;
        returns(uint256){&#13;
        return deposit[_addr];&#13;
    }&#13;
    &#13;
    /// @dev get total deposit of buyers&#13;
    /// @return amount ETH deposit&#13;
    function getTotalDeposit()&#13;
        public&#13;
        constant&#13;
        returns(uint256 totalDeposit){&#13;
        totalDeposit = 0;&#13;
        for (uint i = 0; i &lt; buyers.length; i++){&#13;
            totalDeposit += deposit[buyers[i]];&#13;
        }&#13;
    }&#13;
    &#13;
    /// @dev delivery token for buyer&#13;
    /// @param isInvestor transfer token for investor or not&#13;
    ///         true: investors&#13;
    ///         false: not investors&#13;
    function deliveryToken(bool isInvestor)&#13;
        public&#13;
        onlyOwner&#13;
        validOriginalBuyPrice {&#13;
        //sumary deposit of investors&#13;
        uint256 sum = 0;&#13;
        &#13;
        for (uint i = 0; i &lt; buyers.length; i++){&#13;
            if(approvedInvestorList[buyers[i]] == isInvestor) {&#13;
                &#13;
                // compute amount token of each buyer&#13;
                uint256 requestedUnits = deposit[buyers[i]] / _originalBuyPrice;&#13;
                &#13;
                //check requestedUnits &gt; _icoSupply&#13;
                if(requestedUnits &lt;= _icoSupply &amp;&amp; requestedUnits &gt; 0 ){&#13;
                    // prepare transfer data&#13;
                    // NOTE: make sure balances owner greater than _icoSupply&#13;
                    balances[owner] -= requestedUnits;&#13;
                    balances[buyers[i]] += requestedUnits;&#13;
                    _icoSupply -= requestedUnits;&#13;
                    &#13;
                    // submit transfer&#13;
                    Transfer(owner, buyers[i], requestedUnits);&#13;
                    &#13;
                    // reset deposit of buyer&#13;
                    sum += deposit[buyers[i]];&#13;
                    deposit[buyers[i]] = 0;&#13;
                }&#13;
            }&#13;
        }&#13;
        //transfer total ETH of investors to owner&#13;
        owner.transfer(sum);&#13;
    }&#13;
    &#13;
    /// @dev return ETH for normal buyers&#13;
    function returnETHforNormalBuyers()&#13;
        public&#13;
        onlyOwner{&#13;
        for(uint i = 0; i &lt; buyers.length; i++){&#13;
            // buyer not approve investor&#13;
            if (!approvedInvestorList[buyers[i]]) {&#13;
                // get deposit of buyer&#13;
                uint256 buyerDeposit = deposit[buyers[i]];&#13;
                // reset deposit of buyer&#13;
                deposit[buyers[i]] = 0;&#13;
                // return deposit amount for buyer&#13;
                buyers[i].transfer(buyerDeposit);&#13;
            }&#13;
        }&#13;
    }&#13;
 &#13;
    /// @dev Transfers the balance from Multisig wallet to an account&#13;
    /// @param _to Recipient address&#13;
    /// @param _amount Transfered amount in unit&#13;
    /// @return Transfer status&#13;
    function transfer(address _to, uint256 _amount)&#13;
        public &#13;
        returns (bool) {&#13;
        // if sender's balance has enough unit and amount &gt;= 0, &#13;
        //      and the sum is not overflow,&#13;
        // then do transfer &#13;
        if ( (balances[msg.sender] &gt;= _amount) &amp;&amp;&#13;
             (_amount &gt;= 0) &amp;&amp; &#13;
             (balances[_to] + _amount &gt; balances[_to]) ) {  &#13;
&#13;
            balances[msg.sender] -= _amount;&#13;
            balances[_to] += _amount;&#13;
            Transfer(msg.sender, _to, _amount);&#13;
            &#13;
            return true;&#13;
&#13;
        } else {&#13;
            revert();&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Enables sale &#13;
    function turnOnSale() onlyOwner &#13;
        public {&#13;
        _selling = true;&#13;
    }&#13;
&#13;
    /// @dev Disables sale&#13;
    function turnOffSale() onlyOwner &#13;
        public {&#13;
        _selling = false;&#13;
    }&#13;
&#13;
    /// @dev Gets selling status&#13;
    function isSellingNow() &#13;
        public &#13;
        constant&#13;
        returns (bool) {&#13;
        return _selling;&#13;
    }&#13;
&#13;
    /// @dev Updates buy price (owner ONLY)&#13;
    /// @param newBuyPrice New buy price (in unit)&#13;
    function setBuyPrice(uint newBuyPrice) &#13;
        onlyOwner &#13;
        public {&#13;
        _originalBuyPrice = newBuyPrice;&#13;
    }&#13;
&#13;
    /// @dev Adds list of new investors to the investors list and approve all&#13;
    /// @param newInvestorList Array of new investors addresses to be added&#13;
    function addInvestorList(address[] newInvestorList)&#13;
        onlyOwner&#13;
        public {&#13;
        for (uint i = 0; i &lt; newInvestorList.length; i++){&#13;
            approvedInvestorList[newInvestorList[i]] = true;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Removes list of investors from list&#13;
    /// @param investorList Array of addresses of investors to be removed&#13;
    function removeInvestorList(address[] investorList)&#13;
        onlyOwner&#13;
        public {&#13;
        for (uint i = 0; i &lt; investorList.length; i++){&#13;
            approvedInvestorList[investorList[i]] = false;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Buys Gifto&#13;
    /// @return Amount of requested units &#13;
    function buy() payable&#13;
        onlyNotOwner &#13;
        validOriginalBuyPrice&#13;
        validInvestor&#13;
        onSale &#13;
        public&#13;
        returns (uint256 amount) {&#13;
        // convert buy amount in wei to number of unit want to buy&#13;
        uint requestedUnits = msg.value / _originalBuyPrice ;&#13;
        &#13;
        //check requestedUnits &lt;= _icoSupply&#13;
        require(requestedUnits &lt;= _icoSupply);&#13;
&#13;
        // prepare transfer data&#13;
        balances[owner] -= requestedUnits;&#13;
        balances[msg.sender] += requestedUnits;&#13;
        &#13;
        // decrease _icoSupply&#13;
        _icoSupply -= requestedUnits;&#13;
&#13;
        // submit transfer&#13;
        Transfer(owner, msg.sender, requestedUnits);&#13;
&#13;
        //transfer ETH to owner&#13;
        owner.transfer(msg.value);&#13;
        &#13;
        return requestedUnits;&#13;
    }&#13;
    &#13;
    /// @dev Withdraws Ether in contract (Owner only)&#13;
    /// @return Status of withdrawal&#13;
    function withdraw() onlyOwner &#13;
        public &#13;
        returns (bool) {&#13;
        return owner.send(this.balance);&#13;
    }&#13;
}
pragma solidity ^0.4.13;

 /*
 * This is the smart contract for the Fornicoin token.
 * More information can be found on our website at: https://fornicoin.network
 * Created by the Fornicoin Team <<span class="__cf_email__" data-cfemail="1e777078715e78716c70777d71777030707b6a69716c75">[email protected]</span>&gt;&#13;
 */&#13;
&#13;
/**&#13;
 * @title ERC20Basic&#13;
 * @dev Simpler version of ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/179&#13;
 */&#13;
contract ERC20Basic {&#13;
  uint256 public totalSupply;&#13;
  function balanceOf(address who) public constant returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    uint256 c = a * b;&#13;
    assert(a == 0 || c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Basic token&#13;
 * @dev Basic version of StandardToken, with no allowances.&#13;
 */&#13;
contract BasicToken is ERC20Basic {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  /**&#13;
  * @dev transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
&#13;
    // SafeMath.sub will throw if there is not enough balance.&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    Transfer(msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) public constant returns (uint256 balance) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender) public constant returns (uint256);&#13;
  function transferFrom(address from, address to, uint256 value) public returns (bool);&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title Standard ERC20 token&#13;
 *&#13;
 * @dev Implementation of the basic standard token.&#13;
 * @dev https://github.com/ethereum/EIPs/issues/20&#13;
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol&#13;
 */&#13;
contract StandardToken is ERC20, BasicToken {&#13;
    &#13;
     mapping (address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    &#13;
    var _allowance = allowed[_from][msg.sender];&#13;
&#13;
    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met&#13;
    // require (_value &lt;= _allowance);&#13;
&#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    allowed[_from][msg.sender] = _allowance.sub(_value);&#13;
    Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
  &#13;
    /**&#13;
   * @dev Aprove the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address _spender, uint256 _value) returns (bool) {&#13;
&#13;
    // To change the approve amount you first have to reduce the addresses`&#13;
    //  allowance to zero by calling `approve(_spender, 0)` if it is not&#13;
    //  already 0 to mitigate the race condition described here:&#13;
    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
    require((_value == 0) || (allowed[msg.sender][_spender] == 0));&#13;
&#13;
    allowed[msg.sender][_spender] = _value;&#13;
    Approval(msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifing the amount of tokens still avaible for the spender.&#13;
   */&#13;
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {&#13;
    return allowed[_owner][_spender];&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  function Ownable() {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
 /*&#13;
 * This is the smart contract for the Fornicoin token.&#13;
 * More information can be found on our website at: https://fornicoin.network&#13;
 * Created by the Fornicoin Team &lt;<span class="__cf_email__" data-cfemail="ff96919990bf99908d91969c909691d1919a8b88908d94">[email protected]</span>&gt;&#13;
 */&#13;
&#13;
contract FornicoinToken is StandardToken, Ownable {&#13;
  using SafeMath for uint256;&#13;
&#13;
  string public constant name = "Fornicoin";&#13;
  string public constant symbol = "FXX";&#13;
  uint8 public constant decimals = 18;&#13;
&#13;
  // 100 000 000 Fornicoin tokens created&#13;
  uint256 public constant MAX_SUPPLY = 100000000 * (10 ** uint256(decimals));&#13;
  &#13;
  // admin address for team functions&#13;
  address public admin;&#13;
  uint256 public teamTokens = 25000000 * (10 ** 18);&#13;
  &#13;
  // Top up gas balance&#13;
  uint256 public minBalanceForTxFee = 55000 * 3 * 10 ** 9 wei; // == 55000 gas @ 3 gwei&#13;
  // 800 FXX per ETH as the gas generation price&#13;
  uint256 public sellPrice = 800; &#13;
  &#13;
  event Refill(uint256 amount);&#13;
  &#13;
  modifier onlyAdmin() {&#13;
    require(msg.sender == admin);&#13;
    _;&#13;
  }&#13;
&#13;
  function FornicoinToken(address _admin) {&#13;
    totalSupply = teamTokens;&#13;
    balances[msg.sender] = MAX_SUPPLY;&#13;
    admin =_admin;&#13;
  }&#13;
  &#13;
  function setSellPrice(uint256 _price) public onlyAdmin {&#13;
      require(_price &gt;= 0);&#13;
      // FXX can only become stronger&#13;
      require(_price &lt;= sellPrice);&#13;
      &#13;
      sellPrice = _price;&#13;
  }&#13;
  &#13;
  // Update state of contract showing tokens bought&#13;
  function updateTotalSupply(uint256 additions) onlyOwner {&#13;
      require(totalSupply.add(additions) &lt;= MAX_SUPPLY);&#13;
      totalSupply += additions;&#13;
  }&#13;
  &#13;
  function setMinTxFee(uint256 _balance) public onlyAdmin {&#13;
      require(_balance &gt;= 0);&#13;
      // can only add more eth&#13;
      require(_balance &gt; minBalanceForTxFee);&#13;
      &#13;
      minBalanceForTxFee = _balance;&#13;
  }&#13;
  &#13;
  function refillTxFeeMinimum() public payable onlyAdmin {&#13;
      Refill(msg.value);&#13;
  }&#13;
  &#13;
  // Transfers FXX tokens to another address&#13;
  // Utilises transaction fee obfuscation&#13;
  function transfer(address _to, uint _value) public returns (bool) {&#13;
        // Prevent transfer to 0x0 address&#13;
        require (_to != 0x0);&#13;
        // Check for overflows &#13;
        require (balanceOf(_to) + _value &gt; balanceOf(_to));&#13;
        // Determine if account has necessary funding for another tx&#13;
        if(msg.sender.balance &lt; minBalanceForTxFee &amp;&amp; &#13;
        balances[msg.sender].sub(_value) &gt;= minBalanceForTxFee * sellPrice &amp;&amp; &#13;
        this.balance &gt;= minBalanceForTxFee){&#13;
            sellFXX((minBalanceForTxFee.sub(msg.sender.balance)) *                                 &#13;
                             sellPrice);&#13;
    	        }&#13;
        // Subtract from the sender&#13;
        balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
        // Add the same to the recipient                   &#13;
        balances[_to] = balances[_to].add(_value); &#13;
        // Send out Transfer event to notify all parties&#13;
        Transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    // Sells the amount of FXX to refill the senders ETH balance for another transaction&#13;
    function sellFXX(uint amount) internal returns (uint revenue){&#13;
        // checks if the sender has enough to sell&#13;
        require(balanceOf(msg.sender) &gt;= amount);  &#13;
        // adds the amount to owner's balance       &#13;
        balances[admin] = balances[admin].add(amount);          &#13;
        // subtracts the amount from seller's balance              &#13;
        balances[msg.sender] = balances[msg.sender].sub(amount);   &#13;
        // Determines amount of ether to send to the seller &#13;
        revenue = amount / sellPrice;&#13;
        msg.sender.transfer(revenue);&#13;
        // executes an event reflecting on the change&#13;
        Transfer(msg.sender, this, amount); &#13;
        // ends function and returns              &#13;
        return revenue;                                   &#13;
    }&#13;
}
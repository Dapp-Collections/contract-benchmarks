pragma solidity ^0.4.18;

// @authors:
// Davy Van Roy <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cbafaabdb2e5bdaaa5e5b9a4b28baca6aaa2a7e5a8a4a6">[email protected]</a>&gt;&#13;
// Quinten De Swaef &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="98e9edf1f6ecfdf6b6fcfdb6ebeff9fdfed8fff5f9f1f4b6fbf7f5">[email protected]</a>&gt;&#13;
&#13;
contract ApproveAndCallFallBack {&#13;
  function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;&#13;
}&#13;
&#13;
/// @dev `Owned` is a base level contract that assigns an `owner` that can be&#13;
///  later changed&#13;
contract Owned {&#13;
    /// @dev `owner` is the only address that can call a function with this&#13;
    /// modifier&#13;
    modifier onlyOwner { require (msg.sender == owner); _; }&#13;
&#13;
    address public owner;&#13;
&#13;
    /// @notice The Constructor assigns the message sender to be `owner`&#13;
    function Owned() public { owner = msg.sender;}&#13;
&#13;
    /// @notice `owner` can step down and assign some other address to this role&#13;
    /// @param _newOwner The address of the new owner. 0x0 can be used to create&#13;
    ///  an unowned neutral vault, however that cannot be undone&#13;
    function changeOwner(address _newOwner) public onlyOwner {&#13;
        owner = _newOwner;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a * b;&#13;
    assert(a == 0 || c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
contract Controlled {&#13;
    /// @notice The address of the controller is the only address that can call&#13;
    ///  a function with this modifier&#13;
    modifier onlyController { require(msg.sender == controller); _; }&#13;
&#13;
    address public controller;&#13;
&#13;
    function Controlled() public { controller = msg.sender;}&#13;
&#13;
    /// @notice Changes the controller of the contract&#13;
    /// @param _newController The new controller of the contract&#13;
    function changeController(address _newController) public onlyController {&#13;
        controller = _newController;&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @dev The token controller contract must implement these functions&#13;
contract TokenController {&#13;
    /// @notice Called when `_owner` sends ether to the MiniMe Token contract&#13;
    /// @param _owner The address that sent the ether to create tokens&#13;
    /// @return True if the ether is accepted, false if it throws&#13;
    function proxyPayment(address _owner) public payable returns(bool);&#13;
&#13;
    /// @notice Notifies the controller about a token transfer allowing the&#13;
    ///  controller to react if desired&#13;
    /// @param _from The origin of the transfer&#13;
    /// @param _to The destination of the transfer&#13;
    /// @param _amount The amount of the transfer&#13;
    /// @return False if the controller does not authorize the transfer&#13;
    function onTransfer(address _from, address _to, uint _amount) public returns(bool);&#13;
&#13;
    /// @notice Notifies the controller about an approval allowing the&#13;
    ///  controller to react if desired&#13;
    /// @param _owner The address that calls `approve()`&#13;
    /// @param _spender The spender in the `approve()` call&#13;
    /// @param _amount The amount in the `approve()` call&#13;
    /// @return False if the controller does not authorize the approval&#13;
    function onApprove(address _owner, address _spender, uint _amount)&#13;
    public&#13;
    returns(bool);&#13;
}&#13;
&#13;
/// @dev This contract is used to generate clone contracts from a contract.&#13;
///  In solidity this is the way to create a contract from a contract of the&#13;
///  same class&#13;
contract MiniMeTokenFactory {&#13;
&#13;
    /// @notice Update the DApp by creating a new token with new functionalities&#13;
    ///  the msg.sender becomes the controller of this clone token&#13;
    /// @param _parentToken Address of the token being cloned&#13;
    /// @param _snapshotBlock Block of the parent token that will&#13;
    ///  determine the initial distribution of the clone token&#13;
    /// @param _tokenName Name of the new token&#13;
    /// @param _decimalUnits Number of decimals of the new token&#13;
    /// @param _tokenSymbol Token Symbol for the new token&#13;
    /// @param _transfersEnabled If true, tokens will be able to be transferred&#13;
    /// @return The address of the new token contract&#13;
    function createCloneToken(&#13;
    address _parentToken,&#13;
    uint _snapshotBlock,&#13;
    string _tokenName,&#13;
    uint8 _decimalUnits,&#13;
    string _tokenSymbol,&#13;
    bool _transfersEnabled&#13;
    ) public returns (MiniMeToken)&#13;
    {&#13;
        MiniMeToken newToken = new MiniMeToken(&#13;
        this,&#13;
        _parentToken,&#13;
        _snapshotBlock,&#13;
        _tokenName,&#13;
        _decimalUnits,&#13;
        _tokenSymbol,&#13;
        _transfersEnabled&#13;
        );&#13;
&#13;
        newToken.changeController(msg.sender);&#13;
        return newToken;&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title MiniMeToken Contract&#13;
/// @author Jordi Baylina&#13;
/// @dev This token contract's goal is to make it easy for anyone to clone this&#13;
///  token using the token distribution at a given block, this will allow DAO's&#13;
///  and DApps to upgrade their features in a decentralized manner without&#13;
///  affecting the original token&#13;
/// @dev It is ERC20 compliant, but still needs to under go further testing.&#13;
/// @dev The actual token contract, the default controller is the msg.sender&#13;
///  that deploys the contract, so usually this token will be deployed by a&#13;
///  token controller contract, which Giveth will call a "Campaign"&#13;
contract MiniMeToken is Controlled {&#13;
&#13;
    string public name;                //The Token's name: e.g. DigixDAO Tokens&#13;
    uint8 public decimals;             //Number of decimals of the smallest unit&#13;
    string public symbol;              //An identifier: e.g. REP&#13;
    string public version = "1.0.0";&#13;
&#13;
    /// @dev `Checkpoint` is the structure that attaches a block number to a&#13;
    ///  given value, the block number attached is the one that last changed the&#13;
    ///  value&#13;
    struct Checkpoint {&#13;
&#13;
    // `fromBlock` is the block number that the value was generated from&#13;
    uint128 fromBlock;&#13;
&#13;
    // `value` is the amount of tokens at a specific block number&#13;
    uint128 value;&#13;
    }&#13;
&#13;
    // `parentToken` is the Token address that was cloned to produce this token;&#13;
    //  it will be 0x0 for a token that was not cloned&#13;
    MiniMeToken public parentToken;&#13;
&#13;
    // `parentSnapShotBlock` is the block number from the Parent Token that was&#13;
    //  used to determine the initial distribution of the Clone Token&#13;
    uint public parentSnapShotBlock;&#13;
&#13;
    // `creationBlock` is the block number that the Clone Token was created&#13;
    uint public creationBlock;&#13;
&#13;
    // `balances` is the map that tracks the balance of each address, in this&#13;
    //  contract when the balance changes the block number that the change&#13;
    //  occurred is also included in the map&#13;
    mapping (address =&gt; Checkpoint[]) balances;&#13;
&#13;
    // `allowed` tracks any extra transfer rights as in all ERC20 tokens&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
&#13;
    // Tracks the history of the `totalSupply` of the token&#13;
    Checkpoint[] totalSupplyHistory;&#13;
&#13;
    // Flag that determines if the token is transferable or not.&#13;
    bool public transfersEnabled;&#13;
&#13;
    // The factory used to create new clone tokens&#13;
    MiniMeTokenFactory public tokenFactory;&#13;
&#13;
    ////////////////&#13;
    // Constructor&#13;
    ////////////////&#13;
&#13;
    /// @notice Constructor to create a MiniMeToken&#13;
    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that&#13;
    ///  will create the Clone token contracts, the token factory needs to be&#13;
    ///  deployed first&#13;
    /// @param _parentToken Address of the parent token, set to 0x0 if it is a&#13;
    ///  new token&#13;
    /// @param _parentSnapShotBlock Block of the parent token that will&#13;
    ///  determine the initial distribution of the clone token, set to 0 if it&#13;
    ///  is a new token&#13;
    /// @param _tokenName Name of the new token&#13;
    /// @param _decimalUnits Number of decimals of the new token&#13;
    /// @param _tokenSymbol Token Symbol for the new token&#13;
    /// @param _transfersEnabled If true, tokens will be able to be transferred&#13;
    function MiniMeToken(&#13;
    address _tokenFactory,&#13;
    address _parentToken,&#13;
    uint _parentSnapShotBlock,&#13;
    string _tokenName,&#13;
    uint8 _decimalUnits,&#13;
    string _tokenSymbol,&#13;
    bool _transfersEnabled&#13;
    ) public&#13;
    {&#13;
        tokenFactory = MiniMeTokenFactory(_tokenFactory);&#13;
        name = _tokenName;                                 // Set the name&#13;
        decimals = _decimalUnits;                          // Set the decimals&#13;
        symbol = _tokenSymbol;                             // Set the symbol&#13;
        parentToken = MiniMeToken(_parentToken);&#13;
        parentSnapShotBlock = _parentSnapShotBlock;&#13;
        transfersEnabled = _transfersEnabled;&#13;
        creationBlock = block.number;&#13;
    }&#13;
&#13;
&#13;
    ///////////////////&#13;
    // ERC20 Methods&#13;
    ///////////////////&#13;
&#13;
    /// @notice Send `_amount` tokens to `_to` from `msg.sender`&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return Whether the transfer was successful or not&#13;
    function transfer(address _to, uint256 _amount) public returns (bool success) {&#13;
        require(transfersEnabled);&#13;
        return doTransfer(msg.sender, _to, _amount);&#13;
    }&#13;
&#13;
    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it&#13;
    ///  is approved by `_from`&#13;
    /// @param _from The address holding the tokens being transferred&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return True if the transfer was successful&#13;
    function transferFrom(address _from, address _to, uint256 _amount)&#13;
    public returns (bool success)&#13;
    {&#13;
        // The controller of this contract can move tokens around at will,&#13;
        //  this is important to recognize! Confirm that you trust the&#13;
        //  controller of this contract, which in most situations should be&#13;
        //  another open source smart contract or 0x0&#13;
        if (msg.sender != controller) {&#13;
            require(transfersEnabled);&#13;
&#13;
            // The standard ERC 20 transferFrom functionality&#13;
            if (allowed[_from][msg.sender] &lt; _amount) {&#13;
                return false;&#13;
            }&#13;
            allowed[_from][msg.sender] -= _amount;&#13;
        }&#13;
        return doTransfer(_from, _to, _amount);&#13;
    }&#13;
&#13;
    /// @dev This is the actual transfer function in the token contract, it can&#13;
    ///  only be called by other functions in this contract.&#13;
    /// @param _from The address holding the tokens being transferred&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return True if the transfer was successful&#13;
    function doTransfer(address _from, address _to, uint _amount&#13;
    ) internal returns(bool)&#13;
    {&#13;
&#13;
        if (_amount == 0) {&#13;
            return true;&#13;
        }&#13;
&#13;
        require(parentSnapShotBlock &lt; block.number);&#13;
&#13;
        // Do not allow transfer to 0x0 or the token contract itself&#13;
        require((_to != 0) &amp;&amp; (_to != address(this)));&#13;
&#13;
        // If the amount being transfered is more than the balance of the&#13;
        //  account the transfer returns false&#13;
        var previousBalanceFrom = balanceOfAt(_from, block.number);&#13;
        if (previousBalanceFrom &lt; _amount) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // Alerts the token controller of the transfer&#13;
        if (isContract(controller)) {&#13;
            require(TokenController(controller).onTransfer(_from, _to, _amount));&#13;
        }&#13;
&#13;
        // First update the balance array with the new value for the address&#13;
        //  sending the tokens&#13;
        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);&#13;
&#13;
        // Then update the balance array with the new value for the address&#13;
        //  receiving the tokens&#13;
        var previousBalanceTo = balanceOfAt(_to, block.number);&#13;
        require(previousBalanceTo + _amount &gt;= previousBalanceTo); // Check for overflow&#13;
        updateValueAtNow(balances[_to], previousBalanceTo + _amount);&#13;
&#13;
        // An event to make the transfer easy to find on the blockchain&#13;
        Transfer(_from, _to, _amount);&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @param _owner The address that's balance is being requested&#13;
    /// @return The balance of `_owner` at the current block&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance) {&#13;
        return balanceOfAt(_owner, block.number);&#13;
    }&#13;
&#13;
    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on&#13;
    ///  its behalf. This is a modified version of the ERC20 approve function&#13;
    ///  to be a little bit safer&#13;
    /// @param _spender The address of the account able to transfer the tokens&#13;
    /// @param _amount The amount of tokens to be approved for transfer&#13;
    /// @return True if the approval was successful&#13;
    function approve(address _spender, uint256 _amount) public returns (bool success) {&#13;
        require(transfersEnabled);&#13;
&#13;
        // To change the approve amount you first have to reduce the addresses`&#13;
        //  allowance to zero by calling `approve(_spender,0)` if it is not&#13;
        //  already 0 to mitigate the race condition described here:&#13;
        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));&#13;
        return doApprove(_spender, _amount);&#13;
    }&#13;
&#13;
    function doApprove(address _spender, uint256 _amount) internal returns (bool success) {&#13;
        require(transfersEnabled);&#13;
        if (isContract(controller)) {&#13;
            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));&#13;
        }&#13;
        allowed[msg.sender][_spender] = _amount;&#13;
        Approval(msg.sender, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev This function makes it easy to read the `allowed[]` map&#13;
    /// @param _owner The address of the account that owns the token&#13;
    /// @param _spender The address of the account able to transfer the tokens&#13;
    /// @return Amount of remaining tokens of _owner that _spender is allowed&#13;
    ///  to spend&#13;
    function allowance(address _owner, address _spender&#13;
    ) public constant returns (uint256 remaining)&#13;
    {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on&#13;
    ///  its behalf, and then a function is triggered in the contract that is&#13;
    ///  being approved, `_spender`. This allows users to use their tokens to&#13;
    ///  interact with contracts in one function call instead of two&#13;
    /// @param _spender The address of the contract able to transfer the tokens&#13;
    /// @param _amount The amount of tokens to be approved for transfer&#13;
    /// @return True if the function call was successful&#13;
    function approveAndCall(address _spender, uint256 _amount, bytes _extraData&#13;
    ) public returns (bool success)&#13;
    {&#13;
        require(approve(_spender, _amount));&#13;
&#13;
        ApproveAndCallFallBack(_spender).receiveApproval(&#13;
        msg.sender,&#13;
        _amount,&#13;
        this,&#13;
        _extraData&#13;
        );&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev This function makes it easy to get the total number of tokens&#13;
    /// @return The total number of tokens&#13;
    function totalSupply() public constant returns (uint) {&#13;
        return totalSupplyAt(block.number);&#13;
    }&#13;
&#13;
&#13;
    ////////////////&#13;
    // Query balance and totalSupply in History&#13;
    ////////////////&#13;
&#13;
    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`&#13;
    /// @param _owner The address from which the balance will be retrieved&#13;
    /// @param _blockNumber The block number when the balance is queried&#13;
    /// @return The balance at `_blockNumber`&#13;
    function balanceOfAt(address _owner, uint _blockNumber) public constant&#13;
    returns (uint)&#13;
    {&#13;
        // These next few lines are used when the balance of the token is&#13;
        //  requested before a check point was ever created for this token, it&#13;
        //  requires that the `parentToken.balanceOfAt` be queried at the&#13;
        //  genesis block for that token as this contains initial balance of&#13;
        //  this token&#13;
        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock &gt; _blockNumber)) {&#13;
            if (address(parentToken) != 0) {&#13;
                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));&#13;
            } else {&#13;
                // Has no parent&#13;
                return 0;&#13;
            }&#13;
&#13;
            // This will return the expected balance during normal situations&#13;
        } else {&#13;
            return getValueAt(balances[_owner], _blockNumber);&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Total amount of tokens at a specific `_blockNumber`.&#13;
    /// @param _blockNumber The block number when the totalSupply is queried&#13;
    /// @return The total amount of tokens at `_blockNumber`&#13;
    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {&#13;
&#13;
        // These next few lines are used when the totalSupply of the token is&#13;
        //  requested before a check point was ever created for this token, it&#13;
        //  requires that the `parentToken.totalSupplyAt` be queried at the&#13;
        //  genesis block for this token as that contains totalSupply of this&#13;
        //  token at this block number.&#13;
        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock &gt; _blockNumber)) {&#13;
            if (address(parentToken) != 0) {&#13;
                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));&#13;
            } else {&#13;
                return 0;&#13;
            }&#13;
&#13;
            // This will return the expected totalSupply during normal situations&#13;
        } else {&#13;
            return getValueAt(totalSupplyHistory, _blockNumber);&#13;
        }&#13;
    }&#13;
&#13;
    ////////////////&#13;
    // Clone Token Method&#13;
    ////////////////&#13;
&#13;
    /// @notice Creates a new clone token with the initial distribution being&#13;
    ///  this token at `_snapshotBlock`&#13;
    /// @param _cloneTokenName Name of the clone token&#13;
    /// @param _cloneDecimalUnits Number of decimals of the smallest unit&#13;
    /// @param _cloneTokenSymbol Symbol of the clone token&#13;
    /// @param _snapshotBlock Block when the distribution of the parent token is&#13;
    ///  copied to set the initial distribution of the new clone token;&#13;
    ///  if the block is zero than the actual block, the current block is used&#13;
    /// @param _transfersEnabled True if transfers are allowed in the clone&#13;
    /// @return The address of the new MiniMeToken Contract&#13;
    function createCloneToken(&#13;
    string _cloneTokenName,&#13;
    uint8 _cloneDecimalUnits,&#13;
    string _cloneTokenSymbol,&#13;
    uint _snapshotBlock,&#13;
    bool _transfersEnabled&#13;
    ) public returns(address)&#13;
    {&#13;
        if (_snapshotBlock == 0) {&#13;
            _snapshotBlock = block.number;&#13;
        }&#13;
&#13;
        MiniMeToken cloneToken = tokenFactory.createCloneToken(&#13;
        this,&#13;
        _snapshotBlock,&#13;
        _cloneTokenName,&#13;
        _cloneDecimalUnits,&#13;
        _cloneTokenSymbol,&#13;
        _transfersEnabled&#13;
        );&#13;
&#13;
        cloneToken.changeController(msg.sender);&#13;
&#13;
        // An event to make the token easy to find on the blockchain&#13;
        NewCloneToken(address(cloneToken), _snapshotBlock);&#13;
        return address(cloneToken);&#13;
    }&#13;
&#13;
    ////////////////&#13;
    // Generate and destroy tokens&#13;
    ////////////////&#13;
&#13;
    /// @notice Generates `_amount` tokens that are assigned to `_owner`&#13;
    /// @param _owner The address that will be assigned the new tokens&#13;
    /// @param _amount The quantity of tokens generated&#13;
    /// @return True if the tokens are generated correctly&#13;
    function generateTokens(address _owner, uint _amount)&#13;
    public onlyController returns (bool)&#13;
    {&#13;
        uint curTotalSupply = totalSupply();&#13;
        require(curTotalSupply + _amount &gt;= curTotalSupply); // Check for overflow&#13;
        uint previousBalanceTo = balanceOf(_owner);&#13;
        require(previousBalanceTo + _amount &gt;= previousBalanceTo); // Check for overflow&#13;
        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);&#13;
        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);&#13;
        Transfer(0, _owner, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    /// @notice Burns `_amount` tokens from `_owner`&#13;
    /// @param _owner The address that will lose the tokens&#13;
    /// @param _amount The quantity of tokens to burn&#13;
    /// @return True if the tokens are burned correctly&#13;
    function destroyTokens(address _owner, uint _amount&#13;
    ) onlyController public returns (bool)&#13;
    {&#13;
        uint curTotalSupply = totalSupply();&#13;
        require(curTotalSupply &gt;= _amount);&#13;
        uint previousBalanceFrom = balanceOf(_owner);&#13;
        require(previousBalanceFrom &gt;= _amount);&#13;
        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);&#13;
        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);&#13;
        Transfer(_owner, 0, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    ////////////////&#13;
    // Enable tokens transfers&#13;
    ////////////////&#13;
&#13;
&#13;
    /// @notice Enables token holders to transfer their tokens freely if true&#13;
    /// @param _transfersEnabled True if transfers are allowed in the clone&#13;
    function enableTransfers(bool _transfersEnabled) public onlyController {&#13;
        transfersEnabled = _transfersEnabled;&#13;
    }&#13;
&#13;
    ////////////////&#13;
    // Internal helper functions to query and set a value in a snapshot array&#13;
    ////////////////&#13;
&#13;
    /// @dev `getValueAt` retrieves the number of tokens at a given block number&#13;
    /// @param checkpoints The history of values being queried&#13;
    /// @param _block The block number to retrieve the value at&#13;
    /// @return The number of tokens being queried&#13;
    function getValueAt(Checkpoint[] storage checkpoints, uint _block)&#13;
    constant internal returns (uint)&#13;
    {&#13;
        if (checkpoints.length == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        // Shortcut for the actual value&#13;
        if (_block &gt;= checkpoints[checkpoints.length-1].fromBlock) {&#13;
            return checkpoints[checkpoints.length-1].value;&#13;
        }&#13;
&#13;
        if (_block &lt; checkpoints[0].fromBlock) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        // Binary search of the value in the array&#13;
        uint min = 0;&#13;
        uint max = checkpoints.length - 1;&#13;
        while (max &gt; min) {&#13;
            uint mid = (max + min + 1) / 2;&#13;
            if (checkpoints[mid].fromBlock&lt;=_block) {&#13;
                min = mid;&#13;
            } else {&#13;
                max = mid-1;&#13;
            }&#13;
        }&#13;
        return checkpoints[min].value;&#13;
    }&#13;
&#13;
    /// @dev `updateValueAtNow` used to update the `balances` map and the&#13;
    ///  `totalSupplyHistory`&#13;
    /// @param checkpoints The history of data being updated&#13;
    /// @param _value The new number of tokens&#13;
    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value&#13;
    ) internal&#13;
    {&#13;
        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length-1].fromBlock &lt; block.number)) {&#13;
            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];&#13;
            newCheckPoint.fromBlock = uint128(block.number);&#13;
            newCheckPoint.value = uint128(_value);&#13;
        } else {&#13;
            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];&#13;
            oldCheckPoint.value = uint128(_value);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Internal function to determine if an address is a contract&#13;
    /// @param _addr The address being queried&#13;
    /// @return True if `_addr` is a contract&#13;
    function isContract(address _addr) constant internal returns(bool) {&#13;
        uint size;&#13;
        if (_addr == 0) {&#13;
            return false;&#13;
        }&#13;
        assembly {&#13;
        size := extcodesize(_addr)&#13;
        }&#13;
        return size&gt;0;&#13;
    }&#13;
&#13;
    /// @dev Helper function to return a min betwen the two uints&#13;
    function min(uint a, uint b) pure internal returns (uint) {&#13;
        return a &lt; b ? a : b;&#13;
    }&#13;
&#13;
    /// @notice The fallback function: If the contract's controller has not been&#13;
    ///  set to 0, then the `proxyPayment` method is called which relays the&#13;
    ///  ether and creates tokens as described in the token controller contract&#13;
    function () public payable {&#13;
        require(isContract(controller));&#13;
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));&#13;
    }&#13;
&#13;
    //////////&#13;
    // Safety Methods&#13;
    //////////&#13;
&#13;
    /// @notice This method can be used by the controller to extract mistakenly&#13;
    ///  sent tokens to this contract.&#13;
    /// @param _token The address of the token contract that you want to recover&#13;
    ///  set to 0 in case you want to extract ether.&#13;
    function claimTokens(address _token) public onlyController {&#13;
        if (_token == 0x0) {&#13;
            controller.transfer(this.balance);&#13;
            return;&#13;
        }&#13;
&#13;
        MiniMeToken token = MiniMeToken(_token);&#13;
        uint balance = token.balanceOf(this);&#13;
        token.transfer(controller, balance);&#13;
        ClaimedTokens(_token, controller, balance);&#13;
    }&#13;
&#13;
    ////////////////&#13;
    // Events&#13;
    ////////////////&#13;
    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _amount);&#13;
    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);&#13;
    event Approval(&#13;
    address indexed _owner,&#13;
    address indexed _spender,&#13;
    uint256 _amount&#13;
    );&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
// FundRequest Token&#13;
//&#13;
// @authors:&#13;
// Davy Van Roy &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4e2a2f383760382f20603c21370e29232f2722602d2123">[email protected]</a>&gt;&#13;
// Quinten De Swaef &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="512024383f25343f7f35347f222630343711363c30383d7f323e3c">[email protected]</a>&gt;&#13;
//&#13;
// Security audit performed by LeastAuthority:&#13;
// https://github.com/FundRequest/audit-reports/raw/master/2018-02-06 - Least Authority - ICO Contracts Audit Report.pdf&#13;
&#13;
contract FundRequestToken is MiniMeToken {&#13;
&#13;
  function FundRequestToken(&#13;
    address _tokenFactory,&#13;
    address _parentToken, &#13;
    uint _parentSnapShotBlock, &#13;
    string _tokenName, &#13;
    uint8 _decimalUnits, &#13;
    string _tokenSymbol, &#13;
    bool _transfersEnabled) &#13;
    public &#13;
    MiniMeToken(&#13;
      _tokenFactory,&#13;
      _parentToken, &#13;
      _parentSnapShotBlock, &#13;
      _tokenName, &#13;
      _decimalUnits, &#13;
      _tokenSymbol, &#13;
      _transfersEnabled) &#13;
  {&#13;
    //constructor&#13;
  }&#13;
&#13;
  function safeApprove(address _spender, uint256 _currentValue, uint256 _amount) public returns (bool success) {&#13;
    require(allowed[msg.sender][_spender] == _currentValue);&#13;
    return doApprove(_spender, _amount);&#13;
  }&#13;
&#13;
  function isFundRequestToken() public pure returns (bool) {&#13;
    return true;&#13;
  }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/*&#13;
 * Database Contract&#13;
 * Davy Van Roy&#13;
 * Quinten De Swaef&#13;
 */&#13;
contract FundRepository is Owned {&#13;
&#13;
    using SafeMath for uint256;&#13;
&#13;
    uint256 public totalNumberOfFunders;&#13;
&#13;
    mapping (address =&gt; uint256) funders;&#13;
&#13;
    uint256 public totalFunded;&#13;
&#13;
    uint256 public requestsFunded;&#13;
&#13;
    uint256 public totalBalance;&#13;
&#13;
    mapping (bytes32 =&gt; mapping (string =&gt; Funding)) funds;&#13;
&#13;
    mapping(address =&gt; bool) public callers;&#13;
&#13;
    struct Funding {&#13;
        address[] funders;&#13;
        mapping (address =&gt; uint256) balances;&#13;
        uint256 totalBalance;&#13;
    }&#13;
&#13;
    //modifiers&#13;
    modifier onlyCaller {&#13;
        require(callers[msg.sender]);&#13;
        _;&#13;
    }&#13;
&#13;
    function FundRepository() {&#13;
        //constructor&#13;
    }&#13;
&#13;
    function updateFunders(address _from, bytes32 _platform, string _platformId, uint256 _value) public onlyCaller {&#13;
        bool existing = funds[_platform][_platformId].balances[_from] &gt; 0;&#13;
        if (!existing) {&#13;
            funds[_platform][_platformId].funders.push(_from);&#13;
        }&#13;
        if (funders[_from] &lt;= 0) {&#13;
            totalNumberOfFunders = totalNumberOfFunders.add(1);&#13;
            funders[_from].add(_value);&#13;
        }&#13;
    }&#13;
&#13;
    function updateBalances(address _from, bytes32 _platform, string _platformId, uint256 _value) public onlyCaller {&#13;
        if (funds[_platform][_platformId].totalBalance &lt;= 0) {&#13;
            requestsFunded = requestsFunded.add(1);&#13;
        }&#13;
        funds[_platform][_platformId].balances[_from] = funds[_platform][_platformId].balances[_from].add(_value);&#13;
        funds[_platform][_platformId].totalBalance = funds[_platform][_platformId].totalBalance.add(_value);&#13;
        totalBalance = totalBalance.add(_value);&#13;
        totalFunded = totalFunded.add(_value);&#13;
    }&#13;
&#13;
    function resolveFund(bytes32 platform, string platformId) public onlyCaller returns (uint) {&#13;
        var funding = funds[platform][platformId];&#13;
        var requestBalance = funding.totalBalance;&#13;
        totalBalance = totalBalance.sub(requestBalance);&#13;
        for (uint i = 0; i &lt; funding.funders.length; i++) {&#13;
            var funder = funding.funders[i];&#13;
            delete (funding.balances[funder]);&#13;
        }&#13;
        delete (funds[platform][platformId]);&#13;
        return requestBalance;&#13;
    }&#13;
&#13;
    //constants&#13;
&#13;
    function getFundInfo(bytes32 _platform, string _platformId, address _funder) public view returns (uint256, uint256, uint256) {&#13;
        return (&#13;
        getFunderCount(_platform, _platformId),&#13;
        balance(_platform, _platformId),&#13;
        amountFunded(_platform, _platformId, _funder)&#13;
        );&#13;
    }&#13;
&#13;
    function getFunderCount(bytes32 _platform, string _platformId) public view returns (uint){&#13;
        return funds[_platform][_platformId].funders.length;&#13;
    }&#13;
&#13;
    function amountFunded(bytes32 _platform, string _platformId, address _funder) public view returns (uint256){&#13;
        return funds[_platform][_platformId].balances[_funder];&#13;
    }&#13;
&#13;
    function balance(bytes32 _platform, string _platformId) view public returns (uint256) {&#13;
        return funds[_platform][_platformId].totalBalance;&#13;
    }&#13;
&#13;
    //management of the repositories&#13;
    function updateCaller(address _caller, bool allowed) public onlyOwner {&#13;
        callers[_caller] = allowed;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
contract ClaimRepository is Owned {&#13;
    using SafeMath for uint256;&#13;
&#13;
    mapping (bytes32 =&gt; mapping (string =&gt; Claim)) claims;&#13;
&#13;
    mapping(address =&gt; bool) public callers;&#13;
&#13;
    uint256 public totalBalanceClaimed;&#13;
    uint256 public totalClaims;&#13;
&#13;
&#13;
    //modifiers&#13;
    modifier onlyCaller {&#13;
        require(callers[msg.sender]);&#13;
        _;&#13;
    }&#13;
&#13;
    struct Claim {&#13;
        address solverAddress;&#13;
        string solver;&#13;
        uint256 requestBalance;&#13;
    }&#13;
&#13;
    function ClaimRepository() {&#13;
        //constructor&#13;
    }&#13;
&#13;
    function addClaim(address _solverAddress, bytes32 _platform, string _platformId, string _solver, uint256 _requestBalance) public onlyCaller returns (bool) {&#13;
        claims[_platform][_platformId].solver = _solver;&#13;
        claims[_platform][_platformId].solverAddress = _solverAddress;&#13;
        claims[_platform][_platformId].requestBalance = _requestBalance;&#13;
        totalBalanceClaimed = totalBalanceClaimed.add(_requestBalance);&#13;
        totalClaims = totalClaims.add(1);&#13;
        return true;&#13;
    }&#13;
&#13;
    //management of the repositories&#13;
    function updateCaller(address _caller, bool allowed) public onlyOwner {&#13;
        callers[_caller] = allowed;&#13;
    }&#13;
}&#13;
&#13;
/*&#13;
 * @title String &amp; slice utility library for Solidity contracts.&#13;
 * @author Nick Johnson &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="78190a191b1016111c3816170c1c170c56161d0c">[email protected]</a>&gt;&#13;
 *&#13;
 * @dev Functionality in this library is largely implemented using an&#13;
 *      abstraction called a 'slice'. A slice represents a part of a string -&#13;
 *      anything from the entire string to a single character, or even no&#13;
 *      characters at all (a 0-length slice). Since a slice only has to specify&#13;
 *      an offset and a length, copying and manipulating slices is a lot less&#13;
 *      expensive than copying and manipulating the strings they reference.&#13;
 *&#13;
 *      To further reduce gas costs, most functions on slice that need to return&#13;
 *      a slice modify the original one instead of allocating a new one; for&#13;
 *      instance, `s.split(".")` will return the text up to the first '.',&#13;
 *      modifying s to only contain the remainder of the string after the '.'.&#13;
 *      In situations where you do not want to modify the original slice, you&#13;
 *      can make a copy first with `.copy()`, for example:&#13;
 *      `s.copy().split(".")`. Try and avoid using this idiom in loops; since&#13;
 *      Solidity has no memory management, it will result in allocating many&#13;
 *      short-lived slices that are later discarded.&#13;
 *&#13;
 *      Functions that return two slices come in two versions: a non-allocating&#13;
 *      version that takes the second slice as an argument, modifying it in&#13;
 *      place, and an allocating version that allocates and returns the second&#13;
 *      slice; see `nextRune` for example.&#13;
 *&#13;
 *      Functions that have to copy string data will return strings rather than&#13;
 *      slices; these can be cast back to slices for further processing if&#13;
 *      required.&#13;
 *&#13;
 *      For convenience, some functions are provided with non-modifying&#13;
 *      variants that create a new slice and return both; for instance,&#13;
 *      `s.splitNew('.')` leaves s unmodified, and returns two values&#13;
 *      corresponding to the left and right parts of the string.&#13;
 */&#13;
&#13;
&#13;
&#13;
&#13;
library strings {&#13;
    struct slice {&#13;
    uint _len;&#13;
    uint _ptr;&#13;
    }&#13;
&#13;
    function memcpy(uint dest, uint src, uint len) private {&#13;
        // Copy word-length chunks while possible&#13;
        for (; len &gt;= 32; len -= 32) {&#13;
            assembly {&#13;
            mstore(dest, mload(src))&#13;
            }&#13;
            dest += 32;&#13;
            src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint mask = 256 ** (32 - len) - 1;&#13;
        assembly {&#13;
        let srcpart := and(mload(src), not(mask))&#13;
        let destpart := and(mload(dest), mask)&#13;
        mstore(dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire string.&#13;
     * @param self The string to make a slice from.&#13;
     * @return A newly allocated slice containing the entire string.&#13;
     */&#13;
    function toSlice(string self) internal returns (slice) {&#13;
        uint ptr;&#13;
        assembly {&#13;
        ptr := add(self, 0x20)&#13;
        }&#13;
        return slice(bytes(self).length, ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length of a null-terminated bytes32 string.&#13;
     * @param self The value to find the length of.&#13;
     * @return The length of the string, from 0 to 32.&#13;
     */&#13;
    function len(bytes32 self) internal returns (uint) {&#13;
        uint ret;&#13;
        if (self == 0)&#13;
        return 0;&#13;
        if (self &amp; 0xffffffffffffffffffffffffffffffff == 0) {&#13;
            ret += 16;&#13;
            self = bytes32(uint(self) / 0x100000000000000000000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffffffffffff == 0) {&#13;
            ret += 8;&#13;
            self = bytes32(uint(self) / 0x10000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffff == 0) {&#13;
            ret += 4;&#13;
            self = bytes32(uint(self) / 0x100000000);&#13;
        }&#13;
        if (self &amp; 0xffff == 0) {&#13;
            ret += 2;&#13;
            self = bytes32(uint(self) / 0x10000);&#13;
        }&#13;
        if (self &amp; 0xff == 0) {&#13;
            ret += 1;&#13;
        }&#13;
        return 32 - ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire bytes32, interpreted as a&#13;
     *      null-termintaed utf-8 string.&#13;
     * @param self The bytes32 value to convert to a slice.&#13;
     * @return A new slice containing the value of the input argument up to the&#13;
     *         first null.&#13;
     */&#13;
    function toSliceB32(bytes32 self) internal returns (slice ret) {&#13;
        // Allocate space for `self` in memory, copy it there, and point ret at it&#13;
        assembly {&#13;
        let ptr := mload(0x40)&#13;
        mstore(0x40, add(ptr, 0x20))&#13;
        mstore(ptr, self)&#13;
        mstore(add(ret, 0x20), ptr)&#13;
        }&#13;
        ret._len = len(self);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a new slice containing the same data as the current slice.&#13;
     * @param self The slice to copy.&#13;
     * @return A new slice containing the same data as `self`.&#13;
     */&#13;
    function copy(slice self) internal returns (slice) {&#13;
        return slice(self._len, self._ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Copies a slice to a new string.&#13;
     * @param self The slice to copy.&#13;
     * @return A newly allocated string containing the slice's text.&#13;
     */&#13;
    function toString(slice self) internal returns (string) {&#13;
        var ret = new string(self._len);&#13;
        uint retptr;&#13;
        assembly {retptr := add(ret, 32)}&#13;
&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length in runes of the slice. Note that this operation&#13;
     *      takes time proportional to the length of the slice; avoid using it&#13;
     *      in loops, and call `slice.empty()` if you only need to know whether&#13;
     *      the slice is empty or not.&#13;
     * @param self The slice to operate on.&#13;
     * @return The length of the slice in runes.&#13;
     */&#13;
    function len(slice self) internal returns (uint l) {&#13;
        // Starting at ptr-31 means the LSB will be the byte we care about&#13;
        var ptr = self._ptr - 31;&#13;
        var end = ptr + self._len;&#13;
        for (l = 0; ptr &lt; end; l++) {&#13;
            uint8 b;&#13;
            assembly {b := and(mload(ptr), 0xFF)}&#13;
            if (b &lt; 0x80) {&#13;
                ptr += 1;&#13;
            }&#13;
            else if (b &lt; 0xE0) {&#13;
                ptr += 2;&#13;
            }&#13;
            else if (b &lt; 0xF0) {&#13;
                ptr += 3;&#13;
            }&#13;
            else if (b &lt; 0xF8) {&#13;
                ptr += 4;&#13;
            }&#13;
            else if (b &lt; 0xFC) {&#13;
                ptr += 5;&#13;
            }&#13;
            else {&#13;
                ptr += 6;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice is empty (has a length of 0).&#13;
     * @param self The slice to operate on.&#13;
     * @return True if the slice is empty, False otherwise.&#13;
     */&#13;
    function empty(slice self) internal returns (bool) {&#13;
        return self._len == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a positive number if `other` comes lexicographically after&#13;
     *      `self`, a negative number if it comes before, or zero if the&#13;
     *      contents of the two slices are equal. Comparison is done per-rune,&#13;
     *      on unicode codepoints.&#13;
     * @param self The first slice to compare.&#13;
     * @param other The second slice to compare.&#13;
     * @return The result of the comparison.&#13;
     */&#13;
    function compare(slice self, slice other) internal returns (int) {&#13;
        uint shortest = self._len;&#13;
        if (other._len &lt; self._len)&#13;
        shortest = other._len;&#13;
&#13;
        var selfptr = self._ptr;&#13;
        var otherptr = other._ptr;&#13;
        for (uint idx = 0; idx &lt; shortest; idx += 32) {&#13;
            uint a;&#13;
            uint b;&#13;
            assembly {&#13;
            a := mload(selfptr)&#13;
            b := mload(otherptr)&#13;
            }&#13;
            if (a != b) {&#13;
                // Mask out irrelevant bytes and check again&#13;
                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);&#13;
                var diff = (a &amp; mask) - (b &amp; mask);&#13;
                if (diff != 0)&#13;
                return int(diff);&#13;
            }&#13;
            selfptr += 32;&#13;
            otherptr += 32;&#13;
        }&#13;
        return int(self._len) - int(other._len);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the two slices contain the same text.&#13;
     * @param self The first slice to compare.&#13;
     * @param self The second slice to compare.&#13;
     * @return True if the slices are equal, false otherwise.&#13;
     */&#13;
    function equals(slice self, slice other) internal returns (bool) {&#13;
        return compare(self, other) == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Extracts the first rune in the slice into `rune`, advancing the&#13;
     *      slice to point to the next rune and returning `self`.&#13;
     * @param self The slice to operate on.&#13;
     * @param rune The slice that will contain the first rune.&#13;
     * @return `rune`.&#13;
     */&#13;
    function nextRune(slice self, slice rune) internal returns (slice) {&#13;
        rune._ptr = self._ptr;&#13;
&#13;
        if (self._len == 0) {&#13;
            rune._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        uint len;&#13;
        uint b;&#13;
        // Load the first byte of the rune into the LSBs of b&#13;
        assembly {b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF)}&#13;
        if (b &lt; 0x80) {&#13;
            len = 1;&#13;
        }&#13;
        else if (b &lt; 0xE0) {&#13;
            len = 2;&#13;
        }&#13;
        else if (b &lt; 0xF0) {&#13;
            len = 3;&#13;
        }&#13;
        else {&#13;
            len = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (len &gt; self._len) {&#13;
            rune._len = self._len;&#13;
            self._ptr += self._len;&#13;
            self._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        self._ptr += len;&#13;
        self._len -= len;&#13;
        rune._len = len;&#13;
        return rune;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the first rune in the slice, advancing the slice to point&#13;
     *      to the next rune.&#13;
     * @param self The slice to operate on.&#13;
     * @return A slice containing only the first rune from `self`.&#13;
     */&#13;
    function nextRune(slice self) internal returns (slice ret) {&#13;
        nextRune(self, ret);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the number of the first codepoint in the slice.&#13;
     * @param self The slice to operate on.&#13;
     * @return The number of the first codepoint in the slice.&#13;
     */&#13;
    function ord(slice self) internal returns (uint ret) {&#13;
        if (self._len == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        uint word;&#13;
        uint length;&#13;
        uint divisor = 2 ** 248;&#13;
&#13;
        // Load the rune into the MSBs of b&#13;
        assembly {word := mload(mload(add(self, 32)))}&#13;
        var b = word / divisor;&#13;
        if (b &lt; 0x80) {&#13;
            ret = b;&#13;
            length = 1;&#13;
        }&#13;
        else if (b &lt; 0xE0) {&#13;
            ret = b &amp; 0x1F;&#13;
            length = 2;&#13;
        }&#13;
        else if (b &lt; 0xF0) {&#13;
            ret = b &amp; 0x0F;&#13;
            length = 3;&#13;
        }&#13;
        else {&#13;
            ret = b &amp; 0x07;&#13;
            length = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (length &gt; self._len) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        for (uint i = 1; i &lt; length; i++) {&#13;
            divisor = divisor / 256;&#13;
            b = (word / divisor) &amp; 0xFF;&#13;
            if (b &amp; 0xC0 != 0x80) {&#13;
                // Invalid UTF-8 sequence&#13;
                return 0;&#13;
            }&#13;
            ret = (ret * 64) | (b &amp; 0x3F);&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the keccak-256 hash of the slice.&#13;
     * @param self The slice to hash.&#13;
     * @return The hash of the slice.&#13;
     */&#13;
    function keccak(slice self) internal returns (bytes32 ret) {&#13;
        assembly {&#13;
        ret := keccak256(mload(add(self, 32)), mload(self))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if `self` starts with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function startsWith(slice self, slice needle) internal returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (self._ptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
        let length := mload(needle)&#13;
        let selfptr := mload(add(self, 0x20))&#13;
        let needleptr := mload(add(needle, 0x20))&#13;
        equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
        }&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` starts with `needle`, `needle` is removed from the&#13;
     *      beginning of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function beyond(slice self, slice needle) internal returns (slice) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        bool equal = true;&#13;
        if (self._ptr != needle._ptr) {&#13;
            assembly {&#13;
            let length := mload(needle)&#13;
            let selfptr := mload(add(self, 0x20))&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(sha3(selfptr, length), sha3(needleptr, length))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
            self._ptr += needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice ends with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function endsWith(slice self, slice needle) internal returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        var selfptr = self._ptr + self._len - needle._len;&#13;
&#13;
        if (selfptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
        let length := mload(needle)&#13;
        let needleptr := mload(add(needle, 0x20))&#13;
        equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
        }&#13;
&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` ends with `needle`, `needle` is removed from the&#13;
     *      end of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function until(slice self, slice needle) internal returns (slice) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        var selfptr = self._ptr + self._len - needle._len;&#13;
        bool equal = true;&#13;
        if (selfptr != needle._ptr) {&#13;
            assembly {&#13;
            let length := mload(needle)&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte of the first occurrence of&#13;
    // `needle` in `self`, or the first byte after `self` if not found.&#13;
    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {&#13;
        uint ptr;&#13;
        uint idx;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                // Optimized assembly for 68 gas per byte on short strings&#13;
                assembly {&#13;
                let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))&#13;
                let needledata := and(mload(needleptr), mask)&#13;
                let end := add(selfptr, sub(selflen, needlelen))&#13;
                ptr := selfptr&#13;
                loop :&#13;
                jumpi(exit, eq(and(mload(ptr), mask), needledata))&#13;
                ptr := add(ptr, 1)&#13;
                jumpi(loop, lt(sub(ptr, 1), end))&#13;
                ptr := add(selfptr, selflen)&#13;
                exit :&#13;
                }&#13;
                return ptr;&#13;
            }&#13;
            else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly {hash := sha3(needleptr, needlelen)}&#13;
                ptr = selfptr;&#13;
                for (idx = 0; idx &lt;= selflen - needlelen; idx++) {&#13;
                    bytes32 testHash;&#13;
                    assembly {testHash := sha3(ptr, needlelen)}&#13;
                    if (hash == testHash)&#13;
                    return ptr;&#13;
                    ptr += 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr + selflen;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte after the last occurrence of&#13;
    // `needle` in `self`, or the address of `self` if not found.&#13;
    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {&#13;
        uint ptr;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                // Optimized assembly for 69 gas per byte on short strings&#13;
                assembly {&#13;
                let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))&#13;
                let needledata := and(mload(needleptr), mask)&#13;
                ptr := add(selfptr, sub(selflen, needlelen))&#13;
                loop :&#13;
                jumpi(ret, eq(and(mload(ptr), mask), needledata))&#13;
                ptr := sub(ptr, 1)&#13;
                jumpi(loop, gt(add(ptr, 1), selfptr))&#13;
                ptr := selfptr&#13;
                jump(exit)&#13;
                ret :&#13;
                ptr := add(ptr, needlelen)&#13;
                exit :&#13;
                }&#13;
                return ptr;&#13;
            }&#13;
            else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly {hash := sha3(needleptr, needlelen)}&#13;
                ptr = selfptr + (selflen - needlelen);&#13;
                while (ptr &gt;= selfptr) {&#13;
                    bytes32 testHash;&#13;
                    assembly {testHash := sha3(ptr, needlelen)}&#13;
                    if (hash == testHash)&#13;
                    return ptr + needlelen;&#13;
                    ptr -= 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain everything from the first occurrence of&#13;
     *      `needle` to the end of the slice. `self` is set to the empty slice&#13;
     *      if `needle` is not found.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function find(slice self, slice needle) internal returns (slice) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len -= ptr - self._ptr;&#13;
        self._ptr = ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain the part of the string from the start of&#13;
     *      `self` to the end of the first occurrence of `needle`. If `needle`&#13;
     *      is not found, `self` is set to the empty slice.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function rfind(slice self, slice needle) internal returns (slice) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len = ptr - self._ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and `token` to everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function split(slice self, slice needle, slice token) internal returns (slice) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = self._ptr;&#13;
        token._len = ptr - self._ptr;&#13;
        if (ptr == self._ptr + self._len) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        }&#13;
        else {&#13;
            self._len -= token._len + needle._len;&#13;
            self._ptr = ptr + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and returning everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` up to the first occurrence of `delim`.&#13;
     */&#13;
    function split(slice self, slice needle) internal returns (slice token) {&#13;
        split(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and `token` to everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function rsplit(slice self, slice needle, slice token) internal returns (slice) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = ptr;&#13;
        token._len = self._len - (ptr - self._ptr);&#13;
        if (ptr == self._ptr) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        }&#13;
        else {&#13;
            self._len -= token._len + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and returning everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` after the last occurrence of `delim`.&#13;
     */&#13;
    function rsplit(slice self, slice needle) internal returns (slice token) {&#13;
        rsplit(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The number of occurrences of `needle` found in `self`.&#13;
     */&#13;
    function count(slice self, slice needle) internal returns (uint cnt) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;&#13;
        while (ptr &lt;= self._ptr + self._len) {&#13;
            cnt++;&#13;
            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns True if `self` contains `needle`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return True if `needle` is found in `self`, false otherwise.&#13;
     */&#13;
    function contains(slice self, slice needle) internal returns (bool) {&#13;
        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a newly allocated string containing the concatenation of&#13;
     *      `self` and `other`.&#13;
     * @param self The first slice to concatenate.&#13;
     * @param other The second slice to concatenate.&#13;
     * @return The concatenation of the two strings.&#13;
     */&#13;
    function concat(slice self, slice other) internal returns (string) {&#13;
        var ret = new string(self._len + other._len);&#13;
        uint retptr;&#13;
        assembly {retptr := add(ret, 32)}&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        memcpy(retptr + self._len, other._ptr, other._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    function strConcat(string _a, string _b, string _c, string _d, string _e) internal pure returns (string){&#13;
        bytes memory _ba = bytes(_a);&#13;
        bytes memory _bb = bytes(_b);&#13;
        bytes memory _bc = bytes(_c);&#13;
        bytes memory _bd = bytes(_d);&#13;
        bytes memory _be = bytes(_e);&#13;
        string memory abcde = new string(_ba.length + _bb.length + _bc.length + _bd.length + _be.length);&#13;
        bytes memory babcde = bytes(abcde);&#13;
        uint k = 0;&#13;
        for (uint i = 0; i &lt; _ba.length; i++) babcde[k++] = _ba[i];&#13;
        for (i = 0; i &lt; _bb.length; i++) babcde[k++] = _bb[i];&#13;
        for (i = 0; i &lt; _bc.length; i++) babcde[k++] = _bc[i];&#13;
        for (i = 0; i &lt; _bd.length; i++) babcde[k++] = _bd[i];&#13;
        for (i = 0; i &lt; _be.length; i++) babcde[k++] = _be[i];&#13;
        return string(babcde);&#13;
    }&#13;
&#13;
    function strConcat(string _a, string _b, string _c, string _d) internal pure returns (string) {&#13;
        return strConcat(_a, _b, _c, _d, "");&#13;
    }&#13;
&#13;
    function strConcat(string _a, string _b, string _c) internal pure returns (string) {&#13;
        return strConcat(_a, _b, _c, "", "");&#13;
    }&#13;
&#13;
    function strConcat(string _a, string _b) internal pure returns (string) {&#13;
        return strConcat(_a, _b, "", "", "");&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Joins an array of slices, using `self` as a delimiter, returning a&#13;
     *      newly allocated string.&#13;
     * @param self The delimiter to use.&#13;
     * @param parts A list of slices to join.&#13;
     * @return A newly allocated string containing all the slices in `parts`,&#13;
     *         joined with `self`.&#13;
     */&#13;
    function join(slice self, slice[] parts) internal returns (string) {&#13;
        if (parts.length == 0)&#13;
        return "";&#13;
&#13;
        uint length = self._len * (parts.length - 1);&#13;
        for (uint i = 0; i &lt; parts.length; i++)&#13;
        length += parts[i]._len;&#13;
&#13;
        var ret = new string(length);&#13;
        uint retptr;&#13;
        assembly {retptr := add(ret, 32)}&#13;
&#13;
        for (i = 0; i &lt; parts.length; i++) {&#13;
            memcpy(retptr, parts[i]._ptr, parts[i]._len);&#13;
            retptr += parts[i]._len;&#13;
            if (i &lt; parts.length - 1) {&#13;
                memcpy(retptr, self._ptr, self._len);&#13;
                retptr += self._len;&#13;
            }&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
    * Additions by the FundRequest Team&#13;
    */&#13;
&#13;
    function toBytes32(slice self) internal returns (bytes32 result) {&#13;
        string memory source = toString(self);&#13;
        bytes memory tempEmptyStringTest = bytes(source);&#13;
        if (tempEmptyStringTest.length == 0) {&#13;
            return 0x0;&#13;
        }&#13;
&#13;
        assembly {&#13;
            result := mload(add(source, 32))&#13;
        }&#13;
    }&#13;
&#13;
    function addressToString(address x) internal pure returns (string) {&#13;
        bytes memory s = new bytes(40);&#13;
        for (uint i = 0; i &lt; 20; i++) {&#13;
            byte b = byte(uint8(uint(x) / (2 ** (8 * (19 - i)))));&#13;
            byte hi = byte(uint8(b) / 16);&#13;
            byte lo = byte(uint8(b) - 16 * uint8(hi));&#13;
            s[2 * i] = charToByte(hi);&#13;
            s[2 * i + 1] = charToByte(lo);&#13;
        }&#13;
      return strConcat("0x", string(s));&#13;
    }&#13;
&#13;
    function charToByte(byte b) internal pure returns (byte c) {&#13;
        if (b &lt; 10) return byte(uint8(b) + 0x30);&#13;
        else return byte(uint8(b) + 0x57);&#13;
    }&#13;
&#13;
    function bytes32ToString(bytes32 x) internal pure returns (string) {&#13;
        bytes memory bytesString = new bytes(32);&#13;
        uint charCount = 0;&#13;
        for (uint j = 0; j &lt; 32; j++) {&#13;
            byte ch = byte(bytes32(uint(x) * 2 ** (8 * j)));&#13;
            if (ch != 0) {&#13;
                bytesString[charCount] = ch;&#13;
                charCount++;&#13;
            }&#13;
        }&#13;
        bytes memory bytesStringTrimmed = new bytes(charCount);&#13;
        for (j = 0; j &lt; charCount; j++) {&#13;
            bytesStringTrimmed[j] = bytesString[j];&#13;
        }&#13;
        return string(bytesStringTrimmed);&#13;
    }&#13;
}&#13;
&#13;
&#13;
/*&#13;
 * Main FundRequest Contract&#13;
 * Davy Van Roy&#13;
 * Quinten De Swaef&#13;
 */&#13;
contract FundRequestContract is Owned, ApproveAndCallFallBack {&#13;
&#13;
    using SafeMath for uint256;&#13;
    using strings for *;&#13;
&#13;
    event Funded(address indexed from, bytes32 platform, string platformId, uint256 value);&#13;
&#13;
    event Claimed(address indexed solverAddress, bytes32 platform, string platformId, string solver, uint256 value);&#13;
&#13;
    FundRequestToken public token;&#13;
&#13;
    //repositories&#13;
    FundRepository public fundRepository;&#13;
&#13;
    ClaimRepository public claimRepository;&#13;
&#13;
    address public claimSignerAddress;&#13;
&#13;
    modifier addressNotNull(address target) {&#13;
        require(target != address(0));&#13;
        _;&#13;
    }&#13;
&#13;
    function FundRequestContract(&#13;
    address _tokenAddress,&#13;
    address _fundRepository,&#13;
    address _claimRepository&#13;
    ) public {&#13;
        setTokenAddress(_tokenAddress);&#13;
        setFundRepository(_fundRepository);&#13;
        setClaimRepository(_claimRepository);&#13;
    }&#13;
&#13;
    //entrypoints&#13;
    function fund(bytes32 _platform, string _platformId, uint256 _value) public returns (bool success) {&#13;
        require(doFunding(_platform, _platformId, _value, msg.sender));&#13;
        return true;&#13;
    }&#13;
&#13;
    function receiveApproval(address _from, uint _amount, address _token, bytes _data) public {&#13;
        require(_token == address(token));&#13;
        var sliced = string(_data).toSlice();&#13;
        var platform = sliced.split("|AAC|".toSlice());&#13;
        var platformId = sliced.split("|AAC|".toSlice());&#13;
        require(doFunding(platform.toBytes32(), platformId.toString(), _amount, _from));&#13;
    }&#13;
&#13;
    function doFunding(bytes32 _platform, string _platformId, uint256 _value, address _funder) internal returns (bool success){&#13;
        require(_value &gt; 0);&#13;
        require(token.transferFrom(_funder, address(this), _value));&#13;
        fundRepository.updateFunders(_funder, _platform, _platformId, _value);&#13;
        fundRepository.updateBalances(_funder, _platform, _platformId, _value);&#13;
        Funded(_funder, _platform, _platformId, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function claim(bytes32 platform, string platformId, string solver, address solverAddress, bytes32 r, bytes32 s, uint8 v) public returns (bool) {&#13;
        require(validClaim(platform, platformId, solver, solverAddress, r, s, v));&#13;
        uint requestBalance = fundRepository.resolveFund(platform, platformId);&#13;
        require(token.transfer(solverAddress, requestBalance));&#13;
        require(claimRepository.addClaim(solverAddress, platform, platformId, solver, requestBalance));&#13;
        Claimed(solverAddress, platform, platformId, solver, requestBalance);&#13;
        return true;&#13;
    }&#13;
&#13;
    function validClaim(bytes32 platform, string platformId, string solver, address solverAddress, bytes32 r, bytes32 s, uint8 v) internal view returns (bool) {&#13;
        var h = sha3(createClaimMsg(platform, platformId, solver, solverAddress));&#13;
        address signerAddress = ecrecover(h, v, r, s);&#13;
        return claimSignerAddress == signerAddress;&#13;
    }&#13;
&#13;
    function createClaimMsg(bytes32 platform, string platformId, string solver, address solverAddress) internal pure returns (string) {&#13;
        return strings.bytes32ToString(platform)&#13;
        .strConcat(prependUnderscore(platformId))&#13;
        .strConcat(prependUnderscore(solver))&#13;
        .strConcat(prependUnderscore(strings.addressToString(solverAddress)));&#13;
    }&#13;
&#13;
&#13;
    function prependUnderscore(string str) internal pure returns (string) {&#13;
        return "_".strConcat(str);&#13;
    }&#13;
&#13;
    function setFundRepository(address _repositoryAddress) public onlyOwner {&#13;
        fundRepository = FundRepository(_repositoryAddress);&#13;
    }&#13;
&#13;
    function setClaimRepository(address _claimRepository) public onlyOwner {&#13;
        claimRepository = ClaimRepository(_claimRepository);&#13;
    }&#13;
&#13;
    function setTokenAddress(address _tokenAddress) addressNotNull(_tokenAddress) public onlyOwner {&#13;
        token = FundRequestToken(_tokenAddress);&#13;
        assert(token.isFundRequestToken());&#13;
    }&#13;
&#13;
    function setClaimSignerAddress(address _claimSignerAddress) addressNotNull(_claimSignerAddress) public onlyOwner {&#13;
        claimSignerAddress = _claimSignerAddress;&#13;
    }&#13;
}
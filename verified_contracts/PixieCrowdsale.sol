pragma solidity ^0.4.24;

// File: openzeppelin-solidity/contracts/ownership/Ownable.sol

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }
}

// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol

/**
 * @title Contracts that should not own Ether
 * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="1163747c727e5123">[email protected]</span>π.com&gt;&#13;
 * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up&#13;
 * in the contract, it will allow the owner to reclaim this ether.&#13;
 * @notice Ether can still be sent to this contract by:&#13;
 * calling functions labeled `payable`&#13;
 * `selfdestruct(contract_address)`&#13;
 * mining directly to the contract address&#13;
 */&#13;
contract HasNoEther is Ownable {&#13;
&#13;
  /**&#13;
  * @dev Constructor that rejects incoming Ether&#13;
  * @dev The `payable` flag is added so we can access `msg.value` without compiler warning. If we&#13;
  * leave out payable, then Solidity will allow inheriting contracts to implement a payable&#13;
  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively&#13;
  * we could use assembly to access msg.value.&#13;
  */&#13;
  constructor() public payable {&#13;
    require(msg.value == 0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Disallows direct send by settings a default function without the `payable` flag.&#13;
   */&#13;
  function() external {&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfer all Ether held by the contract to the owner.&#13;
   */&#13;
  function reclaimEther() external onlyOwner {&#13;
    owner.transfer(address(this).balance);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/rbac/Roles.sol&#13;
&#13;
/**&#13;
 * @title Roles&#13;
 * @author Francisco Giordano (@frangio)&#13;
 * @dev Library for managing addresses assigned to a Role.&#13;
 *      See RBAC.sol for example usage.&#13;
 */&#13;
library Roles {&#13;
  struct Role {&#13;
    mapping (address =&gt; bool) bearer;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev give an address access to this role&#13;
   */&#13;
  function add(Role storage role, address addr)&#13;
    internal&#13;
  {&#13;
    role.bearer[addr] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove an address' access to this role&#13;
   */&#13;
  function remove(Role storage role, address addr)&#13;
    internal&#13;
  {&#13;
    role.bearer[addr] = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev check if an address has this role&#13;
   * // reverts&#13;
   */&#13;
  function check(Role storage role, address addr)&#13;
    view&#13;
    internal&#13;
  {&#13;
    require(has(role, addr));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev check if an address has this role&#13;
   * @return bool&#13;
   */&#13;
  function has(Role storage role, address addr)&#13;
    view&#13;
    internal&#13;
    returns (bool)&#13;
  {&#13;
    return role.bearer[addr];&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/rbac/RBAC.sol&#13;
&#13;
/**&#13;
 * @title RBAC (Role-Based Access Control)&#13;
 * @author Matt Condon (@Shrugs)&#13;
 * @dev Stores and provides setters and getters for roles and addresses.&#13;
 * @dev Supports unlimited numbers of roles and addresses.&#13;
 * @dev See //contracts/mocks/RBACMock.sol for an example of usage.&#13;
 * This RBAC method uses strings to key roles. It may be beneficial&#13;
 *  for you to write your own implementation of this interface using Enums or similar.&#13;
 * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,&#13;
 *  to avoid typos.&#13;
 */&#13;
contract RBAC {&#13;
  using Roles for Roles.Role;&#13;
&#13;
  mapping (string =&gt; Roles.Role) private roles;&#13;
&#13;
  event RoleAdded(address addr, string roleName);&#13;
  event RoleRemoved(address addr, string roleName);&#13;
&#13;
  /**&#13;
   * @dev reverts if addr does not have role&#13;
   * @param addr address&#13;
   * @param roleName the name of the role&#13;
   * // reverts&#13;
   */&#13;
  function checkRole(address addr, string roleName)&#13;
    view&#13;
    public&#13;
  {&#13;
    roles[roleName].check(addr);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev determine if addr has role&#13;
   * @param addr address&#13;
   * @param roleName the name of the role&#13;
   * @return bool&#13;
   */&#13;
  function hasRole(address addr, string roleName)&#13;
    view&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    return roles[roleName].has(addr);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev add a role to an address&#13;
   * @param addr address&#13;
   * @param roleName the name of the role&#13;
   */&#13;
  function addRole(address addr, string roleName)&#13;
    internal&#13;
  {&#13;
    roles[roleName].add(addr);&#13;
    emit RoleAdded(addr, roleName);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove a role from an address&#13;
   * @param addr address&#13;
   * @param roleName the name of the role&#13;
   */&#13;
  function removeRole(address addr, string roleName)&#13;
    internal&#13;
  {&#13;
    roles[roleName].remove(addr);&#13;
    emit RoleRemoved(addr, roleName);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev modifier to scope access to a single role (uses msg.sender as addr)&#13;
   * @param roleName the name of the role&#13;
   * // reverts&#13;
   */&#13;
  modifier onlyRole(string roleName)&#13;
  {&#13;
    checkRole(msg.sender, roleName);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev modifier to scope access to a set of roles (uses msg.sender as addr)&#13;
   * @param roleNames the names of the roles to scope access to&#13;
   * // reverts&#13;
   *&#13;
   * @TODO - when solidity supports dynamic arrays as arguments to modifiers, provide this&#13;
   *  see: https://github.com/ethereum/solidity/issues/2467&#13;
   */&#13;
  // modifier onlyRoles(string[] roleNames) {&#13;
  //     bool hasAnyRole = false;&#13;
  //     for (uint8 i = 0; i &lt; roleNames.length; i++) {&#13;
  //         if (hasRole(msg.sender, roleNames[i])) {&#13;
  //             hasAnyRole = true;&#13;
  //             break;&#13;
  //         }&#13;
  //     }&#13;
&#13;
  //     require(hasAnyRole);&#13;
&#13;
  //     _;&#13;
  // }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/Whitelist.sol&#13;
&#13;
/**&#13;
 * @title Whitelist&#13;
 * @dev The Whitelist contract has a whitelist of addresses, and provides basic authorization control functions.&#13;
 * @dev This simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Whitelist is Ownable, RBAC {&#13;
  event WhitelistedAddressAdded(address addr);&#13;
  event WhitelistedAddressRemoved(address addr);&#13;
&#13;
  string public constant ROLE_WHITELISTED = "whitelist";&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account that's not whitelisted.&#13;
   */&#13;
  modifier onlyWhitelisted() {&#13;
    checkRole(msg.sender, ROLE_WHITELISTED);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev add an address to the whitelist&#13;
   * @param addr address&#13;
   * @return true if the address was added to the whitelist, false if the address was already in the whitelist&#13;
   */&#13;
  function addAddressToWhitelist(address addr)&#13;
    onlyOwner&#13;
    public&#13;
  {&#13;
    addRole(addr, ROLE_WHITELISTED);&#13;
    emit WhitelistedAddressAdded(addr);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev getter to determine if address is in whitelist&#13;
   */&#13;
  function whitelist(address addr)&#13;
    public&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    return hasRole(addr, ROLE_WHITELISTED);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev add addresses to the whitelist&#13;
   * @param addrs addresses&#13;
   * @return true if at least one address was added to the whitelist,&#13;
   * false if all addresses were already in the whitelist&#13;
   */&#13;
  function addAddressesToWhitelist(address[] addrs)&#13;
    onlyOwner&#13;
    public&#13;
  {&#13;
    for (uint256 i = 0; i &lt; addrs.length; i++) {&#13;
      addAddressToWhitelist(addrs[i]);&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove an address from the whitelist&#13;
   * @param addr address&#13;
   * @return true if the address was removed from the whitelist,&#13;
   * false if the address wasn't in the whitelist in the first place&#13;
   */&#13;
  function removeAddressFromWhitelist(address addr)&#13;
    onlyOwner&#13;
    public&#13;
  {&#13;
    removeRole(addr, ROLE_WHITELISTED);&#13;
    emit WhitelistedAddressRemoved(addr);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove addresses from the whitelist&#13;
   * @param addrs addresses&#13;
   * @return true if at least one address was removed from the whitelist,&#13;
   * false if all addresses weren't in the whitelist in the first place&#13;
   */&#13;
  function removeAddressesFromWhitelist(address[] addrs)&#13;
    onlyOwner&#13;
    public&#13;
  {&#13;
    for (uint256 i = 0; i &lt; addrs.length; i++) {&#13;
      removeAddressFromWhitelist(addrs[i]);&#13;
    }&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/math/SafeMath.sol&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol&#13;
&#13;
/**&#13;
 * @title ERC20Basic&#13;
 * @dev Simpler version of ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/179&#13;
 */&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol&#13;
&#13;
/**&#13;
 * @title Basic token&#13;
 * @dev Basic version of StandardToken, with no allowances.&#13;
 */&#13;
contract BasicToken is ERC20Basic {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  uint256 totalSupply_;&#13;
&#13;
  /**&#13;
  * @dev total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return totalSupply_;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[msg.sender]);&#13;
&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    emit Transfer(msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) public view returns (uint256) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender)&#13;
    public view returns (uint256);&#13;
&#13;
  function transferFrom(address from, address to, uint256 value)&#13;
    public returns (bool);&#13;
&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(&#13;
    address indexed owner,&#13;
    address indexed spender,&#13;
    uint256 value&#13;
  );&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol&#13;
&#13;
/**&#13;
 * @title Standard ERC20 token&#13;
 *&#13;
 * @dev Implementation of the basic standard token.&#13;
 * @dev https://github.com/ethereum/EIPs/issues/20&#13;
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol&#13;
 */&#13;
contract StandardToken is ERC20, BasicToken {&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _value&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[_from]);&#13;
    require(_value &lt;= allowed[_from][msg.sender]);&#13;
&#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
    emit Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   *&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address _spender, uint256 _value) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = _value;&#13;
    emit Approval(msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(&#13;
    address _owner,&#13;
    address _spender&#13;
   )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    return allowed[_owner][_spender];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseApproval(&#13;
    address _spender,&#13;
    uint _addedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    allowed[msg.sender][_spender] = (&#13;
      allowed[msg.sender][_spender].add(_addedValue));&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseApproval(&#13;
    address _spender,&#13;
    uint _subtractedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    uint oldValue = allowed[msg.sender][_spender];&#13;
    if (_subtractedValue &gt; oldValue) {&#13;
      allowed[msg.sender][_spender] = 0;&#13;
    } else {&#13;
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);&#13;
    }&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: contracts/pixie/PixieToken.sol&#13;
&#13;
contract PixieToken is StandardToken, Whitelist, HasNoEther {&#13;
&#13;
  string public constant name = "Pixie Token";&#13;
&#13;
  string public constant symbol = "PXE";&#13;
&#13;
  uint8 public constant decimals = 18;&#13;
&#13;
  uint256 public constant initialSupply = 100000000000 * (10 ** uint256(decimals)); // 100 Billion PXE ^ decimal&#13;
&#13;
  bool public transfersEnabled = false;&#13;
&#13;
  address public bridge;&#13;
&#13;
  event BridgeChange(address to);&#13;
&#13;
  event TransfersEnabledChange(bool to);&#13;
&#13;
  /**&#13;
   * @dev Constructor that gives msg.sender all of existing tokens.&#13;
   */&#13;
  constructor() public Whitelist() {&#13;
    totalSupply_ = initialSupply;&#13;
    balances[msg.sender] = initialSupply;&#13;
    emit Transfer(0x0, msg.sender, initialSupply);&#13;
&#13;
    // transfer bridge set to msg sender&#13;
    bridge = msg.sender;&#13;
&#13;
    // owner is automatically whitelisted&#13;
    addAddressToWhitelist(msg.sender);&#13;
  }&#13;
&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(&#13;
      transfersEnabled || whitelist(msg.sender) || _to == bridge,&#13;
      "Unable to transfers locked or address not whitelisted or not sending to the bridge"&#13;
    );&#13;
&#13;
    return super.transfer(_to, _value);&#13;
  }&#13;
&#13;
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {&#13;
    require(&#13;
      transfersEnabled || whitelist(msg.sender) || _to == bridge,&#13;
      "Unable to transfers locked or address not whitelisted or not sending to the bridge"&#13;
    );&#13;
&#13;
    return super.transferFrom(_from, _to, _value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for setting the bridge address&#13;
   * @dev Must be called by owner&#13;
   *&#13;
   * @param _new the address to set&#13;
   */&#13;
  function changeBridge(address _new) external onlyOwner {&#13;
    require(_new != address(0), "Invalid address");&#13;
    bridge = _new;&#13;
    emit BridgeChange(bridge);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for setting transfer on/off - used as hard stop&#13;
   * @dev Must be called by owner&#13;
   *&#13;
   * @param _transfersEnabled the value to set&#13;
   */&#13;
  function setTransfersEnabled(bool _transfersEnabled) external onlyOwner {&#13;
    transfersEnabled = _transfersEnabled;&#13;
    emit TransfersEnabledChange(transfersEnabled);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol&#13;
&#13;
/**&#13;
 * @title Crowdsale&#13;
 * @dev Crowdsale is a base contract for managing a token crowdsale,&#13;
 * allowing investors to purchase tokens with ether. This contract implements&#13;
 * such functionality in its most fundamental form and can be extended to provide additional&#13;
 * functionality and/or custom behavior.&#13;
 * The external interface represents the basic interface for purchasing tokens, and conform&#13;
 * the base architecture for crowdsales. They are *not* intended to be modified / overriden.&#13;
 * The internal interface conforms the extensible and modifiable surface of crowdsales. Override&#13;
 * the methods to add functionality. Consider using 'super' where appropiate to concatenate&#13;
 * behavior.&#13;
 */&#13;
contract Crowdsale {&#13;
  using SafeMath for uint256;&#13;
&#13;
  // The token being sold&#13;
  ERC20 public token;&#13;
&#13;
  // Address where funds are collected&#13;
  address public wallet;&#13;
&#13;
  // How many token units a buyer gets per wei.&#13;
  // The rate is the conversion between wei and the smallest and indivisible token unit.&#13;
  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK&#13;
  // 1 wei will give you 1 unit, or 0.001 TOK.&#13;
  uint256 public rate;&#13;
&#13;
  // Amount of wei raised&#13;
  uint256 public weiRaised;&#13;
&#13;
  /**&#13;
   * Event for token purchase logging&#13;
   * @param purchaser who paid for the tokens&#13;
   * @param beneficiary who got the tokens&#13;
   * @param value weis paid for purchase&#13;
   * @param amount amount of tokens purchased&#13;
   */&#13;
  event TokenPurchase(&#13;
    address indexed purchaser,&#13;
    address indexed beneficiary,&#13;
    uint256 value,&#13;
    uint256 amount&#13;
  );&#13;
&#13;
  /**&#13;
   * @param _rate Number of token units a buyer gets per wei&#13;
   * @param _wallet Address where collected funds will be forwarded to&#13;
   * @param _token Address of the token being sold&#13;
   */&#13;
  constructor(uint256 _rate, address _wallet, ERC20 _token) public {&#13;
    require(_rate &gt; 0);&#13;
    require(_wallet != address(0));&#13;
    require(_token != address(0));&#13;
&#13;
    rate = _rate;&#13;
    wallet = _wallet;&#13;
    token = _token;&#13;
  }&#13;
&#13;
  // -----------------------------------------&#13;
  // Crowdsale external interface&#13;
  // -----------------------------------------&#13;
&#13;
  /**&#13;
   * @dev fallback function ***DO NOT OVERRIDE***&#13;
   */&#13;
  function () external payable {&#13;
    buyTokens(msg.sender);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev low level token purchase ***DO NOT OVERRIDE***&#13;
   * @param _beneficiary Address performing the token purchase&#13;
   */&#13;
  function buyTokens(address _beneficiary) public payable {&#13;
&#13;
    uint256 weiAmount = msg.value;&#13;
    _preValidatePurchase(_beneficiary, weiAmount);&#13;
&#13;
    // calculate token amount to be created&#13;
    uint256 tokens = _getTokenAmount(weiAmount);&#13;
&#13;
    // update state&#13;
    weiRaised = weiRaised.add(weiAmount);&#13;
&#13;
    _processPurchase(_beneficiary, tokens);&#13;
    emit TokenPurchase(&#13;
      msg.sender,&#13;
      _beneficiary,&#13;
      weiAmount,&#13;
      tokens&#13;
    );&#13;
&#13;
    _updatePurchasingState(_beneficiary, weiAmount);&#13;
&#13;
    _forwardFunds();&#13;
    _postValidatePurchase(_beneficiary, weiAmount);&#13;
  }&#13;
&#13;
  // -----------------------------------------&#13;
  // Internal interface (extensible)&#13;
  // -----------------------------------------&#13;
&#13;
  /**&#13;
   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.&#13;
   * @param _beneficiary Address performing the token purchase&#13;
   * @param _weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _preValidatePurchase(&#13;
    address _beneficiary,&#13;
    uint256 _weiAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    require(_beneficiary != address(0));&#13;
    require(_weiAmount != 0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.&#13;
   * @param _beneficiary Address performing the token purchase&#13;
   * @param _weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _postValidatePurchase(&#13;
    address _beneficiary,&#13;
    uint256 _weiAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    // optional override&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.&#13;
   * @param _beneficiary Address performing the token purchase&#13;
   * @param _tokenAmount Number of tokens to be emitted&#13;
   */&#13;
  function _deliverTokens(&#13;
    address _beneficiary,&#13;
    uint256 _tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    token.transfer(_beneficiary, _tokenAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.&#13;
   * @param _beneficiary Address receiving the tokens&#13;
   * @param _tokenAmount Number of tokens to be purchased&#13;
   */&#13;
  function _processPurchase(&#13;
    address _beneficiary,&#13;
    uint256 _tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    _deliverTokens(_beneficiary, _tokenAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)&#13;
   * @param _beneficiary Address receiving the tokens&#13;
   * @param _weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _updatePurchasingState(&#13;
    address _beneficiary,&#13;
    uint256 _weiAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    // optional override&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Override to extend the way in which ether is converted to tokens.&#13;
   * @param _weiAmount Value in wei to be converted into tokens&#13;
   * @return Number of tokens that can be purchased with the specified _weiAmount&#13;
   */&#13;
  function _getTokenAmount(uint256 _weiAmount)&#13;
    internal view returns (uint256)&#13;
  {&#13;
    return _weiAmount.mul(rate);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Determines how ETH is stored/forwarded on purchases.&#13;
   */&#13;
  function _forwardFunds() internal {&#13;
    wallet.transfer(msg.value);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/distribution/utils/RefundVault.sol&#13;
&#13;
/**&#13;
 * @title RefundVault&#13;
 * @dev This contract is used for storing funds while a crowdsale&#13;
 * is in progress. Supports refunding the money if crowdsale fails,&#13;
 * and forwarding it if crowdsale is successful.&#13;
 */&#13;
contract RefundVault is Ownable {&#13;
  using SafeMath for uint256;&#13;
&#13;
  enum State { Active, Refunding, Closed }&#13;
&#13;
  mapping (address =&gt; uint256) public deposited;&#13;
  address public wallet;&#13;
  State public state;&#13;
&#13;
  event Closed();&#13;
  event RefundsEnabled();&#13;
  event Refunded(address indexed beneficiary, uint256 weiAmount);&#13;
&#13;
  /**&#13;
   * @param _wallet Vault address&#13;
   */&#13;
  constructor(address _wallet) public {&#13;
    require(_wallet != address(0));&#13;
    wallet = _wallet;&#13;
    state = State.Active;&#13;
  }&#13;
&#13;
  /**&#13;
   * @param investor Investor address&#13;
   */&#13;
  function deposit(address investor) onlyOwner public payable {&#13;
    require(state == State.Active);&#13;
    deposited[investor] = deposited[investor].add(msg.value);&#13;
  }&#13;
&#13;
  function close() onlyOwner public {&#13;
    require(state == State.Active);&#13;
    state = State.Closed;&#13;
    emit Closed();&#13;
    wallet.transfer(address(this).balance);&#13;
  }&#13;
&#13;
  function enableRefunds() onlyOwner public {&#13;
    require(state == State.Active);&#13;
    state = State.Refunding;&#13;
    emit RefundsEnabled();&#13;
  }&#13;
&#13;
  /**&#13;
   * @param investor Investor address&#13;
   */&#13;
  function refund(address investor) public {&#13;
    require(state == State.Refunding);&#13;
    uint256 depositedValue = deposited[investor];&#13;
    deposited[investor] = 0;&#13;
    investor.transfer(depositedValue);&#13;
    emit Refunded(investor, depositedValue);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is Ownable {&#13;
  event Pause();&#13;
  event Unpause();&#13;
&#13;
  bool public paused = false;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is not paused.&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is paused.&#13;
   */&#13;
  modifier whenPaused() {&#13;
    require(paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to pause, triggers stopped state&#13;
   */&#13;
  function pause() onlyOwner whenNotPaused public {&#13;
    paused = true;&#13;
    emit Pause();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to unpause, returns to normal state&#13;
   */&#13;
  function unpause() onlyOwner whenPaused public {&#13;
    paused = false;&#13;
    emit Unpause();&#13;
  }&#13;
}&#13;
&#13;
// File: contracts/pixie/PixieCrowdsale.sol&#13;
&#13;
contract PixieCrowdsale is Crowdsale, Pausable {&#13;
&#13;
  event Finalized();&#13;
&#13;
  event MinimumContributionUpdated(uint256 _minimumContribution);&#13;
&#13;
  event OwnerTransfer(&#13;
    address indexed owner,&#13;
    address indexed caller,&#13;
    address indexed beneficiary,&#13;
    uint256 amount&#13;
  );&#13;
&#13;
  mapping(address =&gt; bool) public whitelist;&#13;
&#13;
  mapping(address =&gt; bool) public managementWhitelist;&#13;
&#13;
  mapping(address =&gt; uint256) public contributions;&#13;
&#13;
  bool public isFinalized = false;&#13;
&#13;
  // Tuesday, July 3, 2018 10:00:00 AM GMT+01:00&#13;
  uint256 public openingTime = 1530608400;&#13;
&#13;
  // Wednesday, August 1, 2018 9:59:59 AM GMT+01:00&#13;
  uint256 public privateSaleCloseTime = 1533113999;&#13;
&#13;
  // Monday, October 1, 2018 9:59:59 AM GMT+01:00&#13;
  uint256 public preSaleCloseTime = 1538384399;&#13;
&#13;
  // Wednesday, October 31, 2018 9:59:59 AM GMT+00:00&#13;
  uint256 public closingTime = 1540979999;&#13;
&#13;
  // price per token (no discount)&#13;
  uint256 public rate = 396039;&#13;
&#13;
  // 22.5% discount&#13;
  uint256 public privateSaleRate = 485148;&#13;
&#13;
  // 12.5% discount&#13;
  uint256 public preSaleRate = 445544;&#13;
&#13;
  uint256 public softCap = 2650 ether;&#13;
&#13;
  uint256 public hardCap = 101000 ether;&#13;
&#13;
  uint256 public minimumContribution = 1 ether;&#13;
&#13;
  // refund vault used to hold funds while crowdsale is running&#13;
  RefundVault public vault;&#13;
&#13;
  /**&#13;
  * @dev Throws if called by any account other than the owner or the someone in the management list.&#13;
  */&#13;
  modifier onlyManagement() {&#13;
    require(msg.sender == owner || managementWhitelist[msg.sender], "Must be owner or in management whitelist");&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Constructs the Crowdsale contract with pre-defined parameter plus params&#13;
   *&#13;
   * @param _wallet Address where collected funds will be forwarded to&#13;
   * @param _token Address of the token being sold&#13;
   */&#13;
  constructor(address _wallet, PixieToken _token) public Crowdsale(rate, _wallet, _token) {&#13;
    vault = new RefundVault(wallet);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether funding goal was reached.&#13;
   * @return Whether funding goal was reached&#13;
   */&#13;
  function softCapReached() public view returns (bool) {&#13;
    return weiRaised &gt;= softCap;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev vault finalization task, called when owner calls finalize()&#13;
   */&#13;
  function finalization() internal {&#13;
    if (softCapReached()) {&#13;
      vault.close();&#13;
    } else {&#13;
      vault.enableRefunds();&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Overrides Crowdsale fund forwarding, sending funds to vault if not finalised, otherwise to wallet&#13;
   */&#13;
  function _forwardFunds() internal {&#13;
    // once finalized all contributions got to the wallet&#13;
    if (isFinalized) {&#13;
      wallet.transfer(msg.value);&#13;
    }&#13;
    // otherwise send to vault to allow refunds, if required&#13;
    else {&#13;
      vault.deposit.value(msg.value)(msg.sender);&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Must be called after crowdsale ends, to do some extra finalization&#13;
   * work. Calls the contract's finalization function.&#13;
   */&#13;
  function finalize() onlyOwner public {&#13;
    require(!isFinalized, "Crowdsale already finalised");&#13;
&#13;
    finalization();&#13;
    emit Finalized();&#13;
&#13;
    isFinalized = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Adds single address to whitelist.&#13;
   * @param _beneficiary Address to be added to the whitelist&#13;
   */&#13;
  function addToWhitelist(address _beneficiary) external onlyManagement {&#13;
    whitelist[_beneficiary] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Adds list of addresses to whitelist. Not overloaded due to limitations with truffle testing.&#13;
   * @param _beneficiaries Addresses to be added to the whitelist&#13;
   */&#13;
  function addManyToWhitelist(address[] _beneficiaries) external onlyManagement {&#13;
    for (uint256 i = 0; i &lt; _beneficiaries.length; i++) {&#13;
      whitelist[_beneficiaries[i]] = true;&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Removes single address from whitelist.&#13;
   * @param _beneficiary Address to be removed to the whitelist&#13;
   */&#13;
  function removeFromWhitelist(address _beneficiary) external onlyManagement {&#13;
    whitelist[_beneficiary] = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Adds single address to the management whitelist.&#13;
   * @param _manager Address to be added to the management whitelist&#13;
   */&#13;
  function addToManagementWhitelist(address _manager) external onlyManagement {&#13;
    managementWhitelist[_manager] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Removes single address from the management whitelist.&#13;
   * @param _manager Address to be removed to the management whitelist&#13;
   */&#13;
  function removeFromManagementWhitelist(address _manager) external onlyManagement {&#13;
    managementWhitelist[_manager] = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for updating the opening time in the event of a delay&#13;
   * @dev Must be called by management, use sparingly as no restrictions are set&#13;
   *&#13;
   * @param _openingTime the epoch time to set&#13;
   */&#13;
  function updateOpeningTime(uint256 _openingTime) external onlyManagement {&#13;
    require(_openingTime &gt; 0, "A opening time must be specified");&#13;
    openingTime = _openingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for updating the private sale close time in the event of a delay&#13;
   * @dev Must be called by management, use sparingly as no restrictions are set&#13;
   *&#13;
   * @param _privateSaleCloseTime the epoch time to set&#13;
   */&#13;
  function updatePrivateSaleCloseTime(uint256 _privateSaleCloseTime) external onlyManagement {&#13;
    require(_privateSaleCloseTime &gt; openingTime, "A private sale time must after the opening time");&#13;
    privateSaleCloseTime = _privateSaleCloseTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for updating the pre sale close time in the event of a delay&#13;
   * @dev Must be called by management, use sparingly as no restrictions are set&#13;
   *&#13;
   * @param _preSaleCloseTime the epoch time to set&#13;
   */&#13;
  function updatePreSaleCloseTime(uint256 _preSaleCloseTime) external onlyManagement {&#13;
    require(_preSaleCloseTime &gt; privateSaleCloseTime, "A pre sale time must be after the private sale close time");&#13;
    preSaleCloseTime = _preSaleCloseTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for updating the pre sale close time in the event of a delay&#13;
   * @dev Must be called by management, use sparingly as no restrictions are set&#13;
   *&#13;
   * @param _closingTime the epoch time to set&#13;
   */&#13;
  function updateClosingTime(uint256 _closingTime) external onlyManagement {&#13;
    require(_closingTime &gt; preSaleCloseTime, "A closing time must be after the pre-sale close time");&#13;
    closingTime = _closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for updating the minimum contribution required to participate&#13;
   * @dev Must be called by management&#13;
   *&#13;
   * @param _minimumContribution the minimum contribution to set&#13;
   */&#13;
  function updateMinimumContribution(uint256 _minimumContribution) external onlyManagement {&#13;
    require(_minimumContribution &gt; 0, "Minimum contribution must be great than zero");&#13;
    minimumContribution = _minimumContribution;&#13;
    emit MinimumContributionUpdated(_minimumContribution);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Utility method for returning a set of epoch dates about the ICO&#13;
   */&#13;
  function getDateRanges() external view returns (&#13;
    uint256 _openingTime,&#13;
    uint256 _privateSaleCloseTime,&#13;
    uint256 _preSaleCloseTime,&#13;
    uint256 _closingTime&#13;
  ) {&#13;
    return (&#13;
    openingTime,&#13;
    privateSaleCloseTime,&#13;
    preSaleCloseTime,&#13;
    closingTime&#13;
    );&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Extend parent behavior to update user contributions so far&#13;
   * @param _beneficiary Token purchaser&#13;
   * @param _weiAmount Amount of wei contributed&#13;
   */&#13;
  function _updatePurchasingState(address _beneficiary, uint256 _weiAmount) internal {&#13;
    super._updatePurchasingState(_beneficiary, _weiAmount);&#13;
    contributions[_beneficiary] = contributions[_beneficiary].add(_weiAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether the hard cap has been reached.&#13;
   * @return Whether the cap was reached&#13;
   */&#13;
  function hardCapReached() public view returns (bool) {&#13;
    return weiRaised &gt;= hardCap;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether the period in which the crowdsale is open has already elapsed.&#13;
   * @return Whether crowdsale period has elapsed&#13;
   */&#13;
  function hasClosed() public view returns (bool) {&#13;
    return now &gt; closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Overridden method used to allow different rates for private/pre sale&#13;
   * @param _weiAmount Value in wei to be converted into tokens&#13;
   * @return Number of tokens that can be purchased with the specified _weiAmount&#13;
   */&#13;
  function _getTokenAmount(uint256 _weiAmount) internal view returns (uint256) {&#13;
    if (now &lt; privateSaleCloseTime) {&#13;
      return _weiAmount.mul(privateSaleRate);&#13;
    }&#13;
&#13;
    if (now &lt; preSaleCloseTime) {&#13;
      return _weiAmount.mul(preSaleRate);&#13;
    }&#13;
&#13;
    return _weiAmount.mul(rate);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether the period in which the crowdsale is open has elapsed.&#13;
   * @return true if crowdsale period is open, otherwise false&#13;
   */&#13;
  function isCrowdsaleOpen() public view returns (bool) {&#13;
    return now &gt;= openingTime &amp;&amp; now &lt;= closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Extend parent behavior requiring contract to not be paused.&#13;
   * @param _beneficiary Token beneficiary&#13;
   * @param _weiAmount Amount of wei contributed&#13;
   */&#13;
  function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) internal {&#13;
    super._preValidatePurchase(_beneficiary, _weiAmount);&#13;
&#13;
    require(isCrowdsaleOpen(), "Crowdsale not open");&#13;
&#13;
    require(weiRaised.add(_weiAmount) &lt;= hardCap, "Exceeds maximum cap");&#13;
&#13;
    require(_weiAmount &gt;= minimumContribution, "Beneficiary minimum amount not reached");&#13;
&#13;
    require(whitelist[_beneficiary], "Beneficiary not whitelisted");&#13;
&#13;
    require(whitelist[msg.sender], "Sender not whitelisted");&#13;
&#13;
    require(!paused, "Contract paused");&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allow owner to transfer tokens. Will be used to transfer unsold tokens.&#13;
   * @param _beneficiary Token beneficiary&#13;
   * @param _tokenAmount Amount of tokens to deliver&#13;
   */&#13;
  function transfer(address _beneficiary, uint256 _tokenAmount) external onlyOwner {&#13;
    _deliverTokens(_beneficiary, _tokenAmount);&#13;
    emit OwnerTransfer(msg.sender, address(this), _beneficiary, _tokenAmount);&#13;
  }&#13;
}
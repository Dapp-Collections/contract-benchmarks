pragma solidity ^0.4.24;

contract BasicAccessControl {
    address public owner;
    address[] moderatorsArray;
    uint16 public totalModerators = 0;
    mapping (address => bool) moderators;
    bool public isMaintaining = true;

    constructor() public {
        owner = msg.sender;
        AddModerator(msg.sender);
    }

    modifier onlyOwner {
        require(msg.sender == owner);
        _;
    }

    modifier onlyModerators() {
        require(moderators[msg.sender] == true);
        _;
    }

    modifier isActive {
        require(!isMaintaining);
        _;
    }

    function findInArray(address _address) internal view returns(uint8) {
        uint8 i = 0;
        while (moderatorsArray[i] != _address) {
            i++;
        }
        return i;
    }

    function ChangeOwner(address _newOwner) onlyOwner public {
        if (_newOwner != address(0)) {
            owner = _newOwner;
        }
    }

    function AddModerator(address _newModerator) onlyOwner public {
        if (moderators[_newModerator] == false) {
            moderators[_newModerator] = true;
            moderatorsArray.push(_newModerator);
            totalModerators += 1;
        }
    }

    function getModerators() public view returns(address[] memory) {
        return moderatorsArray;
    }

    function RemoveModerator(address _oldModerator) onlyOwner public {
        if (moderators[_oldModerator] == true) {
            moderators[_oldModerator] = false;
            uint8 i = findInArray(_oldModerator);
            while (i<moderatorsArray.length-1) {
                moderatorsArray[i] = moderatorsArray[i+1];
                i++;
            }
            moderatorsArray.length--;
            totalModerators -= 1;
        }
    }

    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {
        isMaintaining = _isMaintaining;
    }

    function isModerator(address _address) public view returns(bool, address) {
        return (moderators[_address], _address);
    }
}

contract randomRange {
    function getRandom(uint256 minRan, uint256 maxRan, uint8 index, address priAddress) view internal returns(uint) {
        uint256 genNum = uint256(blockhash(block.number-1)) + uint256(priAddress) + uint256(keccak256(abi.encodePacked(block.timestamp, index)));
        for (uint8 i = 0; i < index && i < 6; i ++) {
            genNum /= 256;
        }
        return uint(genNum % (maxRan + 1 - minRan) + minRan);
    }
}

/*
 * @title String & slice utility library for Solidity contracts.
 * @author Nick Johnson <<span class="__cf_email__" data-cfemail="68091a090b0006010c2806071c0c071c46060d1c">[emailÂ protected]</span>&gt;&#13;
 *&#13;
 * @dev Functionality in this library is largely implemented using an&#13;
 *      abstraction called a 'slice'. A slice represents a part of a string -&#13;
 *      anything from the entire string to a single character, or even no&#13;
 *      characters at all (a 0-length slice). Since a slice only has to specify&#13;
 *      an offset and a length, copying and manipulating slices is a lot less&#13;
 *      expensive than copying and manipulating the strings they reference.&#13;
 *&#13;
 *      To further reduce gas costs, most functions on slice that need to return&#13;
 *      a slice modify the original one instead of allocating a new one; for&#13;
 *      instance, `s.split(".")` will return the text up to the first '.',&#13;
 *      modifying s to only contain the remainder of the string after the '.'.&#13;
 *      In situations where you do not want to modify the original slice, you&#13;
 *      can make a copy first with `.copy()`, for example:&#13;
 *      `s.copy().split(".")`. Try and avoid using this idiom in loops; since&#13;
 *      Solidity has no memory management, it will result in allocating many&#13;
 *      short-lived slices that are later discarded.&#13;
 *&#13;
 *      Functions that return two slices come in two versions: a non-allocating&#13;
 *      version that takes the second slice as an argument, modifying it in&#13;
 *      place, and an allocating version that allocates and returns the second&#13;
 *      slice; see `nextRune` for example.&#13;
 *&#13;
 *      Functions that have to copy string data will return strings rather than&#13;
 *      slices; these can be cast back to slices for further processing if&#13;
 *      required.&#13;
 *&#13;
 *      For convenience, some functions are provided with non-modifying&#13;
 *      variants that create a new slice and return both; for instance,&#13;
 *      `s.splitNew('.')` leaves s unmodified, and returns two values&#13;
 *      corresponding to the left and right parts of the string.&#13;
 */&#13;
&#13;
&#13;
&#13;
library strings {&#13;
    struct slice {&#13;
        uint _len;&#13;
        uint _ptr;&#13;
    }&#13;
&#13;
    function memcpy(uint dest, uint src, uint len) private pure {&#13;
        // Copy word-length chunks while possible&#13;
        for(; len &gt;= 32; len -= 32) {&#13;
            assembly {&#13;
                mstore(dest, mload(src))&#13;
            }&#13;
            dest += 32;&#13;
            src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint mask = 256 ** (32 - len) - 1;&#13;
        assembly {&#13;
            let srcpart := and(mload(src), not(mask))&#13;
            let destpart := and(mload(dest), mask)&#13;
            mstore(dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire string.&#13;
     * @param self The string to make a slice from.&#13;
     * @return A newly allocated slice containing the entire string.&#13;
     */&#13;
    function toSlice(string memory self) internal pure returns (slice memory) {&#13;
        uint ptr;&#13;
        assembly {&#13;
            ptr := add(self, 0x20)&#13;
        }&#13;
        return slice(bytes(self).length, ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length of a null-terminated bytes32 string.&#13;
     * @param self The value to find the length of.&#13;
     * @return The length of the string, from 0 to 32.&#13;
     */&#13;
    function len(bytes32 self) internal pure returns (uint) {&#13;
        uint ret;&#13;
        if (self == 0)&#13;
            return 0;&#13;
        if (self &amp; 0xffffffffffffffffffffffffffffffff == 0) {&#13;
            ret += 16;&#13;
            self = bytes32(uint(self) / 0x100000000000000000000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffffffffffff == 0) {&#13;
            ret += 8;&#13;
            self = bytes32(uint(self) / 0x10000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffff == 0) {&#13;
            ret += 4;&#13;
            self = bytes32(uint(self) / 0x100000000);&#13;
        }&#13;
        if (self &amp; 0xffff == 0) {&#13;
            ret += 2;&#13;
            self = bytes32(uint(self) / 0x10000);&#13;
        }&#13;
        if (self &amp; 0xff == 0) {&#13;
            ret += 1;&#13;
        }&#13;
        return 32 - ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire bytes32, interpreted as a&#13;
     *      null-terminated utf-8 string.&#13;
     * @param self The bytes32 value to convert to a slice.&#13;
     * @return A new slice containing the value of the input argument up to the&#13;
     *         first null.&#13;
     */&#13;
    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {&#13;
        // Allocate space for `self` in memory, copy it there, and point ret at it&#13;
        assembly {&#13;
            let ptr := mload(0x40)&#13;
            mstore(0x40, add(ptr, 0x20))&#13;
            mstore(ptr, self)&#13;
            mstore(add(ret, 0x20), ptr)&#13;
        }&#13;
        ret._len = len(self);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a new slice containing the same data as the current slice.&#13;
     * @param self The slice to copy.&#13;
     * @return A new slice containing the same data as `self`.&#13;
     */&#13;
    function copy(slice memory self) internal pure returns (slice memory) {&#13;
        return slice(self._len, self._ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Copies a slice to a new string.&#13;
     * @param self The slice to copy.&#13;
     * @return A newly allocated string containing the slice's text.&#13;
     */&#13;
    function toString(slice memory self) internal pure returns (string memory) {&#13;
        string memory ret = new string(self._len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length in runes of the slice. Note that this operation&#13;
     *      takes time proportional to the length of the slice; avoid using it&#13;
     *      in loops, and call `slice.empty()` if you only need to know whether&#13;
     *      the slice is empty or not.&#13;
     * @param self The slice to operate on.&#13;
     * @return The length of the slice in runes.&#13;
     */&#13;
    function len(slice memory self) internal pure returns (uint l) {&#13;
        // Starting at ptr-31 means the LSB will be the byte we care about&#13;
        uint ptr = self._ptr - 31;&#13;
        uint end = ptr + self._len;&#13;
        for (l = 0; ptr &lt; end; l++) {&#13;
            uint8 b;&#13;
            assembly { b := and(mload(ptr), 0xFF) }&#13;
            if (b &lt; 0x80) {&#13;
                ptr += 1;&#13;
            } else if(b &lt; 0xE0) {&#13;
                ptr += 2;&#13;
            } else if(b &lt; 0xF0) {&#13;
                ptr += 3;&#13;
            } else if(b &lt; 0xF8) {&#13;
                ptr += 4;&#13;
            } else if(b &lt; 0xFC) {&#13;
                ptr += 5;&#13;
            } else {&#13;
                ptr += 6;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice is empty (has a length of 0).&#13;
     * @param self The slice to operate on.&#13;
     * @return True if the slice is empty, False otherwise.&#13;
     */&#13;
    function empty(slice memory self) internal pure returns (bool) {&#13;
        return self._len == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a positive number if `other` comes lexicographically after&#13;
     *      `self`, a negative number if it comes before, or zero if the&#13;
     *      contents of the two slices are equal. Comparison is done per-rune,&#13;
     *      on unicode codepoints.&#13;
     * @param self The first slice to compare.&#13;
     * @param other The second slice to compare.&#13;
     * @return The result of the comparison.&#13;
     */&#13;
    function compare(slice memory self, slice memory other) internal pure returns (int) {&#13;
        uint shortest = self._len;&#13;
        if (other._len &lt; self._len)&#13;
            shortest = other._len;&#13;
&#13;
        uint selfptr = self._ptr;&#13;
        uint otherptr = other._ptr;&#13;
        for (uint idx = 0; idx &lt; shortest; idx += 32) {&#13;
            uint a;&#13;
            uint b;&#13;
            assembly {&#13;
                a := mload(selfptr)&#13;
                b := mload(otherptr)&#13;
            }&#13;
            if (a != b) {&#13;
                // Mask out irrelevant bytes and check again&#13;
                uint256 mask = uint256(-1); // 0xffff...&#13;
                if(shortest &lt; 32) {&#13;
                    mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);&#13;
                }&#13;
                uint256 diff = (a &amp; mask) - (b &amp; mask);&#13;
                if (diff != 0)&#13;
                    return int(diff);&#13;
            }&#13;
            selfptr += 32;&#13;
            otherptr += 32;&#13;
        }&#13;
        return int(self._len) - int(other._len);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the two slices contain the same text.&#13;
     * @param self The first slice to compare.&#13;
     * @param self The second slice to compare.&#13;
     * @return True if the slices are equal, false otherwise.&#13;
     */&#13;
    function equals(slice memory self, slice memory other) internal pure returns (bool) {&#13;
        return compare(self, other) == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Extracts the first rune in the slice into `rune`, advancing the&#13;
     *      slice to point to the next rune and returning `self`.&#13;
     * @param self The slice to operate on.&#13;
     * @param rune The slice that will contain the first rune.&#13;
     * @return `rune`.&#13;
     */&#13;
    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {&#13;
        rune._ptr = self._ptr;&#13;
&#13;
        if (self._len == 0) {&#13;
            rune._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        uint l;&#13;
        uint b;&#13;
        // Load the first byte of the rune into the LSBs of b&#13;
        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }&#13;
        if (b &lt; 0x80) {&#13;
            l = 1;&#13;
        } else if(b &lt; 0xE0) {&#13;
            l = 2;&#13;
        } else if(b &lt; 0xF0) {&#13;
            l = 3;&#13;
        } else {&#13;
            l = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (l &gt; self._len) {&#13;
            rune._len = self._len;&#13;
            self._ptr += self._len;&#13;
            self._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        self._ptr += l;&#13;
        self._len -= l;&#13;
        rune._len = l;&#13;
        return rune;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the first rune in the slice, advancing the slice to point&#13;
     *      to the next rune.&#13;
     * @param self The slice to operate on.&#13;
     * @return A slice containing only the first rune from `self`.&#13;
     */&#13;
    function nextRune(slice memory self) internal pure returns (slice memory ret) {&#13;
        nextRune(self, ret);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the number of the first codepoint in the slice.&#13;
     * @param self The slice to operate on.&#13;
     * @return The number of the first codepoint in the slice.&#13;
     */&#13;
    function ord(slice memory self) internal pure returns (uint ret) {&#13;
        if (self._len == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        uint word;&#13;
        uint length;&#13;
        uint divisor = 2 ** 248;&#13;
&#13;
        // Load the rune into the MSBs of b&#13;
        assembly { word:= mload(mload(add(self, 32))) }&#13;
        uint b = word / divisor;&#13;
        if (b &lt; 0x80) {&#13;
            ret = b;&#13;
            length = 1;&#13;
        } else if(b &lt; 0xE0) {&#13;
            ret = b &amp; 0x1F;&#13;
            length = 2;&#13;
        } else if(b &lt; 0xF0) {&#13;
            ret = b &amp; 0x0F;&#13;
            length = 3;&#13;
        } else {&#13;
            ret = b &amp; 0x07;&#13;
            length = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (length &gt; self._len) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        for (uint i = 1; i &lt; length; i++) {&#13;
            divisor = divisor / 256;&#13;
            b = (word / divisor) &amp; 0xFF;&#13;
            if (b &amp; 0xC0 != 0x80) {&#13;
                // Invalid UTF-8 sequence&#13;
                return 0;&#13;
            }&#13;
            ret = (ret * 64) | (b &amp; 0x3F);&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the keccak-256 hash of the slice.&#13;
     * @param self The slice to hash.&#13;
     * @return The hash of the slice.&#13;
     */&#13;
    function keccak(slice memory self) internal pure returns (bytes32 ret) {&#13;
        assembly {&#13;
            ret := keccak256(mload(add(self, 32)), mload(self))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if `self` starts with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (self._ptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
            let length := mload(needle)&#13;
            let selfptr := mload(add(self, 0x20))&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
        }&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` starts with `needle`, `needle` is removed from the&#13;
     *      beginning of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        bool equal = true;&#13;
        if (self._ptr != needle._ptr) {&#13;
            assembly {&#13;
                let length := mload(needle)&#13;
                let selfptr := mload(add(self, 0x20))&#13;
                let needleptr := mload(add(needle, 0x20))&#13;
                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
            self._ptr += needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice ends with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        uint selfptr = self._ptr + self._len - needle._len;&#13;
&#13;
        if (selfptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
            let length := mload(needle)&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
        }&#13;
&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` ends with `needle`, `needle` is removed from the&#13;
     *      end of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        uint selfptr = self._ptr + self._len - needle._len;&#13;
        bool equal = true;&#13;
        if (selfptr != needle._ptr) {&#13;
            assembly {&#13;
                let length := mload(needle)&#13;
                let needleptr := mload(add(needle, 0x20))&#13;
                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte of the first occurrence of&#13;
    // `needle` in `self`, or the first byte after `self` if not found.&#13;
    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {&#13;
        uint ptr = selfptr;&#13;
        uint idx;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));&#13;
&#13;
                bytes32 needledata;&#13;
                assembly { needledata := and(mload(needleptr), mask) }&#13;
&#13;
                uint end = selfptr + selflen - needlelen;&#13;
                bytes32 ptrdata;&#13;
                assembly { ptrdata := and(mload(ptr), mask) }&#13;
&#13;
                while (ptrdata != needledata) {&#13;
                    if (ptr &gt;= end)&#13;
                        return selfptr + selflen;&#13;
                    ptr++;&#13;
                    assembly { ptrdata := and(mload(ptr), mask) }&#13;
                }&#13;
                return ptr;&#13;
            } else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly { hash := keccak256(needleptr, needlelen) }&#13;
&#13;
                for (idx = 0; idx &lt;= selflen - needlelen; idx++) {&#13;
                    bytes32 testHash;&#13;
                    assembly { testHash := keccak256(ptr, needlelen) }&#13;
                    if (hash == testHash)&#13;
                        return ptr;&#13;
                    ptr += 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr + selflen;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte after the last occurrence of&#13;
    // `needle` in `self`, or the address of `self` if not found.&#13;
    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {&#13;
        uint ptr;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));&#13;
&#13;
                bytes32 needledata;&#13;
                assembly { needledata := and(mload(needleptr), mask) }&#13;
&#13;
                ptr = selfptr + selflen - needlelen;&#13;
                bytes32 ptrdata;&#13;
                assembly { ptrdata := and(mload(ptr), mask) }&#13;
&#13;
                while (ptrdata != needledata) {&#13;
                    if (ptr &lt;= selfptr)&#13;
                        return selfptr;&#13;
                    ptr--;&#13;
                    assembly { ptrdata := and(mload(ptr), mask) }&#13;
                }&#13;
                return ptr + needlelen;&#13;
            } else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly { hash := keccak256(needleptr, needlelen) }&#13;
                ptr = selfptr + (selflen - needlelen);&#13;
                while (ptr &gt;= selfptr) {&#13;
                    bytes32 testHash;&#13;
                    assembly { testHash := keccak256(ptr, needlelen) }&#13;
                    if (hash == testHash)&#13;
                        return ptr + needlelen;&#13;
                    ptr -= 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain everything from the first occurrence of&#13;
     *      `needle` to the end of the slice. `self` is set to the empty slice&#13;
     *      if `needle` is not found.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len -= ptr - self._ptr;&#13;
        self._ptr = ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain the part of the string from the start of&#13;
     *      `self` to the end of the first occurrence of `needle`. If `needle`&#13;
     *      is not found, `self` is set to the empty slice.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len = ptr - self._ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and `token` to everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = self._ptr;&#13;
        token._len = ptr - self._ptr;&#13;
        if (ptr == self._ptr + self._len) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        } else {&#13;
            self._len -= token._len + needle._len;&#13;
            self._ptr = ptr + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and returning everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` up to the first occurrence of `delim`.&#13;
     */&#13;
    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {&#13;
        split(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and `token` to everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = ptr;&#13;
        token._len = self._len - (ptr - self._ptr);&#13;
        if (ptr == self._ptr) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        } else {&#13;
            self._len -= token._len + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and returning everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` after the last occurrence of `delim`.&#13;
     */&#13;
    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {&#13;
        rsplit(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The number of occurrences of `needle` found in `self`.&#13;
     */&#13;
    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;&#13;
        while (ptr &lt;= self._ptr + self._len) {&#13;
            cnt++;&#13;
            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns True if `self` contains `needle`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return True if `needle` is found in `self`, false otherwise.&#13;
     */&#13;
    function contains(slice memory self, slice memory needle) internal pure returns (bool) {&#13;
        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a newly allocated string containing the concatenation of&#13;
     *      `self` and `other`.&#13;
     * @param self The first slice to concatenate.&#13;
     * @param other The second slice to concatenate.&#13;
     * @return The concatenation of the two strings.&#13;
     */&#13;
    function concat(slice memory self, slice memory other) internal pure returns (string memory) {&#13;
        string memory ret = new string(self._len + other._len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        memcpy(retptr + self._len, other._ptr, other._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Joins an array of slices, using `self` as a delimiter, returning a&#13;
     *      newly allocated string.&#13;
     * @param self The delimiter to use.&#13;
     * @param parts A list of slices to join.&#13;
     * @return A newly allocated string containing all the slices in `parts`,&#13;
     *         joined with `self`.&#13;
     */&#13;
    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {&#13;
        if (parts.length == 0)&#13;
            return "";&#13;
&#13;
        uint length = self._len * (parts.length - 1);&#13;
        for(uint i = 0; i &lt; parts.length; i++)&#13;
            length += parts[i]._len;&#13;
&#13;
        string memory ret = new string(length);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
&#13;
        for(i = 0; i &lt; parts.length; i++) {&#13;
            memcpy(retptr, parts[i]._ptr, parts[i]._len);&#13;
            retptr += parts[i]._len;&#13;
            if (i &lt; parts.length - 1) {&#13;
                memcpy(retptr, self._ptr, self._len);&#13;
                retptr += self._len;&#13;
            }&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC165&#13;
 * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md&#13;
 */&#13;
interface ERC165 {&#13;
&#13;
  /**&#13;
   * @notice Query if a contract implements an interface&#13;
   * @param _interfaceId The interface identifier, as specified in ERC-165&#13;
   * @dev Interface identification is specified in ERC-165. This function&#13;
   * uses less than 30,000 gas.&#13;
   */&#13;
  function supportsInterface(bytes4 _interfaceId)&#13;
    external&#13;
    view&#13;
    returns (bool);&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC721 Non-Fungible Token Standard basic interface&#13;
 * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Basic is ERC165 {&#13;
&#13;
  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;&#13;
  /*&#13;
   * 0x80ac58cd ===&#13;
   *   bytes4(keccak256('balanceOf(address)')) ^&#13;
   *   bytes4(keccak256('ownerOf(uint256)')) ^&#13;
   *   bytes4(keccak256('approve(address,uint256)')) ^&#13;
   *   bytes4(keccak256('getApproved(uint256)')) ^&#13;
   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^&#13;
   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^&#13;
   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^&#13;
   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^&#13;
   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))&#13;
   */&#13;
&#13;
  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;&#13;
  /*&#13;
   * 0x4f558e79 ===&#13;
   *   bytes4(keccak256('exists(uint256)'))&#13;
   */&#13;
&#13;
  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;&#13;
  /**&#13;
   * 0x780e9d63 ===&#13;
   *   bytes4(keccak256('totalSupply()')) ^&#13;
   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^&#13;
   *   bytes4(keccak256('tokenByIndex(uint256)'))&#13;
   */&#13;
&#13;
  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;&#13;
  /**&#13;
   * 0x5b5e139f ===&#13;
   *   bytes4(keccak256('name()')) ^&#13;
   *   bytes4(keccak256('symbol()')) ^&#13;
   *   bytes4(keccak256('tokenURI(uint256)'))&#13;
   */&#13;
&#13;
  event Transfer(&#13;
    address indexed _from,&#13;
    address indexed _to,&#13;
    uint256 indexed _tokenId&#13;
  );&#13;
  event Approval(&#13;
    address indexed _owner,&#13;
    address indexed _approved,&#13;
    uint256 indexed _tokenId&#13;
  );&#13;
  event ApprovalForAll(&#13;
    address indexed _owner,&#13;
    address indexed _operator,&#13;
    bool _approved&#13;
  );&#13;
&#13;
  function balanceOf(address _owner) public view returns (uint256 _balance);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address _owner);&#13;
  function exists(uint256 _tokenId) public view returns (bool _exists);&#13;
&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function getApproved(uint256 _tokenId)&#13;
    public view returns (address _operator);&#13;
&#13;
  function setApprovalForAll(address _operator, bool _approved) public;&#13;
  function isApprovedForAll(address _owner, address _operator)&#13;
    public view returns (bool);&#13;
&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#13;
    public;&#13;
&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public;&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Enumerable is ERC721Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function tokenOfOwnerByIndex(&#13;
    address _owner,&#13;
    uint256 _index&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (uint256 _tokenId);&#13;
&#13;
  function tokenByIndex(uint256 _index) public view returns (uint256);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Metadata is ERC721Basic {&#13;
  function name() external view returns (string _name);&#13;
  function symbol() external view returns (string _symbol);&#13;
  function tokenURI(uint256 _tokenId) public view returns (string);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, full implementation interface&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC721 token receiver interface&#13;
 * @dev Interface for any contract that wants to support safeTransfers&#13;
 * from ERC721 asset contracts.&#13;
 */&#13;
contract ERC721Receiver {&#13;
  /**&#13;
   * @dev Magic value to be returned upon successful reception of an NFT&#13;
   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,&#13;
   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`&#13;
   */&#13;
  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;&#13;
&#13;
  /**&#13;
   * @notice Handle the receipt of an NFT&#13;
   * @dev The ERC721 smart contract calls this function on the recipient&#13;
   * after a `safetransfer`. This function MAY throw to revert and reject the&#13;
   * transfer. Return of other than the magic value MUST result in the&#13;
   * transaction being reverted.&#13;
   * Note: the contract address is always the message sender.&#13;
   * @param _operator The address which called `safeTransferFrom` function&#13;
   * @param _from The address which previously owned the token&#13;
   * @param _tokenId The NFT identifier which is being transferred&#13;
   * @param _data Additional data with no specified format&#13;
   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`&#13;
   */&#13;
  function onERC721Received(&#13;
    address _operator,&#13;
    address _from,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public&#13;
    returns(bytes4);&#13;
}&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 _a, uint256 _b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (_a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = _a * _b;&#13;
    assert(c / _a == _b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 _a, uint256 _b) internal pure returns (uint256) {&#13;
    // assert(_b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = _a / _b;&#13;
    // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold&#13;
    return _a / _b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {&#13;
    assert(_b &lt;= _a);&#13;
    return _a - _b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 _a, uint256 _b) internal pure returns (uint256 c) {&#13;
    c = _a + _b;&#13;
    assert(c &gt;= _a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * Utility library of inline functions on addresses&#13;
 */&#13;
library AddressUtils {&#13;
&#13;
  /**&#13;
   * Returns whether the target address is a contract&#13;
   * @dev This function will return false if invoked during the constructor of a contract,&#13;
   * as the code is not actually created until after the constructor finishes.&#13;
   * @param _addr address to check&#13;
   * @return whether the target address is a contract&#13;
   */&#13;
  function isContract(address _addr) internal view returns (bool) {&#13;
    uint256 size;&#13;
    // XXX Currently there is no better way to check if there is a contract in an address&#13;
    // than to check the size of the code at that address.&#13;
    // See https://ethereum.stackexchange.com/a/14016/36603&#13;
    // for more details about how this works.&#13;
    // TODO Check this again before the Serenity release, because all addresses will be&#13;
    // contracts then.&#13;
    // solium-disable-next-line security/no-inline-assembly&#13;
    assembly { size := extcodesize(_addr) }&#13;
    return size &gt; 0;&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title SupportsInterfaceWithLookup&#13;
 * @author Matt Condon (@shrugs)&#13;
 * @dev Implements ERC165 using a lookup table.&#13;
 */&#13;
contract SupportsInterfaceWithLookup is ERC165 {&#13;
&#13;
  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;&#13;
  /**&#13;
   * 0x01ffc9a7 ===&#13;
   *   bytes4(keccak256('supportsInterface(bytes4)'))&#13;
   */&#13;
&#13;
  /**&#13;
   * @dev a mapping of interface id to whether or not it's supported&#13;
   */&#13;
  mapping(bytes4 =&gt; bool) internal supportedInterfaces;&#13;
&#13;
  /**&#13;
   * @dev A contract implementing SupportsInterfaceWithLookup&#13;
   * implement ERC165 itself&#13;
   */&#13;
  constructor()&#13;
    public&#13;
  {&#13;
    _registerInterface(InterfaceId_ERC165);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev implement supportsInterface(bytes4) using a lookup table&#13;
   */&#13;
  function supportsInterface(bytes4 _interfaceId)&#13;
    external&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    return supportedInterfaces[_interfaceId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev private method for registering an interface&#13;
   */&#13;
  function _registerInterface(bytes4 _interfaceId)&#13;
    internal&#13;
  {&#13;
    require(_interfaceId != 0xffffffff);&#13;
    supportedInterfaces[_interfaceId] = true;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC721 Non-Fungible Token Standard basic implementation&#13;
 * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {&#13;
&#13;
  using SafeMath for uint256;&#13;
  using AddressUtils for address;&#13;
&#13;
  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`&#13;
  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`&#13;
  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;&#13;
&#13;
  // Mapping from token ID to owner&#13;
  mapping (uint256 =&gt; address) internal tokenOwner;&#13;
&#13;
  // Mapping from token ID to approved address&#13;
  mapping (uint256 =&gt; address) internal tokenApprovals;&#13;
&#13;
  // Mapping from owner to number of owned token&#13;
  mapping (address =&gt; uint256) internal ownedTokensCount;&#13;
&#13;
  // Mapping from owner to operator approvals&#13;
  mapping (address =&gt; mapping (address =&gt; bool)) internal operatorApprovals;&#13;
&#13;
  constructor()&#13;
    public&#13;
  {&#13;
    // register the supported interfaces to conform to ERC721 via ERC165&#13;
    _registerInterface(InterfaceId_ERC721);&#13;
    _registerInterface(InterfaceId_ERC721Exists);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the balance of the specified address&#13;
   * @param _owner address to query the balance of&#13;
   * @return uint256 representing the amount owned by the passed address&#13;
   */&#13;
  function balanceOf(address _owner) public view returns (uint256) {&#13;
    require(_owner != address(0));&#13;
    return ownedTokensCount[_owner];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the owner of the specified token ID&#13;
   * @param _tokenId uint256 ID of the token to query the owner of&#13;
   * @return owner address currently marked as the owner of the given token ID&#13;
   */&#13;
  function ownerOf(uint256 _tokenId) public view returns (address) {&#13;
    address owner = tokenOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
    return owner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether the specified token exists&#13;
   * @param _tokenId uint256 ID of the token to query the existence of&#13;
   * @return whether the token exists&#13;
   */&#13;
  function exists(uint256 _tokenId) public view returns (bool) {&#13;
    address owner = tokenOwner[_tokenId];&#13;
    return owner != address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approves another address to transfer the given token ID&#13;
   * The zero address indicates there is no approved address.&#13;
   * There can only be one approved address per token at a given time.&#13;
   * Can only be called by the token owner or an approved operator.&#13;
   * @param _to address to be approved for the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be approved&#13;
   */&#13;
  function approve(address _to, uint256 _tokenId) public {&#13;
    address owner = ownerOf(_tokenId);&#13;
    require(_to != owner);&#13;
    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));&#13;
&#13;
    tokenApprovals[_tokenId] = _to;&#13;
    emit Approval(owner, _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the approved address for a token ID, or zero if no address set&#13;
   * @param _tokenId uint256 ID of the token to query the approval of&#13;
   * @return address currently approved for the given token ID&#13;
   */&#13;
  function getApproved(uint256 _tokenId) public view returns (address) {&#13;
    return tokenApprovals[_tokenId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Sets or unsets the approval of a given operator&#13;
   * An operator is allowed to transfer all tokens of the sender on their behalf&#13;
   * @param _to operator address to set the approval&#13;
   * @param _approved representing the status of the approval to be set&#13;
   */&#13;
  function setApprovalForAll(address _to, bool _approved) public {&#13;
    require(_to != msg.sender);&#13;
    operatorApprovals[msg.sender][_to] = _approved;&#13;
    emit ApprovalForAll(msg.sender, _to, _approved);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Tells whether an operator is approved by a given owner&#13;
   * @param _owner owner address which you want to query the approval of&#13;
   * @param _operator operator address which you want to query the approval of&#13;
   * @return bool whether the given operator is approved by the given owner&#13;
   */&#13;
  function isApprovedForAll(&#13;
    address _owner,&#13;
    address _operator&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    return operatorApprovals[_owner][_operator];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers the ownership of a given token ID to another address&#13;
   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
  */&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  )&#13;
    public&#13;
  {&#13;
    require(isApprovedOrOwner(msg.sender, _tokenId));&#13;
    require(_from != address(0));&#13;
    require(_to != address(0));&#13;
&#13;
    clearApproval(_from, _tokenId);&#13;
    removeTokenFrom(_from, _tokenId);&#13;
    addTokenTo(_to, _tokenId);&#13;
&#13;
    emit Transfer(_from, _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Safely transfers the ownership of a given token ID to another address&#13;
   * If the target address is a contract, it must implement `onERC721Received`,&#13;
   * which is called upon a safe transfer, and return the magic value&#13;
   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,&#13;
   * the transfer is reverted.&#13;
   *&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
  */&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  )&#13;
    public&#13;
  {&#13;
    // solium-disable-next-line arg-overflow&#13;
    safeTransferFrom(_from, _to, _tokenId, "");&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Safely transfers the ownership of a given token ID to another address&#13;
   * If the target address is a contract, it must implement `onERC721Received`,&#13;
   * which is called upon a safe transfer, and return the magic value&#13;
   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,&#13;
   * the transfer is reverted.&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @param _data bytes data to send along with a safe transfer check&#13;
   */&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public&#13;
  {&#13;
    transferFrom(_from, _to, _tokenId);&#13;
    // solium-disable-next-line arg-overflow&#13;
    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether the given spender can transfer a given token ID&#13;
   * @param _spender address of the spender to query&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @return bool whether the msg.sender is approved for the given token ID,&#13;
   *  is an operator of the owner, or is the owner of the token&#13;
   */&#13;
  function isApprovedOrOwner(&#13;
    address _spender,&#13;
    uint256 _tokenId&#13;
  )&#13;
    internal&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    address owner = ownerOf(_tokenId);&#13;
    // Disable solium check because of&#13;
    // https://github.com/duaraghav8/Solium/issues/175&#13;
    // solium-disable-next-line operator-whitespace&#13;
    return (&#13;
      _spender == owner ||&#13;
      getApproved(_tokenId) == _spender ||&#13;
      isApprovedForAll(owner, _spender)&#13;
    );&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to mint a new token&#13;
   * Reverts if the given token ID already exists&#13;
   * @param _to The address that will own the minted token&#13;
   * @param _tokenId uint256 ID of the token to be minted by the msg.sender&#13;
   */&#13;
  function _mint(address _to, uint256 _tokenId) internal {&#13;
    require(_to != address(0));&#13;
    addTokenTo(_to, _tokenId);&#13;
    emit Transfer(address(0), _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to burn a specific token&#13;
   * Reverts if the token does not exist&#13;
   * @param _tokenId uint256 ID of the token being burned by the msg.sender&#13;
   */&#13;
  function _burn(address _owner, uint256 _tokenId) internal {&#13;
    clearApproval(_owner, _tokenId);&#13;
    removeTokenFrom(_owner, _tokenId);&#13;
    emit Transfer(_owner, address(0), _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to clear current approval of a given token ID&#13;
   * Reverts if the given address is not indeed the owner of the token&#13;
   * @param _owner owner of the token&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   */&#13;
  function clearApproval(address _owner, uint256 _tokenId) internal {&#13;
    require(ownerOf(_tokenId) == _owner);&#13;
    if (tokenApprovals[_tokenId] != address(0)) {&#13;
      tokenApprovals[_tokenId] = address(0);&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to add a token ID to the list of a given address&#13;
   * @param _to address representing the new owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address&#13;
   */&#13;
  function addTokenTo(address _to, uint256 _tokenId) internal {&#13;
    require(tokenOwner[_tokenId] == address(0));&#13;
    tokenOwner[_tokenId] = _to;&#13;
    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to remove a token ID from the list of a given address&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address&#13;
   */&#13;
  function removeTokenFrom(address _from, uint256 _tokenId) internal {&#13;
    require(ownerOf(_tokenId) == _from);&#13;
    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);&#13;
    tokenOwner[_tokenId] = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to invoke `onERC721Received` on a target address&#13;
   * The call is not executed if the target address is not a contract&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _to target address that will receive the tokens&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @param _data bytes optional data to send along with the call&#13;
   * @return whether the call correctly returned the expected magic value&#13;
   */&#13;
  function checkAndCallSafeTransfer(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    internal&#13;
    returns (bool)&#13;
  {&#13;
    if (!_to.isContract()) {&#13;
      return true;&#13;
    }&#13;
    bytes4 retval = ERC721Receiver(_to).onERC721Received(&#13;
      msg.sender, _from, _tokenId, _data);&#13;
    return (retval == ERC721_RECEIVED);&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title Full ERC721 Token&#13;
 * This implementation includes all the required and some optional functionality of the ERC721 standard&#13;
 * Moreover, it includes approve all functionality using operator terminology&#13;
 * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {&#13;
&#13;
  // Token name&#13;
  string internal name_;&#13;
&#13;
  // Token symbol&#13;
  string internal symbol_;&#13;
&#13;
  // Mapping from owner to list of owned token IDs&#13;
  mapping(address =&gt; uint256[]) internal ownedTokens;&#13;
&#13;
  // Mapping from token ID to index of the owner tokens list&#13;
  mapping(uint256 =&gt; uint256) internal ownedTokensIndex;&#13;
&#13;
  // Array with all token ids, used for enumeration&#13;
  uint256[] internal allTokens;&#13;
&#13;
  // Mapping from token id to position in the allTokens array&#13;
  mapping(uint256 =&gt; uint256) internal allTokensIndex;&#13;
&#13;
  // Optional mapping for token URIs&#13;
  mapping(uint256 =&gt; string) internal tokenURIs;&#13;
&#13;
  /**&#13;
   * @dev Constructor function&#13;
   */&#13;
  constructor(string _name, string _symbol) public {&#13;
    name_ = _name;&#13;
    symbol_ = _symbol;&#13;
&#13;
    // register the supported interfaces to conform to ERC721 via ERC165&#13;
    _registerInterface(InterfaceId_ERC721Enumerable);&#13;
    _registerInterface(InterfaceId_ERC721Metadata);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token name&#13;
   * @return string representing the token name&#13;
   */&#13;
  function name() external view returns (string) {&#13;
    return name_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token symbol&#13;
   * @return string representing the token symbol&#13;
   */&#13;
  function symbol() external view returns (string) {&#13;
    return symbol_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns an URI for a given token ID&#13;
   * Throws if the token ID does not exist. May return an empty string.&#13;
   * @param _tokenId uint256 ID of the token to query&#13;
   */&#13;
  function tokenURI(uint256 _tokenId) public view returns (string) {&#13;
    require(exists(_tokenId));&#13;
    return tokenURIs[_tokenId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token ID at a given index of the tokens list of the requested owner&#13;
   * @param _owner address owning the tokens list to be accessed&#13;
   * @param _index uint256 representing the index to be accessed of the requested tokens list&#13;
   * @return uint256 token ID at the given index of the tokens list owned by the requested address&#13;
   */&#13;
  function tokenOfOwnerByIndex(&#13;
    address _owner,&#13;
    uint256 _index&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    require(_index &lt; balanceOf(_owner));&#13;
    return ownedTokens[_owner][_index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the total amount of tokens stored by the contract&#13;
   * @return uint256 representing the total amount of tokens&#13;
   */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return allTokens.length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token ID at a given index of all the tokens in this contract&#13;
   * Reverts if the index is greater or equal to the total number of tokens&#13;
   * @param _index uint256 representing the index to be accessed of the tokens list&#13;
   * @return uint256 token ID at the given index of the tokens list&#13;
   */&#13;
  function tokenByIndex(uint256 _index) public view returns (uint256) {&#13;
    require(_index &lt; totalSupply());&#13;
    return allTokens[_index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to set the token URI for a given token&#13;
   * Reverts if the token ID does not exist&#13;
   * @param _tokenId uint256 ID of the token to set its URI&#13;
   * @param _uri string URI to assign&#13;
   */&#13;
  function _setTokenURI(uint256 _tokenId, string _uri) internal {&#13;
    require(exists(_tokenId));&#13;
    tokenURIs[_tokenId] = _uri;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to add a token ID to the list of a given address&#13;
   * @param _to address representing the new owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address&#13;
   */&#13;
  function addTokenTo(address _to, uint256 _tokenId) internal {&#13;
    super.addTokenTo(_to, _tokenId);&#13;
    uint256 length = ownedTokens[_to].length;&#13;
    ownedTokens[_to].push(_tokenId);&#13;
    ownedTokensIndex[_tokenId] = length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to remove a token ID from the list of a given address&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address&#13;
   */&#13;
  function removeTokenFrom(address _from, uint256 _tokenId) internal {&#13;
    super.removeTokenFrom(_from, _tokenId);&#13;
&#13;
    // To prevent a gap in the array, we store the last token in the index of the token to delete, and&#13;
    // then delete the last slot.&#13;
    uint256 tokenIndex = ownedTokensIndex[_tokenId];&#13;
    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);&#13;
    uint256 lastToken = ownedTokens[_from][lastTokenIndex];&#13;
&#13;
    ownedTokens[_from][tokenIndex] = lastToken;&#13;
    // This also deletes the contents at the last position of the array&#13;
    ownedTokens[_from].length--;&#13;
&#13;
    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to&#13;
    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping&#13;
    // the lastToken to the first position, and then dropping the element placed in the last position of the list&#13;
&#13;
    ownedTokensIndex[_tokenId] = 0;&#13;
    ownedTokensIndex[lastToken] = tokenIndex;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to mint a new token&#13;
   * Reverts if the given token ID already exists&#13;
   * @param _to address the beneficiary that will own the minted token&#13;
   * @param _tokenId uint256 ID of the token to be minted by the msg.sender&#13;
   */&#13;
  function _mint(address _to, uint256 _tokenId) internal {&#13;
    super._mint(_to, _tokenId);&#13;
&#13;
    allTokensIndex[_tokenId] = allTokens.length;&#13;
    allTokens.push(_tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to burn a specific token&#13;
   * Reverts if the token does not exist&#13;
   * @param _owner owner of the token to burn&#13;
   * @param _tokenId uint256 ID of the token being burned by the msg.sender&#13;
   */&#13;
  function _burn(address _owner, uint256 _tokenId) internal {&#13;
    super._burn(_owner, _tokenId);&#13;
&#13;
    // Clear metadata (if any)&#13;
    if (bytes(tokenURIs[_tokenId]).length != 0) {&#13;
      delete tokenURIs[_tokenId];&#13;
    }&#13;
&#13;
    // Reorg all tokens array&#13;
    uint256 tokenIndex = allTokensIndex[_tokenId];&#13;
    uint256 lastTokenIndex = allTokens.length.sub(1);&#13;
    uint256 lastToken = allTokens[lastTokenIndex];&#13;
&#13;
    allTokens[tokenIndex] = lastToken;&#13;
    allTokens[lastTokenIndex] = 0;&#13;
&#13;
    allTokens.length--;&#13;
    allTokensIndex[_tokenId] = 0;&#13;
    allTokensIndex[lastToken] = tokenIndex;&#13;
  }&#13;
&#13;
}&#13;
&#13;
/// @title Contract for Chainbreakers Items (ERC721Token)&#13;
/// @author Tobias Thiele - Qwellcode GmbH - www.qwellcode.de&#13;
&#13;
/*  HOSTFILE&#13;
*   0 = 3D Model (*.glb)&#13;
*   1 = Icon&#13;
*   2 = Thumbnail&#13;
*   3 = Transparent&#13;
*/&#13;
&#13;
/*  RARITY&#13;
*   0 = Common&#13;
*   1 = Uncommon&#13;
*   2 = Rare&#13;
*   3 = Epic&#13;
*   4 = Legendary&#13;
*/&#13;
&#13;
/*  WEAPONS&#13;
*   0 = Axe&#13;
*   1 = Mace&#13;
*   2 = Sword&#13;
*/&#13;
&#13;
/*  STATS&#13;
*   0 = MQ - Motivational Quotient - Charisma&#13;
*   1 = PQ - Physical Quotient - Vitality&#13;
*   2 = IQ - Intelligence Quotient - Intellect&#13;
*   3 = EQ - Experience Quotient - Wisdom&#13;
*   4 = LQ - Learning Agility Quotient - Dexterity&#13;
*   5 = TQ - Technical Quotient - Tactics&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/** @dev used to manage payment in MANA */&#13;
contract MANAInterface {&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool);&#13;
    function approve(address _spender, uint256 _value) public returns (bool);&#13;
    function balanceOf(address _owner) public view returns (uint256);&#13;
    function transfer(address _to, uint256 _value) public returns (bool);&#13;
}&#13;
&#13;
contract OwnableDelegateProxy { }&#13;
&#13;
contract ProxyRegistry {&#13;
    mapping(address =&gt; OwnableDelegateProxy) public proxies;&#13;
}&#13;
&#13;
contract ChainbreakersItemsERC721 is ERC721Token("Chainbreakers Items", "CBI"), BasicAccessControl, randomRange {&#13;
&#13;
    address proxyRegistryAddress;&#13;
&#13;
    using SafeMath for uint256;&#13;
    using strings for *;&#13;
&#13;
    uint256 public totalItems;&#13;
    uint256 public totalItemClass;&#13;
    uint256 public totalTokens;&#13;
    uint8 public currentGen;&#13;
&#13;
    string _baseURI = "http://api.chainbreakers.io/api/v1/items/metadata?tokenId=";&#13;
&#13;
&#13;
    uint public presaleStart = 1541073600;&#13;
&#13;
    // use as seed for random&#13;
    address private lastMinter;&#13;
&#13;
    ItemClass[] private globalClasses;&#13;
&#13;
    mapping(uint256 =&gt; ItemData) public tokenToData;&#13;
    mapping(uint256 =&gt; ItemClass) public classIdToClass;&#13;
&#13;
    struct ItemClass {&#13;
        uint256 classId;&#13;
        string name;&#13;
        uint16 amount;&#13;
        string hostfile;&#13;
        uint16 minLevel;&#13;
        uint16 rarity;&#13;
        uint16 weapon;&#13;
        uint[] category;&#13;
        uint[] statsMin;&#13;
        uint[] statsMax;&#13;
        string desc;&#13;
        uint256 total;&#13;
        uint price;&#13;
        bool active;&#13;
    }&#13;
&#13;
    struct ItemData {&#13;
        uint256 tokenId;&#13;
        uint256 classId;&#13;
        uint[] stats;&#13;
        uint8 gen;&#13;
    }&#13;
&#13;
    event ItemMinted(uint classId, uint price, uint256 total, uint tokenId);&#13;
    event GenerationIncreased(uint8 currentGen);&#13;
    event OwnerPayed(uint amount);&#13;
    event OwnerPayedETH(uint amount);&#13;
&#13;
    // declare interface for communication between smart contracts&#13;
    MANAInterface MANAContract;&#13;
&#13;
    /* HELPER FUNCTIONS - START */&#13;
    /** @dev Concatenate two strings&#13;
      * @param _a The first string&#13;
      * @param _b The second string&#13;
      */&#13;
    function addToString(string _a, string _b) internal pure returns(string) {&#13;
        return _a.toSlice().concat(_b.toSlice());&#13;
    }&#13;
&#13;
    /** @dev Converts an uint to a string&#13;
      * @notice used with addToString() to generate the tokenURI&#13;
      * @param i The uint you want to convert into a string&#13;
      */&#13;
    function uint2str(uint i) internal pure returns(string) {&#13;
        if (i == 0) return "0";&#13;
        uint j = i;&#13;
        uint length;&#13;
        while (j != 0){&#13;
            length++;&#13;
            j /= 10;&#13;
        }&#13;
        bytes memory bstr = new bytes(length);&#13;
        uint k = length - 1;&#13;
        while (i != 0){&#13;
            bstr[k--] = byte(48 + i % 10);&#13;
            i /= 10;&#13;
        }&#13;
        return string(bstr);&#13;
    }&#13;
    /* HELPER FUNCTIONS - END */&#13;
&#13;
    constructor(address _proxyRegistryAddress) public {&#13;
        proxyRegistryAddress = _proxyRegistryAddress;&#13;
    }&#13;
&#13;
    /** @dev changes the date of the start of the presale&#13;
      * @param _start Timestamp the presale starts&#13;
      */&#13;
    function changePresaleData(uint _start) public onlyModerators {&#13;
        presaleStart = _start;&#13;
    }&#13;
&#13;
    /** @dev Used to init the communication between our contracts&#13;
      * @param _manaContractAddress The contract address for the currency you want to accept e.g. MANA&#13;
      */&#13;
    function setDatabase(address _manaContractAddress) public onlyModerators {&#13;
        MANAContract = MANAInterface(_manaContractAddress); // change to official MANA contract address alter (0x0f5d2fb29fb7d3cfee444a200298f468908cc942)&#13;
    }&#13;
&#13;
    /** @dev changes the tokenURI of all minted items + the _baseURI value&#13;
      * @param _newBaseURI base url to the api which reads the meta data from the contract e.g. "http://api.chainbreakers.io/api/v1/items/metadata?tokenId="&#13;
      */&#13;
    function changeBaseURIAll(string _newBaseURI) public onlyModerators {&#13;
        _baseURI = _newBaseURI;&#13;
&#13;
        for(uint a = 0; a &lt; totalTokens; a++) {&#13;
            uint tokenId = tokenByIndex(a);&#13;
            _setTokenURI(tokenId, addToString(_newBaseURI, uint2str(tokenId)));&#13;
        }&#13;
    }&#13;
&#13;
    /** @dev changes the _baseURI value&#13;
      * @param _newBaseURI base url to the api which reads the meta data from the contract e.g. "http://api.chainbreakers.io/api/v1/items/metadata?tokenId="&#13;
      */&#13;
    function changeBaseURI(string _newBaseURI) public onlyModerators {&#13;
        _baseURI = _newBaseURI;&#13;
    }&#13;
&#13;
    /** @dev changes the active state of an item class by its class id&#13;
      * @param _classId calss id of the item class&#13;
      * @param _active active state of the item class&#13;
      */&#13;
    function editActiveFromClassId(uint256 _classId, bool _active) public onlyModerators {&#13;
        ItemClass storage _itemClass = classIdToClass[_classId];&#13;
        _itemClass.active = _active;&#13;
    }&#13;
&#13;
    /** @dev Adds an item to the contract which can be minted by the user paying the selected currency (MANA)&#13;
      * @notice You will find a list of the meanings of the individual indexes on top of the document&#13;
      * @param _name The name of the item&#13;
      * @param _rarity Defines the rarity on an item&#13;
      * @param _weapon Defines which weapon this item is&#13;
      * @param _statsMin An array of integers of the lowest stats an item can have&#13;
      * @param _statsMax An array of integers of the highest stats an item can have&#13;
      * @param _amount Defines how many items can be minted in general&#13;
      * @param _hostfile A string contains links to the 3D object, the icon and the thumbnail&#13;
      * @notice All links inside the _hostfile string has to be seperated by commas. Use `.split(",")` to get an array in frontend&#13;
      * @param _minLevel The lowest level a unit has to be to equip this item&#13;
      * @param _desc An optional item description used for legendary items mostly&#13;
      * @param _price The price of the item&#13;
      */&#13;
    function addItemWithClassAndData(string _name, uint16 _rarity, uint16 _weapon, uint[] _statsMin, uint[] _statsMax, uint16 _amount, string _hostfile, uint16 _minLevel, string _desc, uint _price) public onlyModerators {&#13;
        ItemClass storage _itemClass = classIdToClass[totalItemClass];&#13;
        _itemClass.classId = totalItemClass;&#13;
        _itemClass.name = _name;&#13;
        _itemClass.amount = _amount;&#13;
        _itemClass.rarity = _rarity;&#13;
        _itemClass.weapon = _weapon;&#13;
        _itemClass.statsMin = _statsMin;&#13;
        _itemClass.statsMax = _statsMax;&#13;
        _itemClass.hostfile = _hostfile;&#13;
        _itemClass.minLevel = _minLevel;&#13;
        _itemClass.desc = _desc;&#13;
        _itemClass.total = 0;&#13;
        _itemClass.price = _price;&#13;
        _itemClass.active = true;&#13;
&#13;
        totalItemClass = globalClasses.push(_itemClass);&#13;
&#13;
        totalItems++;&#13;
    }&#13;
&#13;
    /** @dev The function the user calls to buy the selected item for a given price&#13;
      * @notice The price of the items increases after each bought item by a given amount&#13;
      * @param _classId The class id of the item which the user wants to buy&#13;
      */&#13;
    function buyItem(uint256 _classId) public {&#13;
        require(now &gt; presaleStart, "The presale is not started yet");&#13;
&#13;
        ItemClass storage class = classIdToClass[_classId];&#13;
        require(class.active == true, "This item is not for sale");&#13;
        require(class.amount &gt; 0);&#13;
&#13;
        require(class.total &lt; class.amount, "Sold out");&#13;
        require(class.statsMin.length == class.statsMax.length);&#13;
&#13;
        if (class.price &gt; 0) {&#13;
            require(MANAContract != address(0), "Invalid contract address for MANA. Please use the setDatabase() function first.");&#13;
            require(MANAContract.transferFrom(msg.sender, address(this), class.price) == true, "Failed transfering MANA");&#13;
        }&#13;
&#13;
        _mintItem(_classId, msg.sender);&#13;
    }&#13;
&#13;
    /** @dev This function mints the item on the blockchain and generates an ERC721 token&#13;
      * @notice All stats of the item are randomly generated by using the getRandom() function using min and max values&#13;
      * @param _classId The class id of the item which one will be minted&#13;
      * @param _address The address of the owner of the new item&#13;
      */&#13;
    function _mintItem(uint256 _classId, address _address) internal {&#13;
        ItemClass storage class = classIdToClass[_classId];&#13;
        uint[] memory stats = new uint[](6);&#13;
        for(uint j = 0; j &lt; class.statsMin.length; j++) {&#13;
            if (class.statsMax[j] &gt; 0) {&#13;
                if (stats.length == class.statsMin.length) {&#13;
                    stats[j] = getRandom(class.statsMin[j], class.statsMax[j], uint8(j + _classId + class.total), lastMinter);&#13;
                }&#13;
            } else {&#13;
                if (stats.length == class.statsMin.length) {&#13;
                    stats[j] = 0;&#13;
                }&#13;
            }&#13;
        }&#13;
&#13;
        ItemData storage _itemData = tokenToData[totalTokens + 1];&#13;
        _itemData.tokenId = totalTokens + 1;&#13;
        _itemData.classId = _classId;&#13;
        _itemData.stats = stats;&#13;
        _itemData.gen = currentGen;&#13;
&#13;
        class.total += 1;&#13;
        totalTokens += 1;&#13;
        _mint(_address, totalTokens);&#13;
        _setTokenURI(totalTokens, addToString(_baseURI, uint2str(totalTokens)));&#13;
&#13;
        lastMinter = _address;&#13;
&#13;
        emit ItemMinted(class.classId, class.price, class.total, totalTokens);&#13;
    }&#13;
&#13;
    /** @dev Gets the min and the max range of stats a given class id can have&#13;
      * @param _classId The class id of the item you want to return the stats of&#13;
      * @return statsMin An array of the lowest stats the given item can have&#13;
      * @return statsMax An array of the highest stats the given item can have&#13;
      */&#13;
    function getStatsRange(uint256 _classId) public view returns(uint[] statsMin, uint[] statsMax) {&#13;
        return (classIdToClass[_classId].statsMin, classIdToClass[_classId].statsMax);&#13;
    }&#13;
&#13;
    /** @dev Gets information about the item stands behind the given token&#13;
      * @param _tokenId The id of the token you want to get the item data from&#13;
      * @return tokenId The id of the token&#13;
      * @return classId The class id of the item behind the token&#13;
      * @return stats The randomly generated stats of the item behind the token&#13;
      * @return gen The generation of the item&#13;
      */&#13;
    function getItemDataByToken(uint256 _tokenId) public view returns(uint256 tokenId, uint256 classId, uint[] stats, uint8 gen) {&#13;
        return (tokenToData[_tokenId].tokenId, tokenToData[_tokenId].classId, tokenToData[_tokenId].stats, tokenToData[_tokenId].gen);&#13;
    }&#13;
&#13;
    /** @dev Returns information about the item category of the given class id&#13;
      * @param _classId The class id of the item you want to return the stats of&#13;
      * @return classId The class id of the item&#13;
      * @return category An array contains information about the category of the item&#13;
      */&#13;
    function getItemCategory(uint256 _classId) public view returns(uint256 classId, uint[] category) {&#13;
        return (classIdToClass[_classId].classId, classIdToClass[_classId].category);&#13;
    }&#13;
&#13;
    /** @dev Edits the item class&#13;
      * @param _classId The class id of the item you want to edit&#13;
      * @param _name The name of the item&#13;
      * @param _rarity Defines the rarity on an item&#13;
      * @param _weapon Defines which weapon this item is&#13;
      * @param _statsMin An array of integers of the lowest stats an item can have&#13;
      * @param _statsMax An array of integers of the highest stats an item can have&#13;
      * @param _amount Defines how many items can be minted in general&#13;
      * @param _hostfile A string contains links to the 3D object, the icon and the thumbnail&#13;
      * @notice All links inside the _hostfile string has to be seperated by commas. Use `.split(",")` to get an array in frontend&#13;
      * @param _minLevel The lowest level a unit has to be to equip this item&#13;
      * @param _desc An optional item description used for legendary items mostly&#13;
      * @param _price The price of the item&#13;
      */&#13;
    function editClass(uint256 _classId, string _name, uint16 _rarity, uint16 _weapon, uint[] _statsMin, uint[] _statsMax, uint16 _amount, string _hostfile, uint16 _minLevel, string _desc, uint _price) public onlyModerators {&#13;
        ItemClass storage _itemClass = classIdToClass[_classId];&#13;
        _itemClass.name = _name;&#13;
        _itemClass.rarity = _rarity;&#13;
        _itemClass.weapon = _weapon;&#13;
        _itemClass.statsMin = _statsMin;&#13;
        _itemClass.statsMax = _statsMax;&#13;
        _itemClass.amount = _amount;&#13;
        _itemClass.hostfile = _hostfile;&#13;
        _itemClass.minLevel = _minLevel;&#13;
        _itemClass.desc = _desc;&#13;
        _itemClass.price = _price;&#13;
    }&#13;
&#13;
    /** @dev Returns a count of created item classes&#13;
      * @return totalClasses Integer of how many items are able to be minted&#13;
      */&#13;
    function countItemsByClass() public view returns(uint totalClasses) {&#13;
        return (globalClasses.length);&#13;
    }&#13;
&#13;
    /** @dev This function mints an item as a quest reward. The quest contract needs to be added as a moderator&#13;
      * @param _classId The id of the item should be minted&#13;
      * @param _address The address of the future owner of the minted item&#13;
      */&#13;
    function mintItemFromQuest(uint256 _classId, address _address) public onlyModerators {&#13;
        _mintItem(_classId, _address);&#13;
    }&#13;
&#13;
    /** @dev Changes the tokenURI from a minted item by its tokenId&#13;
      * @param _tokenId The id of the token&#13;
      * @param _uri The new URI of the token for metadata e.g. http://api.chainbreakers.io/api/v1/items/metadata?tokenId=TOKEN_ID&#13;
      */&#13;
    function changeURIFromTokenByTokenId(uint256 _tokenId, string _uri) public onlyModerators {&#13;
        _setTokenURI(_tokenId, _uri);&#13;
    }&#13;
&#13;
    function increaseGen() public onlyModerators {&#13;
        currentGen += 1;&#13;
&#13;
        emit GenerationIncreased(currentGen);&#13;
    }&#13;
&#13;
    /** @dev Function to get a given amount of MANA from this contract.&#13;
      * @param _amount The amount of coins you want to get from this contract.&#13;
      */&#13;
    function payOwner(uint _amount) public onlyOwner {&#13;
        MANAContract.transfer(msg.sender, _amount);&#13;
        emit OwnerPayed(_amount);&#13;
    }&#13;
&#13;
    /** @dev Returns all MANA from this contract to the owner of the contract. */&#13;
    function payOwnerAll() public onlyOwner {&#13;
        uint tokens = MANAContract.balanceOf(address(this));&#13;
        MANAContract.transfer(msg.sender, tokens);&#13;
        emit OwnerPayed(tokens);&#13;
    }&#13;
&#13;
    /** @dev Function to get a given amount of ETH from this contract.&#13;
      * @param _amount The amount of coins you want to get from this contract.&#13;
      */&#13;
    function payOwnerETH(uint _amount) public onlyOwner {&#13;
        msg.sender.transfer(_amount);&#13;
        emit OwnerPayedETH(_amount);&#13;
    }&#13;
&#13;
    /** @dev Returns all ETH from this contract to the owner of the contract. */&#13;
    function payOwnerAllETH() public onlyOwner {&#13;
        uint balance = address(this).balance;&#13;
        msg.sender.transfer(balance);&#13;
        emit OwnerPayedETH(balance);&#13;
    }&#13;
&#13;
    function isApprovedForAll(address owner, address operator) public view returns (bool) {&#13;
        // Whitelist OpenSea proxy contract for easy trading.&#13;
        ProxyRegistry proxyRegistry = ProxyRegistry(proxyRegistryAddress);&#13;
        if (proxyRegistry.proxies(owner) == operator) {&#13;
            return true;&#13;
        }&#13;
&#13;
        return super.isApprovedForAll(owner, operator);&#13;
    }&#13;
}
pragma solidity ^0.4.18;

///EtherMinerals

/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="97f3f2e3f2d7f6effef8faedf2f9b9f4f8">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
    function approve(address _to, uint256 _tokenId) public;&#13;
    function balanceOf(address _owner) public view returns (uint256 balance);&#13;
    function implementsERC721() public pure returns (bool);&#13;
    function ownerOf(uint256 _tokenId) public view returns (address addr);&#13;
    function takeOwnership(uint256 _tokenId) public;&#13;
    function totalSupply() public view returns (uint256 total);&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
    function transfer(address _to, uint256 _tokenId) public;&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint256 tokenId);&#13;
    event Approval(address indexed owner, address indexed approved, uint256 tokenId);&#13;
}&#13;
&#13;
contract EtherMinerals is ERC721 {&#13;
&#13;
  /*** EVENTS ***/&#13;
  event Birth(uint256 tokenId, bytes32 name, address owner);&#13;
  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, bytes32 name);&#13;
  event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
  /*** STRUCTS ***/&#13;
  struct Mineral {&#13;
    bytes32 name;&#13;
    address owner;&#13;
    uint256 price;&#13;
    uint256 last_price;&#13;
    address approve_transfer_to;&#13;
  }&#13;
&#13;
  /*** CONSTANTS ***/&#13;
  string public constant NAME = "EtherMinerals";&#13;
  string public constant SYMBOL = "MINERAL";&#13;
  &#13;
  uint256 private startingPrice = 0.01 ether;&#13;
  uint256 private firstStepLimit =  0.15 ether;&#13;
  uint256 private secondStepLimit = 0.564957 ether;&#13;
  &#13;
  bool public gameOpen = false;&#13;
&#13;
  /*** STORAGE ***/&#13;
  mapping (address =&gt; uint256) private ownerCount;&#13;
  mapping (uint256 =&gt; address) public lastBuyer;&#13;
&#13;
  address public ceoAddress;&#13;
  mapping (uint256 =&gt; address) public extra;&#13;
  &#13;
  uint256 mineral_count;&#13;
 &#13;
  mapping (uint256 =&gt; Mineral) private minerals;&#13;
&#13;
  /*** ACCESS MODIFIERS ***/&#13;
  modifier onlyCEO() { require(msg.sender == ceoAddress); _; }&#13;
&#13;
  /*** ACCESS MODIFIES ***/&#13;
  function setCEO(address _newCEO) public onlyCEO {&#13;
    require(_newCEO != address(0));&#13;
    ceoAddress = _newCEO;&#13;
  }&#13;
&#13;
  function setLast(uint256 _id, address _newExtra) public onlyCEO {&#13;
    require(_newExtra != address(0));&#13;
    lastBuyer[_id] = _newExtra;&#13;
  }&#13;
&#13;
  /*** DEFAULT METHODS ***/&#13;
  function symbol() public pure returns (string) { return SYMBOL; }&#13;
  function name() public pure returns (string) { return NAME; }&#13;
  function implementsERC721() public pure returns (bool) { return true; }&#13;
&#13;
  /*** CONSTRUCTOR ***/&#13;
  function EtherMinerals() public {&#13;
    ceoAddress = msg.sender;&#13;
    lastBuyer[1] = msg.sender;&#13;
    lastBuyer[2] = msg.sender;&#13;
    lastBuyer[3] = msg.sender;&#13;
    lastBuyer[4] = msg.sender;&#13;
    lastBuyer[5] = msg.sender;&#13;
    lastBuyer[6] = msg.sender;&#13;
    lastBuyer[7] = msg.sender;&#13;
    lastBuyer[8] = msg.sender;&#13;
    lastBuyer[9] = msg.sender;&#13;
  }&#13;
&#13;
  /*** INTERFACE METHODS ***/&#13;
&#13;
  function createMineral(bytes32 _name, uint256 _price) public onlyCEO {&#13;
    require(msg.sender != address(0));&#13;
    _create_mineral(_name, address(this), _price, 0);&#13;
  }&#13;
&#13;
  function createPromoMineral(bytes32 _name, address _owner, uint256 _price, uint256 _last_price) public onlyCEO {&#13;
    require(msg.sender != address(0));&#13;
    require(_owner != address(0));&#13;
    _create_mineral(_name, _owner, _price, _last_price);&#13;
  }&#13;
&#13;
  function openGame() public onlyCEO {&#13;
    require(msg.sender != address(0));&#13;
    gameOpen = true;&#13;
  }&#13;
&#13;
  function totalSupply() public view returns (uint256 total) {&#13;
    return mineral_count;&#13;
  }&#13;
&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return ownerCount[_owner];&#13;
  }&#13;
  function priceOf(uint256 _mineral_id) public view returns (uint256 price) {&#13;
    return minerals[_mineral_id].price;&#13;
  }&#13;
&#13;
  function getMineral(uint256 _mineral_id) public view returns (&#13;
    uint256 id,&#13;
    bytes32 mineral_name,&#13;
    address owner,&#13;
    uint256 price,&#13;
    uint256 last_price&#13;
  ) {&#13;
    id = _mineral_id;&#13;
    mineral_name = minerals[_mineral_id].name;&#13;
    owner = minerals[_mineral_id].owner;&#13;
    price = minerals[_mineral_id].price;&#13;
    last_price = minerals[_mineral_id].last_price;&#13;
  }&#13;
  &#13;
  function getMinerals() public view returns (uint256[], bytes32[], address[], uint256[]) {&#13;
    uint256[] memory ids = new uint256[](mineral_count);&#13;
    bytes32[] memory names = new bytes32[](mineral_count);&#13;
    address[] memory owners = new address[](mineral_count);&#13;
    uint256[] memory prices = new uint256[](mineral_count);&#13;
    for(uint256 _id = 0; _id &lt; mineral_count; _id++){&#13;
      ids[_id] = _id;&#13;
      names[_id] = minerals[_id].name;&#13;
      owners[_id] = minerals[_id].owner;&#13;
      prices[_id] = minerals[_id].price;&#13;
    }&#13;
    return (ids, names, owners, prices);&#13;
  }&#13;
  &#13;
  function getBalance() public onlyCEO view returns(uint){&#13;
      return address(this).balance;&#13;
  }&#13;
  &#13;
&#13;
  &#13;
  function purchase(uint256 _mineral_id) public payable {&#13;
    require(gameOpen == true);&#13;
    Mineral storage mineral = minerals[_mineral_id];&#13;
&#13;
    require(mineral.owner != msg.sender);&#13;
    require(msg.sender != address(0));  &#13;
    require(msg.value &gt;= mineral.price);&#13;
&#13;
    uint256 excess = SafeMath.sub(msg.value, mineral.price);&#13;
    uint256 reward = uint256(SafeMath.div(SafeMath.mul(mineral.price, 90), 100));&#13;
  &#13;
&#13;
    if(mineral.owner != address(this)){&#13;
      mineral.owner.transfer(reward);&#13;
    }&#13;
    &#13;
    &#13;
    mineral.last_price = mineral.price;&#13;
    address _old_owner = mineral.owner;&#13;
    &#13;
    if (mineral.price &lt; firstStepLimit) {&#13;
      // first stage&#13;
      mineral.price = SafeMath.div(SafeMath.mul(mineral.price, 200), 90);&#13;
    } else if (mineral.price &lt; secondStepLimit) {&#13;
      // second stage&#13;
      mineral.price = SafeMath.div(SafeMath.mul(mineral.price, 118), 90);&#13;
    } else {&#13;
      // third stage&#13;
      mineral.price = SafeMath.div(SafeMath.mul(mineral.price, 113), 90);&#13;
    }&#13;
    mineral.owner = msg.sender;&#13;
&#13;
    emit Transfer(_old_owner, mineral.owner, _mineral_id);&#13;
    emit TokenSold(_mineral_id, mineral.last_price, mineral.price, _old_owner, mineral.owner, mineral.name);&#13;
&#13;
    msg.sender.transfer(excess);&#13;
  }&#13;
&#13;
  function payout() public onlyCEO {&#13;
    ceoAddress.transfer(address(this).balance);&#13;
  }&#13;
&#13;
  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {&#13;
    uint256 tokenCount = balanceOf(_owner);&#13;
    if (tokenCount == 0) {&#13;
      return new uint256[](0);&#13;
    } else {&#13;
      uint256[] memory result = new uint256[](tokenCount);&#13;
      uint256 resultIndex = 0;&#13;
      for (uint256 mineralId = 0; mineralId &lt;= totalSupply(); mineralId++) {&#13;
        if (minerals[mineralId].owner == _owner) {&#13;
          result[resultIndex] = mineralId;&#13;
          resultIndex++;&#13;
        }&#13;
      }&#13;
      return result;&#13;
    }&#13;
  }&#13;
&#13;
  /*** ERC-721 compliance. ***/&#13;
&#13;
  function approve(address _to, uint256 _mineral_id) public {&#13;
    require(msg.sender == minerals[_mineral_id].owner);&#13;
    minerals[_mineral_id].approve_transfer_to = _to;&#13;
    emit Approval(msg.sender, _to, _mineral_id);&#13;
  }&#13;
  function ownerOf(uint256 _mineral_id) public view returns (address owner){&#13;
    owner = minerals[_mineral_id].owner;&#13;
    require(owner != address(0));&#13;
  }&#13;
  function takeOwnership(uint256 _mineral_id) public {&#13;
    address oldOwner = minerals[_mineral_id].owner;&#13;
    require(msg.sender != address(0));&#13;
    require(minerals[_mineral_id].approve_transfer_to == msg.sender);&#13;
    _transfer(oldOwner, msg.sender, _mineral_id);&#13;
  }&#13;
  function transfer(address _to, uint256 _mineral_id) public {&#13;
    require(msg.sender != address(0));&#13;
    require(msg.sender == minerals[_mineral_id].owner);&#13;
    _transfer(msg.sender, _to, _mineral_id);&#13;
  }&#13;
  function transferFrom(address _from, address _to, uint256 _mineral_id) public {&#13;
    require(_from == minerals[_mineral_id].owner);&#13;
    require(minerals[_mineral_id].approve_transfer_to == _to);&#13;
    require(_to != address(0));&#13;
    _transfer(_from, _to, _mineral_id);&#13;
  }&#13;
 &#13;
  function createAllTokens() public onlyCEO{&#13;
    createMineral("Emerald", 10000000000000000);&#13;
    createMineral("Opal", 10000000000000000);&#13;
    createMineral("Diamond", 10000000000000000);&#13;
    createMineral("Bismuth", 10000000000000000);&#13;
    createMineral("Amethyst", 10000000000000000);&#13;
    createMineral("Gold", 10000000000000000);&#13;
    createMineral("Fluorite", 10000000000000000);&#13;
    createMineral("Ruby", 10000000000000000);&#13;
    createMineral("Sapphire", 10000000000000000);&#13;
    createMineral("Pascoite", 10000000000000000);&#13;
    createMineral("Karpatite", 10000000000000000);&#13;
    createMineral("Uvarovite", 10000000000000000);&#13;
    createMineral("Kryptonite", 10000000000000000);&#13;
    createMineral("Good ol' Rock", 10000000000000000);&#13;
    createMineral("Malachite", 10000000000000000);&#13;
    createMineral("Silver", 10000000000000000);&#13;
    createMineral("Burmese Tourmaline" ,10000000000000000);&#13;
    }&#13;
&#13;
  /*** PRIVATE METHODS ***/&#13;
&#13;
  function _create_mineral(bytes32 _name, address _owner, uint256 _price, uint256 _last_price) private {&#13;
    // Params: name, owner, price, is_for_sale, is_public, share_price, increase, fee, share_count,&#13;
    minerals[mineral_count] = Mineral({&#13;
      name: _name,&#13;
      owner: _owner,&#13;
      price: _price,&#13;
      last_price: _last_price,&#13;
      approve_transfer_to: address(0)&#13;
    });&#13;
    &#13;
&#13;
    &#13;
    &#13;
    emit Birth(mineral_count, _name, _owner);&#13;
    emit Transfer(address(this), _owner, mineral_count);&#13;
    mineral_count++;&#13;
  }&#13;
&#13;
  function _transfer(address _from, address _to, uint256 _mineral_id) private {&#13;
    minerals[_mineral_id].owner = _to;&#13;
    minerals[_mineral_id].approve_transfer_to = address(0);&#13;
    ownerCount[_from] -= 1;&#13;
    ownerCount[_to] += 1;&#13;
    emit Transfer(_from, _to, _mineral_id);&#13;
  }&#13;
}&#13;
&#13;
library SafeMath {&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a / b;&#13;
    return c;&#13;
  }&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}
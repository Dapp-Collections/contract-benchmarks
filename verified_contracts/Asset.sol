pragma solidity ^0.4.11;
/*
Token Contract with batch assignments

ERC-20 Token Standar Compliant - ConsenSys

Contract developer: Fares A. Akel C.
<span class="__cf_email__" data-cfemail="04622a656a706b6a6d6b2a656f6168446369656d682a676b69">[emailÂ protected]</span>&#13;
MIT PGP KEY ID: 078E41CB&#13;
*/&#13;
&#13;
/**&#13;
 * @title SafeMath by OpenZeppelin&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
    function sub(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
    }&#13;
&#13;
    function add(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
        uint256 c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
}&#13;
&#13;
contract admined { //This token contract is administered&#13;
    address public admin; //Admin address is public&#13;
    uint public lockThreshold; //Lock tiime is public&#13;
    address public allowedAddr; //There can be an address that can use the token during a lock, its public&#13;
&#13;
    function admined() internal {&#13;
        admin = msg.sender; //Set initial admin to contract creator&#13;
        Admined(admin);&#13;
    }&#13;
&#13;
    modifier onlyAdmin() { //A modifier to define admin-only functions&#13;
        require(msg.sender == admin);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier endOfLock() { //A modifier to lock transactions until finish of time (or being allowed)&#13;
        require(now &gt; lockThreshold || msg.sender == allowedAddr);&#13;
        _;&#13;
    }&#13;
&#13;
    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered&#13;
        admin = _newAdmin;&#13;
        TransferAdminship(admin);&#13;
    }&#13;
&#13;
    function addAllowedToTransfer (address _allowedAddr) onlyAdmin public { //Here the special address that can transfer during a lock is set&#13;
        allowedAddr = _allowedAddr;&#13;
        AddAllowedToTransfer (allowedAddr);&#13;
    }&#13;
&#13;
    function setLock(uint _timeInMins) onlyAdmin public { //Only the admin can set a lock on transfers&#13;
        require(_timeInMins &gt; 0);&#13;
        uint mins = _timeInMins * 1 minutes;&#13;
        lockThreshold = SafeMath.add(now,mins);&#13;
        SetLock(lockThreshold);&#13;
    }&#13;
&#13;
    //All admin actions have a log for public review&#13;
    event SetLock(uint timeInMins);&#13;
    event AddAllowedToTransfer (address allowedAddress);&#13;
    event TransferAdminship(address newAdminister);&#13;
    event Admined(address administer);&#13;
&#13;
}&#13;
&#13;
contract Token is admined {&#13;
&#13;
    uint256 public totalSupply;&#13;
    mapping (address =&gt; uint256) balances; //Balances mapping&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) allowed; //Allowance mapping&#13;
&#13;
    function balanceOf(address _owner) public constant returns (uint256 bal) {&#13;
        return balances[_owner];&#13;
    }&#13;
&#13;
    function transfer(address _to, uint256 _value) endOfLock public returns (bool success) {&#13;
        require(balances[msg.sender] &gt;= _value);&#13;
        balances[msg.sender] = SafeMath.sub(balances[msg.sender], _value);&#13;
        balances[_to] = SafeMath.add(balances[_to], _value);&#13;
        Transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function transferFrom(address _from, address _to, uint256 _value) endOfLock public returns (bool success) {&#13;
        require(balances[_from] &gt;= _value &amp;&amp; allowed[_from][msg.sender] &gt;= _value);&#13;
        balances[_to] = SafeMath.add(balances[_to], _value);&#13;
        balances[_from] = SafeMath.sub(balances[_from], _value);&#13;
        allowed[_from][msg.sender] = SafeMath.sub(allowed[_from][msg.sender], _value);&#13;
        Transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function approve(address _spender, uint256 _value) endOfLock public returns (bool success) {&#13;
        allowed[msg.sender][_spender] = _value;&#13;
        Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    function mintToken(address _target, uint256 _mintedAmount) onlyAdmin endOfLock public {&#13;
        balances[_target] = SafeMath.add(balances[_target], _mintedAmount);&#13;
        totalSupply = SafeMath.add(totalSupply, _mintedAmount);&#13;
        Transfer(0, this, _mintedAmount);&#13;
        Transfer(this, _target, _mintedAmount);&#13;
    }&#13;
&#13;
    function burnToken(address _target, uint256 _burnedAmount) onlyAdmin endOfLock public {&#13;
        balances[_target] = SafeMath.sub(balances[_target], _burnedAmount);&#13;
        totalSupply = SafeMath.sub(totalSupply, _burnedAmount);&#13;
        Burned(_target, _burnedAmount);&#13;
    }&#13;
    //This is an especial Admin-only function to make massive tokens assignments&#13;
    function batch(address[] data,uint256 amount) onlyAdmin public { //It takes an array of addresses and an amount&#13;
        require(balances[this] &gt;= data.length*amount); //The contract must hold the needed tokens&#13;
        for (uint i=0; i&lt;data.length; i++) { //It moves over the array&#13;
            address target = data[i]; //Take an address&#13;
            balances[target] = SafeMath.add(balances[target], amount); //Add an amount to the target address&#13;
            balances[this] = SafeMath.sub(balances[this], amount); //Sub that amount from the contract&#13;
            allowed[this][msg.sender] = SafeMath.sub(allowed[this][msg.sender], amount); //Sub allowance from the contract creator over the contract&#13;
            Transfer(this, target, amount); //log every transfer&#13;
        }&#13;
    }&#13;
&#13;
    //Events to log transactions&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
    event Burned(address indexed _target, uint256 _value);&#13;
}&#13;
&#13;
contract Asset is admined, Token {&#13;
&#13;
    string public name;&#13;
    uint8 public decimals = 18;&#13;
    string public symbol;&#13;
    string public version = '0.1';&#13;
    uint256 initialAmount = 80000000000000000000000000; //80Million tonkens to be created&#13;
&#13;
    function Asset(&#13;
        string _tokenName,&#13;
        string _tokenSymbol&#13;
        ) public {&#13;
        balances[this] = 79920000000000000000000000; // Initial 99.9% stay on the contract&#13;
        balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = 80000000000000000000000; //Initial 0.1% for contract writer&#13;
        allowed[this][msg.sender] = 79920000000000000000000000; //Set allowance for the contract creator/administer over the contract holded amount&#13;
        totalSupply = initialAmount; //Total supply is the initial amount at Asset&#13;
        name = _tokenName; //Name set on deployment&#13;
        symbol = _tokenSymbol; //Simbol set on deployment&#13;
        Transfer(0, this, initialAmount);&#13;
        Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, 80000000000000000000000);&#13;
        Approval(this, msg.sender, 79920000000000000000000000);&#13;
    }&#13;
&#13;
    function() {&#13;
        revert();&#13;
    }&#13;
&#13;
}
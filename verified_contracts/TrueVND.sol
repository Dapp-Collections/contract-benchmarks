pragma solidity ^0.4.24;

// File: openzeppelin-solidity/contracts/ownership/Ownable.sol

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
    address public owner;

    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);

    /**
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender
     * account.
     */
    constructor() public {
        owner = msg.sender;
    }

    /**
     * @dev Throws if called by any account other than the owner.
     */
    modifier onlyOwner() {
        require(msg.sender == owner);
        _;
    }

    /**
     * @dev Allows the current owner to transfer control of the contract to a newOwner.
     * @param newOwner The address to transfer ownership to.
     */
    function transferOwnership(address newOwner) public onlyOwner {
        require(newOwner != address(0));
        emit OwnershipTransferred(owner, newOwner);
        owner = newOwner;
    }
}

// File: openzeppelin-solidity/contracts/ownership/HasNoContracts.sol

/**
 * @title Contracts that should not own Contracts
 * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e795828a8488a7d5">[email protected]</a>π.com&gt;&#13;
 * @dev Should contracts (anything Ownable) end up being owned by this contract, it allows the owner&#13;
 * of this contract to reclaim ownership of the contracts.&#13;
 */&#13;
contract HasNoContracts is Ownable{&#13;
    /**&#13;
     * @dev Reclaim ownership of Ownable contracts&#13;
     * @param contractAddr The address of the Ownable to be reclaimed.&#13;
     */&#13;
    function reclaimContract(address contractAddr) external onlyOwner {&#13;
        Ownable contractInst = Ownable(contractAddr);&#13;
        contractInst.transferOwnership(owner);&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol&#13;
&#13;
/**&#13;
 * @title Contracts that should not own Ether&#13;
 * @author Remco Bloemen &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5b293e3638341b69">[email protected]</a>π.com&gt;&#13;
 * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up&#13;
 * in the contract, it will allow the owner to reclaim this Ether.&#13;
 * @notice Ether can still be sent to this contract by:&#13;
 * calling functions labeled `payable`&#13;
 * `selfdestruct(contract_address)`&#13;
 * mining directly to the contract address&#13;
 */&#13;
contract HasNoEther is Ownable {&#13;
    /**&#13;
    * @dev Constructor that rejects incoming Ether&#13;
    * The `payable` flag is added so we can access `msg.value` without compiler warning. If we&#13;
    * leave out payable, then Solidity will allow inheriting contracts to implement a payable&#13;
    * constructor. By doing it this way we prevent a payable constructor from working. Alternatively&#13;
    * we could use assembly to access msg.value.&#13;
    */&#13;
    constructor() public payable {&#13;
        require(msg.value == 0);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Disallows direct send by setting a default function without the `payable` flag.&#13;
     */&#13;
    function() external {&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Transfer all Ether held by the contract to the owner.&#13;
     */&#13;
    function reclaimEther() external onlyOwner {&#13;
        owner.transfer(address(this).balance);&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol&#13;
&#13;
/**&#13;
 * @title ERC20Basic&#13;
 * @dev Simpler version of ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/179&#13;
 */&#13;
contract ERC20Basic {&#13;
    function totalSupply() public view returns (uint256);&#13;
&#13;
    function balanceOf(address who) public view returns (uint256);&#13;
&#13;
    function transfer(address to, uint256 value) public returns (bool);&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
    function allowance(address owner, address spender) public view returns (uint256);&#13;
&#13;
    function transferFrom(address from, address to, uint256 value) public returns (bool);&#13;
&#13;
    function approve(address spender, uint256 value) public returns (bool);&#13;
&#13;
    event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol&#13;
&#13;
/**&#13;
 * @title SafeERC20&#13;
 * @dev Wrappers around ERC20 operations that throw on failure.&#13;
 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,&#13;
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.&#13;
 */&#13;
library SafeERC20 {&#13;
    function safeTransfer(ERC20Basic token, address to, uint256 value) internal {&#13;
        assert(token.transfer(to, value));&#13;
    }&#13;
&#13;
    function safeTransferFrom(ERC20 token, address from, address to, uint256 value) internal {&#13;
        assert(token.transferFrom(from, to, value));&#13;
    }&#13;
&#13;
    function safeApprove(ERC20 token, address spender, uint256 value) internal {&#13;
        assert(token.approve(spender, value));&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol&#13;
&#13;
/**&#13;
 * @title Contracts that should be able to recover tokens&#13;
 * @author SylTi&#13;
 * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.&#13;
 * This will prevent any accidental loss of tokens.&#13;
 */&#13;
contract CanReclaimToken is Ownable {&#13;
    using SafeERC20 for ERC20Basic;&#13;
&#13;
    /**&#13;
     * @dev Reclaim all ERC20Basic compatible tokens&#13;
     * @param token ERC20Basic The address of the token contract&#13;
     */&#13;
    function reclaimToken(ERC20Basic token) external onlyOwner {&#13;
        uint256 balance = token.balanceOf(this);&#13;
        token.safeTransfer(owner, balance);&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol&#13;
&#13;
/**&#13;
 * @title Contracts that should not own Tokens&#13;
 * @author Remco Bloemen &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6a180f0709052a58">[email protected]</a>π.com&gt;&#13;
 * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.&#13;
 * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the&#13;
 * owner to reclaim the tokens.&#13;
 */&#13;
contract HasNoTokens is CanReclaimToken {&#13;
    /**&#13;
     * @dev Reject all ERC223 compatible tokens&#13;
     * @param _from address The address that is transferring the tokens&#13;
     * @param _value uint256 the amount of the specified token&#13;
     * @param _data Bytes The data passed from the caller.&#13;
     */&#13;
    function tokenFallback(address _from, uint256 _value, bytes _data) external pure {&#13;
        _from;&#13;
        _value;&#13;
        _data;&#13;
        revert();&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/NoOwner.sol&#13;
&#13;
/**&#13;
 * @title Base contract for contracts that should not own things.&#13;
 * @author Remco Bloemen &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="92e0f7fff1fdd2a0">[email protected]</a>π.com&gt;&#13;
 * @dev Solves a class of errors where a contract accidentally becomes owner of Ether, Tokens or&#13;
 * Owned contracts. See respective base contracts for details.&#13;
 */&#13;
contract NoOwner is HasNoEther, HasNoTokens, HasNoContracts {&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/math/SafeMath.sol&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
    /**&#13;
     * @dev Multiplies two numbers, throws on overflow.&#13;
     */&#13;
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        if (a == 0) {&#13;
            return 0;&#13;
        }&#13;
        uint256 c = a * b;&#13;
        assert(c / a == b);&#13;
        return c;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Integer division of two numbers, truncating the quotient.&#13;
     */&#13;
    function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
        uint256 c = a / b;&#13;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
        return c;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
     */&#13;
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Adds two numbers, throws on overflow.&#13;
     */&#13;
    function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        uint256 c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/Claimable.sol&#13;
&#13;
/**&#13;
 * @title Claimable&#13;
 * @dev Extension for the Ownable contract, where the ownership needs to be claimed.&#13;
 * This allows the new owner to accept the transfer.&#13;
 */&#13;
contract Claimable is Ownable {&#13;
    address public pendingOwner;&#13;
&#13;
    /**&#13;
     * @dev Modifier throws if called by any account other than the pendingOwner.&#13;
     */&#13;
    modifier onlyPendingOwner() {&#13;
        require(msg.sender == pendingOwner);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Allows the current owner to set the pendingOwner address.&#13;
     * @param newOwner The address to transfer ownership to.&#13;
     */&#13;
    function transferOwnership(address newOwner) onlyOwner public {&#13;
        pendingOwner = newOwner;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Allows the pendingOwner address to finalize the transfer.&#13;
     */&#13;
    function claimOwnership() onlyPendingOwner public {&#13;
        emit OwnershipTransferred(owner, pendingOwner);&#13;
        owner = pendingOwner;&#13;
        pendingOwner = address(0);&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/BalanceSheet.sol&#13;
&#13;
// A wrapper around the balanceOf mapping.&#13;
contract BalanceSheet is Claimable {&#13;
    using SafeMath for uint256;&#13;
&#13;
    mapping(address =&gt; uint256) public balanceOf;&#13;
&#13;
    function addBalance(address _addr, uint256 _value) public onlyOwner {&#13;
        balanceOf[_addr] = balanceOf[_addr].add(_value);&#13;
    }&#13;
&#13;
    function subBalance(address _addr, uint256 _value) public onlyOwner {&#13;
        balanceOf[_addr] = balanceOf[_addr].sub(_value);&#13;
    }&#13;
&#13;
    function setBalance(address _addr, uint256 _value) public onlyOwner {&#13;
        balanceOf[_addr] = _value;&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/BasicToken.sol&#13;
&#13;
/**&#13;
 * @title Basic token&#13;
 * @dev Basic version of StandardToken, with no allowances.&#13;
 */&#13;
contract BasicToken is ERC20Basic, Claimable {&#13;
    using SafeMath for uint256;&#13;
&#13;
    BalanceSheet public balances;&#13;
&#13;
    uint256 totalSupply_;&#13;
&#13;
    function setBalanceSheet(address sheet) external onlyOwner {&#13;
        balances = BalanceSheet(sheet);&#13;
        balances.claimOwnership();&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev total number of tokens in existence&#13;
    */&#13;
    function totalSupply() public view returns (uint256) {&#13;
        return totalSupply_;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev transfer token for a specified address&#13;
    * @param _to The address to transfer to.&#13;
    * @param _value The amount to be transferred.&#13;
    */&#13;
    function transfer(address _to, uint256 _value) public returns (bool) {&#13;
        transferAllArgsNoAllowance(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {&#13;
        require(_to != address(0));&#13;
        require(_from != address(0));&#13;
        require(_value &lt;= balances.balanceOf(_from));&#13;
&#13;
        // SafeMath.sub will throw if there is not enough balance.&#13;
        balances.subBalance(_from, _value);&#13;
        balances.addBalance(_to, _value);&#13;
        emit Transfer(_from, _to, _value);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Gets the balance of the specified address.&#13;
    * @param _owner The address to query the the balance of.&#13;
    * @return An uint256 representing the amount owned by the passed address.&#13;
    */&#13;
    function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
        return balances.balanceOf(_owner);&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/BurnableToken.sol&#13;
&#13;
/**&#13;
 * @title Burnable Token&#13;
 * @dev Token that can be irreversibly burned (destroyed).&#13;
 */&#13;
contract BurnableToken is BasicToken{&#13;
    event Burn(address indexed burner, uint256 value);&#13;
&#13;
    /**&#13;
     * @dev Burns a specific amount of tokens.&#13;
     * @param _value The amount of token to be burned.&#13;
     */&#13;
    function burn(uint256 _value) public {&#13;
        require(_value &lt;= balances.balanceOf(msg.sender));&#13;
        // no need to require value &lt;= totalSupply, since that would imply the&#13;
        // sender's balance is greater than the totalSupply, which *should* be an assertion failure&#13;
&#13;
        address burner = msg.sender;&#13;
        balances.subBalance(burner, _value);&#13;
        totalSupply_ = totalSupply_.sub(_value);&#13;
        emit Burn(burner, _value);&#13;
        emit Transfer(burner, address(0), _value);&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is Ownable {&#13;
    event Pause();&#13;
    event Unpause();&#13;
&#13;
    bool public paused = false;&#13;
&#13;
    /**&#13;
     * @dev Modifier to make a function callable only when the contract is not paused.&#13;
     */&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Modifier to make a function callable only when the contract is paused.&#13;
     */&#13;
    modifier whenPaused() {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev called by the owner to pause, triggers stopped state&#13;
     */&#13;
    function pause() onlyOwner whenNotPaused public {&#13;
        paused = true;&#13;
        emit Pause();&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev called by the owner to unpause, returns to normal state&#13;
     */&#13;
    function unpause() onlyOwner whenPaused public {&#13;
        paused = false;&#13;
        emit Unpause();&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/AllowanceSheet.sol&#13;
&#13;
// A wrapper around the allowanceOf mapping.&#13;
contract AllowanceSheet is Claimable {&#13;
    using SafeMath for uint256;&#13;
&#13;
    mapping(address =&gt; mapping(address =&gt; uint256)) public allowanceOf;&#13;
&#13;
    function addAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {&#13;
        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].add(_value);&#13;
    }&#13;
&#13;
    function subAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {&#13;
        allowanceOf[_tokenHolder][_spender] = allowanceOf[_tokenHolder][_spender].sub(_value);&#13;
    }&#13;
&#13;
    function setAllowance(address _tokenHolder, address _spender, uint256 _value) public onlyOwner {&#13;
        allowanceOf[_tokenHolder][_spender] = _value;&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/StandardToken.sol&#13;
&#13;
contract StandardToken is ERC20, BasicToken {&#13;
    AllowanceSheet public allowances;&#13;
&#13;
    function setAllowanceSheet(address sheet) external onlyOwner {&#13;
        allowances = AllowanceSheet(sheet);&#13;
        allowances.claimOwnership();&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Transfer tokens from one address to another&#13;
     * @param _from address The address which you want to send tokens from&#13;
     * @param _to address The address which you want to transfer to&#13;
     * @param _value uint256 the amount of tokens to be transferred&#13;
     */&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {&#13;
        transferAllArgsYesAllowance(_from, _to, _value, msg.sender);&#13;
        return true;&#13;
    }&#13;
&#13;
    function transferAllArgsYesAllowance(address _from, address _to, uint256 _value, address spender) internal {&#13;
        require(_value &lt;= allowances.allowanceOf(_from, spender));&#13;
&#13;
        allowances.subAllowance(_from, spender, _value);&#13;
        transferAllArgsNoAllowance(_from, _to, _value);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
     *&#13;
     * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
     * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
     * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
     * @param _spender The address which will spend the funds.&#13;
     * @param _value The amount of tokens to be spent.&#13;
     */&#13;
    function approve(address _spender, uint256 _value) public returns (bool) {&#13;
        approveAllArgs(_spender, _value, msg.sender);&#13;
        return true;&#13;
    }&#13;
&#13;
    function approveAllArgs(address _spender, uint256 _value, address _tokenHolder) internal {&#13;
        allowances.setAllowance(_tokenHolder, _spender, _value);&#13;
        emit Approval(_tokenHolder, _spender, _value);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
     * @param _owner address The address which owns the funds.&#13;
     * @param _spender address The address which will spend the funds.&#13;
     * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
     */&#13;
    function allowance(address _owner, address _spender) public view returns (uint256) {&#13;
        return allowances.allowanceOf(_owner, _spender);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
     *&#13;
     * approve should be called when allowed[_spender] == 0. To increment&#13;
     * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
     * the first transaction is mined)&#13;
     * From MonolithDAO Token.sol&#13;
     * @param _spender The address which will spend the funds.&#13;
     * @param _addedValue The amount of tokens to increase the allowance by.&#13;
     */&#13;
    function increaseApproval(address _spender, uint _addedValue) public returns (bool) {&#13;
        increaseApprovalAllArgs(_spender, _addedValue, msg.sender);&#13;
        return true;&#13;
    }&#13;
&#13;
    function increaseApprovalAllArgs(address _spender, uint _addedValue, address tokenHolder) internal {&#13;
        allowances.addAllowance(tokenHolder, _spender, _addedValue);&#13;
        emit Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
     *&#13;
     * approve should be called when allowed[_spender] == 0. To decrement&#13;
     * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
     * the first transaction is mined)&#13;
     * From MonolithDAO Token.sol&#13;
     * @param _spender The address which will spend the funds.&#13;
     * @param _subtractedValue The amount of tokens to decrease the allowance by.&#13;
     */&#13;
    function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {&#13;
        decreaseApprovalAllArgs(_spender, _subtractedValue, msg.sender);&#13;
        return true;&#13;
    }&#13;
&#13;
    function decreaseApprovalAllArgs(address _spender, uint _subtractedValue, address tokenHolder) internal {&#13;
        uint oldValue = allowances.allowanceOf(tokenHolder, _spender);&#13;
        if (_subtractedValue &gt; oldValue) {&#13;
            allowances.setAllowance(tokenHolder, _spender, 0);&#13;
        } else {&#13;
            allowances.subAllowance(tokenHolder, _spender, _subtractedValue);&#13;
        }&#13;
        emit Approval(tokenHolder, _spender, allowances.allowanceOf(tokenHolder, _spender));&#13;
    }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/PausableToken.sol&#13;
&#13;
/**&#13;
 * @title Pausable token&#13;
 * @dev StandardToken modified with pausable transfers.&#13;
 **/&#13;
contract PausableToken is StandardToken, Pausable{&#13;
    function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {&#13;
        return super.transfer(_to, _value);&#13;
    }&#13;
&#13;
    function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {&#13;
        return super.transferFrom(_from, _to, _value);&#13;
    }&#13;
&#13;
    function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {&#13;
        return super.approve(_spender, _value);&#13;
    }&#13;
&#13;
    function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {&#13;
        return super.increaseApproval(_spender, _addedValue);&#13;
    }&#13;
&#13;
    function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {&#13;
        return super.decreaseApproval(_spender, _subtractedValue);&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/AddressList.sol&#13;
&#13;
contract AddressList is Claimable {&#13;
    string public name;&#13;
    mapping(address =&gt; bool) public onList;&#13;
&#13;
    constructor(string _name, bool nullValue) public {&#13;
        name = _name;&#13;
        onList[0x0] = nullValue;&#13;
    }&#13;
&#13;
    event ChangeWhiteList(address indexed to, bool onList);&#13;
&#13;
    // Set whether _to is on the list or not. Whether 0x0 is on the list&#13;
    // or not cannot be set here - it is set once and for all by the constructor.&#13;
    function changeList(address _to, bool _onList) onlyOwner public {&#13;
        require(_to != 0x0);&#13;
        if (onList[_to] != _onList) {&#13;
            onList[_to] = _onList;&#13;
            emit ChangeWhiteList(_to, _onList);&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/DelegateERC20.sol&#13;
&#13;
contract DelegateERC20 {&#13;
    function delegateTotalSupply() public view returns (uint256);&#13;
&#13;
    function delegateBalanceOf(address who) public view returns (uint256);&#13;
&#13;
    function delegateTransfer(address to, uint256 value, address origSender) public returns (bool);&#13;
&#13;
    function delegateAllowance(address owner, address spender) public view returns (uint256);&#13;
&#13;
    function delegateTransferFrom(address from, address to, uint256 value, address origSender) public returns (bool);&#13;
&#13;
    function delegateApprove(address spender, uint256 value, address origSender) public returns (bool);&#13;
&#13;
    function delegateIncreaseApproval(address spender, uint addedValue, address origSender) public returns (bool);&#13;
&#13;
    function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) public returns (bool);&#13;
}&#13;
&#13;
// File: contracts/CanDelegate.sol&#13;
&#13;
contract CanDelegate is StandardToken {&#13;
    // If this contract needs to be upgraded, the new contract will be stored&#13;
    // in 'delegate' and any ERC20 calls to this contract will be delegated to that one.&#13;
    DelegateERC20 public delegate;&#13;
&#13;
    event DelegateToNewContract(address indexed newContract);&#13;
&#13;
    // Can undelegate by passing in newContract = address(0)&#13;
    function delegateToNewContract(DelegateERC20 newContract) public onlyOwner {&#13;
        delegate = newContract;&#13;
        emit DelegateToNewContract(newContract);&#13;
    }&#13;
&#13;
    // If a delegate has been designated, all ERC20 calls are forwarded to it&#13;
    function transfer(address to, uint256 value) public returns (bool) {&#13;
        if (delegate == address(0)) {&#13;
            return super.transfer(to, value);&#13;
        } else {&#13;
            return delegate.delegateTransfer(to, value, msg.sender);&#13;
        }&#13;
    }&#13;
&#13;
    function transferFrom(address from, address to, uint256 value) public returns (bool) {&#13;
        if (delegate == address(0)) {&#13;
            return super.transferFrom(from, to, value);&#13;
        } else {&#13;
            return delegate.delegateTransferFrom(from, to, value, msg.sender);&#13;
        }&#13;
    }&#13;
&#13;
    function balanceOf(address who) public view returns (uint256) {&#13;
        if (delegate == address(0)) {&#13;
            return super.balanceOf(who);&#13;
        } else {&#13;
            return delegate.delegateBalanceOf(who);&#13;
        }&#13;
    }&#13;
&#13;
    function approve(address spender, uint256 value) public returns (bool) {&#13;
        if (delegate == address(0)) {&#13;
            return super.approve(spender, value);&#13;
        } else {&#13;
            return delegate.delegateApprove(spender, value, msg.sender);&#13;
        }&#13;
    }&#13;
&#13;
    function allowance(address _owner, address spender) public view returns (uint256) {&#13;
        if (delegate == address(0)) {&#13;
            return super.allowance(_owner, spender);&#13;
        } else {&#13;
            return delegate.delegateAllowance(_owner, spender);&#13;
        }&#13;
    }&#13;
&#13;
    function totalSupply() public view returns (uint256) {&#13;
        if (delegate == address(0)) {&#13;
            return super.totalSupply();&#13;
        } else {&#13;
            return delegate.delegateTotalSupply();&#13;
        }&#13;
    }&#13;
&#13;
    function increaseApproval(address spender, uint addedValue) public returns (bool) {&#13;
        if (delegate == address(0)) {&#13;
            return super.increaseApproval(spender, addedValue);&#13;
        } else {&#13;
            return delegate.delegateIncreaseApproval(spender, addedValue, msg.sender);&#13;
        }&#13;
    }&#13;
&#13;
    function decreaseApproval(address spender, uint subtractedValue) public returns (bool) {&#13;
        if (delegate == address(0)) {&#13;
            return super.decreaseApproval(spender, subtractedValue);&#13;
        } else {&#13;
            return delegate.delegateDecreaseApproval(spender, subtractedValue, msg.sender);&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/StandardDelegate.sol&#13;
&#13;
contract StandardDelegate is StandardToken, DelegateERC20 {&#13;
    address public delegatedFrom;&#13;
&#13;
    modifier onlySender(address source) {&#13;
        require(msg.sender == source);&#13;
        _;&#13;
    }&#13;
&#13;
    function setDelegatedFrom(address addr) onlyOwner public {&#13;
        delegatedFrom = addr;&#13;
    }&#13;
&#13;
    // All delegate ERC20 functions are forwarded to corresponding normal functions&#13;
    function delegateTotalSupply() public view returns (uint256) {&#13;
        return totalSupply();&#13;
    }&#13;
&#13;
    function delegateBalanceOf(address who) public view returns (uint256) {&#13;
        return balanceOf(who);&#13;
    }&#13;
&#13;
    function delegateTransfer(address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {&#13;
        transferAllArgsNoAllowance(origSender, to, value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function delegateAllowance(address owner, address spender) public view returns (uint256) {&#13;
        return allowance(owner, spender);&#13;
    }&#13;
&#13;
    function delegateTransferFrom(address from, address to, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {&#13;
        transferAllArgsYesAllowance(from, to, value, origSender);&#13;
        return true;&#13;
    }&#13;
&#13;
    function delegateApprove(address spender, uint256 value, address origSender) onlySender(delegatedFrom) public returns (bool) {&#13;
        approveAllArgs(spender, value, origSender);&#13;
        return true;&#13;
    }&#13;
&#13;
    function delegateIncreaseApproval(address spender, uint addedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {&#13;
        increaseApprovalAllArgs(spender, addedValue, origSender);&#13;
        return true;&#13;
    }&#13;
&#13;
    function delegateDecreaseApproval(address spender, uint subtractedValue, address origSender) onlySender(delegatedFrom) public returns (bool) {&#13;
        decreaseApprovalAllArgs(spender, subtractedValue, origSender);&#13;
        return true;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/TrueVND.sol&#13;
&#13;
contract TrueVND is NoOwner, BurnableToken, CanDelegate, StandardDelegate, PausableToken {&#13;
    string public name = "TrueVND";&#13;
    string public symbol = "TVND";&#13;
    uint8 public constant decimals = 18;&#13;
&#13;
    AddressList public canReceiveMintWhiteList;&#13;
    AddressList public canBurnWhiteList;&#13;
    AddressList public blackList;&#13;
    AddressList public noFeesList;&#13;
    address public staker;&#13;
&#13;
    uint256 public burnMin = 1000 * 10 ** uint256(decimals);&#13;
    uint256 public burnMax = 20000000 * 10 ** uint256(decimals);&#13;
&#13;
    uint80 public transferFeeNumerator = 8;&#13;
    uint80 public transferFeeDenominator = 10000;&#13;
    uint80 public mintFeeNumerator = 0;&#13;
    uint80 public mintFeeDenominator = 10000;&#13;
    uint256 public mintFeeFlat = 0;&#13;
    uint80 public burnFeeNumerator = 0;&#13;
    uint80 public burnFeeDenominator = 10000;&#13;
    uint256 public burnFeeFlat = 0;&#13;
&#13;
    event ChangeBurnBoundsEvent(uint256 newMin, uint256 newMax);&#13;
    event Mint(address indexed to, uint256 amount);&#13;
    event WipedAccount(address indexed account, uint256 balance);&#13;
&#13;
    constructor() public {&#13;
        totalSupply_ = 0;&#13;
        staker = msg.sender;&#13;
    }&#13;
&#13;
    function setLists(AddressList _canReceiveMintWhiteList, AddressList _canBurnWhiteList, AddressList _blackList, AddressList _noFeesList) onlyOwner public {&#13;
        canReceiveMintWhiteList = _canReceiveMintWhiteList;&#13;
        canBurnWhiteList = _canBurnWhiteList;&#13;
        blackList = _blackList;&#13;
        noFeesList = _noFeesList;&#13;
    }&#13;
&#13;
    function changeName(string _name, string _symbol) onlyOwner public {&#13;
        name = _name;&#13;
        symbol = _symbol;&#13;
    }&#13;
&#13;
    // Burning functions as withdrawing money from the system. The platform will keep track of who burns coins,&#13;
    // and will send them back the equivalent amount of money (rounded down to the nearest cent).&#13;
    function burn(uint256 _value) public {&#13;
        require(canBurnWhiteList.onList(msg.sender));&#13;
        require(_value &gt;= burnMin);&#13;
        require(_value &lt;= burnMax);&#13;
        uint256 fee = payStakingFee(msg.sender, _value, burnFeeNumerator, burnFeeDenominator, burnFeeFlat, 0x0);&#13;
        uint256 remaining = _value.sub(fee);&#13;
        super.burn(remaining);&#13;
    }&#13;
&#13;
    // Create _amount new tokens and transfer them to _to.&#13;
    // Based on code by OpenZeppelin: https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/MintableToken.sol&#13;
    function mint(address _to, uint256 _amount) onlyOwner public {&#13;
        require(canReceiveMintWhiteList.onList(_to));&#13;
        totalSupply_ = totalSupply_.add(_amount);&#13;
        balances.addBalance(_to, _amount);&#13;
        emit Mint(_to, _amount);&#13;
        emit Transfer(address(0), _to, _amount);&#13;
        payStakingFee(_to, _amount, mintFeeNumerator, mintFeeDenominator, mintFeeFlat, 0x0);&#13;
    }&#13;
&#13;
    // Change the minimum and maximum amount that can be burned at once. Burning&#13;
    // may be disabled by setting both to 0 (this will not be done under normal&#13;
    // operation, but we can't add checks to disallow it without losing a lot of&#13;
    // flexibility since burning could also be as good as disabled&#13;
    // by setting the minimum extremely high, and we don't want to lock&#13;
    // in any particular cap for the minimum)&#13;
    function changeBurnBounds(uint newMin, uint newMax) onlyOwner public {&#13;
        require(newMin &lt;= newMax);&#13;
        burnMin = newMin;&#13;
        burnMax = newMax;&#13;
        emit ChangeBurnBoundsEvent(newMin, newMax);&#13;
    }&#13;
&#13;
    // A blacklisted address can't call transferFrom&#13;
    function transferAllArgsYesAllowance(address _from, address _to, uint256 _value, address spender) internal {&#13;
        require(!blackList.onList(spender));&#13;
        super.transferAllArgsYesAllowance(_from, _to, _value, spender);&#13;
    }&#13;
&#13;
    // transfer and transferFrom both ultimately call this function, so we&#13;
    // check blacklist and pay staking fee here.&#13;
    function transferAllArgsNoAllowance(address _from, address _to, uint256 _value) internal {&#13;
        require(!blackList.onList(_from));&#13;
        require(!blackList.onList(_to));&#13;
        super.transferAllArgsNoAllowance(_from, _to, _value);&#13;
        payStakingFee(_to, _value, transferFeeNumerator, transferFeeDenominator, burnFeeFlat, _from);&#13;
    }&#13;
&#13;
    function wipeBlacklistedAccount(address account) public onlyOwner {&#13;
        require(blackList.onList(account));&#13;
        uint256 oldValue = balanceOf(account);&#13;
        balances.setBalance(account, 0);&#13;
        totalSupply_ = totalSupply_.sub(oldValue);&#13;
        emit WipedAccount(account, oldValue);&#13;
    }&#13;
&#13;
    function payStakingFee(address payer, uint256 value, uint80 numerator, uint80 denominator, uint256 flatRate, address otherParticipant) private returns (uint256) {&#13;
        if (noFeesList.onList(payer) || noFeesList.onList(otherParticipant)) {&#13;
            return 0;&#13;
        }&#13;
        uint256 stakingFee = value.mul(numerator).div(denominator).add(flatRate);&#13;
        if (stakingFee &gt; 0) {&#13;
            super.transferAllArgsNoAllowance(payer, staker, stakingFee);&#13;
        }&#13;
        return stakingFee;&#13;
    }&#13;
&#13;
    function changeStakingFees(uint80 _transferFeeNumerator,&#13;
        uint80 _transferFeeDenominator,&#13;
        uint80 _mintFeeNumerator,&#13;
        uint80 _mintFeeDenominator,&#13;
        uint256 _mintFeeFlat,&#13;
        uint80 _burnFeeNumerator,&#13;
        uint80 _burnFeeDenominator,&#13;
        uint256 _burnFeeFlat) public onlyOwner {&#13;
        require(_transferFeeDenominator != 0);&#13;
        require(_mintFeeDenominator != 0);&#13;
        require(_burnFeeDenominator != 0);&#13;
        transferFeeNumerator = _transferFeeNumerator;&#13;
        transferFeeDenominator = _transferFeeDenominator;&#13;
        mintFeeNumerator = _mintFeeNumerator;&#13;
        mintFeeDenominator = _mintFeeDenominator;&#13;
        mintFeeFlat = _mintFeeFlat;&#13;
        burnFeeNumerator = _burnFeeNumerator;&#13;
        burnFeeDenominator = _burnFeeDenominator;&#13;
        burnFeeFlat = _burnFeeFlat;&#13;
    }&#13;
&#13;
    function changeStaker(address newStaker) public onlyOwner {&#13;
        require(newStaker != address(0));&#13;
        staker = newStaker;&#13;
    }&#13;
}
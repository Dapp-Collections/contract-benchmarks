pragma solidity 0.4.25;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ec888d9a89ac8d8783818e8dc28f8381">[emailÂ protected]</a>&#13;
// released under Apache 2.0 licence&#13;
// input  /home/phillip/Projects/cryptocare/contracts/contracts/CryptoCareMinter.sol&#13;
// flattened :  Saturday, 20-Oct-18 22:15:01 UTC&#13;
contract ERC721Receiver {&#13;
  /**&#13;
   * @dev Magic value to be returned upon successful reception of an NFT&#13;
   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,&#13;
   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`&#13;
   */&#13;
  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;&#13;
&#13;
  /**&#13;
   * @notice Handle the receipt of an NFT&#13;
   * @dev The ERC721 smart contract calls this function on the recipient&#13;
   * after a `safetransfer`. This function MAY throw to revert and reject the&#13;
   * transfer. Return of other than the magic value MUST result in the &#13;
   * transaction being reverted.&#13;
   * Note: the contract address is always the message sender.&#13;
   * @param _operator The address which called `safeTransferFrom` function&#13;
   * @param _from The address which previously owned the token&#13;
   * @param _tokenId The NFT identifier which is being transfered&#13;
   * @param _data Additional data with no specified format&#13;
   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`&#13;
   */&#13;
  function onERC721Received(&#13;
    address _operator,&#13;
    address _from,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public&#13;
    returns(bytes4);&#13;
}&#13;
&#13;
library AddressUtils {&#13;
&#13;
  /**&#13;
   * Returns whether the target address is a contract&#13;
   * @dev This function will return false if invoked during the constructor of a contract,&#13;
   * as the code is not actually created until after the constructor finishes.&#13;
   * @param addr address to check&#13;
   * @return whether the target address is a contract&#13;
   */&#13;
  function isContract(address addr) internal view returns (bool) {&#13;
    uint256 size;&#13;
    // XXX Currently there is no better way to check if there is a contract in an address&#13;
    // than to check the size of the code at that address.&#13;
    // See https://ethereum.stackexchange.com/a/14016/36603&#13;
    // for more details about how this works.&#13;
    // TODO Check this again before the Serenity release, because all addresses will be&#13;
    // contracts then.&#13;
    // solium-disable-next-line security/no-inline-assembly&#13;
    assembly { size := extcodesize(addr) }&#13;
    return size &gt; 0;&#13;
  }&#13;
&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipRenounced(address indexed previousOwner);&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   * @notice Renouncing to ownership will leave the contract without an owner.&#13;
   * It will not be possible to call the functions with the `onlyOwner`&#13;
   * modifier anymore.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipRenounced(owner);&#13;
    owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address _newOwner) public onlyOwner {&#13;
    _transferOwnership(_newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address _newOwner) internal {&#13;
    require(_newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, _newOwner);&#13;
    owner = _newOwner;&#13;
  }&#13;
}&#13;
&#13;
interface ERC165 {&#13;
&#13;
  /**&#13;
   * @notice Query if a contract implements an interface&#13;
   * @param _interfaceId The interface identifier, as specified in ERC-165&#13;
   * @dev Interface identification is specified in ERC-165. This function&#13;
   * uses less than 30,000 gas.&#13;
   */&#13;
  function supportsInterface(bytes4 _interfaceId)&#13;
    external&#13;
    view&#13;
    returns (bool);&#13;
}&#13;
&#13;
contract Pausable is Ownable {&#13;
  event Pause();&#13;
  event Unpause();&#13;
&#13;
  bool public paused = false;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is not paused.&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is paused.&#13;
   */&#13;
  modifier whenPaused() {&#13;
    require(paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to pause, triggers stopped state&#13;
   */&#13;
  function pause() onlyOwner whenNotPaused public {&#13;
    paused = true;&#13;
    emit Pause();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to unpause, returns to normal state&#13;
   */&#13;
  function unpause() onlyOwner whenPaused public {&#13;
    paused = false;&#13;
    emit Unpause();&#13;
  }&#13;
}&#13;
&#13;
contract ERC721Basic is ERC165 {&#13;
  event Transfer(&#13;
    address indexed _from,&#13;
    address indexed _to,&#13;
    uint256 indexed _tokenId&#13;
  );&#13;
  event Approval(&#13;
    address indexed _owner,&#13;
    address indexed _approved,&#13;
    uint256 indexed _tokenId&#13;
  );&#13;
  event ApprovalForAll(&#13;
    address indexed _owner,&#13;
    address indexed _operator,&#13;
    bool _approved&#13;
  );&#13;
&#13;
  function balanceOf(address _owner) public view returns (uint256 _balance);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address _owner);&#13;
  function exists(uint256 _tokenId) public view returns (bool _exists);&#13;
&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function getApproved(uint256 _tokenId)&#13;
    public view returns (address _operator);&#13;
&#13;
  function setApprovalForAll(address _operator, bool _approved) public;&#13;
  function isApprovedForAll(address _owner, address _operator)&#13;
    public view returns (bool);&#13;
&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#13;
    public;&#13;
&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public;&#13;
}&#13;
&#13;
contract SupportsInterfaceWithLookup is ERC165 {&#13;
  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;&#13;
  /**&#13;
   * 0x01ffc9a7 ===&#13;
   *   bytes4(keccak256('supportsInterface(bytes4)'))&#13;
   */&#13;
&#13;
  /**&#13;
   * @dev a mapping of interface id to whether or not it's supported&#13;
   */&#13;
  mapping(bytes4 =&gt; bool) internal supportedInterfaces;&#13;
&#13;
  /**&#13;
   * @dev A contract implementing SupportsInterfaceWithLookup&#13;
   * implement ERC165 itself&#13;
   */&#13;
  constructor()&#13;
    public&#13;
  {&#13;
    _registerInterface(InterfaceId_ERC165);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev implement supportsInterface(bytes4) using a lookup table&#13;
   */&#13;
  function supportsInterface(bytes4 _interfaceId)&#13;
    external&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    return supportedInterfaces[_interfaceId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev private method for registering an interface&#13;
   */&#13;
  function _registerInterface(bytes4 _interfaceId)&#13;
    internal&#13;
  {&#13;
    require(_interfaceId != 0xffffffff);&#13;
    supportedInterfaces[_interfaceId] = true;&#13;
  }&#13;
}&#13;
&#13;
contract ERC721Enumerable is ERC721Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function tokenOfOwnerByIndex(&#13;
    address _owner,&#13;
    uint256 _index&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (uint256 _tokenId);&#13;
&#13;
  function tokenByIndex(uint256 _index) public view returns (uint256);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Metadata is ERC721Basic {&#13;
  function name() external view returns (string _name);&#13;
  function symbol() external view returns (string _symbol);&#13;
  function tokenURI(uint256 _tokenId) public view returns (string);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, full implementation interface&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {&#13;
}&#13;
&#13;
contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {&#13;
&#13;
  bytes4 private constant InterfaceId_ERC721 = 0x80ac58cd;&#13;
  /*&#13;
   * 0x80ac58cd ===&#13;
   *   bytes4(keccak256('balanceOf(address)')) ^&#13;
   *   bytes4(keccak256('ownerOf(uint256)')) ^&#13;
   *   bytes4(keccak256('approve(address,uint256)')) ^&#13;
   *   bytes4(keccak256('getApproved(uint256)')) ^&#13;
   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^&#13;
   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^&#13;
   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^&#13;
   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^&#13;
   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))&#13;
   */&#13;
&#13;
  bytes4 private constant InterfaceId_ERC721Exists = 0x4f558e79;&#13;
  /*&#13;
   * 0x4f558e79 ===&#13;
   *   bytes4(keccak256('exists(uint256)'))&#13;
   */&#13;
&#13;
  using SafeMath for uint256;&#13;
  using AddressUtils for address;&#13;
&#13;
  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`&#13;
  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`&#13;
  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;&#13;
&#13;
  // Mapping from token ID to owner&#13;
  mapping (uint256 =&gt; address) internal tokenOwner;&#13;
&#13;
  // Mapping from token ID to approved address&#13;
  mapping (uint256 =&gt; address) internal tokenApprovals;&#13;
&#13;
  // Mapping from owner to number of owned token&#13;
  mapping (address =&gt; uint256) internal ownedTokensCount;&#13;
&#13;
  // Mapping from owner to operator approvals&#13;
  mapping (address =&gt; mapping (address =&gt; bool)) internal operatorApprovals;&#13;
&#13;
  /**&#13;
   * @dev Guarantees msg.sender is owner of the given token&#13;
   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender&#13;
   */&#13;
  modifier onlyOwnerOf(uint256 _tokenId) {&#13;
    require(ownerOf(_tokenId) == msg.sender);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator&#13;
   * @param _tokenId uint256 ID of the token to validate&#13;
   */&#13;
  modifier canTransfer(uint256 _tokenId) {&#13;
    require(isApprovedOrOwner(msg.sender, _tokenId));&#13;
    _;&#13;
  }&#13;
&#13;
  constructor()&#13;
    public&#13;
  {&#13;
    // register the supported interfaces to conform to ERC721 via ERC165&#13;
    _registerInterface(InterfaceId_ERC721);&#13;
    _registerInterface(InterfaceId_ERC721Exists);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the balance of the specified address&#13;
   * @param _owner address to query the balance of&#13;
   * @return uint256 representing the amount owned by the passed address&#13;
   */&#13;
  function balanceOf(address _owner) public view returns (uint256) {&#13;
    require(_owner != address(0));&#13;
    return ownedTokensCount[_owner];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the owner of the specified token ID&#13;
   * @param _tokenId uint256 ID of the token to query the owner of&#13;
   * @return owner address currently marked as the owner of the given token ID&#13;
   */&#13;
  function ownerOf(uint256 _tokenId) public view returns (address) {&#13;
    address owner = tokenOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
    return owner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether the specified token exists&#13;
   * @param _tokenId uint256 ID of the token to query the existence of&#13;
   * @return whether the token exists&#13;
   */&#13;
  function exists(uint256 _tokenId) public view returns (bool) {&#13;
    address owner = tokenOwner[_tokenId];&#13;
    return owner != address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approves another address to transfer the given token ID&#13;
   * The zero address indicates there is no approved address.&#13;
   * There can only be one approved address per token at a given time.&#13;
   * Can only be called by the token owner or an approved operator.&#13;
   * @param _to address to be approved for the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be approved&#13;
   */&#13;
  function approve(address _to, uint256 _tokenId) public {&#13;
    address owner = ownerOf(_tokenId);&#13;
    require(_to != owner);&#13;
    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));&#13;
&#13;
    tokenApprovals[_tokenId] = _to;&#13;
    emit Approval(owner, _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the approved address for a token ID, or zero if no address set&#13;
   * @param _tokenId uint256 ID of the token to query the approval of&#13;
   * @return address currently approved for the given token ID&#13;
   */&#13;
  function getApproved(uint256 _tokenId) public view returns (address) {&#13;
    return tokenApprovals[_tokenId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Sets or unsets the approval of a given operator&#13;
   * An operator is allowed to transfer all tokens of the sender on their behalf&#13;
   * @param _to operator address to set the approval&#13;
   * @param _approved representing the status of the approval to be set&#13;
   */&#13;
  function setApprovalForAll(address _to, bool _approved) public {&#13;
    require(_to != msg.sender);&#13;
    operatorApprovals[msg.sender][_to] = _approved;&#13;
    emit ApprovalForAll(msg.sender, _to, _approved);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Tells whether an operator is approved by a given owner&#13;
   * @param _owner owner address which you want to query the approval of&#13;
   * @param _operator operator address which you want to query the approval of&#13;
   * @return bool whether the given operator is approved by the given owner&#13;
   */&#13;
  function isApprovedForAll(&#13;
    address _owner,&#13;
    address _operator&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    return operatorApprovals[_owner][_operator];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers the ownership of a given token ID to another address&#13;
   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
  */&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  )&#13;
    public&#13;
    canTransfer(_tokenId)&#13;
  {&#13;
    require(_from != address(0));&#13;
    require(_to != address(0));&#13;
&#13;
    clearApproval(_from, _tokenId);&#13;
    removeTokenFrom(_from, _tokenId);&#13;
    addTokenTo(_to, _tokenId);&#13;
&#13;
    emit Transfer(_from, _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Safely transfers the ownership of a given token ID to another address&#13;
   * If the target address is a contract, it must implement `onERC721Received`,&#13;
   * which is called upon a safe transfer, and return the magic value&#13;
   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,&#13;
   * the transfer is reverted.&#13;
   *&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
  */&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  )&#13;
    public&#13;
    canTransfer(_tokenId)&#13;
  {&#13;
    // solium-disable-next-line arg-overflow&#13;
    safeTransferFrom(_from, _to, _tokenId, "");&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Safely transfers the ownership of a given token ID to another address&#13;
   * If the target address is a contract, it must implement `onERC721Received`,&#13;
   * which is called upon a safe transfer, and return the magic value&#13;
   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,&#13;
   * the transfer is reverted.&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @param _data bytes data to send along with a safe transfer check&#13;
   */&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public&#13;
    canTransfer(_tokenId)&#13;
  {&#13;
    transferFrom(_from, _to, _tokenId);&#13;
    // solium-disable-next-line arg-overflow&#13;
    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether the given spender can transfer a given token ID&#13;
   * @param _spender address of the spender to query&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @return bool whether the msg.sender is approved for the given token ID,&#13;
   *  is an operator of the owner, or is the owner of the token&#13;
   */&#13;
  function isApprovedOrOwner(&#13;
    address _spender,&#13;
    uint256 _tokenId&#13;
  )&#13;
    internal&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    address owner = ownerOf(_tokenId);&#13;
    // Disable solium check because of&#13;
    // https://github.com/duaraghav8/Solium/issues/175&#13;
    // solium-disable-next-line operator-whitespace&#13;
    return (&#13;
      _spender == owner ||&#13;
      getApproved(_tokenId) == _spender ||&#13;
      isApprovedForAll(owner, _spender)&#13;
    );&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to mint a new token&#13;
   * Reverts if the given token ID already exists&#13;
   * @param _to The address that will own the minted token&#13;
   * @param _tokenId uint256 ID of the token to be minted by the msg.sender&#13;
   */&#13;
  function _mint(address _to, uint256 _tokenId) internal {&#13;
    require(_to != address(0));&#13;
    addTokenTo(_to, _tokenId);&#13;
    emit Transfer(address(0), _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to burn a specific token&#13;
   * Reverts if the token does not exist&#13;
   * @param _tokenId uint256 ID of the token being burned by the msg.sender&#13;
   */&#13;
  function _burn(address _owner, uint256 _tokenId) internal {&#13;
    clearApproval(_owner, _tokenId);&#13;
    removeTokenFrom(_owner, _tokenId);&#13;
    emit Transfer(_owner, address(0), _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to clear current approval of a given token ID&#13;
   * Reverts if the given address is not indeed the owner of the token&#13;
   * @param _owner owner of the token&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   */&#13;
  function clearApproval(address _owner, uint256 _tokenId) internal {&#13;
    require(ownerOf(_tokenId) == _owner);&#13;
    if (tokenApprovals[_tokenId] != address(0)) {&#13;
      tokenApprovals[_tokenId] = address(0);&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to add a token ID to the list of a given address&#13;
   * @param _to address representing the new owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address&#13;
   */&#13;
  function addTokenTo(address _to, uint256 _tokenId) internal {&#13;
    require(tokenOwner[_tokenId] == address(0));&#13;
    tokenOwner[_tokenId] = _to;&#13;
    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to remove a token ID from the list of a given address&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address&#13;
   */&#13;
  function removeTokenFrom(address _from, uint256 _tokenId) internal {&#13;
    require(ownerOf(_tokenId) == _from);&#13;
    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);&#13;
    tokenOwner[_tokenId] = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to invoke `onERC721Received` on a target address&#13;
   * The call is not executed if the target address is not a contract&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _to target address that will receive the tokens&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @param _data bytes optional data to send along with the call&#13;
   * @return whether the call correctly returned the expected magic value&#13;
   */&#13;
  function checkAndCallSafeTransfer(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    internal&#13;
    returns (bool)&#13;
  {&#13;
    if (!_to.isContract()) {&#13;
      return true;&#13;
    }&#13;
    bytes4 retval = ERC721Receiver(_to).onERC721Received(&#13;
      msg.sender, _from, _tokenId, _data);&#13;
    return (retval == ERC721_RECEIVED);&#13;
  }&#13;
}&#13;
&#13;
contract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {&#13;
&#13;
  bytes4 private constant InterfaceId_ERC721Enumerable = 0x780e9d63;&#13;
  /**&#13;
   * 0x780e9d63 ===&#13;
   *   bytes4(keccak256('totalSupply()')) ^&#13;
   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^&#13;
   *   bytes4(keccak256('tokenByIndex(uint256)'))&#13;
   */&#13;
&#13;
  bytes4 private constant InterfaceId_ERC721Metadata = 0x5b5e139f;&#13;
  /**&#13;
   * 0x5b5e139f ===&#13;
   *   bytes4(keccak256('name()')) ^&#13;
   *   bytes4(keccak256('symbol()')) ^&#13;
   *   bytes4(keccak256('tokenURI(uint256)'))&#13;
   */&#13;
&#13;
  // Token name&#13;
  string internal name_;&#13;
&#13;
  // Token symbol&#13;
  string internal symbol_;&#13;
&#13;
  // Mapping from owner to list of owned token IDs&#13;
  mapping(address =&gt; uint256[]) internal ownedTokens;&#13;
&#13;
  // Mapping from token ID to index of the owner tokens list&#13;
  mapping(uint256 =&gt; uint256) internal ownedTokensIndex;&#13;
&#13;
  // Array with all token ids, used for enumeration&#13;
  uint256[] internal allTokens;&#13;
&#13;
  // Mapping from token id to position in the allTokens array&#13;
  mapping(uint256 =&gt; uint256) internal allTokensIndex;&#13;
&#13;
  // Optional mapping for token URIs&#13;
  mapping(uint256 =&gt; string) internal tokenURIs;&#13;
&#13;
  /**&#13;
   * @dev Constructor function&#13;
   */&#13;
  constructor(string _name, string _symbol) public {&#13;
    name_ = _name;&#13;
    symbol_ = _symbol;&#13;
&#13;
    // register the supported interfaces to conform to ERC721 via ERC165&#13;
    _registerInterface(InterfaceId_ERC721Enumerable);&#13;
    _registerInterface(InterfaceId_ERC721Metadata);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token name&#13;
   * @return string representing the token name&#13;
   */&#13;
  function name() external view returns (string) {&#13;
    return name_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token symbol&#13;
   * @return string representing the token symbol&#13;
   */&#13;
  function symbol() external view returns (string) {&#13;
    return symbol_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns an URI for a given token ID&#13;
   * Throws if the token ID does not exist. May return an empty string.&#13;
   * @param _tokenId uint256 ID of the token to query&#13;
   */&#13;
  function tokenURI(uint256 _tokenId) public view returns (string) {&#13;
    require(exists(_tokenId));&#13;
    return tokenURIs[_tokenId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token ID at a given index of the tokens list of the requested owner&#13;
   * @param _owner address owning the tokens list to be accessed&#13;
   * @param _index uint256 representing the index to be accessed of the requested tokens list&#13;
   * @return uint256 token ID at the given index of the tokens list owned by the requested address&#13;
   */&#13;
  function tokenOfOwnerByIndex(&#13;
    address _owner,&#13;
    uint256 _index&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    require(_index &lt; balanceOf(_owner));&#13;
    return ownedTokens[_owner][_index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the total amount of tokens stored by the contract&#13;
   * @return uint256 representing the total amount of tokens&#13;
   */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return allTokens.length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token ID at a given index of all the tokens in this contract&#13;
   * Reverts if the index is greater or equal to the total number of tokens&#13;
   * @param _index uint256 representing the index to be accessed of the tokens list&#13;
   * @return uint256 token ID at the given index of the tokens list&#13;
   */&#13;
  function tokenByIndex(uint256 _index) public view returns (uint256) {&#13;
    require(_index &lt; totalSupply());&#13;
    return allTokens[_index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to set the token URI for a given token&#13;
   * Reverts if the token ID does not exist&#13;
   * @param _tokenId uint256 ID of the token to set its URI&#13;
   * @param _uri string URI to assign&#13;
   */&#13;
  function _setTokenURI(uint256 _tokenId, string _uri) internal {&#13;
    require(exists(_tokenId));&#13;
    tokenURIs[_tokenId] = _uri;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to add a token ID to the list of a given address&#13;
   * @param _to address representing the new owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address&#13;
   */&#13;
  function addTokenTo(address _to, uint256 _tokenId) internal {&#13;
    super.addTokenTo(_to, _tokenId);&#13;
    uint256 length = ownedTokens[_to].length;&#13;
    ownedTokens[_to].push(_tokenId);&#13;
    ownedTokensIndex[_tokenId] = length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to remove a token ID from the list of a given address&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address&#13;
   */&#13;
  function removeTokenFrom(address _from, uint256 _tokenId) internal {&#13;
    super.removeTokenFrom(_from, _tokenId);&#13;
&#13;
    uint256 tokenIndex = ownedTokensIndex[_tokenId];&#13;
    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);&#13;
    uint256 lastToken = ownedTokens[_from][lastTokenIndex];&#13;
&#13;
    ownedTokens[_from][tokenIndex] = lastToken;&#13;
    ownedTokens[_from][lastTokenIndex] = 0;&#13;
    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to&#13;
    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping&#13;
    // the lastToken to the first position, and then dropping the element placed in the last position of the list&#13;
&#13;
    ownedTokens[_from].length--;&#13;
    ownedTokensIndex[_tokenId] = 0;&#13;
    ownedTokensIndex[lastToken] = tokenIndex;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to mint a new token&#13;
   * Reverts if the given token ID already exists&#13;
   * @param _to address the beneficiary that will own the minted token&#13;
   * @param _tokenId uint256 ID of the token to be minted by the msg.sender&#13;
   */&#13;
  function _mint(address _to, uint256 _tokenId) internal {&#13;
    super._mint(_to, _tokenId);&#13;
&#13;
    allTokensIndex[_tokenId] = allTokens.length;&#13;
    allTokens.push(_tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to burn a specific token&#13;
   * Reverts if the token does not exist&#13;
   * @param _owner owner of the token to burn&#13;
   * @param _tokenId uint256 ID of the token being burned by the msg.sender&#13;
   */&#13;
  function _burn(address _owner, uint256 _tokenId) internal {&#13;
    super._burn(_owner, _tokenId);&#13;
&#13;
    // Clear metadata (if any)&#13;
    if (bytes(tokenURIs[_tokenId]).length != 0) {&#13;
      delete tokenURIs[_tokenId];&#13;
    }&#13;
&#13;
    // Reorg all tokens array&#13;
    uint256 tokenIndex = allTokensIndex[_tokenId];&#13;
    uint256 lastTokenIndex = allTokens.length.sub(1);&#13;
    uint256 lastToken = allTokens[lastTokenIndex];&#13;
&#13;
    allTokens[tokenIndex] = lastToken;&#13;
    allTokens[lastTokenIndex] = 0;&#13;
&#13;
    allTokens.length--;&#13;
    allTokensIndex[_tokenId] = 0;&#13;
    allTokensIndex[lastToken] = tokenIndex;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract CryptoCareToken is ERC721Token, Ownable, Pausable {&#13;
    event TokenURIUpdated(uint256 _tokenID, string _tokenURI);&#13;
&#13;
    address public minterAddress;&#13;
&#13;
    constructor() public ERC721Token("CryptoCare", "CARE") {}&#13;
&#13;
    /**&#13;
    * @dev Throws if called by any account other than the minter.&#13;
    */&#13;
    modifier onlyMinter() {&#13;
        require(msg.sender == minterAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Mints a new token with given tokenURI for an address&#13;
    * @param _to the address to mint the token to&#13;
    * @param _tokenURI the token URI containing the token metadata&#13;
    */&#13;
    function mintToken(address _to, string _tokenURI) public onlyMinter whenNotPaused returns (uint256) {&#13;
        uint256 newTokenId = _getNextTokenId();&#13;
        _mint(_to, newTokenId);&#13;
        _setTokenURI(newTokenId, _tokenURI);&#13;
&#13;
        return newTokenId;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Updates the token URI for a given token ID&#13;
    * @param _tokenID the token ID to update&#13;
    */&#13;
    function updateTokenURI(uint256 _tokenID, string _tokenURI) public onlyMinter whenNotPaused {&#13;
        _setTokenURI(_tokenID, _tokenURI);&#13;
        emit TokenURIUpdated(_tokenID, _tokenURI);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Updates the minter address&#13;
    * @param _addr the new minter address&#13;
    */&#13;
    function updateMinter(address _addr) public onlyOwner whenNotPaused {&#13;
        require(_addr &gt; 0);&#13;
        minterAddress = _addr;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev calculates the next token ID based on totalSupply&#13;
    * @return uint256 for the next token ID&#13;
    */&#13;
    function _getNextTokenId() private view returns (uint256) {&#13;
        return totalSupply().add(1);&#13;
    }&#13;
}&#13;
&#13;
contract CryptoCareMinter is Ownable, Pausable {&#13;
    event Adoption(uint256 tokenId, address indexed toAddress, string tokenURI, uint8 beneficiaryId, uint256 price, uint8 rate);&#13;
&#13;
    event BeneficiaryAdded(uint8 beneficiaryId, address addr);&#13;
    event BeneficiaryRateUpdated(uint8 beneficiaryId, uint8 rate);&#13;
    event BeneficiaryActivated(uint8 beneficiaryId);&#13;
    event BeneficiaryDeactivated(uint8 beneficiaryId);&#13;
&#13;
    struct beneficiaryInfo {&#13;
        address addr;&#13;
        bool isActive;&#13;
        uint256 total;&#13;
    }&#13;
&#13;
    address public minterAddress;&#13;
    mapping(uint8 =&gt; beneficiaryInfo) public beneficiaries;&#13;
    mapping(uint256 =&gt; bool) private usedNonces;&#13;
&#13;
    uint8 public overrideRate;&#13;
    bool public overrideRateActive;&#13;
&#13;
    CryptoCareToken public tokenContract;&#13;
&#13;
    /**&#13;
    * @dev Mints a token to an address with a tokenURI&#13;
    *            and sends funds to beneficiary specified&#13;
    * @param _to address of the future owner of the token&#13;
    * @param _beneficiaryId the id in beneficiaryAddresses to send the money to&#13;
    * @param _tokenURI token URI for the token metadata&#13;
    * @param _nonce nonce for the transaction&#13;
    */&#13;
    function mintTo(&#13;
        address _to, uint8 _beneficiaryId, string _tokenURI, uint256 _nonce, uint8 _rate, uint8 v, bytes32 r, bytes32 s&#13;
    ) public payable whenNotPaused returns (uint256) {&#13;
        require(msg.value &gt; 0);&#13;
        require(!usedNonces[_nonce]);&#13;
        require(beneficiaries[_beneficiaryId].addr &gt; 0);&#13;
        require(beneficiaries[_beneficiaryId].isActive);&#13;
        require(verifyMessage(keccak256(abi.encodePacked(_to, _tokenURI, _beneficiaryId, _nonce, msg.value)), v, r, s));&#13;
        usedNonces[_nonce] = true;&#13;
&#13;
        uint256 newTokenId = CryptoCareToken(tokenContract).mintToken(_to, _tokenURI);&#13;
        transferToBeneficiary(msg.value, _beneficiaryId, _rate);&#13;
&#13;
        emit Adoption(newTokenId, _to, _tokenURI, _beneficiaryId, msg.value, _rate);&#13;
&#13;
        return newTokenId;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Adds a beneficiary to the mapping&#13;
    * @param beneficiaryId the identifier for the beneficiary address&#13;
    * @param addr the address of the beneficiary&#13;
    */&#13;
    function addBeneficiary(uint8 beneficiaryId, address addr) public onlyOwner {&#13;
        require(beneficiaries[beneficiaryId].addr == 0);&#13;
        beneficiaries[beneficiaryId] = beneficiaryInfo(addr, true, 0);&#13;
        emit BeneficiaryAdded(beneficiaryId, addr);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Activates an existing beneficiary in the mapping&#13;
    * @param beneficiaryId the identifier for the beneficiary address&#13;
    */&#13;
    function activateBeneficiary(uint8 beneficiaryId) public onlyOwner {&#13;
        require(beneficiaries[beneficiaryId].addr &gt; 0);&#13;
        require(!beneficiaries[beneficiaryId].isActive);&#13;
&#13;
        beneficiaries[beneficiaryId].isActive = true;&#13;
        emit BeneficiaryActivated(beneficiaryId);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Deactivates a beneficiary from the mapping&#13;
    * @param beneficiaryId the identifier for the beneficiary address&#13;
    */&#13;
    function deactivateBeneficiary(uint8 beneficiaryId) public onlyOwner {&#13;
        require(beneficiaries[beneficiaryId].addr &gt; 0);&#13;
        require(beneficiaries[beneficiaryId].isActive);&#13;
&#13;
        beneficiaries[beneficiaryId].isActive = false;&#13;
        emit BeneficiaryDeactivated(beneficiaryId);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Updates the minter address&#13;
    * @param _addr the new minter address&#13;
    */&#13;
    function updateMinter(address _addr) public onlyOwner {&#13;
        require(_addr &gt; 0);&#13;
        minterAddress = _addr;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Updates the token contract address&#13;
    * @param _tokenContractAddress the new token contract address&#13;
    */&#13;
    function updateTokenContract(address _tokenContractAddress) public onlyOwner {&#13;
        tokenContract = CryptoCareToken(_tokenContractAddress);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Updates override rate and if it is active&#13;
    * @param _active whether the override is active or not&#13;
    * @param _rate the new override rate&#13;
    */&#13;
    function updateOverrideRate(bool _active, uint8 _rate) public onlyOwner {&#13;
        require(_rate &lt; 100);&#13;
        overrideRateActive = _active;&#13;
        overrideRate = _rate;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Allows owner to withdraw funds in contract&#13;
    */&#13;
    function withdraw() public onlyOwner {&#13;
        owner.transfer(address(this).balance);&#13;
    }&#13;
&#13;
    function tokenURI(uint256 _tokenId) public view returns (string) {&#13;
        return CryptoCareToken(tokenContract).tokenURI(_tokenId);&#13;
    }&#13;
&#13;
    function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {&#13;
        return CryptoCareToken(tokenContract).tokenOfOwnerByIndex(_owner, _index);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Verifies a given hash and ECDSA signature match the minter address&#13;
    * @param h to verify&#13;
    * @param v ECDSA signature parameter&#13;
    * @param r ECDSA signature parameter&#13;
    * @param s ECDSA signature parameter&#13;
    * @return bool whether the hash was signed by the minter&#13;
    */&#13;
    function verifyMessage(bytes32 h, uint8 v, bytes32 r, bytes32 s) private view returns (bool) {&#13;
        bytes memory prefix = "\x19Ethereum Signed Message:\n32";&#13;
        bytes32 prefixedHash = keccak256(abi.encodePacked(prefix, h));&#13;
        address addr = ecrecover(prefixedHash, v, r, s);&#13;
        bool verified = (addr == minterAddress);&#13;
        return verified;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Transfers amount to beneficiary&#13;
    * @param amount the amount to transfer&#13;
    * @param _beneficiaryId the beneficiary to receive it&#13;
    */&#13;
    function transferToBeneficiary(uint256 amount, uint8 _beneficiaryId, uint8 _rate) private {&#13;
        beneficiaryInfo storage beneficiary = beneficiaries[_beneficiaryId];&#13;
        uint8 rate = overrideRateActive ? overrideRate : _rate;&#13;
        uint256 beneficiaryTotal = (amount * (100 - rate))/100;&#13;
&#13;
        beneficiary.addr.transfer(beneficiaryTotal);&#13;
        beneficiary.total += beneficiaryTotal;&#13;
    }&#13;
}
pragma solidity ^0.4.16;
 
/*
website : www.trongold.net
email   : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0e7d7b7e7e617c7a4e7a7c61606961626a20606b7a">[emailÂ protected]</a>&#13;
name    : Tron Gold&#13;
symbol  : TRG&#13;
&#13;
Airdrop Send 0.0001 ETH to Contract Address you will get 2.000 TRG &#13;
&#13;
&#13;
Send ETH To Contract Address you will get TRG Token directly&#13;
&#13;
Please, Only using ERC20 Wallet&#13;
&#13;
A Wallett Address can make more than once CLAIM transaction&#13;
&#13;
Set GAS Limits 150.000 and GAS Price always check on ethgasstation.info (use Standard Gas Price or Fast Gas Price)&#13;
&#13;
&#13;
*/&#13;
&#13;
&#13;
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }&#13;
&#13;
contract TRG {&#13;
    // Public variables of the token&#13;
    string public name = "Tron Gold";&#13;
    string public symbol = "TRG";&#13;
    uint8 public decimals = 18;&#13;
    // Decimals = 18&#13;
    uint256 public totalSupply;&#13;
    uint256 public trl2Supply = 10000000000;&#13;
    uint256 public buyPrice = 20000000;&#13;
    address public creator;&#13;
    // This creates an array with all balances&#13;
    mapping (address =&gt; uint256) public balanceOf;&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;&#13;
&#13;
    // This generates a public event on the blockchain&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
    event FundTransfer(address backer, uint amount, bool isContribution);&#13;
    &#13;
    &#13;
    /**&#13;
     * Constrctor function&#13;
     *&#13;
     * Initializes contract with initial supply tokens to the creator of the contract&#13;
     */&#13;
    function TRG() public {&#13;
        totalSupply = trl2Supply * 10 ** uint256(decimals);  // Update total supply with the decimal amount&#13;
        balanceOf[msg.sender] = totalSupply;    // Give TRG Token the total created tokens&#13;
        creator = msg.sender;&#13;
    }&#13;
    /**&#13;
     * Internal transfer, only can be called by this contract&#13;
     */&#13;
    function _transfer(address _from, address _to, uint _value) internal {&#13;
        require(_to != 0x0); //Burn&#13;
        require(balanceOf[_from] &gt;= _value);&#13;
        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);&#13;
        balanceOf[_from] -= _value;&#13;
        balanceOf[_to] += _value;&#13;
        Transfer(_from, _to, _value);&#13;
      &#13;
    }&#13;
&#13;
    function transfer(address _to, uint256 _value) public {&#13;
        _transfer(msg.sender, _to, _value);&#13;
    }&#13;
&#13;
    &#13;
    &#13;
    /// @notice Buy tokens from contract by sending ethereum to contract address with no minimum contribution&#13;
    function () payable internal {&#13;
        uint amount = msg.value * buyPrice ;                    // calculates the amount&#13;
        uint amountRaised;                                     &#13;
        amountRaised += msg.value;                            &#13;
        require(balanceOf[creator] &gt;= amount);               &#13;
        require(msg.value &gt;=0);                        &#13;
        balanceOf[msg.sender] += amount;                  // adds the amount to buyer's balance&#13;
        balanceOf[creator] -= amount;                        &#13;
        Transfer(creator, msg.sender, amount);               &#13;
        creator.transfer(amountRaised);&#13;
    }    &#13;
    &#13;
 }
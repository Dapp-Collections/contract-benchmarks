pragma solidity 0.4.24;
pragma experimental "v0.5.0";
/******************************************************************************\
* Author: Nick Mudge, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="751b1c161e35181a1e101b065b1c1a">[emailÂ protected]</a>&#13;
* Mokens&#13;
* Copyright (c) 2018&#13;
*&#13;
* Implements ERC998ERC721BottomUp.&#13;
/******************************************************************************/&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//Storage contracts&#13;
////////////&#13;
//Some delegate contracts are listed with storage contracts they inherit.&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//Mokens&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage0 {&#13;
    // funcId =&gt; delegate contract&#13;
    mapping(bytes4 =&gt; address) internal delegates;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenUpdates&#13;
//MokenOwner&#13;
//QueryMokenDelegates&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage1 is Storage0 {&#13;
    address internal contractOwner;&#13;
    bytes[] internal funcSignatures;&#13;
    // signature =&gt; index+1&#13;
    mapping(bytes =&gt; uint256) internal funcSignatureToIndex;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokensSupportsInterfaces&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage2 is Storage1 {&#13;
    mapping(bytes4 =&gt; bool) internal supportedInterfaces;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenRootOwnerOf&#13;
//MokenERC721Metadata&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage3 is Storage2 {&#13;
    struct Moken {&#13;
        string name;&#13;
        uint256 data;&#13;
        uint256 parentTokenId;&#13;
    }&#13;
    //tokenId =&gt; moken&#13;
    mapping(uint256 =&gt; Moken) internal mokens;&#13;
    uint256 internal mokensLength;&#13;
    // child address =&gt; child tokenId =&gt; tokenId+1&#13;
    mapping(address =&gt; mapping(uint256 =&gt; uint256)) internal childTokenOwner;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC721Enumerable&#13;
//MokenLinkHash&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage4 is Storage3 {&#13;
    // root token owner address =&gt; (tokenId =&gt; approved address)&#13;
    mapping(address =&gt; mapping(uint256 =&gt; address)) internal rootOwnerAndTokenIdToApprovedAddress;&#13;
    // token owner =&gt; (operator address =&gt; bool)&#13;
    mapping(address =&gt; mapping(address =&gt; bool)) internal tokenOwnerToOperators;&#13;
    // Mapping from owner to list of owned token IDs&#13;
    mapping(address =&gt; uint32[]) internal ownedTokens;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC998ERC721TopDown&#13;
//MokenERC998ERC721TopDownBatch&#13;
//MokenERC721&#13;
//MokenERC721Batch&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage5 is Storage4 {&#13;
    // tokenId =&gt; (child address =&gt; array of child tokens)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256[])) internal childTokens;&#13;
    // tokenId =&gt; (child address =&gt; (child token =&gt; child index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; mapping(uint256 =&gt; uint256))) internal childTokenIndex;&#13;
    // tokenId =&gt; (child address =&gt; contract index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) internal childContractIndex;&#13;
    // tokenId =&gt; child contract&#13;
    mapping(uint256 =&gt; address[]) internal childContracts;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC998ERC20TopDown&#13;
//MokenStateChange&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage6 is Storage5 {&#13;
    // tokenId =&gt; token contract&#13;
    mapping(uint256 =&gt; address[]) internal erc20Contracts;&#13;
    // tokenId =&gt; (token contract =&gt; token contract index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) erc20ContractIndex;&#13;
    // tokenId =&gt; (token contract =&gt; balance)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) internal erc20Balances;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC998ERC721BottomUp&#13;
//MokenERC998ERC721BottomUpBatch&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage7 is Storage6 {&#13;
    // parent address =&gt; (parent tokenId =&gt; array of child tokenIds)&#13;
    mapping(address =&gt; mapping(uint256 =&gt; uint32[])) internal parentToChildTokenIds;&#13;
    // tokenId =&gt; position in childTokens array&#13;
    mapping(uint256 =&gt; uint256) internal tokenIdToChildTokenIdsIndex;&#13;
}&#13;
&#13;
contract RootOwnerOfHelper is Storage3 {&#13;
&#13;
    bytes32 constant ERC998_MAGIC_VALUE = 0xcd740db5;&#13;
&#13;
    // Use Cases handled:&#13;
    // Case 1: Token owner is this contract and token&#13;
    // Case 2: Token owner is this contract and top-down composable.&#13;
    // Case 3: Token owner is top-down composable&#13;
    // Case 4: Token owner is an unknown contract&#13;
    // Case 5: Token owner is a user&#13;
    // Case 6: Token owner is a bottom-up composable&#13;
    // Case 7: Token owner is ERC721 token owned by top-down token&#13;
    // Case 8: Token owner is ERC721 token owned by unknown contract&#13;
    // Case 9: Token owner is ERC721 token owned by user&#13;
    function rootOwnerOf_(uint256 _tokenId) internal view returns (bytes32 rootOwner) {&#13;
        address rootOwnerAddress = address(mokens[_tokenId].data);&#13;
        require(rootOwnerAddress != address(0), "tokenId not found.");&#13;
        uint256 parentTokenId;&#13;
        bool isParent;&#13;
&#13;
        while (rootOwnerAddress == address(this)) {&#13;
            parentTokenId = mokens[_tokenId].parentTokenId;&#13;
            isParent = parentTokenId &gt; 0;&#13;
            if (isParent) {&#13;
                // Case 1: Token owner is this contract and token&#13;
                _tokenId = parentTokenId - 1;&#13;
            }&#13;
            else {&#13;
                // Case 2: Token owner is this contract and top-down composable.&#13;
                _tokenId = childTokenOwner[rootOwnerAddress][_tokenId] - 1;&#13;
            }&#13;
            rootOwnerAddress = address(mokens[_tokenId].data);&#13;
        }&#13;
&#13;
        parentTokenId = mokens[_tokenId].parentTokenId;&#13;
        isParent = parentTokenId &gt; 0;&#13;
        if (isParent) {&#13;
            parentTokenId--;&#13;
        }&#13;
&#13;
        bytes memory calldata;&#13;
        bool callSuccess;&#13;
&#13;
        if (isParent == false) {&#13;
&#13;
            // success if this token is owned by a top-down token&#13;
            // 0xed81cdda == rootOwnerOfChild(address,uint256)&#13;
            calldata = abi.encodeWithSelector(0xed81cdda, address(this), _tokenId);&#13;
            assembly {&#13;
                callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                if callSuccess {&#13;
                    rootOwner := mload(calldata)&#13;
                }&#13;
            }&#13;
            if (callSuccess == true &amp;&amp; rootOwner &gt;&gt; 224 == ERC998_MAGIC_VALUE) {&#13;
                // Case 3: Token owner is top-down composable&#13;
                return rootOwner;&#13;
            }&#13;
            else {&#13;
                // Case 4: Token owner is an unknown contract&#13;
                // Or&#13;
                // Case 5: Token owner is a user&#13;
                return ERC998_MAGIC_VALUE &lt;&lt; 224 | bytes32(rootOwnerAddress);&#13;
            }&#13;
        }&#13;
        else {&#13;
&#13;
            // 0x43a61a8e == rootOwnerOf(uint256)&#13;
            calldata = abi.encodeWithSelector(0x43a61a8e, parentTokenId);&#13;
            assembly {&#13;
                callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                if callSuccess {&#13;
                    rootOwner := mload(calldata)&#13;
                }&#13;
            }&#13;
            if (callSuccess == true &amp;&amp; rootOwner &gt;&gt; 224 == ERC998_MAGIC_VALUE) {&#13;
                // Case 6: Token owner is a bottom-up composable&#13;
                // Or&#13;
                // Case 2: Token owner is top-down composable&#13;
                return rootOwner;&#13;
            }&#13;
            else {&#13;
                // token owner is ERC721&#13;
                address childContract = rootOwnerAddress;&#13;
                //0x6352211e == "ownerOf(uint256)"&#13;
                calldata = abi.encodeWithSelector(0x6352211e, parentTokenId);&#13;
                assembly {&#13;
                    callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                    if callSuccess {&#13;
                        rootOwnerAddress := mload(calldata)&#13;
                    }&#13;
                }&#13;
                require(callSuccess, "Call to ownerOf failed");&#13;
&#13;
                // 0xed81cdda == rootOwnerOfChild(address,uint256)&#13;
                calldata = abi.encodeWithSelector(0xed81cdda, childContract, parentTokenId);&#13;
                assembly {&#13;
                    callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                    if callSuccess {&#13;
                        rootOwner := mload(calldata)&#13;
                    }&#13;
                }&#13;
                if (callSuccess == true &amp;&amp; rootOwner &gt;&gt; 224 == ERC998_MAGIC_VALUE) {&#13;
                    // Case 7: Token owner is ERC721 token owned by top-down token&#13;
                    return rootOwner;&#13;
                }&#13;
                else {&#13;
                    // Case 8: Token owner is ERC721 token owned by unknown contract&#13;
                    // Or&#13;
                    // Case 9: Token owner is ERC721 token owned by user&#13;
                    return ERC998_MAGIC_VALUE &lt;&lt; 224 | bytes32(rootOwnerAddress);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
contract MokenHelpers is Storage4, RootOwnerOfHelper {&#13;
&#13;
    bytes4 constant ERC721_RECEIVED_NEW = 0x150b7a02;&#13;
&#13;
    uint256 constant UINT16_MASK = 0x000000000000000000000000000000000000000000000000000000000000ffff;&#13;
    uint256 constant MAX_OWNER_MOKENS = 65536;&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);&#13;
    event Approval(address indexed tokenOwner, address indexed approved, uint256 indexed tokenId);&#13;
&#13;
    function childApproved(address _from, uint256 _tokenId) internal {&#13;
        address approvedAddress = rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];&#13;
        if(msg.sender != _from) {&#13;
            bytes32 tokenOwner;&#13;
            bool callSuccess;&#13;
            // 0xeadb80b8 == ownerOfChild(address,uint256)&#13;
            bytes memory calldata = abi.encodeWithSelector(0xed81cdda, address(this), _tokenId);&#13;
            assembly {&#13;
                callSuccess := staticcall(gas, _from, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                if callSuccess {&#13;
                    tokenOwner := mload(calldata)&#13;
                }&#13;
            }&#13;
            if(callSuccess == true) {&#13;
                require(tokenOwner &gt;&gt; 224 != ERC998_MAGIC_VALUE, "Token is child of top down composable");&#13;
            }&#13;
            require(tokenOwnerToOperators[_from][msg.sender] || approvedAddress == msg.sender, "msg.sender not _from/operator/approved.");&#13;
        }&#13;
        if (approvedAddress != address(0)) {&#13;
            delete rootOwnerAndTokenIdToApprovedAddress[_from][_tokenId];&#13;
            emit Approval(_from, address(0), _tokenId);&#13;
        }&#13;
    }&#13;
&#13;
    function _transferFrom(uint256 data, address _to, uint256 _tokenId) internal {&#13;
        address _from = address(data);&#13;
        //removing the tokenId&#13;
        // 1. We replace _tokenId in ownedTokens[_from] with the last token id&#13;
        //    in ownedTokens[_from]&#13;
        uint256 lastTokenIndex = ownedTokens[_from].length - 1;&#13;
        uint256 lastTokenId = ownedTokens[_from][lastTokenIndex];&#13;
        if (lastTokenId != _tokenId) {&#13;
            uint256 tokenIndex = data &gt;&gt; 160 &amp; UINT16_MASK;&#13;
            ownedTokens[_from][tokenIndex] = uint32(lastTokenId);&#13;
            // 2. We set lastTokeId to point to its new position in ownedTokens[_from]&#13;
            mokens[lastTokenId].data = mokens[lastTokenId].data &amp; 0xffffffffffffffffffff0000ffffffffffffffffffffffffffffffffffffffff | tokenIndex &lt;&lt; 160;&#13;
        }&#13;
        // 3. We remove lastTokenId from the end of ownedTokens[_from]&#13;
        ownedTokens[_from].length--;&#13;
&#13;
        //adding the tokenId&#13;
        uint256 ownedTokensIndex = ownedTokens[_to].length;&#13;
        // prevents 16 bit overflow&#13;
        require(ownedTokensIndex &lt; MAX_OWNER_MOKENS, "A token owner address cannot possess more than 65,536 mokens.");&#13;
        mokens[_tokenId].data = data &amp; 0xffffffffffffffffffff00000000000000000000000000000000000000000000 | ownedTokensIndex &lt;&lt; 160 | uint256(_to);&#13;
        ownedTokens[_to].push(uint32(_tokenId));&#13;
&#13;
        emit Transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    function isContract(address addr) internal view returns (bool) {&#13;
        uint256 size;&#13;
        assembly {size := extcodesize(addr)}&#13;
        return size &gt; 0;&#13;
    }&#13;
}&#13;
&#13;
interface ERC721 {&#13;
    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);&#13;
    event Approval(address indexed tokenOwner, address indexed approved, uint256 indexed tokenId);&#13;
    event ApprovalForAll(address indexed tokenOwner, address indexed operator, bool approved);&#13;
&#13;
    function balanceOf(address _tokenOwner) external view returns (uint256 _balance);&#13;
    function ownerOf(uint256 _tokenId) external view returns (address _tokenOwner);&#13;
    function safeTransferFrom(address _from, address _to, uint256 _tokenId, bytes _data) external;&#13;
    function safeTransferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
    function approve(address _to, uint256 _tokenId) external;&#13;
    function setApprovalForAll(address _operator, bool _approved) external;&#13;
    function getApproved(uint256 _tokenId) external view returns (address _operator);&#13;
    function isApprovedForAll(address _tokenOwner, address _operator) external view returns (bool);&#13;
}&#13;
&#13;
interface ERC721TokenReceiver {&#13;
    function onERC721Received(address _operator, address _from, uint256 _tokenId, bytes _data) external returns (bytes4);&#13;
}&#13;
&#13;
contract MokenERC998ERC721BottomUp is Storage7, MokenHelpers {&#13;
&#13;
    event TransferToParent(address indexed toContract, uint256 indexed toTokenId, uint256 tokenId);&#13;
    event TransferFromParent(address indexed fromContract, uint256 indexed fromTokenId, uint256 tokenId);&#13;
&#13;
    function tokenOwnerOf(uint256 _tokenId) external view returns (bytes32 tokenOwner, uint256 parentTokenId, bool isParent) {&#13;
        address tokenOwnerAddress = address(mokens[_tokenId].data);&#13;
        require(tokenOwnerAddress != address(0), "tokenId not found.");&#13;
        parentTokenId = mokens[_tokenId].parentTokenId;&#13;
        isParent = parentTokenId &gt; 0;&#13;
        if (isParent) {&#13;
            parentTokenId--;&#13;
        }&#13;
        return (ERC998_MAGIC_VALUE &lt;&lt; 224 | bytes32(tokenOwnerAddress), parentTokenId, isParent);&#13;
    }&#13;
&#13;
    function removeBottomUpChild(address _fromContract, uint256 _fromTokenId, uint256 _tokenId) internal {&#13;
        uint256 lastChildTokenIndex = parentToChildTokenIds[_fromContract][_fromTokenId].length - 1;&#13;
        uint256 lastChildTokenId = parentToChildTokenIds[_fromContract][_fromTokenId][lastChildTokenIndex];&#13;
&#13;
        if (_tokenId != lastChildTokenId) {&#13;
            uint256 currentChildTokenIndex = tokenIdToChildTokenIdsIndex[_tokenId];&#13;
            parentToChildTokenIds[_fromContract][_fromTokenId][currentChildTokenIndex] = uint32(lastChildTokenId);&#13;
            tokenIdToChildTokenIdsIndex[lastChildTokenId] = currentChildTokenIndex;&#13;
        }&#13;
        parentToChildTokenIds[_fromContract][_fromTokenId].length--;&#13;
    }&#13;
&#13;
    function transferFromParent(address _fromContract, uint256 _fromTokenId, address _to, uint256 _tokenId, bytes _data) external {&#13;
        require(_fromContract != address(0), "_fromContract cannot be the 0 address.");&#13;
        require(_to != address(0), "_to cannot be the 0 address.");&#13;
        uint256 data = mokens[_tokenId].data;&#13;
        require(address(data) == _fromContract, "The tokenId is not owned by _fromContract.");&#13;
        uint256 parentTokenId = mokens[_tokenId].parentTokenId;&#13;
        require(parentTokenId != 0, "Token does not have a parent token.");&#13;
        require(parentTokenId - 1 == _fromTokenId, "tokenId not owned by _fromTokenId");&#13;
&#13;
        address rootOwner = address(rootOwnerOf_(_tokenId));&#13;
        address approvedAddress = rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];&#13;
        require(rootOwner == msg.sender || tokenOwnerToOperators[rootOwner][msg.sender] ||&#13;
        approvedAddress == msg.sender, "msg.sender not rootOwner/operator/approved.");&#13;
&#13;
        if (approvedAddress != address(0)) {&#13;
            delete rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];&#13;
            emit Approval(rootOwner, address(0), _tokenId);&#13;
        }&#13;
&#13;
        mokens[_tokenId].parentTokenId = 0;&#13;
&#13;
        removeBottomUpChild(_fromContract, _fromTokenId, _tokenId);&#13;
        delete tokenIdToChildTokenIdsIndex[_tokenId];&#13;
&#13;
        _transferFrom(data, _to, _tokenId);&#13;
&#13;
        if (isContract(_to)) {&#13;
            bytes4 retval = ERC721TokenReceiver(_to).onERC721Received(msg.sender, _fromContract, _tokenId, _data);&#13;
            require(retval == ERC721_RECEIVED_NEW, "Contract cannot receive ERC721 token.");&#13;
        }&#13;
&#13;
        emit TransferFromParent(_fromContract, _fromTokenId, _tokenId);&#13;
&#13;
    }&#13;
&#13;
    function transferToParent(address _from, address _toContract, uint256 _toTokenId, uint256 _tokenId, bytes _data) external {&#13;
        require(_from != address(0), "_from cannot be the 0 address.");&#13;
        require(_toContract != address(0), "toContract cannot be 0");&#13;
        uint256 data = mokens[_tokenId].data;&#13;
        require(address(data) == _from, "The tokenId is not owned by _from.");&#13;
        require(mokens[_tokenId].parentTokenId == 0, "Cannot transfer from address when owned by a token.");&#13;
&#13;
        childApproved(_from, _tokenId);&#13;
&#13;
        uint256 parentTokenId = _toTokenId + 1;&#13;
        assert(parentTokenId &gt; _toTokenId);&#13;
        mokens[_tokenId].parentTokenId = parentTokenId;&#13;
&#13;
        uint256 index = parentToChildTokenIds[_toContract][_toTokenId].length;&#13;
        parentToChildTokenIds[_toContract][_toTokenId].push(uint32(_tokenId));&#13;
        tokenIdToChildTokenIdsIndex[_tokenId] = index;&#13;
&#13;
        _transferFrom(data, _toContract, _tokenId);&#13;
&#13;
        require(ERC721(_toContract).ownerOf(_toTokenId) != address(0), "_toTokenId does not exist");&#13;
        emit TransferToParent(_toContract, _toTokenId, _tokenId);&#13;
    }&#13;
&#13;
    function transferAsChild(address _fromContract, uint256 _fromTokenId, address _toContract, uint256 _toTokenId, uint256 _tokenId, bytes _data) external {&#13;
        require(_fromContract != address(0), "_fromContract cannot be the 0 address.");&#13;
        require(_toContract != address(0), "_toContract cannot be the 0 address.");&#13;
        uint256 data = mokens[_tokenId].data;&#13;
        require(address(data) == _fromContract, "The tokenId is not owned by _fromContract.");&#13;
        uint256 parentTokenId = mokens[_tokenId].parentTokenId;&#13;
        require(parentTokenId != 0, "Token does not have a parent token.");&#13;
        require(parentTokenId - 1 == _fromTokenId, "tokenId not owned by _fromTokenId");&#13;
&#13;
        address rootOwner = address(rootOwnerOf_(_tokenId));&#13;
        address approvedAddress = rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];&#13;
        require(rootOwner == msg.sender || tokenOwnerToOperators[rootOwner][msg.sender] ||&#13;
        approvedAddress == msg.sender, "msg.sender not rootOwner/operator/approved.");&#13;
&#13;
        if (approvedAddress != address(0)) {&#13;
            delete rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId];&#13;
            emit Approval(rootOwner, address(0), _tokenId);&#13;
        }&#13;
&#13;
        removeBottomUpChild(_fromContract, _fromTokenId, _tokenId);&#13;
&#13;
        parentTokenId = _toTokenId + 1;&#13;
        assert(parentTokenId &gt; _toTokenId);&#13;
        mokens[_tokenId].parentTokenId = parentTokenId;&#13;
&#13;
        uint256 index = parentToChildTokenIds[_toContract][_toTokenId].length;&#13;
        parentToChildTokenIds[_toContract][_toTokenId].push(uint32(_tokenId));&#13;
        tokenIdToChildTokenIdsIndex[_tokenId] = index;&#13;
&#13;
        _transferFrom(data, _toContract, _tokenId);&#13;
&#13;
        require(ERC721(_toContract).ownerOf(_toTokenId) != address(0), "_toTokenId does not exist");&#13;
&#13;
        emit Transfer(_fromContract, _toContract, _tokenId);&#13;
        emit TransferFromParent(_fromContract, _fromTokenId, _tokenId);&#13;
        emit TransferToParent(_toContract, _toTokenId, _tokenId);&#13;
&#13;
    }&#13;
    function totalChildTokens(address _parentContract, uint256 _parentTokenId) public view returns (uint256) {&#13;
        return parentToChildTokenIds[_parentContract][_parentTokenId].length;&#13;
    }&#13;
&#13;
    function childTokenByIndex(address _parentContract, uint256 _parentTokenId, uint256 _index) public view returns (uint256) {&#13;
        require(parentToChildTokenIds[_parentContract][_parentTokenId].length &gt; _index, "Child not found at index.");&#13;
        return parentToChildTokenIds[_parentContract][_parentTokenId][_index];&#13;
    }&#13;
}
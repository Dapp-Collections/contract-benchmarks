pragma solidity ^0.4.18;

/// Item23s :3

/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6004051405200118090f0d1a050e4e030f">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
  // Required methods&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function balanceOf(address _owner) public view returns (uint256 balance);&#13;
  function implementsERC721() public pure returns (bool);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address addr);&#13;
  function takeOwnership(uint256 _tokenId) public;&#13;
  function totalSupply() public view returns (uint256 total);&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function transfer(address _to, uint256 _tokenId) public;&#13;
&#13;
  event Transfer(address indexed from, address indexed to, uint256 tokenId);&#13;
  event Approval(address indexed owner, address indexed approved, uint256 tokenId);&#13;
&#13;
}&#13;
&#13;
/// Modified from CryptoPizza.io&#13;
contract EtherItem23 is ERC721 {&#13;
&#13;
  /*** EVENTS ***/&#13;
&#13;
  /// @dev The Birth event is fired whenever a new item23 comes into existence.&#13;
  event Birth(uint256 tokenId, string name, address owner);&#13;
&#13;
  /// @dev The TokenSold event is fired whenever a token is sold.&#13;
  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);&#13;
&#13;
  /// @dev Transfer event as defined in current draft of ERC721.&#13;
  ///  ownership is assigned, including births.&#13;
  event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
  /*** CONSTANTS ***/&#13;
  //uint256 private startingPrice = 0.001 ether;&#13;
&#13;
  /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
  string public constant NAME = "CrypoPhones"; // solhint-disable-line&#13;
  string public constant SYMBOL = "CryptoPhone"; // solhint-disable-line&#13;
&#13;
  /*** STORAGE ***/&#13;
&#13;
  /// @dev A mapping from item23 IDs to the address that owns them. All item23s have&#13;
  ///  some valid owner address.&#13;
  mapping (uint256 =&gt; address) public item23IndexToOwner;&#13;
&#13;
  // @dev A mapping from owner address to count of tokens that address owns.&#13;
  //  Used internally inside balanceOf() to resolve ownership count.&#13;
  mapping (address =&gt; uint256) private ownershipTokenCount;&#13;
&#13;
  /// @dev A mapping from Item23IDs to an address that has been approved to call&#13;
  ///  transferFrom(). Each Item23 can only have one approved address for transfer&#13;
  ///  at any time. A zero value means no approval is outstanding.&#13;
  mapping (uint256 =&gt; address) public item23IndexToApproved;&#13;
&#13;
  // @dev A mapping from Item23IDs to the price of the token.&#13;
  mapping (uint256 =&gt; uint256) private item23IndexToPrice;&#13;
&#13;
  /// @dev A mapping from Item23IDs to the previpus price of the token. Used&#13;
  /// to calculate price delta for payouts&#13;
  mapping (uint256 =&gt; uint256) private item23IndexToPreviousPrice;&#13;
&#13;
  // @dev A mapping from item23Id to the 7 last owners.&#13;
  mapping (uint256 =&gt; address[5]) private item23IndexToPreviousOwners;&#13;
&#13;
&#13;
  // The addresses of the accounts (or contracts) that can execute actions within each roles.&#13;
  address public ceoAddress;&#13;
  address public cooAddress;&#13;
&#13;
  /*** DATATYPES ***/&#13;
  struct Item23 {&#13;
    string name;&#13;
  }&#13;
&#13;
  Item23[] private item23s;&#13;
&#13;
  /*** ACCESS MODIFIERS ***/&#13;
  /// @dev Access modifier for CEO-only functionality&#13;
  modifier onlyCEO() {&#13;
    require(msg.sender == ceoAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /// @dev Access modifier for COO-only functionality&#13;
  modifier onlyCOO() {&#13;
    require(msg.sender == cooAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /// Access modifier for contract owner only functionality&#13;
  modifier onlyCLevel() {&#13;
    require(&#13;
      msg.sender == ceoAddress ||&#13;
      msg.sender == cooAddress&#13;
    );&#13;
    _;&#13;
  }&#13;
&#13;
  /*** CONSTRUCTOR ***/&#13;
  function EtherItem23() public {&#13;
    ceoAddress = msg.sender;&#13;
    cooAddress = msg.sender;&#13;
  }&#13;
&#13;
  /*** PUBLIC FUNCTIONS ***/&#13;
  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().&#13;
  /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
  ///  clear all approvals.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function approve(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    // Caller must own token.&#13;
    require(_owns(msg.sender, _tokenId));&#13;
&#13;
    item23IndexToApproved[_tokenId] = _to;&#13;
&#13;
    Approval(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  /// For querying balance of a particular account&#13;
  /// @param _owner The address for balance query&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return ownershipTokenCount[_owner];&#13;
  }&#13;
&#13;
  /// @dev Creates a new Item23 with the given name.&#13;
  function createContractItem23(string _name , string _startingP ) public onlyCOO {&#13;
    _createItem23(_name, address(this), stringToUint( _startingP));&#13;
  }&#13;
&#13;
&#13;
&#13;
function stringToUint(string _amount) internal constant returns (uint result) {&#13;
    bytes memory b = bytes(_amount);&#13;
    uint i;&#13;
    uint counterBeforeDot;&#13;
    uint counterAfterDot;&#13;
    result = 0;&#13;
    uint totNum = b.length;&#13;
    totNum--;&#13;
    bool hasDot = false;&#13;
&#13;
    for (i = 0; i &lt; b.length; i++) {&#13;
        uint c = uint(b[i]);&#13;
&#13;
        if (c &gt;= 48 &amp;&amp; c &lt;= 57) {&#13;
            result = result * 10 + (c - 48);&#13;
            counterBeforeDot ++;&#13;
            totNum--;&#13;
        }&#13;
&#13;
        if(c == 46){&#13;
            hasDot = true;&#13;
            break;&#13;
        }&#13;
    }&#13;
&#13;
    if(hasDot) {&#13;
        for (uint j = counterBeforeDot + 1; j &lt; 18; j++) {&#13;
            uint m = uint(b[j]);&#13;
&#13;
            if (m &gt;= 48 &amp;&amp; m &lt;= 57) {&#13;
                result = result * 10 + (m - 48);&#13;
                counterAfterDot ++;&#13;
                totNum--;&#13;
            }&#13;
&#13;
            if(totNum == 0){&#13;
                break;&#13;
            }&#13;
        }&#13;
    }&#13;
     if(counterAfterDot &lt; 18){&#13;
         uint addNum = 18 - counterAfterDot;&#13;
         uint multuply = 10 ** addNum;&#13;
         return result = result * multuply;&#13;
     }&#13;
&#13;
     return result;&#13;
}&#13;
&#13;
&#13;
  /// @notice Returns all the relevant information about a specific item23.&#13;
  /// @param _tokenId The tokenId of the item23 of interest.&#13;
  function getItem23(uint256 _tokenId) public view returns (&#13;
    string item23Name,&#13;
    uint256 sellingPrice,&#13;
    address owner,&#13;
    uint256 previousPrice,&#13;
    address[5] previousOwners&#13;
  ) {&#13;
    Item23 storage item23 = item23s[_tokenId];&#13;
    item23Name = item23.name;&#13;
    sellingPrice = item23IndexToPrice[_tokenId];&#13;
    owner = item23IndexToOwner[_tokenId];&#13;
    previousPrice = item23IndexToPreviousPrice[_tokenId];&#13;
    previousOwners = item23IndexToPreviousOwners[_tokenId];&#13;
  }&#13;
&#13;
&#13;
  function implementsERC721() public pure returns (bool) {&#13;
    return true;&#13;
  }&#13;
&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function name() public pure returns (string) {&#13;
    return NAME;&#13;
  }&#13;
&#13;
  /// For querying owner of token&#13;
  /// @param _tokenId The tokenID for owner inquiry&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function ownerOf(uint256 _tokenId)&#13;
    public&#13;
    view&#13;
    returns (address owner)&#13;
  {&#13;
    owner = item23IndexToOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
  }&#13;
&#13;
  function payout(address _to) public onlyCLevel {&#13;
    _payout(_to);&#13;
  }&#13;
&#13;
  // Allows someone to send ether and obtain the token&#13;
  function purchase(uint256 _tokenId) public payable {&#13;
    address oldOwner = item23IndexToOwner[_tokenId];&#13;
    address newOwner = msg.sender;&#13;
&#13;
    address[5] storage previousOwners = item23IndexToPreviousOwners[_tokenId];&#13;
&#13;
    uint256 sellingPrice = item23IndexToPrice[_tokenId];&#13;
    uint256 previousPrice = item23IndexToPreviousPrice[_tokenId];&#13;
    // Making sure token owner is not sending to self&#13;
    require(oldOwner != newOwner);&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure sent amount is greater than or equal to the sellingPrice&#13;
    require(msg.value &gt;= sellingPrice);&#13;
&#13;
    uint256 priceDelta = SafeMath.sub(sellingPrice, previousPrice);&#13;
    uint256 ownerPayout = SafeMath.add(previousPrice, SafeMath.mul(SafeMath.div(priceDelta, 100), 40));&#13;
&#13;
&#13;
    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);&#13;
&#13;
    item23IndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 150), 100);&#13;
    item23IndexToPreviousPrice[_tokenId] = sellingPrice;&#13;
&#13;
    uint256 strangePrice = uint256(SafeMath.mul(SafeMath.div(priceDelta, 100), 10));&#13;
    uint256 strangePrice2 = uint256(0);&#13;
&#13;
&#13;
    // Pay previous tokenOwner if owner is not contract&#13;
    // and if previous price is not 0&#13;
    if (oldOwner != address(this)) {&#13;
      // old owner gets entire initial payment back&#13;
      oldOwner.transfer(ownerPayout);&#13;
    } else {&#13;
      strangePrice = SafeMath.add(ownerPayout, strangePrice);&#13;
    }&#13;
&#13;
    // Next distribute payout Total among previous Owners&#13;
    for (uint i = 0; i &lt; 5; i++) {&#13;
        if (previousOwners[i] != address(this)) {&#13;
            strangePrice2+=uint256(SafeMath.mul(SafeMath.div(priceDelta, 100), 10));&#13;
        } else {&#13;
            strangePrice = SafeMath.add(strangePrice, uint256(SafeMath.mul(SafeMath.div(priceDelta, 100), 10)));&#13;
        }&#13;
    }&#13;
&#13;
    ceoAddress.transfer(strangePrice+strangePrice2);&#13;
    //ceoAddress.transfer(strangePrice2);&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
&#13;
    //TokenSold(_tokenId, sellingPrice, item23IndexToPrice[_tokenId], oldOwner, newOwner, item23s[_tokenId].name);&#13;
&#13;
    msg.sender.transfer(purchaseExcess);&#13;
  }&#13;
&#13;
&#13;
  function priceOf(uint256 _tokenId) public view returns (uint256 price) {&#13;
    return item23IndexToPrice[_tokenId];&#13;
  }&#13;
&#13;
  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.&#13;
  /// @param _newCEO The address of the new CEO&#13;
  function setCEO(address _newCEO) public onlyCEO {&#13;
    require(_newCEO != address(0));&#13;
&#13;
    ceoAddress = _newCEO;&#13;
  }&#13;
&#13;
  /// @dev Assigns a new address to act as the COO. Only available to the current COO.&#13;
  /// @param _newCOO The address of the new COO&#13;
  function setCOO(address _newCOO) public onlyCEO {&#13;
    require(_newCOO != address(0));&#13;
    cooAddress = _newCOO;&#13;
  }&#13;
&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function symbol() public pure returns (string) {&#13;
    return SYMBOL;&#13;
  }&#13;
&#13;
  /// @notice Allow pre-approved user to take ownership of a token&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function takeOwnership(uint256 _tokenId) public {&#13;
    address newOwner = msg.sender;&#13;
    address oldOwner = item23IndexToOwner[_tokenId];&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure transfer is approved&#13;
    require(_approved(newOwner, _tokenId));&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
  }&#13;
&#13;
  /// @param _owner The owner whose item23 tokens we are interested in.&#13;
  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly&#13;
  ///  expensive (it walks the entire Item23s array looking for item23s belonging to owner),&#13;
  ///  but it also returns a dynamic array, which is only supported for web3 calls, and&#13;
  ///  not contract-to-contract calls.&#13;
  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {&#13;
    uint256 tokenCount = balanceOf(_owner);&#13;
    if (tokenCount == 0) {&#13;
        // Return an empty array&#13;
      return new uint256[](0);&#13;
    } else {&#13;
      uint256[] memory result = new uint256[](tokenCount);&#13;
      uint256 totalItem23s = totalSupply();&#13;
      uint256 resultIndex = 0;&#13;
      uint256 item23Id;&#13;
      for (item23Id = 0; item23Id &lt;= totalItem23s; item23Id++) {&#13;
        if (item23IndexToOwner[item23Id] == _owner) {&#13;
          result[resultIndex] = item23Id;&#13;
          resultIndex++;&#13;
        }&#13;
      }&#13;
      return result;&#13;
    }&#13;
  }&#13;
&#13;
  /// For querying totalSupply of token&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function totalSupply() public view returns (uint256 total) {&#13;
    return item23s.length;&#13;
  }&#13;
&#13;
  /// Owner initates the transfer of the token to another account&#13;
  /// @param _to The address for the token to be transferred to.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function transfer(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    require(_owns(msg.sender, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
    _transfer(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  /// Third-party initiates transfer of token from address _from to address _to&#13;
  /// @param _from The address for the token to be transferred from.&#13;
  /// @param _to The address for the token to be transferred to.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    require(_owns(_from, _tokenId));&#13;
    require(_approved(_to, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
    _transfer(_from, _to, _tokenId);&#13;
  }&#13;
&#13;
  /*** PRIVATE FUNCTIONS ***/&#13;
  /// Safety check on _to address to prevent against an unexpected 0x0 default.&#13;
  function _addressNotNull(address _to) private pure returns (bool) {&#13;
    return _to != address(0);&#13;
  }&#13;
&#13;
  /// For checking approval of transfer for address _to&#13;
  function _approved(address _to, uint256 _tokenId) private view returns (bool) {&#13;
    return item23IndexToApproved[_tokenId] == _to;&#13;
  }&#13;
&#13;
  /// For creating Item23&#13;
  function _createItem23(string _name, address _owner, uint256 _price) private {&#13;
    Item23 memory _item23 = Item23({&#13;
      name: _name&#13;
    });&#13;
    uint256 newItem23Id = item23s.push(_item23) - 1;&#13;
&#13;
    // It's probably never going to happen, 4 billion tokens are A LOT, but&#13;
    // let's just be 100% sure we never let this happen.&#13;
    require(newItem23Id == uint256(uint32(newItem23Id)));&#13;
&#13;
    Birth(newItem23Id, _name, _owner);&#13;
&#13;
    item23IndexToPrice[newItem23Id] = _price;&#13;
    item23IndexToPreviousPrice[newItem23Id] = 0;&#13;
    item23IndexToPreviousOwners[newItem23Id] =&#13;
        [address(this), address(this), address(this), address(this)];&#13;
&#13;
    // This will assign ownership, and also emit the Transfer event as&#13;
    // per ERC721 draft&#13;
    _transfer(address(0), _owner, newItem23Id);&#13;
  }&#13;
&#13;
  /// Check for token ownership&#13;
  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {&#13;
    return claimant == item23IndexToOwner[_tokenId];&#13;
  }&#13;
&#13;
  /// For paying out balance on contract&#13;
  function _payout(address _to) private {&#13;
    if (_to == address(0)) {&#13;
      ceoAddress.transfer(this.balance);&#13;
    } else {&#13;
      _to.transfer(this.balance);&#13;
    }&#13;
  }&#13;
&#13;
  /// @dev Assigns ownership of a specific Item23 to an address.&#13;
  function _transfer(address _from, address _to, uint256 _tokenId) private {&#13;
    // Since the number of item23s is capped to 2^32 we can't overflow this&#13;
    ownershipTokenCount[_to]++;&#13;
    //transfer ownership&#13;
    item23IndexToOwner[_tokenId] = _to;&#13;
    // When creating new item23s _from is 0x0, but we can't account that address.&#13;
    if (_from != address(0)) {&#13;
      ownershipTokenCount[_from]--;&#13;
      // clear any previously approved ownership exchange&#13;
      delete item23IndexToApproved[_tokenId];&#13;
    }&#13;
    // Update the item23IndexToPreviousOwners&#13;
    item23IndexToPreviousOwners[_tokenId][4]=item23IndexToPreviousOwners[_tokenId][3];&#13;
    item23IndexToPreviousOwners[_tokenId][3]=item23IndexToPreviousOwners[_tokenId][2];&#13;
    item23IndexToPreviousOwners[_tokenId][2]=item23IndexToPreviousOwners[_tokenId][1];&#13;
    item23IndexToPreviousOwners[_tokenId][1]=item23IndexToPreviousOwners[_tokenId][0];&#13;
    // the _from address for creation is 0, so instead set it to the contract address&#13;
    if (_from != address(0)) {&#13;
        item23IndexToPreviousOwners[_tokenId][0]=_from;&#13;
    } else {&#13;
        item23IndexToPreviousOwners[_tokenId][0]=address(this);&#13;
    }&#13;
    // Emit the transfer event.&#13;
    Transfer(_from, _to, _tokenId);&#13;
  }&#13;
}&#13;
&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}
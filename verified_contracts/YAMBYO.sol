pragma solidity ^0.4.16;

/// @author Wolf-Christoph Rauser - <<span class="__cf_email__" data-cfemail="3245405347415740724b535f504b5d1c515d5f">[emailÂ protected]</span>&gt;&#13;
&#13;
contract owned {&#13;
    address public owner;&#13;
&#13;
    function owned() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    function transferOwnership(address newOwner) onlyOwner public {&#13;
        owner = newOwner;&#13;
    }&#13;
}&#13;
&#13;
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) public; }&#13;
&#13;
contract YAMBYO is owned {&#13;
    // Public variables of the token&#13;
    string public name;&#13;
    string public symbol;&#13;
    uint8 public decimals;&#13;
    uint256 public totalSupply;&#13;
    uint256 public sellPrice;&#13;
    uint256 public buyPrice;&#13;
&#13;
    // This creates an array with all balances&#13;
    mapping (address =&gt; uint256) public balanceOf;&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;&#13;
&#13;
    // This generates a public event on the blockchain that will notify clients&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
&#13;
    // This notifies clients about the amount burnt&#13;
    event Burn(address indexed from, uint256 value);&#13;
    &#13;
    mapping (address =&gt; bool) public frozenAccount;&#13;
&#13;
    /* This generates a public event on the blockchain that will notify clients */&#13;
    event FrozenFunds(address target, bool frozen);&#13;
&#13;
    /**&#13;
     * Constructor function&#13;
     *&#13;
     * Initializes contract with initial supply tokens to the creator of the contract&#13;
     */&#13;
    function YAMBYO(&#13;
        uint256 initialSupply,&#13;
        uint8 decimalUnits,&#13;
        string tokenName,&#13;
        string tokenSymbol&#13;
        ) public {&#13;
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount&#13;
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens&#13;
        name = tokenName;                                   // Set the name for display purposes&#13;
        decimals = decimalUnits;                            // Set decimals&#13;
        symbol = tokenSymbol;                               // Set the symbol for display purposes&#13;
    }&#13;
&#13;
    /**&#13;
     * Internal transfer, only can be called by this contract&#13;
     */&#13;
    function _transfer(address _from, address _to, uint _value) internal {        &#13;
        require(_to != 0x0);                                // Prevent transfer to 0x0 address. Use burn() instead&#13;
        require(balanceOf[_from] &gt;= _value);                // Check if the sender has enough&#13;
        require(balanceOf[_to] + _value &gt; balanceOf[_to]);  // Check for overflows&#13;
        require(!frozenAccount[_from]);                     // Check if sender is frozen&#13;
        require(!frozenAccount[_to]);                       // Check if recipient is frozen&#13;
        balanceOf[_from] -= _value;                         // Subtract from the sender&#13;
        balanceOf[_to] += _value;                           // Add the same to the recipient&#13;
        Transfer(_from, _to, _value);                       // Asserts are used to use static analysis to find bugs in your code. They should never fail&#13;
        uint previousBalances = balanceOf[_from] + balanceOf[_to];&#13;
        assert(balanceOf[_from] + balanceOf[_to] == previousBalances);&#13;
    }&#13;
&#13;
    /**&#13;
     * Transfer tokens&#13;
     *&#13;
     * Send `_value` tokens to `_to` from your account&#13;
     *&#13;
     * @param _to The address of the recipient&#13;
     * @param _value the amount to send&#13;
     */&#13;
    function transfer(address _to, uint256 _value) public {&#13;
        _transfer(msg.sender, _to, _value);&#13;
    }&#13;
&#13;
    /**&#13;
     * Transfer tokens from other address&#13;
     *&#13;
     * Send `_value` tokens to `_to` in behalf of `_from`&#13;
     *&#13;
     * @param _from The address of the sender&#13;
     * @param _to The address of the recipient&#13;
     * @param _value the amount to send&#13;
     */&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {&#13;
        require(_value &lt;= allowance[_from][msg.sender]);     // Check allowance&#13;
        allowance[_from][msg.sender] -= _value;&#13;
        _transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Set allowance for other address&#13;
     *&#13;
     * Allows `_spender` to spend no more than `_value` tokens in your behalf&#13;
     *&#13;
     * @param _spender The address authorized to spend&#13;
     * @param _value the max amount they can spend&#13;
     */&#13;
    function approve(address _spender, uint256 _value) public&#13;
        returns (bool success) {&#13;
        allowance[msg.sender][_spender] = _value;&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Set allowance for other address and notify&#13;
     *&#13;
     * Allows `_spender` to spend no more than `_value` tokens in your behalf, and then ping the contract about it&#13;
     *&#13;
     * @param _spender The address authorized to spend&#13;
     * @param _value the max amount they can spend&#13;
     * @param _extraData some extra information to send to the approved contract&#13;
     */&#13;
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)&#13;
        public&#13;
        returns (bool success) {&#13;
        tokenRecipient spender = tokenRecipient(_spender);&#13;
        if (approve(_spender, _value)) {&#13;
            spender.receiveApproval(msg.sender, _value, this, _extraData);&#13;
            return true;&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * Destroy tokens&#13;
     *&#13;
     * Remove `_value` tokens from the system irreversibly&#13;
     *&#13;
     * @param _value the amount of money to burn&#13;
     */&#13;
    function burn(uint256 _value) public returns (bool success) {&#13;
        require(balanceOf[msg.sender] &gt;= _value);   // Check if the sender has enough&#13;
        balanceOf[msg.sender] -= _value;            // Subtract from the sender&#13;
        totalSupply -= _value;                      // Updates totalSupply&#13;
        Burn(msg.sender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Destroy tokens from other account&#13;
     *&#13;
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.&#13;
     *&#13;
     * @param _from the address of the sender&#13;
     * @param _value the amount of money to burn&#13;
     */&#13;
    function burnFrom(address _from, uint256 _value) public returns (bool success) {&#13;
        require(balanceOf[_from] &gt;= _value);                // Check if the targeted balance is enough&#13;
        require(_value &lt;= allowance[_from][msg.sender]);    // Check allowance&#13;
        balanceOf[_from] -= _value;                         // Subtract from the targeted balance&#13;
        allowance[_from][msg.sender] -= _value;             // Subtract from the sender's allowance&#13;
        totalSupply -= _value;                              // Update totalSupply&#13;
        Burn(_from, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @notice Create `mintedAmount` tokens and send it to `target`&#13;
    /// @param target Address to receive the tokens&#13;
    /// @param mintedAmount the amount of tokens it will receive&#13;
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {&#13;
        balanceOf[target] += mintedAmount;&#13;
        totalSupply += mintedAmount;&#13;
        Transfer(0, this, mintedAmount);&#13;
        Transfer(this, target, mintedAmount);&#13;
    }&#13;
&#13;
    /// @notice `freeze? Prevent | Allow` `target` from sending &amp; receiving tokens&#13;
    /// @param target Address to be frozen&#13;
    /// @param freeze either to freeze it or not&#13;
    function freezeAccount(address target, bool freeze) onlyOwner public {&#13;
        frozenAccount[target] = freeze;&#13;
        FrozenFunds(target, freeze);&#13;
    }&#13;
&#13;
    /// @notice Allow users to buy tokens for `newBuyPrice` eth and sell tokens for `newSellPrice` eth&#13;
    /// @param newSellPrice Price the users can sell to the contract&#13;
    /// @param newBuyPrice Price users can buy from the contract&#13;
    function setPrices(uint256 newSellPrice, uint256 newBuyPrice) onlyOwner public {&#13;
        sellPrice = newSellPrice;&#13;
        buyPrice = newBuyPrice;&#13;
    }&#13;
&#13;
    /// @notice Buy tokens from contract by sending ether&#13;
    function buy() payable public {&#13;
        uint amount = msg.value / buyPrice;               // calculates the amount&#13;
        _transfer(this, msg.sender, amount);              // makes the transfers&#13;
    }&#13;
&#13;
    /// @notice Sell `amount` tokens to contract&#13;
    /// @param amount amount of tokens to be sold&#13;
    function sell(uint256 amount) public {&#13;
        require(this.balance &gt;= amount * sellPrice);      // checks if the contract has enough ether to buy&#13;
        _transfer(msg.sender, this, amount);              // makes the transfers&#13;
        msg.sender.transfer(amount * sellPrice);          // sends ether to the seller. It's important to do this last to avoid recursion attacks&#13;
    }&#13;
}
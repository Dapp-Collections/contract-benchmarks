/**
 * Copyright 2017–2018, bZeroX, LLC. All Rights Reserved.
 * Adapted from MultiSigWalletWithTimeLock.sol, Copyright 2017 ZeroEx Intl.
 * Licensed under the Apache License, Version 2.0.
 */

pragma solidity 0.4.24;


/// @title Multisignature wallet - Allows multiple parties to agree on transactions before execution.
/// @author Stefan George - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f98a8d9c9f9897d79e9c968b9e9cb99a96978a9c978a808ad7979c8d">[email protected]</a>&gt;&#13;
contract MultiSigWallet {&#13;
&#13;
    /*&#13;
     *  Events&#13;
     */&#13;
    event Confirmation(address indexed sender, uint indexed transactionId);&#13;
    event Revocation(address indexed sender, uint indexed transactionId);&#13;
    event Submission(uint indexed transactionId);&#13;
    event Execution(uint indexed transactionId);&#13;
    event ExecutionFailure(uint indexed transactionId);&#13;
    event Deposit(address indexed sender, uint value);&#13;
    event OwnerAddition(address indexed owner);&#13;
    event OwnerRemoval(address indexed owner);&#13;
    event RequirementChange(uint required);&#13;
&#13;
    /*&#13;
     *  Constants&#13;
     */&#13;
    uint constant public MAX_OWNER_COUNT = 50;&#13;
&#13;
    /*&#13;
     *  Storage&#13;
     */&#13;
    mapping (uint =&gt; Transaction) public transactions;&#13;
    mapping (uint =&gt; mapping (address =&gt; bool)) public confirmations;&#13;
    mapping (address =&gt; bool) public isOwner;&#13;
    address[] public owners;&#13;
    uint public required;&#13;
    uint public transactionCount;&#13;
&#13;
    struct Transaction {&#13;
        address destination;&#13;
        uint value;&#13;
        bytes data;&#13;
        bool executed;&#13;
    }&#13;
&#13;
    /*&#13;
     *  Modifiers&#13;
     */&#13;
    modifier onlyWallet() {&#13;
        require(msg.sender == address(this));&#13;
        _;&#13;
    }&#13;
&#13;
    modifier ownerDoesNotExist(address owner) {&#13;
        require(!isOwner[owner]);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier ownerExists(address owner) {&#13;
        require(isOwner[owner]);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier transactionExists(uint transactionId) {&#13;
        require(transactions[transactionId].destination != 0);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier confirmed(uint transactionId, address owner) {&#13;
        require(confirmations[transactionId][owner]);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notConfirmed(uint transactionId, address owner) {&#13;
        require(!confirmations[transactionId][owner]);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notExecuted(uint transactionId) {&#13;
        require(!transactions[transactionId].executed);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notNull(address _address) {&#13;
        require(_address != 0);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier validRequirement(uint ownerCount, uint _required) {&#13;
        require(ownerCount &lt;= MAX_OWNER_COUNT&#13;
            &amp;&amp; _required &lt;= ownerCount&#13;
            &amp;&amp; _required != 0&#13;
            &amp;&amp; ownerCount != 0);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Fallback function allows to deposit ether.&#13;
    function()&#13;
        public&#13;
        payable&#13;
    {&#13;
        if (msg.value &gt; 0)&#13;
            emit Deposit(msg.sender, msg.value);&#13;
    }&#13;
&#13;
    /*&#13;
     * Public functions&#13;
     */&#13;
    /// @dev Contract constructor sets initial owners and required number of confirmations.&#13;
    /// @param _owners List of initial owners.&#13;
    /// @param _required Number of required confirmations.&#13;
    constructor(address[] _owners, uint _required)&#13;
        public&#13;
        validRequirement(_owners.length, _required)&#13;
    {&#13;
        for (uint i=0; i&lt;_owners.length; i++) {&#13;
            require(!isOwner[_owners[i]] &amp;&amp; _owners[i] != 0);&#13;
            isOwner[_owners[i]] = true;&#13;
        }&#13;
        owners = _owners;&#13;
        required = _required;&#13;
    }&#13;
&#13;
    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of new owner.&#13;
    function addOwner(address owner)&#13;
        public&#13;
        onlyWallet&#13;
        ownerDoesNotExist(owner)&#13;
        notNull(owner)&#13;
        validRequirement(owners.length + 1, required)&#13;
    {&#13;
        isOwner[owner] = true;&#13;
        owners.push(owner);&#13;
        emit OwnerAddition(owner);&#13;
    }&#13;
&#13;
    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of owner.&#13;
    function removeOwner(address owner)&#13;
        public&#13;
        onlyWallet&#13;
        ownerExists(owner)&#13;
    {&#13;
        isOwner[owner] = false;&#13;
        for (uint i=0; i&lt;owners.length - 1; i++)&#13;
            if (owners[i] == owner) {&#13;
                owners[i] = owners[owners.length - 1];&#13;
                break;&#13;
            }&#13;
        owners.length -= 1;&#13;
        if (required &gt; owners.length)&#13;
            changeRequirement(owners.length);&#13;
        emit OwnerRemoval(owner);&#13;
    }&#13;
&#13;
    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of owner to be replaced.&#13;
    /// @param newOwner Address of new owner.&#13;
    function replaceOwner(address owner, address newOwner)&#13;
        public&#13;
        onlyWallet&#13;
        ownerExists(owner)&#13;
        ownerDoesNotExist(newOwner)&#13;
    {&#13;
        for (uint i=0; i&lt;owners.length; i++)&#13;
            if (owners[i] == owner) {&#13;
                owners[i] = newOwner;&#13;
                break;&#13;
            }&#13;
        isOwner[owner] = false;&#13;
        isOwner[newOwner] = true;&#13;
        emit OwnerRemoval(owner);&#13;
        emit OwnerAddition(newOwner);&#13;
    }&#13;
&#13;
    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.&#13;
    /// @param _required Number of required confirmations.&#13;
    function changeRequirement(uint _required)&#13;
        public&#13;
        onlyWallet&#13;
        validRequirement(owners.length, _required)&#13;
    {&#13;
        required = _required;&#13;
        emit RequirementChange(_required);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to submit and confirm a transaction.&#13;
    /// @param destination Transaction target address.&#13;
    /// @param value Transaction ether value.&#13;
    /// @param data Transaction data payload.&#13;
    /// @return Returns transaction ID.&#13;
    function submitTransaction(address destination, uint value, bytes data)&#13;
        public&#13;
        returns (uint transactionId)&#13;
    {&#13;
        transactionId = addTransaction(destination, value, data);&#13;
        confirmTransaction(transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to confirm a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function confirmTransaction(uint transactionId)&#13;
        public&#13;
        ownerExists(msg.sender)&#13;
        transactionExists(transactionId)&#13;
        notConfirmed(transactionId, msg.sender)&#13;
    {&#13;
        confirmations[transactionId][msg.sender] = true;&#13;
        emit Confirmation(msg.sender, transactionId);&#13;
        executeTransaction(transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to revoke a confirmation for a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function revokeConfirmation(uint transactionId)&#13;
        public&#13;
        ownerExists(msg.sender)&#13;
        confirmed(transactionId, msg.sender)&#13;
        notExecuted(transactionId)&#13;
    {&#13;
        confirmations[transactionId][msg.sender] = false;&#13;
        emit Revocation(msg.sender, transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows anyone to execute a confirmed transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function executeTransaction(uint transactionId)&#13;
        public&#13;
        ownerExists(msg.sender)&#13;
        confirmed(transactionId, msg.sender)&#13;
        notExecuted(transactionId)&#13;
    {&#13;
        if (isConfirmed(transactionId)) {&#13;
            Transaction storage txn = transactions[transactionId];&#13;
            txn.executed = true;&#13;
            if (external_call(txn.destination, txn.value, txn.data.length, txn.data))&#13;
                emit Execution(transactionId);&#13;
            else {&#13;
                emit ExecutionFailure(transactionId);&#13;
                txn.executed = false;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    // call has been separated into its own function in order to take advantage&#13;
    // of the Solidity's code generator to produce a loop that copies tx.data into memory.&#13;
    function external_call(address destination, uint value, uint dataLength, bytes data) internal returns (bool) {&#13;
        bool result;&#13;
        assembly {&#13;
            let x := mload(0x40)   // "Allocate" memory for output (0x40 is where "free memory" pointer is stored by convention)&#13;
            let d := add(data, 32) // First 32 bytes are the padded length of data, so exclude that&#13;
            result := call(&#13;
                sub(gas, 34710),   // 34710 is the value that solidity is currently emitting&#13;
                                   // It includes callGas (700) + callVeryLow (3, to pay for SUB) + callValueTransferGas (9000) +&#13;
                                   // callNewAccountGas (25000, in case the destination address does not exist and needs creating)&#13;
                destination,&#13;
                value,&#13;
                d,&#13;
                dataLength,        // Size of the input (in bytes) - this is what fixes the padding problem&#13;
                x,&#13;
                0                  // Output is ignored, therefore the output size is zero&#13;
            )&#13;
        }&#13;
        return result;&#13;
    }&#13;
&#13;
    /// @dev Returns the confirmation status of a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Confirmation status.&#13;
    function isConfirmed(uint transactionId)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        uint count = 0;&#13;
        for (uint i=0; i&lt;owners.length; i++) {&#13;
            if (confirmations[transactionId][owners[i]])&#13;
                count += 1;&#13;
            if (count == required)&#13;
                return true;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * Internal functions&#13;
     */&#13;
    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.&#13;
    /// @param destination Transaction target address.&#13;
    /// @param value Transaction ether value.&#13;
    /// @param data Transaction data payload.&#13;
    /// @return Returns transaction ID.&#13;
    function addTransaction(address destination, uint value, bytes data)&#13;
        internal&#13;
        notNull(destination)&#13;
        returns (uint transactionId)&#13;
    {&#13;
        transactionId = transactionCount;&#13;
        transactions[transactionId] = Transaction({&#13;
            destination: destination,&#13;
            value: value,&#13;
            data: data,&#13;
            executed: false&#13;
        });&#13;
        transactionCount += 1;&#13;
        emit Submission(transactionId);&#13;
    }&#13;
&#13;
    /*&#13;
     * Web3 call functions&#13;
     */&#13;
    /// @dev Returns number of confirmations of a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Number of confirmations.&#13;
    function getConfirmationCount(uint transactionId)&#13;
        public&#13;
        constant&#13;
        returns (uint count)&#13;
    {&#13;
        for (uint i=0; i&lt;owners.length; i++)&#13;
            if (confirmations[transactionId][owners[i]])&#13;
                count += 1;&#13;
    }&#13;
&#13;
    /// @dev Returns total number of transactions after filers are applied.&#13;
    /// @param pending Include pending transactions.&#13;
    /// @param executed Include executed transactions.&#13;
    /// @return Total number of transactions after filters are applied.&#13;
    function getTransactionCount(bool pending, bool executed)&#13;
        public&#13;
        constant&#13;
        returns (uint count)&#13;
    {&#13;
        for (uint i=0; i&lt;transactionCount; i++)&#13;
            if (   pending &amp;&amp; !transactions[i].executed&#13;
                || executed &amp;&amp; transactions[i].executed)&#13;
                count += 1;&#13;
    }&#13;
&#13;
    /// @dev Returns list of owners.&#13;
    /// @return List of owner addresses.&#13;
    function getOwners()&#13;
        public&#13;
        constant&#13;
        returns (address[])&#13;
    {&#13;
        return owners;&#13;
    }&#13;
&#13;
    /// @dev Returns array with owner addresses, which confirmed transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Returns array of owner addresses.&#13;
    function getConfirmations(uint transactionId)&#13;
        public&#13;
        constant&#13;
        returns (address[] _confirmations)&#13;
    {&#13;
        address[] memory confirmationsTemp = new address[](owners.length);&#13;
        uint count = 0;&#13;
        uint i;&#13;
        for (i=0; i&lt;owners.length; i++)&#13;
            if (confirmations[transactionId][owners[i]]) {&#13;
                confirmationsTemp[count] = owners[i];&#13;
                count += 1;&#13;
            }&#13;
        _confirmations = new address[](count);&#13;
        for (i=0; i&lt;count; i++)&#13;
            _confirmations[i] = confirmationsTemp[i];&#13;
    }&#13;
&#13;
    /// @dev Returns list of transaction IDs in defined range.&#13;
    /// @param from Index start position of transaction array.&#13;
    /// @param to Index end position of transaction array.&#13;
    /// @param pending Include pending transactions.&#13;
    /// @param executed Include executed transactions.&#13;
    /// @return Returns array of transaction IDs.&#13;
    function getTransactionIds(uint from, uint to, bool pending, bool executed)&#13;
        public&#13;
        constant&#13;
        returns (uint[] _transactionIds)&#13;
    {&#13;
        uint[] memory transactionIdsTemp = new uint[](transactionCount);&#13;
        uint count = 0;&#13;
        uint i;&#13;
        for (i=0; i&lt;transactionCount; i++)&#13;
            if (   pending &amp;&amp; !transactions[i].executed&#13;
                || executed &amp;&amp; transactions[i].executed)&#13;
            {&#13;
                transactionIdsTemp[count] = i;&#13;
                count += 1;&#13;
            }&#13;
        _transactionIds = new uint[](to - from);&#13;
        for (i=from; i&lt;to; i++)&#13;
            _transactionIds[i - from] = transactionIdsTemp[i];&#13;
    }&#13;
}&#13;
&#13;
contract MultiSigWalletWithCustomTimeLocks is MultiSigWallet {&#13;
&#13;
    event ConfirmationTimeSet(uint indexed transactionId, uint confirmationTime);&#13;
    event TimeLockDefaultChange(uint secondsTimeLockedDefault);&#13;
    event TimeLockCustomChange(string funcHeader, uint secondsTimeLockedCustom);&#13;
    event TimeLockCustomRemove(string funcHeader);&#13;
&#13;
    struct CustomTimeLock {&#13;
        uint secondsTimeLocked;&#13;
        bool isSet;&#13;
    }&#13;
    &#13;
    uint public secondsTimeLockedDefault; // default timelock for functions without a custom setting&#13;
    mapping (bytes4 =&gt; CustomTimeLock) public customTimeLocks; // mapping of function headers to CustomTimeLock structs&#13;
    string[] public customTimeLockFunctions; // array of functions with custom values&#13;
&#13;
    mapping (uint =&gt; uint) public confirmationTimes;&#13;
&#13;
    modifier notFullyConfirmed(uint transactionId) {&#13;
        require(!isConfirmed(transactionId));&#13;
        _;&#13;
    }&#13;
&#13;
    modifier fullyConfirmed(uint transactionId) {&#13;
        require(isConfirmed(transactionId));&#13;
        _;&#13;
    }&#13;
&#13;
    modifier pastTimeLock(uint transactionId) {&#13;
        uint timelock = getSecondsTimeLockedByTx(transactionId);&#13;
        require(timelock == 0 || block.timestamp &gt;= confirmationTimes[transactionId] + timelock);&#13;
        _;&#13;
    }&#13;
&#13;
    /*&#13;
     * Public functions&#13;
     */&#13;
&#13;
    /// @dev Contract constructor sets initial owners, required number of confirmations, and time lock.&#13;
    /// @param _owners List of initial owners.&#13;
    /// @param _required Number of required confirmations.&#13;
    /// @param _secondsTimeLockedDefault Default duration needed after a transaction is confirmed and before it becomes executable, in seconds.&#13;
    constructor(address[] _owners, uint _required, uint _secondsTimeLockedDefault)&#13;
        public&#13;
        MultiSigWallet(_owners, _required)&#13;
    {&#13;
        secondsTimeLockedDefault = _secondsTimeLockedDefault;&#13;
&#13;
        customTimeLockFunctions.push("transferOwnership(address)");&#13;
        customTimeLocks[bytes4(keccak256("transferOwnership(address)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("transferOwnership(address)"))].secondsTimeLocked = 2419200; // 28 days&#13;
&#13;
        customTimeLockFunctions.push("transferBZxOwnership(address)");&#13;
        customTimeLocks[bytes4(keccak256("transferBZxOwnership(address)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("transferBZxOwnership(address)"))].secondsTimeLocked = 2419200;&#13;
&#13;
        customTimeLockFunctions.push("replaceContract(address)");&#13;
        customTimeLocks[bytes4(keccak256("replaceContract(address)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("replaceContract(address)"))].secondsTimeLocked = 2419200;&#13;
&#13;
        customTimeLockFunctions.push("setTarget(string,address)");&#13;
        customTimeLocks[bytes4(keccak256("setTarget(string,address)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("setTarget(string,address)"))].secondsTimeLocked = 2419200;&#13;
&#13;
        customTimeLockFunctions.push("setBZxAddresses(address,address,address,address,address)");&#13;
        customTimeLocks[bytes4(keccak256("setBZxAddresses(address,address,address,address,address)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("setBZxAddresses(address,address,address,address,address)"))].secondsTimeLocked = 2419200;&#13;
&#13;
        customTimeLockFunctions.push("setVault(address)");&#13;
        customTimeLocks[bytes4(keccak256("setVault(address)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("setVault(address)"))].secondsTimeLocked = 2419200;&#13;
&#13;
        customTimeLockFunctions.push("changeDefaultTimeLock(uint256)");&#13;
        customTimeLocks[bytes4(keccak256("changeDefaultTimeLock(uint256)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("changeDefaultTimeLock(uint256)"))].secondsTimeLocked = 2419200;&#13;
&#13;
        customTimeLockFunctions.push("changeCustomTimeLock(string,uint256)");&#13;
        customTimeLocks[bytes4(keccak256("changeCustomTimeLock(string,uint256)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("changeCustomTimeLock(string,uint256)"))].secondsTimeLocked = 2419200;&#13;
&#13;
        customTimeLockFunctions.push("removeCustomTimeLock(string)");&#13;
        customTimeLocks[bytes4(keccak256("removeCustomTimeLock(string)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("removeCustomTimeLock(string)"))].secondsTimeLocked = 2419200;&#13;
&#13;
        customTimeLockFunctions.push("toggleTargetPause(string,bool)");&#13;
        customTimeLocks[bytes4(keccak256("toggleTargetPause(string,bool)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("toggleTargetPause(string,bool)"))].secondsTimeLocked = 0;&#13;
&#13;
        customTimeLockFunctions.push("toggleDebug(bool)");&#13;
        customTimeLocks[bytes4(keccak256("toggleDebug(bool)"))].isSet = true;&#13;
        customTimeLocks[bytes4(keccak256("toggleDebug(bool)"))].secondsTimeLocked = 0;&#13;
    }&#13;
&#13;
    /// @dev Changes the default duration of the time lock for transactions.&#13;
    /// @param _secondsTimeLockedDefault Default duration needed after a transaction is confirmed and before it becomes executable, in seconds.&#13;
    function changeDefaultTimeLock(uint _secondsTimeLockedDefault)&#13;
        public&#13;
        onlyWallet&#13;
    {&#13;
        secondsTimeLockedDefault = _secondsTimeLockedDefault;&#13;
        emit TimeLockDefaultChange(_secondsTimeLockedDefault);&#13;
    }&#13;
&#13;
    /// @dev Changes the custom duration of the time lock for transactions to a specific function.&#13;
    /// @param _funcId example: "functionName(address[6],uint256[10],address,uint256,bytes)"&#13;
    /// @param _secondsTimeLockedCustom Custom duration needed after a transaction is confirmed and before it becomes executable, in seconds.&#13;
    function changeCustomTimeLock(string _funcId, uint _secondsTimeLockedCustom)&#13;
        public&#13;
        onlyWallet&#13;
    {&#13;
        bytes4 f = bytes4(keccak256(abi.encodePacked(_funcId)));&#13;
        if (!customTimeLocks[f].isSet) {&#13;
            customTimeLocks[f].isSet = true;&#13;
            customTimeLockFunctions.push(_funcId);&#13;
        }&#13;
        customTimeLocks[f].secondsTimeLocked = _secondsTimeLockedCustom;&#13;
        emit TimeLockCustomChange(_funcId, _secondsTimeLockedCustom);&#13;
    }&#13;
&#13;
    /// @dev Removes the custom duration of the time lock for transactions to a specific function.&#13;
    /// @param _funcId example: "functionName(address[6],uint256[10],address,uint256,bytes)"&#13;
    function removeCustomTimeLock(string _funcId)&#13;
        public&#13;
        onlyWallet&#13;
    {&#13;
        bytes4 f = bytes4(keccak256(abi.encodePacked(_funcId)));&#13;
        if (!customTimeLocks[f].isSet)&#13;
            revert();&#13;
&#13;
        for (uint i=0; i &lt; customTimeLockFunctions.length; i++) {&#13;
            if (keccak256(bytes(customTimeLockFunctions[i])) == keccak256(bytes(_funcId))) {&#13;
                if (i &lt; customTimeLockFunctions.length - 1)&#13;
                    customTimeLockFunctions[i] = customTimeLockFunctions[customTimeLockFunctions.length - 1];&#13;
                customTimeLockFunctions.length--;&#13;
&#13;
                customTimeLocks[f].secondsTimeLocked = 0;&#13;
                customTimeLocks[f].isSet = false;&#13;
&#13;
                emit TimeLockCustomRemove(_funcId);&#13;
&#13;
                break;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to confirm a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function confirmTransaction(uint transactionId)&#13;
        public&#13;
        ownerExists(msg.sender)&#13;
        transactionExists(transactionId)&#13;
        notConfirmed(transactionId, msg.sender)&#13;
        notFullyConfirmed(transactionId)&#13;
    {&#13;
        confirmations[transactionId][msg.sender] = true;&#13;
        emit Confirmation(msg.sender, transactionId);&#13;
        if (getSecondsTimeLockedByTx(transactionId) &gt; 0 &amp;&amp; isConfirmed(transactionId)) {&#13;
            setConfirmationTime(transactionId, block.timestamp);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to revoke a confirmation for a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function revokeConfirmation(uint transactionId)&#13;
        public&#13;
        ownerExists(msg.sender)&#13;
        confirmed(transactionId, msg.sender)&#13;
        notExecuted(transactionId)&#13;
        notFullyConfirmed(transactionId)&#13;
    {&#13;
        confirmations[transactionId][msg.sender] = false;&#13;
        emit Revocation(msg.sender, transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows anyone to execute a confirmed transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function executeTransaction(uint transactionId)&#13;
        public&#13;
        notExecuted(transactionId)&#13;
        fullyConfirmed(transactionId)&#13;
        pastTimeLock(transactionId)&#13;
    {&#13;
        Transaction storage txn = transactions[transactionId];&#13;
        txn.executed = true;&#13;
        if (external_call(txn.destination, txn.value, txn.data.length, txn.data))&#13;
            emit Execution(transactionId);&#13;
        else {&#13;
            emit ExecutionFailure(transactionId);&#13;
            txn.executed = false;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Returns the custom timelock for a function, or the default timelock if a custom value isn't set&#13;
    /// @param _funcId Function signature (encoded bytes)&#13;
    /// @return Timelock value&#13;
    function getSecondsTimeLocked(bytes4 _funcId)&#13;
        public&#13;
        view&#13;
        returns (uint)&#13;
    {&#13;
        if (customTimeLocks[_funcId].isSet)&#13;
            return customTimeLocks[_funcId].secondsTimeLocked;&#13;
        else&#13;
            return secondsTimeLockedDefault;&#13;
    }&#13;
&#13;
    /// @dev Returns the custom timelock for a function, or the default timelock if a custom value isn't set&#13;
    /// @param _funcId Function signature (complete string)&#13;
    /// @return Timelock value&#13;
    function getSecondsTimeLockedByString(string _funcId)&#13;
        public&#13;
        view&#13;
        returns (uint)&#13;
    {&#13;
        return (getSecondsTimeLocked(bytes4(keccak256(abi.encodePacked(_funcId)))));&#13;
    }&#13;
&#13;
    /// @dev Returns the custom timelock for a transaction, or the default timelock if a custom value isn't set&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Timelock value&#13;
    function getSecondsTimeLockedByTx(uint transactionId)&#13;
        public&#13;
        view&#13;
        returns (uint)&#13;
    {&#13;
        Transaction memory txn = transactions[transactionId];&#13;
        bytes memory data = txn.data;&#13;
        bytes4 funcId;&#13;
        assembly {&#13;
            funcId := mload(add(data, 32))&#13;
        }&#13;
        return (getSecondsTimeLocked(funcId));&#13;
    }&#13;
&#13;
    /// @dev Returns the number of seconds until a fully confirmed transaction can be executed&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Seconds in the timelock remaining&#13;
    function getTimeLockSecondsRemaining(uint transactionId)&#13;
        public&#13;
        view&#13;
        returns (uint)&#13;
    {&#13;
        uint timelock = getSecondsTimeLockedByTx(transactionId);&#13;
        if (timelock &gt; 0 &amp;&amp; confirmationTimes[transactionId] &gt; 0) {&#13;
            uint timelockEnding = confirmationTimes[transactionId] + timelock;&#13;
            if (timelockEnding &gt; block.timestamp)&#13;
                return timelockEnding - block.timestamp;&#13;
        }&#13;
        return 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * Internal functions&#13;
     */&#13;
&#13;
    /// @dev Sets the time of when a submission first passed.&#13;
    function setConfirmationTime(uint transactionId, uint confirmationTime)&#13;
        internal&#13;
    {&#13;
        confirmationTimes[transactionId] = confirmationTime;&#13;
        emit ConfirmationTimeSet(transactionId, confirmationTime);&#13;
    }&#13;
}
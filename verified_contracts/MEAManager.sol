pragma solidity ^0.4.19;



/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<span class="__cf_email__" data-cfemail="85e1e0f1e0c5e4fdeceae8ffe0ebabe6ea">[emailÂ protected]</span>&gt; (https://github.com/dete)&#13;
contract CSCERC721 {&#13;
  // Required methods&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) { &#13;
      return 0;&#13;
      &#13;
  }&#13;
  function ownerOf(uint256 _tokenId) public view returns (address owner) { return;}&#13;
&#13;
  function getCollectibleDetails(uint256 _assetId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, bool isRedeemed, address owner) {&#13;
        assetId = 0;&#13;
        sequenceId = 0;&#13;
        collectibleType = 0;&#13;
        collectibleClass = 0;&#13;
        owner = 0;&#13;
        isRedeemed = false;&#13;
  }&#13;
&#13;
   function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {&#13;
        return;&#13;
   }&#13;
&#13;
}&#13;
&#13;
contract CSCFactoryERC721 {&#13;
    &#13;
    function ownerOf(uint256 _tokenId) public view returns (address owner) { return;}&#13;
&#13;
    function getCollectibleDetails(uint256 _tokenId) external view returns(uint256 assetId, uint256 sequenceId, uint256 collectibleType, uint256 collectibleClass, bytes32 collectibleName, bool isRedeemed, address owner) {&#13;
&#13;
        assetId = 0;&#13;
        sequenceId = 0;&#13;
        collectibleType = 0;&#13;
        collectibleClass = 0;&#13;
        owner = 0;&#13;
        collectibleName = 0x0;&#13;
        isRedeemed = false;&#13;
    }&#13;
&#13;
    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {&#13;
        return;&#13;
   }&#13;
}&#13;
&#13;
contract ERC20 {&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
}&#13;
&#13;
contract CSCResourceFactory {&#13;
    mapping(uint16 =&gt; address) public resourceIdToAddress; &#13;
}&#13;
&#13;
&#13;
contract MEAHiddenLogic {&#13;
&#13;
&#13;
    function getTotalTonsClaimed() external view returns(uint32) {&#13;
        return;&#13;
    }&#13;
&#13;
    function getTotalSupply() external view returns(uint32) {&#13;
        return;&#13;
    }&#13;
&#13;
     function getStarTotalSupply(uint8 _starId) external view returns(uint32) {&#13;
        return;&#13;
    }&#13;
&#13;
    function getReturnTime(uint256 _assetId) external view returns(uint256 time) {&#13;
        return;&#13;
    }&#13;
&#13;
    //uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite &#13;
    function setResourceForStar(uint8[5] _resourceTypes, uint16[5] _resourcePer, uint32[5] _resourceAmounts) public returns(uint8 starId) {&#13;
    }&#13;
&#13;
    &#13;
    /// @dev Method to fetch collected ore details&#13;
    function getAssetCollectedOreBallances(uint256 _assetID) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite);&#13;
&#13;
    function getAssetCollectedOreBallancesArray(uint256 _assetID) external view returns(uint256[12] ores);&#13;
&#13;
    function emptyShipCargo(uint32 _assetId) external;&#13;
&#13;
     /// @dev For creating CSC Collectible&#13;
    function startMEAMission(uint256 _assetId, uint256 oreMax, uint8 starId, uint256 _travelTime) public returns(uint256);&#13;
&#13;
    &#13;
}&#13;
&#13;
/* Controls state and access rights for contract functions&#13;
 * @title Operational Control&#13;
 * @author Fazri Zubair &amp; Farhan Khwaja (Lucid Sight, Inc.)&#13;
 * Inspired and adapted from contract created by OpenZeppelin&#13;
 * Ref: https://github.com/OpenZeppelin/zeppelin-solidity/&#13;
 */&#13;
contract OperationalControl {&#13;
    // Facilitates access &amp; control for the game.&#13;
    // Roles:&#13;
    //  -The Managers (Primary/Secondary): Has universal control of all elements (No ability to withdraw)&#13;
    //  -The Banker: The Bank can withdraw funds and adjust fees / prices.&#13;
    //  -otherManagers: Contracts that need access to functions for gameplay&#13;
&#13;
    /// @dev Emited when contract is upgraded&#13;
    event ContractUpgrade(address newContract);&#13;
&#13;
    /// @dev Emited when other manager is set&#13;
    event OtherManagerUpdated(address otherManager, uint256 state);&#13;
&#13;
    // The addresses of the accounts (or contracts) that can execute actions within each roles.&#13;
    address public managerPrimary;&#13;
    address public managerSecondary;&#13;
    address public bankManager;&#13;
&#13;
    // Contracts that require access for gameplay&#13;
    mapping(address =&gt; uint8) public otherManagers;&#13;
&#13;
    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked&#13;
    bool public paused = false;&#13;
&#13;
    // @dev Keeps track whether the contract erroredOut. When that is true, most actions are blocked &amp; refund can be claimed&#13;
    bool public error = false;&#13;
&#13;
    /// @dev Operation modifiers for limiting access&#13;
    modifier onlyManager() {&#13;
        require(msg.sender == managerPrimary || msg.sender == managerSecondary);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyBanker() {&#13;
        require(msg.sender == bankManager);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyOtherManagers() {&#13;
        require(otherManagers[msg.sender] == 1);&#13;
        _;&#13;
    }&#13;
&#13;
&#13;
    modifier anyOperator() {&#13;
        require(&#13;
            msg.sender == managerPrimary ||&#13;
            msg.sender == managerSecondary ||&#13;
            msg.sender == bankManager ||&#13;
            otherManagers[msg.sender] == 1&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the Other Manager. (State = 1 is active, 0 is disabled)&#13;
    function setOtherManager(address _newOp, uint8 _state) external onlyManager {&#13;
        require(_newOp != address(0));&#13;
&#13;
        otherManagers[_newOp] = _state;&#13;
&#13;
        OtherManagerUpdated(_newOp,_state);&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the Primary Manager.&#13;
    function setPrimaryManager(address _newGM) external onlyManager {&#13;
        require(_newGM != address(0));&#13;
&#13;
        managerPrimary = _newGM;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the Secondary Manager.&#13;
    function setSecondaryManager(address _newGM) external onlyManager {&#13;
        require(_newGM != address(0));&#13;
&#13;
        managerSecondary = _newGM;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the Banker.&#13;
    function setBanker(address _newBK) external onlyManager {&#13;
        require(_newBK != address(0));&#13;
&#13;
        bankManager = _newBK;&#13;
    }&#13;
&#13;
    /*** Pausable functionality adapted from OpenZeppelin ***/&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS NOT paused&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS paused&#13;
    modifier whenPaused {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract has Error&#13;
    modifier whenError {&#13;
        require(error);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Called by any Operator role to pause the contract.&#13;
    /// Used only if a bug or exploit is discovered (Here to limit losses / damage)&#13;
    function pause() external onlyManager whenNotPaused {&#13;
        paused = true;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the Game Master&#13;
    /// @notice This is public rather than external so it can be called by derived contracts. &#13;
    function unpause() public onlyManager whenPaused {&#13;
        // can't unpause if contract was upgraded&#13;
        paused = false;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the Game Master&#13;
    /// @notice This is public rather than external so it can be called by derived contracts. &#13;
    function hasError() public onlyManager whenPaused {&#13;
        error = true;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the Game Master&#13;
    /// @notice This is public rather than external so it can be called by derived contracts. &#13;
    function noError() public onlyManager whenPaused {&#13;
        error = false;&#13;
    }&#13;
}&#13;
&#13;
contract MEAManager is OperationalControl {&#13;
&#13;
    /*** EVENTS ***/&#13;
&#13;
    /*** CONSTANTS ***/&#13;
    uint256 public constant REAPER_INTREPID = 3; &#13;
    uint256 public constant REAPER_INTREPID_EXTRACTION_BASE = 10; // tons per hour of mining&#13;
    uint256 public constant REAPER_INTREPID_FTL_SPEED = 900; // Seconds to travel 1 light year&#13;
    uint256 public constant REAPER_INTREPID_MAX_CARGO = 320;&#13;
&#13;
    uint256 public constant PHOENIX_CORSAIR = 2;&#13;
    uint256 public constant PHOENIX_CORSAIR_EXTRACTION_BASE = 40; // tons per hour of mining&#13;
    uint256 public constant PHOENIX_CORSAIR_FTL_SPEED = 1440; // Seconds to travel 1 light year&#13;
    uint256 public constant PHOENIX_CORSAIR_MAX_CARGO = 1500;&#13;
&#13;
    uint256 public constant VULCAN_PROMETHEUS = 1;&#13;
    uint256 public constant VULCAN_PROMETHEUS_EXTRACTION_BASE = 300; // tons per hour of mining&#13;
    uint256 public constant VULCAN_PROMETHEUS_FTL_SPEED = 2057; // Seconds to travel 1 light year&#13;
    uint256 public constant VULCAN_PROMETHEUS_MAX_CARGO = 6000; &#13;
&#13;
    uint256 public constant SIGMA = 4;&#13;
    uint256 public constant SIGMA_EXTRACTION_BASE = 150; // tons per hour of mining&#13;
    uint256 public constant SIGMA_FTL_SPEED = 4235; // Seconds to travel 1 light year&#13;
    uint256 public constant SIGMA_MAX_CARGO = 15000; &#13;
&#13;
    uint256 public constant HAYATO = 5;&#13;
    uint256 public constant HAYATO_EXTRACTION_BASE = 150; // tons per hour of mining&#13;
    uint256 public constant HAYATO_FTL_SPEED = 360; // Seconds to travel 1 light year&#13;
    uint256 public constant HAYATO_MAX_CARGO = 1500; &#13;
&#13;
    uint256 public constant CPGPEREGRINE = 6;&#13;
    uint256 public constant CPGPEREGRINE_EXTRACTION_BASE = 150; // tons per hour of mining&#13;
    uint256 public constant CPGPEREGRINE_FTL_SPEED = 720; // Seconds to travel 1 light year&#13;
    uint256 public constant CPGPEREGRINE_MAX_CARGO = 4000; &#13;
&#13;
    uint256 public constant TACTICALCRUISER = 7;&#13;
    uint256 public constant TACTICALCRUISER_EXTRACTION_BASE = 150; // tons per hour of mining&#13;
    uint256 public constant TACTICALCRUISER_FTL_SPEED = 720; // Seconds to travel 1 light year&#13;
    uint256 public constant TACTICALCRUISER_MAX_CARGO = 1000;&#13;
&#13;
    uint256 public constant OTHERCRUISER = 8;&#13;
    uint256 public constant OTHERCRUISER_EXTRACTION_BASE = 100; // tons per hour of mining&#13;
    uint256 public constant OTHERCRUISER_FTL_SPEED = 720; // Seconds to travel 1 light year&#13;
    uint256 public constant OTHERCRUISER_MAX_CARGO = 1500;  &#13;
&#13;
    uint256 public constant VULCAN_POD = 9;&#13;
    uint256 public constant VULCAN_POD_EXTRACTION_BASE = 1; // tons per hour of mining&#13;
    uint256 public constant VULCAN_POD_FTL_SPEED = 2000; // Seconds to travel 1 light year&#13;
    uint256 public constant VULCAN_POD_MAX_CARGO = 75;  &#13;
&#13;
    //For Devs to Travel Around&#13;
    uint256 public constant DEVCLASS = 99;&#13;
    uint256 public constant DEVCLASS_EXTRACTION_BASE = 50; // tons per hour of mining&#13;
    uint256 public constant DEVCLASS_FTL_SPEED = 10; // Seconds to travel 1 light year&#13;
    uint256 public constant DEVCLASS_MAX_CARGO = 500; &#13;
    &#13;
    /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
    string public constant NAME = "MEAGameManager";&#13;
&#13;
    /*** Mappings ***/&#13;
&#13;
     /// @dev assetID to ore type to qty collected&#13;
    mapping(uint32 =&gt; mapping(uint8 =&gt; uint32)) public collectedOreAssetMapping;&#13;
&#13;
    /// @dev owner address to ore type to qty collected&#13;
    mapping(address =&gt; mapping(uint8 =&gt; uint32)) public collectedOreBalanceMapping;&#13;
&#13;
    /// @dev owner address to ore type to qty collected&#13;
    mapping(address =&gt; mapping(uint8 =&gt; uint32)) public distributedOreBalanceMapping;&#13;
&#13;
    /// @dev assetID to number of MEA trips it has completed&#13;
    mapping(uint32 =&gt; uint32) public assetIdNumberOfTripsMapping;&#13;
&#13;
    /// @dev assetID to ore type to qty collected&#13;
    mapping(uint8 =&gt; uint16) public starLightyearDistanceMapping;&#13;
&#13;
    /// @dev assetID to last star visited&#13;
    mapping(uint32 =&gt; uint8) public assetIdToStarVisitedMapping;&#13;
&#13;
    /// @dev assetID to last star visited&#13;
    mapping(uint16 =&gt; address) public resourceERC20Address;&#13;
&#13;
    /// @dev assetID to Start Time of Current Trip&#13;
    mapping(uint32 =&gt; uint32) public assetIdCurrentTripStartTimeMapping;&#13;
&#13;
&#13;
    /*** Variables ***/&#13;
    uint256 public miningTimePerTrip = 3600; // 3600 for 1 hour 10&#13;
    uint256 public aimeIncreasePerTrip = 2500; // 25.00&#13;
&#13;
    address cscERC721Address;&#13;
    address cscFactoryERC721Address;&#13;
    address hiddenLogicAddress;&#13;
 &#13;
&#13;
    function MEAManager() public {&#13;
        require(msg.sender != address(0));&#13;
        paused = true; &#13;
        managerPrimary = msg.sender;&#13;
        managerSecondary = msg.sender;&#13;
        bankManager = msg.sender;&#13;
        cscERC721Address = address(0xe4f5e0d5c033f517a943602df942e794a06bc123);&#13;
        cscFactoryERC721Address = address(0xcc9a66acf8574141b0e025202dd57649765a4be7);&#13;
    }&#13;
&#13;
    /*** Management Functions ***/&#13;
&#13;
    /// @dev Set HiddenLogic&#13;
    function setHiddenLogic(address _hiddenLogicAddress) public onlyManager {&#13;
        hiddenLogicAddress = _hiddenLogicAddress;&#13;
    }&#13;
&#13;
    /// @dev Set HiddenLogic&#13;
    function setResourceERC20Address(uint16 _resId, address _reourceAddress) public onlyManager {&#13;
        resourceERC20Address[_resId] = _reourceAddress;&#13;
    }&#13;
&#13;
    /// @dev Set HiddenLogic&#13;
    function setAllResourceERC20Addresses(address _master) public onlyManager {&#13;
        CSCResourceFactory factory = CSCResourceFactory(_master);&#13;
        for(uint8 i = 0; i &lt; 12; i++) {&#13;
            resourceERC20Address[i] = factory.resourceIdToAddress(i);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Set CSCErc721 Contract&#13;
    function setCSCERC721(address _cscERC721Address) public onlyManager {&#13;
        cscERC721Address = _cscERC721Address;&#13;
    }&#13;
&#13;
     /// @dev Set CSCFactoryErc721 Contract&#13;
    function setCSCFactoryERC721(address _cscFactoryERC721Address) public onlyManager {&#13;
        cscFactoryERC721Address = _cscFactoryERC721Address;&#13;
    }&#13;
&#13;
    /// @dev Set / Modify Lightyear Distance 3.456 ly = 3456&#13;
    function setStarDistance(uint8 _starId, uint16 _lightyearsInThousands) public anyOperator {&#13;
        starLightyearDistanceMapping[_starId] = _lightyearsInThousands;&#13;
    }&#13;
&#13;
    /// @dev Set / Modify MEA Game Attributes&#13;
    function setMEAAttributes(uint256 _aime, uint256 _miningTime) public onlyManager {&#13;
        aimeIncreasePerTrip = _aime;&#13;
        miningTimePerTrip = _miningTime;&#13;
    }&#13;
&#13;
    /// @dev Withdraw Remaining Resource Tokens&#13;
    function reclaimResourceDeposits(address _withdrawAddress) public onlyManager {&#13;
        require(_withdrawAddress != address(0));&#13;
        for(uint8 ii = 0; ii &lt; 12; ii++) {&#13;
            if(resourceERC20Address[ii] != 0) {&#13;
                ERC20 resCont = ERC20(resourceERC20Address[ii]);&#13;
                uint256 bal = resCont.balanceOf(this);&#13;
                resCont.transfer(_withdrawAddress, bal);&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /*** Public Functions ***/&#13;
&#13;
     /// @dev Get Current Cargo Hold of AssetId (item names)&#13;
    function getAssetIdCargo(uint32 _assetId) public view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {&#13;
        uint256[12] memory _ores = getAssetIdCargoArray(_assetId);&#13;
        iron = _ores[0];&#13;
        quartz = _ores[1];&#13;
        nickel = _ores[2];&#13;
        cobalt = _ores[3];&#13;
        silver = _ores[4];&#13;
        titanium = _ores[5];&#13;
        lucinite = _ores[6];&#13;
        gold = _ores[7];&#13;
        cosmethyst = _ores[8];&#13;
        allurum = _ores[9];&#13;
        platinum = _ores[10];&#13;
        trilite = _ores[11];&#13;
    }&#13;
&#13;
    // function getAllShipStats(uint32[] _shipIds) public view returns(uint32[] results) {&#13;
    //     //loop all results&#13;
    //     for(uint i = 0; i &lt; _shipIds.length; i++) {&#13;
    //         results[]];&#13;
    //     }&#13;
&#13;
    // }&#13;
&#13;
    /// @dev Get Current Cargo Hold of AssetId (array)&#13;
    function getAssetIdCargoArray (uint32 _assetId) public view returns(uint256[12])  {&#13;
        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);&#13;
        return logic.getAssetCollectedOreBallancesArray(_assetId);&#13;
    }&#13;
&#13;
    /// @dev Get AssetId Trip Completed Time&#13;
    function getAssetIdTripCompletedTime(uint256 _assetId) external view returns(uint256 time) {&#13;
        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);&#13;
        return logic.getReturnTime(uint32(_assetId));&#13;
    }&#13;
&#13;
    /// @dev Get AssetId Trip Completed Time&#13;
    function getAssetIdTripStartTime(uint256 _assetId) external view returns(uint256 time) {&#13;
&#13;
        return assetIdCurrentTripStartTimeMapping[uint32(_assetId)];&#13;
    }&#13;
&#13;
    function getLastStarOfAssetId(uint32 _assetId) public view returns(uint8 starId){&#13;
        return assetIdToStarVisitedMapping[_assetId];&#13;
    }&#13;
&#13;
    /// @dev Get Resource Address&#13;
    function getResourceERC20Address(uint16 _resId) public view returns(address resourceContract) {&#13;
        return resourceERC20Address[_resId];&#13;
    }&#13;
&#13;
    /// @dev Get Time&#13;
    function getMEATime() external view returns(uint256 time) {&#13;
        return now;&#13;
    }&#13;
&#13;
    /// @dev Method to fetch processed ore details&#13;
    function getCollectedOreBalances(address _owner) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {&#13;
&#13;
        iron = collectedOreBalanceMapping[_owner][0];&#13;
        quartz = collectedOreBalanceMapping[_owner][1];&#13;
        nickel = collectedOreBalanceMapping[_owner][2];&#13;
        cobalt = collectedOreBalanceMapping[_owner][3];&#13;
        silver = collectedOreBalanceMapping[_owner][4];&#13;
        titanium = collectedOreBalanceMapping[_owner][5];&#13;
        lucinite = collectedOreBalanceMapping[_owner][6];&#13;
        gold = collectedOreBalanceMapping[_owner][7];&#13;
        cosmethyst = collectedOreBalanceMapping[_owner][8];&#13;
        allurum = collectedOreBalanceMapping[_owner][9];&#13;
        platinum = collectedOreBalanceMapping[_owner][10];&#13;
        trilite = collectedOreBalanceMapping[_owner][11];&#13;
    }&#13;
&#13;
    /// @dev Method to fetch processed ore details&#13;
    function getDistributedOreBalances(address _owner) external view returns(uint256 iron, uint256 quartz, uint256 nickel, uint256 cobalt, uint256 silver, uint256 titanium, uint256 lucinite, uint256 gold, uint256 cosmethyst, uint256 allurum,  uint256 platinum,  uint256 trilite) {&#13;
&#13;
        iron = distributedOreBalanceMapping[_owner][0];&#13;
        quartz = distributedOreBalanceMapping[_owner][1];&#13;
        nickel = distributedOreBalanceMapping[_owner][2];&#13;
        cobalt = distributedOreBalanceMapping[_owner][3];&#13;
        silver = distributedOreBalanceMapping[_owner][4];&#13;
        titanium = distributedOreBalanceMapping[_owner][5];&#13;
        lucinite = distributedOreBalanceMapping[_owner][6];&#13;
        gold = distributedOreBalanceMapping[_owner][7];&#13;
        cosmethyst = distributedOreBalanceMapping[_owner][8];&#13;
        allurum = distributedOreBalanceMapping[_owner][9];&#13;
        platinum = distributedOreBalanceMapping[_owner][10];&#13;
        trilite = distributedOreBalanceMapping[_owner][11];&#13;
    }&#13;
&#13;
    function withdrawCollectedResources() public {&#13;
&#13;
        for(uint8 ii = 0; ii &lt; 12; ii++) {&#13;
            require(resourceERC20Address[ii] != address(0));&#13;
            uint32 oreOutstanding = collectedOreBalanceMapping[msg.sender][ii] - distributedOreBalanceMapping[msg.sender][ii];&#13;
            if(oreOutstanding &gt; 0) {&#13;
                ERC20 resCont = ERC20(resourceERC20Address[ii]);&#13;
                distributedOreBalanceMapping[msg.sender][ii] += oreOutstanding;&#13;
                resCont.transfer(msg.sender, oreOutstanding);&#13;
            }&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    //Gets star distance in thousandths of ly&#13;
    function getStarDistanceInLyThousandths(uint8 _starId) public view returns (uint32 total) {&#13;
        return starLightyearDistanceMapping[_starId];&#13;
    }&#13;
    &#13;
    //Gets total resources already claimed by commanders&#13;
    function totalMEATonsClaimed() public view returns (uint32 total) {&#13;
        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);&#13;
        return logic.getTotalTonsClaimed();&#13;
    }&#13;
&#13;
    //Gets total seeded supply commanders&#13;
    function totalMEATonsSupply() public view returns (uint32 total) {&#13;
        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);&#13;
        return logic.getTotalSupply();&#13;
    }&#13;
&#13;
     function totalStarSupplyRemaining(uint8 _starId) external view returns(uint32) {&#13;
        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);&#13;
        return logic.getStarTotalSupply(_starId);&#13;
    }&#13;
&#13;
    function claimOreOnlyFromAssetId(uint256 _assetId) {&#13;
        uint256 collectibleClass = 0;&#13;
        address shipOwner;&#13;
        (collectibleClass, shipOwner) = _getShipInfo(_assetId);&#13;
&#13;
         require(shipOwner == msg.sender);&#13;
&#13;
        _claimOreAndClear(uint32(_assetId), 0);&#13;
    }&#13;
    /// @dev For creating CSC Collectible&#13;
    function launchShipOnMEA(uint256 _assetId, uint8 starId) public whenNotPaused returns(uint256) {&#13;
        &#13;
        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);&#13;
&#13;
        uint256 collectibleClass = 0;&#13;
        address shipOwner;&#13;
&#13;
        (collectibleClass, shipOwner) = _getShipInfo(_assetId);&#13;
&#13;
        //Check if the ship owner is sender&#13;
        require(shipOwner == msg.sender);&#13;
&#13;
        //Check if ship is back at earth&#13;
        require(now &gt; logic.getReturnTime(_assetId));&#13;
        &#13;
        //Claims ore and clears&#13;
        _claimOreAndClear(uint32(_assetId), starId);&#13;
&#13;
        //Get Asset Stats&#13;
        uint tripCount = assetIdNumberOfTripsMapping[uint32(_assetId)];&#13;
        uint starTripDist = starLightyearDistanceMapping[starId];&#13;
        uint256 oreMax = 5;&#13;
        uint256 tripSeconds = 10;&#13;
&#13;
        if(collectibleClass == REAPER_INTREPID) {&#13;
            oreMax = REAPER_INTREPID_EXTRACTION_BASE + (REAPER_INTREPID_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = REAPER_INTREPID_FTL_SPEED * starTripDist / 1000; // 4LPH - 900 seconds per light year&#13;
            if(oreMax &gt; REAPER_INTREPID_MAX_CARGO)&#13;
                oreMax = REAPER_INTREPID_MAX_CARGO;&#13;
        }&#13;
        else if(collectibleClass == PHOENIX_CORSAIR) {&#13;
            oreMax = PHOENIX_CORSAIR_EXTRACTION_BASE + (PHOENIX_CORSAIR_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = PHOENIX_CORSAIR_FTL_SPEED * starTripDist / 1000; // 2.5LPH - 1440 seconds per light year&#13;
            if(oreMax &gt; PHOENIX_CORSAIR_MAX_CARGO)&#13;
                oreMax = PHOENIX_CORSAIR_MAX_CARGO;&#13;
        }&#13;
        else if(collectibleClass == VULCAN_PROMETHEUS) {&#13;
            oreMax = VULCAN_PROMETHEUS_EXTRACTION_BASE + (VULCAN_PROMETHEUS_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = VULCAN_PROMETHEUS_FTL_SPEED * starTripDist / 1000; // 1.75LPH - 2057 seconds per light year&#13;
            if(oreMax &gt; VULCAN_PROMETHEUS_MAX_CARGO)&#13;
                oreMax = VULCAN_PROMETHEUS_MAX_CARGO;&#13;
        }&#13;
        else if(collectibleClass == SIGMA) {&#13;
            oreMax = SIGMA_EXTRACTION_BASE + (SIGMA_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = SIGMA_FTL_SPEED * starTripDist / 1000; // 0.85LPH - 4235 seconds per light year&#13;
            if(oreMax &gt; SIGMA_MAX_CARGO)&#13;
                oreMax = SIGMA_MAX_CARGO;&#13;
        }&#13;
        else if(collectibleClass == HAYATO) { //Hayato&#13;
            oreMax = HAYATO_EXTRACTION_BASE + (HAYATO_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = HAYATO_FTL_SPEED * starTripDist / 1000; // 10LPH - 360 seconds per light year&#13;
            if(oreMax &gt; HAYATO_MAX_CARGO)&#13;
                oreMax = HAYATO_MAX_CARGO;&#13;
        }&#13;
        else if(collectibleClass == CPGPEREGRINE) { //CPG Peregrine&#13;
            oreMax = CPGPEREGRINE_EXTRACTION_BASE + (CPGPEREGRINE_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = CPGPEREGRINE_FTL_SPEED * starTripDist / 1000; // 5LPH -720 seconds per light year&#13;
            if(oreMax &gt; CPGPEREGRINE_MAX_CARGO)&#13;
                oreMax = CPGPEREGRINE_MAX_CARGO;&#13;
        }&#13;
        else if(collectibleClass == TACTICALCRUISER) { //TACTICA CRUISER Ships&#13;
            oreMax = TACTICALCRUISER_EXTRACTION_BASE + (TACTICALCRUISER_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = TACTICALCRUISER_FTL_SPEED * starTripDist / 1000; &#13;
            if(oreMax &gt; TACTICALCRUISER_MAX_CARGO)&#13;
                oreMax = TACTICALCRUISER_MAX_CARGO;&#13;
        }&#13;
        else if(collectibleClass == VULCAN_POD) { //TACTICA CRUISER Ships&#13;
            oreMax = VULCAN_POD_EXTRACTION_BASE + (VULCAN_POD_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = VULCAN_POD_FTL_SPEED * starTripDist / 1000; &#13;
            if(oreMax &gt; VULCAN_POD_MAX_CARGO)&#13;
                oreMax = VULCAN_POD_MAX_CARGO;&#13;
        }&#13;
        else if(collectibleClass &gt;= DEVCLASS) { //Dev Ships&#13;
            oreMax = DEVCLASS_EXTRACTION_BASE + (DEVCLASS_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
            tripSeconds = DEVCLASS_FTL_SPEED * starTripDist / 1000;&#13;
            if(oreMax &gt; DEVCLASS_MAX_CARGO)&#13;
                oreMax = DEVCLASS_MAX_CARGO;&#13;
        } else {&#13;
            if(collectibleClass &gt;= OTHERCRUISER) { //Support Other Promo Ships&#13;
                oreMax = OTHERCRUISER_EXTRACTION_BASE + (OTHERCRUISER_EXTRACTION_BASE * tripCount * aimeIncreasePerTrip / 10000);&#13;
                tripSeconds = OTHERCRUISER_FTL_SPEED * starTripDist / 1000; &#13;
                if(oreMax &gt; OTHERCRUISER_MAX_CARGO)&#13;
                    oreMax = OTHERCRUISER_MAX_CARGO;&#13;
            }&#13;
        }&#13;
&#13;
        //Make Round Trip + Mining&#13;
        tripSeconds = ((tripSeconds * 2) + miningTimePerTrip); //3600 for an hour - 0 for testing ***************************&#13;
&#13;
        //calculate travel time&#13;
        uint256 returnTime = logic.startMEAMission(_assetId, oreMax, starId, tripSeconds);&#13;
&#13;
        //Confirm trip&#13;
        if(returnTime &gt; 0) {&#13;
            assetIdNumberOfTripsMapping[uint32(_assetId)] += 1;&#13;
            assetIdToStarVisitedMapping[uint32(_assetId)] = starId;&#13;
            assetIdCurrentTripStartTimeMapping[uint32(_assetId)] = uint32(now);&#13;
        }&#13;
        &#13;
        return returnTime;&#13;
    }&#13;
&#13;
&#13;
    /*** PRIVATE FUNCTIONS ***/&#13;
&#13;
    /// @dev  Safety check on _to address to prevent against an unexpected 0x0 default.&#13;
    function _addressNotNull(address _to) internal pure returns (bool) {&#13;
        return _to != address(0);&#13;
    }&#13;
&#13;
    /// @dev  Claims and clears cargo -- ONLY INTERNAL&#13;
    function _claimOreAndClear (uint32 _assetId, uint8 _starId) internal {&#13;
        MEAHiddenLogic logic = MEAHiddenLogic(hiddenLogicAddress);&#13;
        uint256[12] memory _ores = logic.getAssetCollectedOreBallancesArray(_assetId);&#13;
        bool hasItems = false;&#13;
&#13;
        for(uint8 i = 0; i &lt; 12; i++) {&#13;
            if(_ores[i] &gt; 0) {&#13;
                collectedOreBalanceMapping[msg.sender][i] += uint32(_ores[i]);&#13;
                hasItems = true;&#13;
            }&#13;
        }&#13;
&#13;
        //Doesn't Let you Travel to empty stars but lets you collect&#13;
        if(hasItems == false &amp;&amp; _starId &gt; 0) {&#13;
            require(logic.getStarTotalSupply(_starId) &gt; 0);&#13;
        }&#13;
&#13;
        logic.emptyShipCargo(_assetId);&#13;
    }&#13;
&#13;
    function _getShipInfo(uint256 _assetId) internal view returns (uint256 collectibleClass, address owner) {&#13;
        &#13;
        uint256 nulldata;&#13;
        bool nullbool;&#13;
        uint256 collectibleType;&#13;
&#13;
        if(_assetId &lt;= 3000) {&#13;
            CSCERC721 shipData = CSCERC721(cscERC721Address);&#13;
            (nulldata, nulldata, collectibleType, collectibleClass, nullbool, owner) = shipData.getCollectibleDetails(_assetId);&#13;
        } else {&#13;
            bytes32 nullstring;&#13;
            CSCFactoryERC721 shipFData = CSCFactoryERC721(cscFactoryERC721Address);&#13;
            (nulldata, nulldata, collectibleType, collectibleClass, nullstring, nullbool, owner) = shipFData.getCollectibleDetails(_assetId);&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    &#13;
    &#13;
    &#13;
    &#13;
}
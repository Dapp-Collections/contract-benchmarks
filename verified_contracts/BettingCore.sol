pragma solidity 0.4.19;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, throws on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    if (a == 0) {
      return 0;
    }
    uint256 c = a * b;
    assert(c / a == b);
    return c;
  }

  /**
  * @dev Integer division of two numbers, truncating the quotient.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    // assert(b > 0); // Solidity automatically throws when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold
    return c;
  }

  /**
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    assert(b <= a);
    return a - b;
  }

  /**
  * @dev Adds two numbers, throws on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    assert(c >= a);
    return c;
  }
}

/*
 * @title String & slice utility library for Solidity contracts.
 * @author Nick Johnson <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3e5f4c5f5d5650575a7e50514a5a514a10505b4a">[emailÂ protected]</a>&gt;&#13;
 *&#13;
 * @dev Functionality in this library is largely implemented using an&#13;
 *      abstraction called a 'slice'. A slice represents a part of a string -&#13;
 *      anything from the entire string to a single character, or even no&#13;
 *      characters at all (a 0-length slice). Since a slice only has to specify&#13;
 *      an offset and a length, copying and manipulating slices is a lot less&#13;
 *      expensive than copying and manipulating the strings they reference.&#13;
 *&#13;
 *      To further reduce gas costs, most functions on slice that need to return&#13;
 *      a slice modify the original one instead of allocating a new one; for&#13;
 *      instance, `s.split(".")` will return the text up to the first '.',&#13;
 *      modifying s to only contain the remainder of the string after the '.'.&#13;
 *      In situations where you do not want to modify the original slice, you&#13;
 *      can make a copy first with `.copy()`, for example:&#13;
 *      `s.copy().split(".")`. Try and avoid using this idiom in loops; since&#13;
 *      Solidity has no memory management, it will result in allocating many&#13;
 *      short-lived slices that are later discarded.&#13;
 *&#13;
 *      Functions that return two slices come in two versions: a non-allocating&#13;
 *      version that takes the second slice as an argument, modifying it in&#13;
 *      place, and an allocating version that allocates and returns the second&#13;
 *      slice; see `nextRune` for example.&#13;
 *&#13;
 *      Functions that have to copy string data will return strings rather than&#13;
 *      slices; these can be cast back to slices for further processing if&#13;
 *      required.&#13;
 *&#13;
 *      For convenience, some functions are provided with non-modifying&#13;
 *      variants that create a new slice and return both; for instance,&#13;
 *      `s.splitNew('.')` leaves s unmodified, and returns two values&#13;
 *      corresponding to the left and right parts of the string.&#13;
 */&#13;
library strings {&#13;
    struct slice {&#13;
        uint _len;&#13;
        uint _ptr;&#13;
    }&#13;
&#13;
    function memcpy(uint dest, uint src, uint len) private {&#13;
        // Copy word-length chunks while possible&#13;
        for(; len &gt;= 32; len -= 32) {&#13;
            assembly {&#13;
                mstore(dest, mload(src))&#13;
            }&#13;
            dest += 32;&#13;
            src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint mask = 256 ** (32 - len) - 1;&#13;
        assembly {&#13;
            let srcpart := and(mload(src), not(mask))&#13;
            let destpart := and(mload(dest), mask)&#13;
            mstore(dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire string.&#13;
     * @param self The string to make a slice from.&#13;
     * @return A newly allocated slice containing the entire string.&#13;
     */&#13;
    function toSlice(string self) internal returns (slice) {&#13;
        uint ptr;&#13;
        assembly {&#13;
            ptr := add(self, 0x20)&#13;
        }&#13;
        return slice(bytes(self).length, ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length of a null-terminated bytes32 string.&#13;
     * @param self The value to find the length of.&#13;
     * @return The length of the string, from 0 to 32.&#13;
     */&#13;
    function len(bytes32 self) internal returns (uint) {&#13;
        uint ret;&#13;
        if (self == 0)&#13;
            return 0;&#13;
        if (self &amp; 0xffffffffffffffffffffffffffffffff == 0) {&#13;
            ret += 16;&#13;
            self = bytes32(uint(self) / 0x100000000000000000000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffffffffffff == 0) {&#13;
            ret += 8;&#13;
            self = bytes32(uint(self) / 0x10000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffff == 0) {&#13;
            ret += 4;&#13;
            self = bytes32(uint(self) / 0x100000000);&#13;
        }&#13;
        if (self &amp; 0xffff == 0) {&#13;
            ret += 2;&#13;
            self = bytes32(uint(self) / 0x10000);&#13;
        }&#13;
        if (self &amp; 0xff == 0) {&#13;
            ret += 1;&#13;
        }&#13;
        return 32 - ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire bytes32, interpreted as a&#13;
     *      null-termintaed utf-8 string.&#13;
     * @param self The bytes32 value to convert to a slice.&#13;
     * @return A new slice containing the value of the input argument up to the&#13;
     *         first null.&#13;
     */&#13;
    function toSliceB32(bytes32 self) internal returns (slice ret) {&#13;
        // Allocate space for `self` in memory, copy it there, and point ret at it&#13;
        assembly {&#13;
            let ptr := mload(0x40)&#13;
            mstore(0x40, add(ptr, 0x20))&#13;
            mstore(ptr, self)&#13;
            mstore(add(ret, 0x20), ptr)&#13;
        }&#13;
        ret._len = len(self);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a new slice containing the same data as the current slice.&#13;
     * @param self The slice to copy.&#13;
     * @return A new slice containing the same data as `self`.&#13;
     */&#13;
    function copy(slice self) internal returns (slice) {&#13;
        return slice(self._len, self._ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Copies a slice to a new string.&#13;
     * @param self The slice to copy.&#13;
     * @return A newly allocated string containing the slice's text.&#13;
     */&#13;
    function toString(slice self) internal returns (string) {&#13;
        var ret = new string(self._len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length in runes of the slice. Note that this operation&#13;
     *      takes time proportional to the length of the slice; avoid using it&#13;
     *      in loops, and call `slice.empty()` if you only need to know whether&#13;
     *      the slice is empty or not.&#13;
     * @param self The slice to operate on.&#13;
     * @return The length of the slice in runes.&#13;
     */&#13;
    function len(slice self) internal returns (uint l) {&#13;
        // Starting at ptr-31 means the LSB will be the byte we care about&#13;
        var ptr = self._ptr - 31;&#13;
        var end = ptr + self._len;&#13;
        for (l = 0; ptr &lt; end; l++) {&#13;
            uint8 b;&#13;
            assembly { b := and(mload(ptr), 0xFF) }&#13;
            if (b &lt; 0x80) {&#13;
                ptr += 1;&#13;
            } else if(b &lt; 0xE0) {&#13;
                ptr += 2;&#13;
            } else if(b &lt; 0xF0) {&#13;
                ptr += 3;&#13;
            } else if(b &lt; 0xF8) {&#13;
                ptr += 4;&#13;
            } else if(b &lt; 0xFC) {&#13;
                ptr += 5;&#13;
            } else {&#13;
                ptr += 6;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice is empty (has a length of 0).&#13;
     * @param self The slice to operate on.&#13;
     * @return True if the slice is empty, False otherwise.&#13;
     */&#13;
    function empty(slice self) internal returns (bool) {&#13;
        return self._len == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a positive number if `other` comes lexicographically after&#13;
     *      `self`, a negative number if it comes before, or zero if the&#13;
     *      contents of the two slices are equal. Comparison is done per-rune,&#13;
     *      on unicode codepoints.&#13;
     * @param self The first slice to compare.&#13;
     * @param other The second slice to compare.&#13;
     * @return The result of the comparison.&#13;
     */&#13;
    function compare(slice self, slice other) internal returns (int) {&#13;
        uint shortest = self._len;&#13;
        if (other._len &lt; self._len)&#13;
            shortest = other._len;&#13;
&#13;
        var selfptr = self._ptr;&#13;
        var otherptr = other._ptr;&#13;
        for (uint idx = 0; idx &lt; shortest; idx += 32) {&#13;
            uint a;&#13;
            uint b;&#13;
            assembly {&#13;
                a := mload(selfptr)&#13;
                b := mload(otherptr)&#13;
            }&#13;
            if (a != b) {&#13;
                // Mask out irrelevant bytes and check again&#13;
                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);&#13;
                var diff = (a &amp; mask) - (b &amp; mask);&#13;
                if (diff != 0)&#13;
                    return int(diff);&#13;
            }&#13;
            selfptr += 32;&#13;
            otherptr += 32;&#13;
        }&#13;
        return int(self._len) - int(other._len);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the two slices contain the same text.&#13;
     * @param self The first slice to compare.&#13;
     * @param self The second slice to compare.&#13;
     * @return True if the slices are equal, false otherwise.&#13;
     */&#13;
    function equals(slice self, slice other) internal returns (bool) {&#13;
        return compare(self, other) == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Extracts the first rune in the slice into `rune`, advancing the&#13;
     *      slice to point to the next rune and returning `self`.&#13;
     * @param self The slice to operate on.&#13;
     * @param rune The slice that will contain the first rune.&#13;
     * @return `rune`.&#13;
     */&#13;
    function nextRune(slice self, slice rune) internal returns (slice) {&#13;
        rune._ptr = self._ptr;&#13;
&#13;
        if (self._len == 0) {&#13;
            rune._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        uint len;&#13;
        uint b;&#13;
        // Load the first byte of the rune into the LSBs of b&#13;
        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }&#13;
        if (b &lt; 0x80) {&#13;
            len = 1;&#13;
        } else if(b &lt; 0xE0) {&#13;
            len = 2;&#13;
        } else if(b &lt; 0xF0) {&#13;
            len = 3;&#13;
        } else {&#13;
            len = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (len &gt; self._len) {&#13;
            rune._len = self._len;&#13;
            self._ptr += self._len;&#13;
            self._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        self._ptr += len;&#13;
        self._len -= len;&#13;
        rune._len = len;&#13;
        return rune;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the first rune in the slice, advancing the slice to point&#13;
     *      to the next rune.&#13;
     * @param self The slice to operate on.&#13;
     * @return A slice containing only the first rune from `self`.&#13;
     */&#13;
    function nextRune(slice self) internal returns (slice ret) {&#13;
        nextRune(self, ret);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the number of the first codepoint in the slice.&#13;
     * @param self The slice to operate on.&#13;
     * @return The number of the first codepoint in the slice.&#13;
     */&#13;
    function ord(slice self) internal returns (uint ret) {&#13;
        if (self._len == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        uint word;&#13;
        uint length;&#13;
        uint divisor = 2 ** 248;&#13;
&#13;
        // Load the rune into the MSBs of b&#13;
        assembly { word:= mload(mload(add(self, 32))) }&#13;
        var b = word / divisor;&#13;
        if (b &lt; 0x80) {&#13;
            ret = b;&#13;
            length = 1;&#13;
        } else if(b &lt; 0xE0) {&#13;
            ret = b &amp; 0x1F;&#13;
            length = 2;&#13;
        } else if(b &lt; 0xF0) {&#13;
            ret = b &amp; 0x0F;&#13;
            length = 3;&#13;
        } else {&#13;
            ret = b &amp; 0x07;&#13;
            length = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (length &gt; self._len) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        for (uint i = 1; i &lt; length; i++) {&#13;
            divisor = divisor / 256;&#13;
            b = (word / divisor) &amp; 0xFF;&#13;
            if (b &amp; 0xC0 != 0x80) {&#13;
                // Invalid UTF-8 sequence&#13;
                return 0;&#13;
            }&#13;
            ret = (ret * 64) | (b &amp; 0x3F);&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the keccak-256 hash of the slice.&#13;
     * @param self The slice to hash.&#13;
     * @return The hash of the slice.&#13;
     */&#13;
    function keccak(slice self) internal returns (bytes32 ret) {&#13;
        assembly {&#13;
            ret := keccak256(mload(add(self, 32)), mload(self))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if `self` starts with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function startsWith(slice self, slice needle) internal returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (self._ptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
            let length := mload(needle)&#13;
            let selfptr := mload(add(self, 0x20))&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
        }&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` starts with `needle`, `needle` is removed from the&#13;
     *      beginning of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function beyond(slice self, slice needle) internal returns (slice) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        bool equal = true;&#13;
        if (self._ptr != needle._ptr) {&#13;
            assembly {&#13;
                let length := mload(needle)&#13;
                let selfptr := mload(add(self, 0x20))&#13;
                let needleptr := mload(add(needle, 0x20))&#13;
                equal := eq(sha3(selfptr, length), sha3(needleptr, length))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
            self._ptr += needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice ends with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function endsWith(slice self, slice needle) internal returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        var selfptr = self._ptr + self._len - needle._len;&#13;
&#13;
        if (selfptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
            let length := mload(needle)&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
        }&#13;
&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` ends with `needle`, `needle` is removed from the&#13;
     *      end of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function until(slice self, slice needle) internal returns (slice) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        var selfptr = self._ptr + self._len - needle._len;&#13;
        bool equal = true;&#13;
        if (selfptr != needle._ptr) {&#13;
            assembly {&#13;
                let length := mload(needle)&#13;
                let needleptr := mload(add(needle, 0x20))&#13;
                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte of the first occurrence of&#13;
    // `needle` in `self`, or the first byte after `self` if not found.&#13;
    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {&#13;
        uint ptr;&#13;
        uint idx;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                // Optimized assembly for 68 gas per byte on short strings&#13;
                assembly {&#13;
                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))&#13;
                    let needledata := and(mload(needleptr), mask)&#13;
                    let end := add(selfptr, sub(selflen, needlelen))&#13;
                    ptr := selfptr&#13;
                    loop:&#13;
                    jumpi(exit, eq(and(mload(ptr), mask), needledata))&#13;
                    ptr := add(ptr, 1)&#13;
                    jumpi(loop, lt(sub(ptr, 1), end))&#13;
                    ptr := add(selfptr, selflen)&#13;
                    exit:&#13;
                }&#13;
                return ptr;&#13;
            } else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly { hash := sha3(needleptr, needlelen) }&#13;
                ptr = selfptr;&#13;
                for (idx = 0; idx &lt;= selflen - needlelen; idx++) {&#13;
                    bytes32 testHash;&#13;
                    assembly { testHash := sha3(ptr, needlelen) }&#13;
                    if (hash == testHash)&#13;
                        return ptr;&#13;
                    ptr += 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr + selflen;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte after the last occurrence of&#13;
    // `needle` in `self`, or the address of `self` if not found.&#13;
    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {&#13;
        uint ptr;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                // Optimized assembly for 69 gas per byte on short strings&#13;
                assembly {&#13;
                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))&#13;
                    let needledata := and(mload(needleptr), mask)&#13;
                    ptr := add(selfptr, sub(selflen, needlelen))&#13;
                    loop:&#13;
                    jumpi(ret, eq(and(mload(ptr), mask), needledata))&#13;
                    ptr := sub(ptr, 1)&#13;
                    jumpi(loop, gt(add(ptr, 1), selfptr))&#13;
                    ptr := selfptr&#13;
                    jump(exit)&#13;
                    ret:&#13;
                    ptr := add(ptr, needlelen)&#13;
                    exit:&#13;
                }&#13;
                return ptr;&#13;
            } else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly { hash := sha3(needleptr, needlelen) }&#13;
                ptr = selfptr + (selflen - needlelen);&#13;
                while (ptr &gt;= selfptr) {&#13;
                    bytes32 testHash;&#13;
                    assembly { testHash := sha3(ptr, needlelen) }&#13;
                    if (hash == testHash)&#13;
                        return ptr + needlelen;&#13;
                    ptr -= 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain everything from the first occurrence of&#13;
     *      `needle` to the end of the slice. `self` is set to the empty slice&#13;
     *      if `needle` is not found.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function find(slice self, slice needle) internal returns (slice) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len -= ptr - self._ptr;&#13;
        self._ptr = ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain the part of the string from the start of&#13;
     *      `self` to the end of the first occurrence of `needle`. If `needle`&#13;
     *      is not found, `self` is set to the empty slice.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function rfind(slice self, slice needle) internal returns (slice) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len = ptr - self._ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and `token` to everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function split(slice self, slice needle, slice token) internal returns (slice) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = self._ptr;&#13;
        token._len = ptr - self._ptr;&#13;
        if (ptr == self._ptr + self._len) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        } else {&#13;
            self._len -= token._len + needle._len;&#13;
            self._ptr = ptr + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and returning everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` up to the first occurrence of `delim`.&#13;
     */&#13;
    function split(slice self, slice needle) internal returns (slice token) {&#13;
        split(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and `token` to everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function rsplit(slice self, slice needle, slice token) internal returns (slice) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = ptr;&#13;
        token._len = self._len - (ptr - self._ptr);&#13;
        if (ptr == self._ptr) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        } else {&#13;
            self._len -= token._len + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and returning everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` after the last occurrence of `delim`.&#13;
     */&#13;
    function rsplit(slice self, slice needle) internal returns (slice token) {&#13;
        rsplit(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The number of occurrences of `needle` found in `self`.&#13;
     */&#13;
    function count(slice self, slice needle) internal returns (uint cnt) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;&#13;
        while (ptr &lt;= self._ptr + self._len) {&#13;
            cnt++;&#13;
            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns True if `self` contains `needle`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return True if `needle` is found in `self`, false otherwise.&#13;
     */&#13;
    function contains(slice self, slice needle) internal returns (bool) {&#13;
        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a newly allocated string containing the concatenation of&#13;
     *      `self` and `other`.&#13;
     * @param self The first slice to concatenate.&#13;
     * @param other The second slice to concatenate.&#13;
     * @return The concatenation of the two strings.&#13;
     */&#13;
    function concat(slice self, slice other) internal returns (string) {&#13;
        var ret = new string(self._len + other._len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        memcpy(retptr + self._len, other._ptr, other._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Joins an array of slices, using `self` as a delimiter, returning a&#13;
     *      newly allocated string.&#13;
     * @param self The delimiter to use.&#13;
     * @param parts A list of slices to join.&#13;
     * @return A newly allocated string containing all the slices in `parts`,&#13;
     *         joined with `self`.&#13;
     */&#13;
    function join(slice self, slice[] parts) internal returns (string) {&#13;
        if (parts.length == 0)&#13;
            return "";&#13;
&#13;
        uint length = self._len * (parts.length - 1);&#13;
        for (uint i = 0; i &lt; parts.length; i++) {&#13;
            length += parts[i]._len;&#13;
        }&#13;
&#13;
        var ret = new string(length);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
&#13;
        for(i = 0; i &lt; parts.length; i++) {&#13;
            memcpy(retptr, parts[i]._ptr, parts[i]._len);&#13;
            retptr += parts[i]._len;&#13;
            if (i &lt; parts.length - 1) {&#13;
                memcpy(retptr, self._ptr, self._len);&#13;
                retptr += self._len;&#13;
            }&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  function Ownable() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    OwnershipTransferred(owner, newOwner);&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title Roles&#13;
 * @author Francisco Giordano (@frangio)&#13;
 * @dev Library for managing addresses assigned to a Role.&#13;
 *      See RBAC.sol for example usage.&#13;
 */&#13;
library Roles {&#13;
    struct Role {&#13;
        mapping (address =&gt; bool) bearer;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev give an address access to this role&#13;
    */&#13;
    function add(Role storage role, address addr) internal {&#13;
        role.bearer[addr] = true;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev remove an address' access to this role&#13;
    */&#13;
    function remove(Role storage role, address addr) internal {&#13;
        role.bearer[addr] = false;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev check if an address has this role&#13;
    * // reverts&#13;
    */&#13;
    function check(Role storage role, address addr) view internal {&#13;
        require(has(role, addr));&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev check if an address has this role&#13;
    * @return bool&#13;
    */&#13;
    function has(Role storage role, address addr) view internal returns (bool) {&#13;
        return role.bearer[addr];&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * @title RBAC (Role-Based Access Control)&#13;
 * @author Matt Condon (@Shrugs)&#13;
 * @dev Stores and provides setters and getters for roles and addresses.&#13;
 *      Supports unlimited numbers of roles and addresses.&#13;
 *      See //contracts/mocks/RBACMock.sol for an example of usage.&#13;
 * This RBAC method uses strings to key roles. It may be beneficial&#13;
 *  for you to write your own implementation of this interface using Enums or similar.&#13;
 * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,&#13;
 *  to avoid typos.&#13;
 */&#13;
contract RBAC is Ownable {&#13;
    using Roles for Roles.Role;&#13;
&#13;
    mapping (string =&gt; Roles.Role) private roles;&#13;
&#13;
    event RoleAdded(address addr, string roleName);&#13;
    event RoleRemoved(address addr, string roleName);&#13;
&#13;
    /**&#13;
    * @dev constructor. Sets msg.sender as admin by default&#13;
    */&#13;
    function RBAC() public {&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev reverts if addr does not have role&#13;
    * @param addr address&#13;
    * @param roleName the name of the role&#13;
    * // reverts&#13;
    */&#13;
    function checkRole(address addr, string roleName) view public {&#13;
        roles[roleName].check(addr);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev determine if addr has role&#13;
    * @param addr address&#13;
    * @param roleName the name of the role&#13;
    * @return bool&#13;
    */&#13;
    function hasRole(address addr, string roleName) view public returns (bool) {&#13;
        return roles[roleName].has(addr);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev add a role to an address&#13;
    * @param addr address&#13;
    * @param roleName the name of the role&#13;
    */&#13;
    function adminAddRole(address addr, string roleName) onlyOwner public {&#13;
        roles[roleName].add(addr);&#13;
        RoleAdded(addr, roleName);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev remove a role from an address&#13;
    * @param addr address&#13;
    * @param roleName the name of the role&#13;
    */&#13;
    function adminRemoveRole(address addr, string roleName) onlyOwner public {&#13;
        roles[roleName].remove(addr);&#13;
        RoleRemoved(addr, roleName);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev modifier to scope access to a single role (uses msg.sender as addr)&#13;
    * @param roleName the name of the role&#13;
    * // reverts&#13;
    */&#13;
    modifier onlyRole(string roleName) {&#13;
        checkRole(msg.sender, roleName);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyOwnerOr(string roleName) {&#13;
        require(msg.sender == owner || roles[roleName].has(msg.sender));&#13;
        _;&#13;
    }    &#13;
}&#13;
&#13;
/**&#13;
 * @title Heritable&#13;
 * @dev The Heritable contract provides ownership transfer capabilities, in the&#13;
 * case that the current owner stops "heartbeating". Only the heir can pronounce the&#13;
 * owner's death.&#13;
 */&#13;
contract Heritable is RBAC {&#13;
  address private heir_;&#13;
&#13;
  // Time window the owner has to notify they are alive.&#13;
  uint256 private heartbeatTimeout_;&#13;
&#13;
  // Timestamp of the owner's death, as pronounced by the heir.&#13;
  uint256 private timeOfDeath_;&#13;
&#13;
  event HeirChanged(address indexed owner, address indexed newHeir);&#13;
  event OwnerHeartbeated(address indexed owner);&#13;
  event OwnerProclaimedDead(address indexed owner, address indexed heir, uint256 timeOfDeath);&#13;
  event HeirOwnershipClaimed(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
&#13;
  /**&#13;
   * @dev Throw an exception if called by any account other than the heir's.&#13;
   */&#13;
  modifier onlyHeir() {&#13;
    require(msg.sender == heir_);&#13;
    _;&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @notice Create a new Heritable Contract with heir address 0x0.&#13;
   * @param _heartbeatTimeout time available for the owner to notify they are alive,&#13;
   * before the heir can take ownership.&#13;
   */&#13;
  function Heritable(uint256 _heartbeatTimeout) public {&#13;
    setHeartbeatTimeout(_heartbeatTimeout);&#13;
  }&#13;
&#13;
  function setHeir(address newHeir) public onlyOwner {&#13;
    require(newHeir != owner);&#13;
    heartbeat();&#13;
    HeirChanged(owner, newHeir);&#13;
    heir_ = newHeir;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Use these getter functions to access the internal variables in&#13;
   * an inherited contract.&#13;
   */&#13;
  function heir() public view returns(address) {&#13;
    return heir_;&#13;
  }&#13;
&#13;
  function heartbeatTimeout() public view returns(uint256) {&#13;
    return heartbeatTimeout_;&#13;
  }&#13;
  &#13;
  function timeOfDeath() public view returns(uint256) {&#13;
    return timeOfDeath_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev set heir = 0x0&#13;
   */&#13;
  function removeHeir() public onlyOwner {&#13;
    heartbeat();&#13;
    heir_ = 0;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Heir can pronounce the owners death. To claim the ownership, they will&#13;
   * have to wait for `heartbeatTimeout` seconds.&#13;
   */&#13;
  function proclaimDeath() public onlyHeir {&#13;
    require(ownerLives());&#13;
    OwnerProclaimedDead(owner, heir_, timeOfDeath_);&#13;
    timeOfDeath_ = block.timestamp;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Owner can send a heartbeat if they were mistakenly pronounced dead.&#13;
   */&#13;
  function heartbeat() public onlyOwner {&#13;
    OwnerHeartbeated(owner);&#13;
    timeOfDeath_ = 0;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows heir to transfer ownership only if heartbeat has timed out.&#13;
   */&#13;
  function claimHeirOwnership() public onlyHeir {&#13;
    require(!ownerLives());&#13;
    require(block.timestamp &gt;= timeOfDeath_ + heartbeatTimeout_);&#13;
    OwnershipTransferred(owner, heir_);&#13;
    HeirOwnershipClaimed(owner, heir_);&#13;
    owner = heir_;&#13;
    timeOfDeath_ = 0;&#13;
  }&#13;
&#13;
  function setHeartbeatTimeout(uint256 newHeartbeatTimeout) internal onlyOwner {&#13;
    require(ownerLives());&#13;
    heartbeatTimeout_ = newHeartbeatTimeout;&#13;
  }&#13;
&#13;
  function ownerLives() internal view returns (bool) {&#13;
    return timeOfDeath_ == 0;&#13;
  }&#13;
}&#13;
&#13;
contract BettingBase {&#13;
    enum BetStatus {&#13;
        None,&#13;
        Won&#13;
    }&#13;
&#13;
    enum LineStages {&#13;
        OpenedUntilStart,&#13;
        ResultSubmitted,&#13;
        Cancelled,&#13;
        Refunded,&#13;
        Paid&#13;
    }    &#13;
&#13;
    enum LineType {&#13;
        ThreeWay,&#13;
        TwoWay,&#13;
        DoubleChance,&#13;
        SomeOfMany&#13;
    }&#13;
&#13;
    enum TwoWayLineType {&#13;
        Standart,&#13;
        YesNo,&#13;
        OverUnder,&#13;
        AsianHandicap,&#13;
        HeadToHead&#13;
    }&#13;
&#13;
    enum PaymentType {&#13;
        No,&#13;
        Gain, &#13;
        Refund&#13;
    }&#13;
}&#13;
&#13;
contract AbstractBetStorage is BettingBase {&#13;
    function addBet(uint lineId, uint betId, address player, uint amount) external;&#13;
    function addLine(uint lineId, LineType lineType, uint start, uint resultCount) external;&#13;
    function cancelLine(uint lineId) external;&#13;
    function getBetPool(uint lineId, uint betId) external view returns (BetStatus status, uint sum);&#13;
    function getLineData(uint lineId) external view returns (uint startTime, uint resultCount, LineType lineType, LineStages stage);&#13;
    function getLineData2(uint lineId) external view returns (uint resultCount, LineStages stage);&#13;
    function getLineSum(uint lineId) external view returns (uint sum);&#13;
    function getPlayerBet(uint lineId, uint betId, address player) external view returns (uint result);&#13;
    function getSumOfPlayerBetsById(uint lineId, uint playerId, PaymentType paymentType) external view returns (address player, uint amount);&#13;
    function isBetStorage() external pure returns (bool);&#13;
    function setLineStartTime(uint lineId, uint time) external;    &#13;
    function startPayments(uint lineId, uint chunkSize) external returns (PaymentType paymentType, uint startId, uint endId, uint luckyPool, uint unluckyPool);&#13;
    function submitResult(uint lineId, uint[] results) external;&#13;
    function transferOwnership(address newOwner) public;&#13;
    function tryCloseLine(uint lineId, uint lastPlayerId, PaymentType paymentType) external returns (bool lineClosed);&#13;
}&#13;
&#13;
contract BettingCore is BettingBase, Heritable {&#13;
    using SafeMath for uint;&#13;
    using strings for *;&#13;
&#13;
    enum ActivityType{&#13;
        Soccer,&#13;
        IceHockey,&#13;
        Basketball,&#13;
        Tennis,&#13;
        BoxingAndMMA, &#13;
        Formula1,               &#13;
        Volleyball,&#13;
        Chess,&#13;
        Athletics,&#13;
        Biathlon,&#13;
        Baseball,&#13;
        Rugby,&#13;
        AmericanFootball,&#13;
        Cycling,&#13;
        AutoMotorSports,        &#13;
        Other&#13;
    }    &#13;
    &#13;
    struct Activity {&#13;
        string title;&#13;
        ActivityType activityType;&#13;
    }&#13;
&#13;
    struct Event {&#13;
        uint activityId;&#13;
        string title;&#13;
    }    &#13;
&#13;
    struct Line {&#13;
        uint eventId;&#13;
        string title;&#13;
        string outcomes;&#13;
    }&#13;
&#13;
    struct FeeDiscount {&#13;
        uint64 till;&#13;
        uint8 discount;&#13;
    }    &#13;
&#13;
    // it's not possible to take off players bets&#13;
    bool public payoutToOwnerIsLimited;&#13;
    // total sum of bets&#13;
    uint public blockedSum; &#13;
    uint public fee;&#13;
    uint public minBetAmount;&#13;
    string public contractMessage;&#13;
   &#13;
    Activity[] public activities;&#13;
    Event[] public events;&#13;
    Line[] private lines;&#13;
&#13;
    mapping(address =&gt; FeeDiscount) private discounts;&#13;
&#13;
    event NewActivity(uint indexed activityId, ActivityType activityType, string title);&#13;
    event NewEvent(uint indexed activityId, uint indexed eventId, string title);&#13;
    event NewLine(uint indexed eventId, uint indexed lineId, string title, LineType lineType, uint start, string outcomes);     &#13;
    event BetMade(uint indexed lineId, uint betId, address indexed player, uint amount);&#13;
    event PlayerPaid(uint indexed lineId, address indexed player, uint amount);&#13;
    event ResultSubmitted(uint indexed lineId, uint[] results);&#13;
    event LineCanceled(uint indexed lineId, string comment);&#13;
    event LineClosed(uint indexed lineId, PaymentType paymentType, uint totalPool);&#13;
    event LineStartTimeChanged(uint indexed lineId, uint newTime);&#13;
&#13;
    AbstractBetStorage private betStorage;&#13;
&#13;
    function BettingCore() Heritable(2592000) public {&#13;
        minBetAmount = 5 finney; // 0.005 ETH&#13;
        fee = 200; // 2 %&#13;
        payoutToOwnerIsLimited = true;&#13;
        blockedSum = 1 wei;&#13;
        contractMessage = "betdapp.co";&#13;
    }&#13;
&#13;
    function() external onlyOwner payable {&#13;
    }&#13;
&#13;
    function addActivity(ActivityType activityType, string title) external onlyOwnerOr("Edit") returns (uint activityId) {&#13;
        Activity memory _activity = Activity({&#13;
            title: title, &#13;
            activityType: activityType&#13;
        });&#13;
&#13;
        activityId = activities.push(_activity) - 1;&#13;
        NewActivity(activityId, activityType, title);&#13;
    }&#13;
&#13;
    function addDoubleChanceLine(uint eventId, string title, uint start) external onlyOwnerOr("Edit") {&#13;
        addLine(eventId, title, LineType.DoubleChance, start, "1X_12_X2");&#13;
    }&#13;
&#13;
    function addEvent(uint activityId, string title) external onlyOwnerOr("Edit") returns (uint eventId) {&#13;
        Event memory _event = Event({&#13;
            activityId: activityId, &#13;
            title: title&#13;
        });&#13;
&#13;
        eventId = events.push(_event) - 1;&#13;
        NewEvent(activityId, eventId, title);      &#13;
    }&#13;
&#13;
    function addThreeWayLine(uint eventId, string title, uint start) external onlyOwnerOr("Edit") {&#13;
        addLine(eventId, title, LineType.ThreeWay, start,  "1_X_2");&#13;
    }&#13;
&#13;
    function addSomeOfManyLine(uint eventId, string title, uint start, string outcomes) external onlyOwnerOr("Edit") {&#13;
        addLine(eventId, title, LineType.SomeOfMany, start, outcomes);&#13;
    }&#13;
&#13;
    function addTwoWayLine(uint eventId, string title, uint start, TwoWayLineType customType) external onlyOwnerOr("Edit") {&#13;
        string memory outcomes;&#13;
&#13;
        if (customType == TwoWayLineType.YesNo) {&#13;
            outcomes = "Yes_No";&#13;
        } else if (customType == TwoWayLineType.OverUnder) {&#13;
            outcomes = "Over_Under";&#13;
        } else {&#13;
            outcomes = "1_2";&#13;
        }&#13;
        &#13;
        addLine(eventId, title, LineType.TwoWay, start, outcomes);&#13;
    }&#13;
&#13;
    function bet(uint lineId, uint betId) external payable {&#13;
        uint amount = msg.value;&#13;
        require(amount &gt;= minBetAmount);&#13;
        address player = msg.sender;&#13;
        betStorage.addBet(lineId, betId, player, amount);&#13;
        blockedSum = blockedSum.add(amount);&#13;
        BetMade(lineId, betId, player, amount);&#13;
    }&#13;
&#13;
    function cancelLine(uint lineId, string comment) external onlyOwnerOr("Submit") {&#13;
        betStorage.cancelLine(lineId);&#13;
        LineCanceled(lineId, comment);&#13;
    }   &#13;
&#13;
    function getMyBets(uint lineId) external view returns (uint[] result) {&#13;
        return getPlayerBets(lineId, msg.sender);&#13;
    }&#13;
&#13;
    function getMyDiscount() external view returns (uint discount, uint till) {&#13;
        (discount, till) = getPlayerDiscount(msg.sender);&#13;
    }&#13;
&#13;
    function getLineData(uint lineId) external view returns (uint eventId, string title, string outcomes, uint startTime, uint resultCount, LineType lineType, LineStages stage, BetStatus[] status, uint[] pool) {&#13;
        (startTime, resultCount, lineType, stage) = betStorage.getLineData(lineId);&#13;
&#13;
        Line storage line = lines[lineId];&#13;
        eventId = line.eventId;&#13;
        title = line.title;&#13;
        outcomes = line.outcomes;&#13;
        status = new BetStatus[](resultCount);&#13;
        pool = new uint[](resultCount);&#13;
&#13;
        for (uint i = 0; i &lt; resultCount; i++) {&#13;
            (status[i], pool[i]) = betStorage.getBetPool(lineId, i);&#13;
        }&#13;
    }&#13;
&#13;
    function getLineStat(uint lineId) external view returns (LineStages stage, BetStatus[] status, uint[] pool) {       &#13;
        uint resultCount;&#13;
        (resultCount, stage) = betStorage.getLineData2(lineId);&#13;
        status = new BetStatus[](resultCount);&#13;
        pool = new uint[](resultCount);&#13;
&#13;
        for (uint i = 0; i &lt; resultCount; i++) {&#13;
            (status[i], pool[i]) = betStorage.getBetPool(lineId, i);&#13;
        }&#13;
    }&#13;
&#13;
    // emergency&#13;
    function kill() external onlyOwner {&#13;
        selfdestruct(msg.sender);&#13;
    }&#13;
&#13;
    function payout(uint sum) external onlyOwner {&#13;
        require(sum &gt; 0);&#13;
        require(!payoutToOwnerIsLimited || (this.balance - blockedSum) &gt;= sum);&#13;
        msg.sender.transfer(sum);&#13;
    }    &#13;
&#13;
    function payPlayers(uint lineId, uint chunkSize) external onlyOwnerOr("Pay") {&#13;
        uint startId;&#13;
        uint endId;&#13;
        PaymentType paymentType;&#13;
        uint luckyPool;&#13;
        uint unluckyPool;&#13;
&#13;
        (paymentType, startId, endId, luckyPool, unluckyPool) = betStorage.startPayments(lineId, chunkSize);&#13;
&#13;
        for (uint i = startId; i &lt; endId; i++) {&#13;
            address player;&#13;
            uint amount; &#13;
            (player, amount) = betStorage.getSumOfPlayerBetsById(lineId, i, paymentType);&#13;
&#13;
            if (amount == 0) {&#13;
                continue;&#13;
            }&#13;
&#13;
            uint payment;            &#13;
            &#13;
            if (paymentType == PaymentType.Gain) {&#13;
                payment = amount.add(amount.mul(unluckyPool).div(luckyPool)).div(10000).mul(10000 - getFee(player));&#13;
&#13;
                if (payment &lt; amount) {&#13;
                    payment = amount;&#13;
                }&#13;
            } else {&#13;
                payment = amount;               &#13;
            }&#13;
&#13;
            if (payment &gt; 0) {&#13;
                player.transfer(payment);&#13;
                PlayerPaid(lineId, player, payment);&#13;
            }&#13;
        }&#13;
&#13;
        if (betStorage.tryCloseLine(lineId, endId, paymentType)) {&#13;
            uint totalPool = betStorage.getLineSum(lineId);&#13;
            blockedSum = blockedSum.sub(totalPool);&#13;
            LineClosed(lineId, paymentType, totalPool);&#13;
        }&#13;
    }&#13;
    &#13;
    function setContractMessage(string value) external onlyOwner {&#13;
        contractMessage = value;&#13;
    }    &#13;
&#13;
    function setDiscountForPlayer(address player, uint discount, uint till) external onlyOwner {&#13;
        require(till &gt; now &amp;&amp; discount &gt; 0 &amp;&amp; discount &lt;= 100);&#13;
        discounts[player].till = uint64(till);&#13;
        discounts[player].discount = uint8(discount);&#13;
    }&#13;
&#13;
    function setFee(uint value) external onlyOwner {&#13;
        // 100 = 1% fee;&#13;
        require(value &gt;= 0 &amp;&amp; value &lt;= 500);&#13;
        fee = value;&#13;
    }&#13;
&#13;
    function setLineStartTime(uint lineId, uint time) external onlyOwnerOr("Edit") {&#13;
        betStorage.setLineStartTime(lineId, time);&#13;
        LineStartTimeChanged(lineId, time);&#13;
    }    &#13;
&#13;
    function setMinBetAmount(uint value) external onlyOwner {&#13;
        require(value &gt; 0);&#13;
        minBetAmount = value;&#13;
    }&#13;
&#13;
    // if something goes wrong with contract, we can turn on this function&#13;
    // and then withdraw balance and pay players by hand without need to kill contract&#13;
    function setPayoutLimit(bool value) external onlyOwner {&#13;
        payoutToOwnerIsLimited = value;&#13;
    }&#13;
&#13;
    function setStorage(address contractAddress) external onlyOwner {        &#13;
        AbstractBetStorage candidateContract = AbstractBetStorage(contractAddress);&#13;
        require(candidateContract.isBetStorage());&#13;
        betStorage = candidateContract;&#13;
        // betStorage.transferOwnership(address(this));&#13;
    }&#13;
&#13;
    function setStorageOwner(address newOwner) external onlyOwner {&#13;
        betStorage.transferOwnership(newOwner);&#13;
    }    &#13;
&#13;
    function submitResult(uint lineId, uint[] results) external onlyOwnerOr("Submit") {&#13;
        betStorage.submitResult(lineId, results);&#13;
        ResultSubmitted(lineId, results);&#13;
    }    &#13;
&#13;
    function addLine(uint eventId, string title, LineType lineType, uint start, string outcomes) private {&#13;
        require(start &gt; now);&#13;
&#13;
        Line memory line = Line({&#13;
            eventId: eventId, &#13;
            title: title, &#13;
            outcomes: outcomes&#13;
        });&#13;
&#13;
        uint lineId = lines.push(line) - 1;&#13;
        uint resultCount;&#13;
&#13;
        if (lineType == LineType.ThreeWay || lineType == LineType.DoubleChance) {&#13;
            resultCount = 3;           &#13;
        } else if (lineType == LineType.TwoWay) {&#13;
            resultCount = 2; &#13;
        } else {&#13;
            resultCount = getSplitCount(outcomes);&#13;
        }       &#13;
&#13;
        betStorage.addLine(lineId, lineType, start, resultCount);&#13;
        NewLine(eventId, lineId, title, lineType, start, outcomes);&#13;
    }&#13;
&#13;
    function getFee(address player) private view returns (uint newFee) {&#13;
        var data = discounts[player];&#13;
&#13;
        if (data.till &gt; now) {&#13;
            return fee * (100 - data.discount) / 100;&#13;
        }&#13;
&#13;
        return fee;&#13;
    }    &#13;
&#13;
    function getPlayerBets(uint lineId, address player) private view returns (uint[] result) {&#13;
        Line storage line = lines[lineId];&#13;
        uint count = getSplitCount(line.outcomes);&#13;
        result = new uint[](count);&#13;
&#13;
        for (uint i = 0; i &lt; count; i++) {&#13;
            result[i] = betStorage.getPlayerBet(lineId, i, player);&#13;
        }&#13;
    }&#13;
&#13;
    function getPlayerDiscount(address player) private view returns (uint discount, uint till) {&#13;
        FeeDiscount storage discountFee = discounts[player];&#13;
        discount = discountFee.discount;&#13;
        till = discountFee.till;&#13;
    }    &#13;
&#13;
    function getSplitCount(string input) private returns (uint) { &#13;
        var s = input.toSlice();&#13;
        var delim = "_".toSlice();&#13;
        var parts = new string[](s.count(delim) + 1);&#13;
&#13;
        for (uint i = 0; i &lt; parts.length; i++) {&#13;
            parts[i] = s.split(delim).toString();&#13;
        }&#13;
&#13;
        return parts.length;&#13;
    }&#13;
}
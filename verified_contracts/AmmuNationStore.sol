// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <span class="__cf_email__" data-cfemail="315550475471505a5e5c53501f525e5c">[emailÂ protected]</span>&#13;
// released under Apache 2.0 licence&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipRenounced(address indexed previousOwner);&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipRenounced(owner);&#13;
    owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address _newOwner) public onlyOwner {&#13;
    _transferOwnership(_newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address _newOwner) internal {&#13;
    require(_newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, _newOwner);&#13;
    owner = _newOwner;&#13;
  }&#13;
}&#13;
&#13;
contract Claimable is Ownable {&#13;
  address public pendingOwner;&#13;
&#13;
  /**&#13;
   * @dev Modifier throws if called by any account other than the pendingOwner.&#13;
   */&#13;
  modifier onlyPendingOwner() {&#13;
    require(msg.sender == pendingOwner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to set the pendingOwner address.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) onlyOwner public {&#13;
    pendingOwner = newOwner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the pendingOwner address to finalize the transfer.&#13;
   */&#13;
  function claimOwnership() onlyPendingOwner public {&#13;
    emit OwnershipTransferred(owner, pendingOwner);&#13;
    owner = pendingOwner;&#13;
    pendingOwner = address(0);&#13;
  }&#13;
}&#13;
&#13;
contract AmmuNationStore is Claimable{&#13;
&#13;
    using SafeMath for uint256;&#13;
&#13;
    GTAInterface public token;&#13;
&#13;
    uint256 private tokenSellPrice; //wei&#13;
    uint256 private tokenBuyPrice; //wei&#13;
    uint256 public buyDiscount; //%&#13;
&#13;
    event Buy(address buyer, uint256 amount, uint256 payed);&#13;
    event Robbery(address robber);&#13;
&#13;
    constructor (address _tokenAddress) public {&#13;
        token = GTAInterface(_tokenAddress);&#13;
    }&#13;
&#13;
    /** Owner's operations to fill and empty the stock */&#13;
&#13;
    // Important! remember to call GoldenThalerToken(address).approve(this, amount)&#13;
    // or this contract will not be able to do the transfer on your behalf.&#13;
    function depositGTA(uint256 amount) onlyOwner public {&#13;
        require(token.transferFrom(msg.sender, this, amount), "Insufficient funds");&#13;
    }&#13;
&#13;
    function withdrawGTA(uint256 amount) onlyOwner public {&#13;
        require(token.transfer(msg.sender, amount), "Amount exceeds the available balance");&#13;
    }&#13;
&#13;
    function robCashier() onlyOwner public {&#13;
        msg.sender.transfer(address(this).balance);&#13;
        emit Robbery(msg.sender);&#13;
    }&#13;
&#13;
    /** */&#13;
&#13;
    /**&#13;
   * @dev Set the prices in wei for 1 GTA&#13;
   * @param _newSellPrice The price people can sell GTA for&#13;
   * @param _newBuyPrice The price people can buy GTA for&#13;
   */&#13;
    function setTokenPrices(uint256 _newSellPrice, uint256 _newBuyPrice) onlyOwner public {&#13;
        tokenSellPrice = _newSellPrice;&#13;
        tokenBuyPrice = _newBuyPrice;&#13;
    }&#13;
&#13;
&#13;
    function buy() payable public returns (uint256){&#13;
        //note: the price of 1 GTA is in wei, but the token transfer expects the amount in 'token wei'&#13;
        //so we're missing 10*18&#13;
        uint256 value = msg.value.mul(1 ether);&#13;
        uint256 _buyPrice = tokenBuyPrice;&#13;
        if (buyDiscount &gt; 0) {&#13;
            //happy discount!&#13;
            _buyPrice = _buyPrice.sub(_buyPrice.mul(buyDiscount).div(100));&#13;
        }&#13;
        uint256 amount = value.div(_buyPrice);&#13;
        require(token.balanceOf(this) &gt;= amount, "Sold out");&#13;
        require(token.transfer(msg.sender, amount), "Couldn't transfer token");&#13;
        emit Buy(msg.sender, amount, msg.value);&#13;
        return amount;&#13;
    }&#13;
&#13;
    // Important! remember to call GoldenThalerToken(address).approve(this, amount)&#13;
    // or this contract will not be able to do the transfer on your behalf.&#13;
    //TODO No sell at this moment&#13;
    /*function sell(uint256 amount) public returns (uint256){&#13;
        require(token.balanceOf(msg.sender) &gt;= amount, "Insufficient funds");&#13;
        require(token.transferFrom(msg.sender, this, amount), "Couldn't transfer token");&#13;
        uint256 revenue = amount.mul(tokenSellPrice).div(1 ether);&#13;
        msg.sender.transfer(revenue);&#13;
        return revenue;&#13;
    }*/&#13;
&#13;
    function applyDiscount(uint256 discount) onlyOwner public {&#13;
        buyDiscount = discount;&#13;
    }&#13;
&#13;
    function getTokenBuyPrice() public view returns (uint256) {&#13;
        uint256 _buyPrice = tokenBuyPrice;&#13;
        if (buyDiscount &gt; 0) {&#13;
            _buyPrice = _buyPrice.sub(_buyPrice.mul(buyDiscount).div(100));&#13;
        }&#13;
        return _buyPrice;&#13;
    }&#13;
&#13;
    function getTokenSellPrice() public view returns (uint256) {&#13;
        return tokenSellPrice;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * @title GTA contract interface&#13;
 */&#13;
interface GTAInterface {&#13;
&#13;
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);&#13;
&#13;
    function transfer(address to, uint256 value) external returns (bool);&#13;
&#13;
    function balanceOf(address _owner) external view returns (uint256);&#13;
&#13;
}
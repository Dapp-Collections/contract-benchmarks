pragma solidity 0.4.18;


/* 
    Author: Patrick Guay @ Vanbex and Etherparty
    <span class="__cf_email__" data-cfemail="9eeeffeaecf7fdf5dee8fff0fcfbe6b0fdf1f3">[emailÂ protected]</span>&#13;
*/&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  function Ownable() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    OwnershipTransferred(owner, newOwner);&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract VancouverCharityDrive is Ownable {&#13;
&#13;
&#13;
    mapping(address =&gt; Pledge[]) public pledges; // keeps all the pledges per address&#13;
    mapping(address =&gt; CompanyInfo) public companies; // keeps all the names of companies per address&#13;
    address[] public participatingCompanies;&#13;
&#13;
    event PledgeCreated(address indexed pledger, uint256 amount, string companyName);&#13;
    event PledgeUpdated(address indexed pledger, uint256 amount, string companyName);&#13;
    event PledgeConfirmed(address indexed pledger, uint256 amount, string companyName, string txHash);&#13;
&#13;
    struct CompanyInfo {&#13;
        bool initialized;&#13;
        string name;&#13;
        string email;&#13;
        string description;&#13;
    }&#13;
&#13;
    struct Pledge {&#13;
        bool initialized;&#13;
        uint amount; // Amount of the currency used for the pledge&#13;
        string charityName; // Name of the charity&#13;
        string currency; // Currency used for the pledge&#13;
        string txHash; //  TxHash of the pledge&#13;
        bool confirmed;&#13;
    }&#13;
&#13;
    modifier isWhiteListed() {&#13;
        require(companies[msg.sender].initialized == true);&#13;
        _;&#13;
    }&#13;
&#13;
    function whitelistCompany(address _companyAddress, string _companyName, string _companyEmail, string _description) public onlyOwner returns(bool) {&#13;
        companies[_companyAddress] = CompanyInfo(true, _companyName, _companyEmail, _description);&#13;
        participatingCompanies.push(_companyAddress);&#13;
        return true;&#13;
    }&#13;
&#13;
    function createPledge(uint _amount, string _charityName, string _currency) public isWhiteListed returns(bool) {&#13;
        pledges[msg.sender].push(Pledge(true, _amount, _charityName, _currency, "", false));&#13;
        PledgeCreated(msg.sender, _amount, companies[msg.sender].name);&#13;
        return true;&#13;
    }&#13;
&#13;
    function updatePledge(uint _amount, string _charityName, string _currency, uint _pledgeIndex) public isWhiteListed returns(bool) {&#13;
        Pledge storage pledge = pledges[msg.sender][_pledgeIndex];&#13;
        require(pledge.initialized == true &amp;&amp; pledge.confirmed == false);&#13;
        pledge.currency = _currency;&#13;
        pledge.amount = _amount;&#13;
        pledge.charityName = _charityName;&#13;
        return true;&#13;
    }&#13;
&#13;
    function confirmPledge(uint _pledgeIndex, string _txHash) public isWhiteListed returns(bool) {&#13;
        Pledge storage pledge = pledges[msg.sender][_pledgeIndex];&#13;
        require(pledge.initialized == true &amp;&amp; pledge.confirmed == false);&#13;
        pledge.txHash = _txHash;&#13;
        pledge.confirmed = true;&#13;
        PledgeConfirmed(msg.sender, pledge.amount, companies[msg.sender].name, _txHash);&#13;
        return true;&#13;
    }&#13;
&#13;
    function getPledge(address _companyAddress, uint _index) public view returns (uint amount, string charityName, string currency, string txHash, bool confirmed) {&#13;
        amount = pledges[_companyAddress][_index].amount;&#13;
        charityName = pledges[_companyAddress][_index].charityName;&#13;
        currency = pledges[_companyAddress][_index].currency;&#13;
        txHash = pledges[_companyAddress][_index].txHash;&#13;
        confirmed = pledges[_companyAddress][_index].confirmed;&#13;
    }&#13;
&#13;
    function getAllCompanies() public view returns (address[]) {&#13;
        return participatingCompanies;&#13;
    }&#13;
}
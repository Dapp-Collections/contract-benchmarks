/*******************************/
/* Solidity Contract By Younes */
/**** <span class="__cf_email__" data-cfemail="662a481f09130803152657000708051f4805090b">[email protected]</span> ******/&#13;
/****** www.1fancy.com *********/&#13;
/*******************************/&#13;
&#13;
pragma solidity ^0.4.16;&#13;
&#13;
interface token {&#13;
    function transfer(address receiver, uint amount);&#13;
}&#13;
&#13;
contract MiCarsICO {&#13;
	// Beneficiary Address&#13;
	uint128 private decimals = 1000000000000000000;&#13;
    address public beneficiary = 0x8f42914C201AcDd8a2769211C862222Ec56eea40;&#13;
    address public owner = beneficiary;&#13;
	&#13;
	// Start date vendredi 29 décembre 2017 00:00:00&#13;
	uint public startdate = now;&#13;
	// Pré ico round 1 fin: vendredi 5 janvier 2018 23:59:3&#13;
	uint public deadlinePreIcoOne = 1515196740;&#13;
	&#13;
	// Pré ico round 2 fin: vendredi 12 janvier 2018 23:59:3&#13;
    uint public deadlinePreIcoTwo = 1515801540;	&#13;
	&#13;
	// Fianl Tuesday fin: mardi 13 février 2018 23:59:3&#13;
    uint public deadline = 1518566340;&#13;
&#13;
	&#13;
	// Min token per transaction&#13;
    uint public vminEtherPerPurchase = 0.0011 * 1 ether;&#13;
	&#13;
	// Max Token per transaction&#13;
    uint public vmaxEtherPerPurchase = 225 * 1 ether;&#13;
	&#13;
	// Initial Starting price per token&#13;
    uint public price = 0.000385901 * 1 ether;&#13;
    uint public updatedPrice  = 0.000515185 * 1 ether;&#13;
	&#13;
	// Amount raised and deadlines in seconds&#13;
    uint public amountRaised;&#13;
    uint public sentToken;&#13;
    &#13;
&#13;
	&#13;
&#13;
	&#13;
	// Token Address&#13;
    token public tokenReward = token(0xdd5a3aeef473401c23f24c4c6b9cd1b0808fbb36);&#13;
    mapping(address =&gt; uint256) public balanceOf;&#13;
	&#13;
    bool crowdsaleClosed = false;&#13;
    bool price_rate_changed = false;&#13;
&#13;
    event GoalReached(address recipient, uint totalAmountRaised);&#13;
    event FundTransfer(address backer, uint amount, bool isContribution);&#13;
&#13;
    /**&#13;
     * Constrctor function&#13;
     *&#13;
     * Setup the owner&#13;
     */&#13;
    function MiCarsICO() {}&#13;
&#13;
    function div(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
		// assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
		uint256 c = a / b;&#13;
		// assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
		return c;&#13;
	  }&#13;
	function mul(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
		if (a == 0) {&#13;
		  return 0;&#13;
		}&#13;
		uint256 c = a * b;&#13;
		assert(c / a == b);&#13;
		return c;&#13;
	}&#13;
  &#13;
	modifier isOwner {&#13;
	  require(msg.sender == owner);&#13;
	  _;&#13;
	 }&#13;
	&#13;
&#13;
	function kill() isOwner public {&#13;
        selfdestruct(beneficiary);&#13;
    }&#13;
&#13;
    function EmergencyPause() isOwner public {&#13;
        crowdsaleClosed = true;&#13;
    }&#13;
    function EmergencyUnPause() isOwner public {&#13;
        crowdsaleClosed = false;&#13;
    }&#13;
	&#13;
	 /**&#13;
     * Withdraw the funds&#13;
     *&#13;
     */&#13;
    function safeWithdrawal(uint _amounty) isOwner public {&#13;
			uint amounted = _amounty;&#13;
            &#13;
            if (beneficiary.send(amounted)) {&#13;
                FundTransfer(beneficiary, amounted, false);&#13;
            }&#13;
    }&#13;
	&#13;
    function UpdatePrice(uint _new_price) isOwner public {&#13;
          updatedPrice = _new_price;&#13;
		  price_rate_changed = true;&#13;
    }&#13;
&#13;
    function () payable   {&#13;
        require(crowdsaleClosed == false);&#13;
&#13;
		if (price_rate_changed == false) {&#13;
					&#13;
			// Token price in 1st week Pre Ico&#13;
			if (now &lt;= deadlinePreIcoOne) {&#13;
				price = 0.000385901 * 1 ether;&#13;
			}&#13;
			&#13;
			// Token price in 2nd week Pre Ico&#13;
			else if (now &gt; deadlinePreIcoOne &amp;&amp; now &lt;= deadlinePreIcoTwo) {&#13;
				price = 0.000411628 * 1 ether;&#13;
			}&#13;
			&#13;
			// Token price in 3th week Pre Ico&#13;
			else if (now &gt; deadlinePreIcoTwo &amp;&amp; now &lt;= deadline) {&#13;
				price = 0.000515185 * 1 ether;&#13;
			}&#13;
			// Token fixed price in any issue happend&#13;
			else {&#13;
				price = 0.000515185 * 1 ether;&#13;
			}&#13;
		// Regular token price&#13;
		} else if (price_rate_changed == true) {&#13;
			price = updatedPrice * 1 ether;&#13;
		} else {&#13;
			price = 0.000515185 * 1 ether;&#13;
		}&#13;
		&#13;
		uint amount = msg.value;&#13;
&#13;
		uint calculedamount = mul(amount, decimals);&#13;
		uint tokentosend = div(calculedamount, price);&#13;
&#13;
&#13;
        if (msg.value &gt;= vminEtherPerPurchase &amp;&amp; msg.value &lt;= vmaxEtherPerPurchase) {&#13;
				&#13;
				balanceOf[msg.sender] += amount;&#13;
				FundTransfer(msg.sender, amount, true);&#13;
				tokenReward.transfer(msg.sender, tokentosend);&#13;
&#13;
				amountRaised += amount;&#13;
				sentToken += tokentosend;&#13;
						&#13;
							&#13;
		} else {&#13;
			revert();&#13;
		}&#13;
        &#13;
    }&#13;
&#13;
}
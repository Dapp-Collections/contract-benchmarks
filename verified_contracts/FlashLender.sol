pragma solidity 0.4.24;
 

interface IArbitrage {
    function executeArbitrage(
      address token,
      uint256 amount,
      address dest,
      bytes data
    )
      external
      returns (bool);
}

pragma solidity 0.4.24;


contract IBank {
    function totalSupplyOf(address token) public view returns (uint256 balance);
    function borrowFor(address token, address borrower, uint256 amount) public;
    function repay(address token, uint256 amount) external payable;
}


/**
 * @title Helps contracts guard agains reentrancy attacks.
 * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="92e0f7fff1fdd2a0">[email protected]</a>π.com&gt;&#13;
 * @notice If you mark a function `nonReentrant`, you should also&#13;
 * mark it `external`.&#13;
 */&#13;
contract ReentrancyGuard {&#13;
&#13;
  /**&#13;
   * @dev We use a single lock for the whole contract.&#13;
   */&#13;
  bool private reentrancyLock = false;&#13;
&#13;
  /**&#13;
   * @dev Prevents a contract from calling itself, directly or indirectly.&#13;
   * @notice If you mark a function `nonReentrant`, you should also&#13;
   * mark it `external`. Calling one nonReentrant function from&#13;
   * another is not supported. Instead, you can implement a&#13;
   * `private` function doing the actual work, and a `external`&#13;
   * wrapper marked as `nonReentrant`.&#13;
   */&#13;
  modifier nonReentrant() {&#13;
    require(!reentrancyLock);&#13;
    reentrancyLock = true;&#13;
    _;&#13;
    reentrancyLock = false;&#13;
  }&#13;
&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipRenounced(address indexed previousOwner);&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipRenounced(owner);&#13;
    owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address _newOwner) public onlyOwner {&#13;
    _transferOwnership(_newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address _newOwner) internal {&#13;
    require(_newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, _newOwner);&#13;
    owner = _newOwner;&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC20Basic&#13;
 * @dev Simpler version of ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/179&#13;
 */&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender)&#13;
    public view returns (uint256);&#13;
&#13;
  function transferFrom(address from, address to, uint256 value)&#13;
    public returns (bool);&#13;
&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(&#13;
    address indexed owner,&#13;
    address indexed spender,&#13;
    uint256 value&#13;
  );&#13;
}&#13;
&#13;
&#13;
/*&#13;
&#13;
  Copyright 2018 Contra Labs Inc.&#13;
&#13;
  Licensed under the Apache License, Version 2.0 (the "License");&#13;
  you may not use this file except in compliance with the License.&#13;
  You may obtain a copy of the License at&#13;
&#13;
  http://www.apache.org/licenses/LICENSE-2.0&#13;
&#13;
  Unless required by applicable law or agreed to in writing, software&#13;
  distributed under the License is distributed on an "AS IS" BASIS,&#13;
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
  See the License for the specific language governing permissions and&#13;
  limitations under the License.&#13;
&#13;
*/&#13;
&#13;
pragma solidity 0.4.24;&#13;
&#13;
// @title FlashLender: Borrow from the bank and enforce repayment by the end of transaction execution.&#13;
// @author Rich McAteer &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f4869d979cb4999586969891da9b8693">[email protected]</a>&gt;, Max Wolff &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bfd2dec7ffd2decdddd3da91d0cdd8">[email protected]</a>&gt;&#13;
contract FlashLender is ReentrancyGuard, Ownable {&#13;
    using SafeMath for uint256;&#13;
&#13;
    string public version = '0.1';&#13;
    address public bank;&#13;
    uint256 public fee;&#13;
    &#13;
    /**&#13;
    * @dev Verify that the borrowed tokens are returned to the bank plus a fee by the end of transaction execution.&#13;
    * @param token Address of the token to for arbitrage. 0x0 for Ether.&#13;
    * @param amount Amount borrowed.&#13;
    */&#13;
    modifier isArbitrage(address token, uint256 amount) {&#13;
        uint256 balance = IBank(bank).totalSupplyOf(token);&#13;
        uint256 feeAmount = amount.mul(fee).div(10 ** 18); &#13;
        _;&#13;
        require(IBank(bank).totalSupplyOf(token) &gt;= (balance.add(feeAmount)));&#13;
    }&#13;
&#13;
    constructor(address _bank, uint256 _fee) public {&#13;
        bank = _bank;&#13;
        fee = _fee;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Borrow from the bank on behalf of an arbitrage contract and execute the arbitrage contract's callback function.&#13;
    * @param token Address of the token to borrow. 0x0 for Ether.&#13;
    * @param amount Amount to borrow.&#13;
    * @param dest Address of the account to receive arbitrage profits.&#13;
    * @param data The data to execute the arbitrage trade.&#13;
    */&#13;
    function borrow(&#13;
        address token,&#13;
        uint256 amount,&#13;
        address dest,&#13;
        bytes data&#13;
    )&#13;
        external&#13;
        nonReentrant&#13;
        isArbitrage(token, amount)&#13;
        returns (bool)&#13;
    {&#13;
        // Borrow from the bank and send to the arbitrageur.&#13;
        IBank(bank).borrowFor(token, msg.sender, amount);&#13;
        // Call the arbitrageur's execute arbitrage method.&#13;
        return IArbitrage(msg.sender).executeArbitrage(token, amount, dest, data);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Allow the owner to set the bank address.&#13;
    * @param _bank Address of the bank.&#13;
    */&#13;
    function setBank(address _bank) external onlyOwner {&#13;
        bank = _bank;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Allow the owner to set the fee.&#13;
    * @param _fee Fee to borrow, as a percentage of principal borrowed. 18 decimals of precision (e.g., 10^18 = 100% fee).&#13;
    */&#13;
    function setFee(uint256 _fee) external onlyOwner {&#13;
        fee = _fee;&#13;
    }&#13;
&#13;
}
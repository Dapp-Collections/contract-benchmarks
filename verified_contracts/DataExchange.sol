pragma solidity ^0.4.24;

/**
 * @title Eliptic curve signature operations
 *
 * @dev Based on https://gist.github.com/axic/5b33912c6f61ae6fd96d6c4a47afde6d
 *
 * TODO Remove this library once solidity supports passing a signature to ecrecover.
 * See https://github.com/ethereum/solidity/issues/864
 *
 */

library ECRecovery {

  /**
   * @dev Recover signer address from a message by using their signature
   * @param hash bytes32 message, the hash is the signed message. What is recovered is the signer address.
   * @param sig bytes signature, the signature is generated using web3.eth.sign()
   */
  function recover(bytes32 hash, bytes sig)
    internal
    pure
    returns (address)
  {
    bytes32 r;
    bytes32 s;
    uint8 v;

    // Check the signature length
    if (sig.length != 65) {
      return (address(0));
    }

    // Divide the signature in r, s and v variables
    // ecrecover takes the signature parameters, and the only way to get them
    // currently is to use assembly.
    // solium-disable-next-line security/no-inline-assembly
    assembly {
      r := mload(add(sig, 32))
      s := mload(add(sig, 64))
      v := byte(0, mload(add(sig, 96)))
    }

    // Version of signature should be 27 or 28, but 0 and 1 are also possible versions
    if (v < 27) {
      v += 27;
    }

    // If the version is correct return the signer address
    if (v != 27 && v != 28) {
      return (address(0));
    } else {
      // solium-disable-next-line arg-overflow
      return ecrecover(hash, v, r, s);
    }
  }

  /**
   * toEthSignedMessageHash
   * @dev prefix a bytes32 value with "\x19Ethereum Signed Message:"
   * @dev and hash the result
   */
  function toEthSignedMessageHash(bytes32 hash)
    internal
    pure
    returns (bytes32)
  {
    // 32 is the length in bytes of hash,
    // enforced by the type signature above
    return keccak256(
      "\x19Ethereum Signed Message:\n32",
      hash
    );
  }
}

/**
 * @title ERC20Basic
 * @dev Simpler version of ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/179
 */
contract ERC20Basic {
  function totalSupply() public view returns (uint256);
  function balanceOf(address who) public view returns (uint256);
  function transfer(address to, uint256 value) public returns (bool);
  event Transfer(address indexed from, address indexed to, uint256 value);
}

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }
}


/**
 * @title TokenDestructible:
 * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="3e4c5b535d517e0c">[email protected]</span>π.com&gt;&#13;
 * @dev Base contract that can be destroyed by owner. All funds in contract including&#13;
 * listed tokens will be sent to the owner.&#13;
 */&#13;
contract TokenDestructible is Ownable {&#13;
&#13;
  constructor() public payable { }&#13;
&#13;
  /**&#13;
   * @notice Terminate contract and refund to owner&#13;
   * @param tokens List of addresses of ERC20 or ERC20Basic token contracts to&#13;
   refund.&#13;
   * @notice The called token contracts could try to re-enter this contract. Only&#13;
   supply token contracts you trust.&#13;
   */&#13;
  function destroy(address[] tokens) onlyOwner public {&#13;
&#13;
    // Transfer tokens to owner&#13;
    for (uint256 i = 0; i &lt; tokens.length; i++) {&#13;
      ERC20Basic token = ERC20Basic(tokens[i]);&#13;
      uint256 balance = token.balanceOf(this);&#13;
      token.transfer(owner, balance);&#13;
    }&#13;
&#13;
    // Transfer Eth to owner and terminate contract&#13;
    selfdestruct(owner);&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is Ownable {&#13;
  event Pause();&#13;
  event Unpause();&#13;
&#13;
  bool public paused = false;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is not paused.&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is paused.&#13;
   */&#13;
  modifier whenPaused() {&#13;
    require(paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to pause, triggers stopped state&#13;
   */&#13;
  function pause() onlyOwner whenNotPaused public {&#13;
    paused = true;&#13;
    emit Pause();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to unpause, returns to normal state&#13;
   */&#13;
  function unpause() onlyOwner whenPaused public {&#13;
    paused = false;&#13;
    emit Unpause();&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title Math&#13;
 * @dev Assorted math operations&#13;
 */&#13;
library Math {&#13;
  function max64(uint64 a, uint64 b) internal pure returns (uint64) {&#13;
    return a &gt;= b ? a : b;&#13;
  }&#13;
&#13;
  function min64(uint64 a, uint64 b) internal pure returns (uint64) {&#13;
    return a &lt; b ? a : b;&#13;
  }&#13;
&#13;
  function max256(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    return a &gt;= b ? a : b;&#13;
  }&#13;
&#13;
  function min256(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    return a &lt; b ? a : b;&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title Basic token&#13;
 * @dev Basic version of StandardToken, with no allowances.&#13;
 */&#13;
contract BasicToken is ERC20Basic {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  uint256 totalSupply_;&#13;
&#13;
  /**&#13;
  * @dev total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return totalSupply_;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[msg.sender]);&#13;
&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    emit Transfer(msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) public view returns (uint256) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender)&#13;
    public view returns (uint256);&#13;
&#13;
  function transferFrom(address from, address to, uint256 value)&#13;
    public returns (bool);&#13;
&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(&#13;
    address indexed owner,&#13;
    address indexed spender,&#13;
    uint256 value&#13;
  );&#13;
}&#13;
&#13;
/**&#13;
 * @title Standard ERC20 token&#13;
 *&#13;
 * @dev Implementation of the basic standard token.&#13;
 * @dev https://github.com/ethereum/EIPs/issues/20&#13;
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol&#13;
 */&#13;
contract StandardToken is ERC20, BasicToken {&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _value&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[_from]);&#13;
    require(_value &lt;= allowed[_from][msg.sender]);&#13;
&#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
    emit Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   *&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address _spender, uint256 _value) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = _value;&#13;
    emit Approval(msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(&#13;
    address _owner,&#13;
    address _spender&#13;
   )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    return allowed[_owner][_spender];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseApproval(&#13;
    address _spender,&#13;
    uint _addedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    allowed[msg.sender][_spender] = (&#13;
      allowed[msg.sender][_spender].add(_addedValue));&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseApproval(&#13;
    address _spender,&#13;
    uint _subtractedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    uint oldValue = allowed[msg.sender][_spender];&#13;
    if (_subtractedValue &gt; oldValue) {&#13;
      allowed[msg.sender][_spender] = 0;&#13;
    } else {&#13;
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);&#13;
    }&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title WIBToken&#13;
 * @author Wibson Development Team &lt;<span class="__cf_email__" data-cfemail="aecacbd8cbc2c1decbdcddeed9c7ccddc1c080c1dcc9">[email protected]</span>&gt;&#13;
 * @notice Wibson Oficial Token, this is an ERC20 standard compliant token.&#13;
 * @dev WIBToken token has an initial supply of 9 billion tokens with 9 decimals.&#13;
 */&#13;
contract WIBToken is StandardToken {&#13;
  string public constant name = "WIBSON"; // solium-disable-line uppercase&#13;
  string public constant symbol = "WIB"; // solium-disable-line uppercase&#13;
  uint8 public constant decimals = 9; // solium-disable-line uppercase&#13;
&#13;
  // solium-disable-next-line zeppelin/no-arithmetic-operations&#13;
  uint256 public constant INITIAL_SUPPLY = 9000000000 * (10 ** uint256(decimals));&#13;
&#13;
  constructor() public {&#13;
    totalSupply_ = INITIAL_SUPPLY;&#13;
    balances[msg.sender] = INITIAL_SUPPLY;&#13;
    emit Transfer(address(0), msg.sender, INITIAL_SUPPLY);&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title DataOrder&#13;
 * @author Wibson Development Team &lt;<span class="__cf_email__" data-cfemail="9ffbfae9faf3f0effaedecdfe8f6fdecf0f1b1f0edf8">[email protected]</span>&gt;&#13;
 * @notice `DataOrder` is the contract between a given buyer and a set of sellers.&#13;
 *         This holds the information about the "deal" between them and how the&#13;
 *         transaction has evolved.&#13;
 */&#13;
contract DataOrder is Ownable {&#13;
  modifier validAddress(address addr) {&#13;
    require(addr != address(0));&#13;
    require(addr != address(this));&#13;
    _;&#13;
  }&#13;
&#13;
  enum OrderStatus {&#13;
    OrderCreated,&#13;
    NotaryAdded,&#13;
    TransactionCompleted&#13;
  }&#13;
&#13;
  enum DataResponseStatus {&#13;
    DataResponseAdded,&#13;
    RefundedToBuyer,&#13;
    TransactionCompleted&#13;
  }&#13;
&#13;
  // --- Notary Information ---&#13;
  struct NotaryInfo {&#13;
    uint256 responsesPercentage;&#13;
    uint256 notarizationFee;&#13;
    string notarizationTermsOfService;&#13;
    uint32 addedAt;&#13;
  }&#13;
&#13;
  // --- Seller Information ---&#13;
  struct SellerInfo {&#13;
    address notary;&#13;
    string dataHash;&#13;
    uint32 createdAt;&#13;
    uint32 closedAt;&#13;
    DataResponseStatus status;&#13;
  }&#13;
&#13;
  address public buyer;&#13;
  string public filters;&#13;
  string public dataRequest;&#13;
  uint256 public price;&#13;
  string public termsAndConditions;&#13;
  string public buyerURL;&#13;
  string public buyerPublicKey;&#13;
  uint32 public createdAt;&#13;
  uint32 public transactionCompletedAt;&#13;
  OrderStatus public orderStatus;&#13;
&#13;
  mapping(address =&gt; SellerInfo) public sellerInfo;&#13;
  mapping(address =&gt; NotaryInfo) internal notaryInfo;&#13;
&#13;
  address[] public sellers;&#13;
  address[] public notaries;&#13;
&#13;
  /**&#13;
   * @notice Contract's constructor.&#13;
   * @param _buyer Buyer address&#13;
   * @param _filters Target audience of the order.&#13;
   * @param _dataRequest Requested data type (Geolocation, Facebook, etc).&#13;
   * @param _price Price per added Data Response.&#13;
   * @param _termsAndConditions Copy of the terms and conditions for the order.&#13;
   * @param _buyerURL Public URL of the buyer where the data must be sent.&#13;
   * @param _buyerPublicKey Public Key of the buyer, which will be used to encrypt the&#13;
   *        data to be sent.&#13;
   */&#13;
  constructor(&#13;
    address _buyer,&#13;
    string _filters,&#13;
    string _dataRequest,&#13;
    uint256 _price,&#13;
    string _termsAndConditions,&#13;
    string _buyerURL,&#13;
    string _buyerPublicKey&#13;
  ) public validAddress(_buyer) {&#13;
    require(bytes(_buyerURL).length &gt; 0);&#13;
    require(bytes(_buyerPublicKey).length &gt; 0);&#13;
&#13;
    buyer = _buyer;&#13;
    filters = _filters;&#13;
    dataRequest = _dataRequest;&#13;
    price = _price;&#13;
    termsAndConditions = _termsAndConditions;&#13;
    buyerURL = _buyerURL;&#13;
    buyerPublicKey = _buyerPublicKey;&#13;
    orderStatus = OrderStatus.OrderCreated;&#13;
    createdAt = uint32(block.timestamp);&#13;
    transactionCompletedAt = 0;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Adds a notary to the Data Order.&#13;
   * @param notary Notary's address.&#13;
   * @param responsesPercentage Percentage of DataResponses to audit per DataOrder.&#13;
            Value must be between 0 and 100.&#13;
   * @param notarizationFee Fee to be charged per validation done.&#13;
   * @param notarizationTermsOfService Notary's terms and conditions for the order.&#13;
   * @return true if the Notary was added successfully, reverts otherwise.&#13;
   */&#13;
  function addNotary(&#13;
    address notary,&#13;
    uint256 responsesPercentage,&#13;
    uint256 notarizationFee,&#13;
    string notarizationTermsOfService&#13;
  ) public onlyOwner validAddress(notary) returns (bool) {&#13;
    require(transactionCompletedAt == 0);&#13;
    require(responsesPercentage &lt;= 100);&#13;
    require(!hasNotaryBeenAdded(notary));&#13;
&#13;
    notaryInfo[notary] = NotaryInfo(&#13;
      responsesPercentage,&#13;
      notarizationFee,&#13;
      notarizationTermsOfService,&#13;
      uint32(block.timestamp)&#13;
    );&#13;
    notaries.push(notary);&#13;
    orderStatus = OrderStatus.NotaryAdded;&#13;
    return true;&#13;
  }&#13;
&#13;
   /**&#13;
    * @notice Adds a new DataResponse.&#13;
    * @param seller Address of the Seller.&#13;
    * @param notary Notary address that the Seller chooses to use as notary,&#13;
    *        this must be one within the allowed notaries and within the&#13;
    *         DataOrder's notaries.&#13;
    * @param dataHash Hash of the data that must be sent, this is a SHA256.&#13;
    * @return true if the DataResponse was added successfully, reverts otherwise.&#13;
    */&#13;
  function addDataResponse(&#13;
    address seller,&#13;
    address notary,&#13;
    string dataHash&#13;
  ) public onlyOwner validAddress(seller) validAddress(notary) returns (bool) {&#13;
    require(orderStatus == OrderStatus.NotaryAdded);&#13;
    require(transactionCompletedAt == 0);&#13;
    require(!hasSellerBeenAccepted(seller));&#13;
    require(hasNotaryBeenAdded(notary));&#13;
&#13;
    sellerInfo[seller] = SellerInfo(&#13;
      notary,&#13;
      dataHash,&#13;
      uint32(block.timestamp),&#13;
      0,&#13;
      DataResponseStatus.DataResponseAdded&#13;
    );&#13;
&#13;
    sellers.push(seller);&#13;
&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Closes a DataResponse.&#13;
   * @dev Once the buyer receives the seller's data and checks that it is valid&#13;
   *      or not, he must signal  DataResponse as completed.&#13;
   * @param seller Seller address.&#13;
   * @param transactionCompleted True, if the seller got paid for his/her data.&#13;
   * @return true if DataResponse was successfully closed, reverts otherwise.&#13;
   */&#13;
  function closeDataResponse(&#13;
    address seller,&#13;
    bool transactionCompleted&#13;
  ) public onlyOwner validAddress(seller) returns (bool) {&#13;
    require(orderStatus != OrderStatus.TransactionCompleted);&#13;
    require(transactionCompletedAt == 0);&#13;
    require(hasSellerBeenAccepted(seller));&#13;
    require(sellerInfo[seller].status == DataResponseStatus.DataResponseAdded);&#13;
&#13;
    sellerInfo[seller].status = transactionCompleted&#13;
      ? DataResponseStatus.TransactionCompleted&#13;
      : DataResponseStatus.RefundedToBuyer;&#13;
    sellerInfo[seller].closedAt = uint32(block.timestamp);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Closes the Data order.&#13;
   * @dev Once the DataOrder is closed it will no longer accept new DataResponses.&#13;
   * @return true if the DataOrder was successfully closed, reverts otherwise.&#13;
   */&#13;
  function close() public onlyOwner returns (bool) {&#13;
    require(orderStatus != OrderStatus.TransactionCompleted);&#13;
    require(transactionCompletedAt == 0);&#13;
    orderStatus = OrderStatus.TransactionCompleted;&#13;
    transactionCompletedAt = uint32(block.timestamp);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Checks if a DataResponse for a given seller has been accepted.&#13;
   * @param seller Seller address.&#13;
   * @return true if the DataResponse was accepted, false otherwise.&#13;
   */&#13;
  function hasSellerBeenAccepted(&#13;
    address seller&#13;
  ) public view validAddress(seller) returns (bool) {&#13;
    return sellerInfo[seller].createdAt != 0;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Checks if the given notary was added to notarize this DataOrder.&#13;
   * @param notary Notary address to check.&#13;
   * @return true if the Notary was added, false otherwise.&#13;
   */&#13;
  function hasNotaryBeenAdded(&#13;
    address notary&#13;
  ) public view validAddress(notary) returns (bool) {&#13;
    return notaryInfo[notary].addedAt != 0;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Gets the notary information.&#13;
   * @param notary Notary address to get info for.&#13;
   * @return Notary information (address, responsesPercentage, notarizationFee,&#13;
   *         notarizationTermsOfService, addedAt)&#13;
   */&#13;
  function getNotaryInfo(&#13;
    address notary&#13;
  ) public view validAddress(notary) returns (&#13;
    address,&#13;
    uint256,&#13;
    uint256,&#13;
    string,&#13;
    uint32&#13;
  ) {&#13;
    require(hasNotaryBeenAdded(notary));&#13;
    NotaryInfo memory info = notaryInfo[notary];&#13;
    return (&#13;
      notary,&#13;
      info.responsesPercentage,&#13;
      info.notarizationFee,&#13;
      info.notarizationTermsOfService,&#13;
      uint32(info.addedAt)&#13;
    );&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Gets the seller information.&#13;
   * @param seller Seller address to get info for.&#13;
   * @return Seller information (address, notary, dataHash, createdAt, closedAt,&#13;
   *         status)&#13;
   */&#13;
  function getSellerInfo(&#13;
    address seller&#13;
  ) public view validAddress(seller) returns (&#13;
    address,&#13;
    address,&#13;
    string,&#13;
    uint32,&#13;
    uint32,&#13;
    bytes32&#13;
  ) {&#13;
    require(hasSellerBeenAccepted(seller));&#13;
    SellerInfo memory info = sellerInfo[seller];&#13;
    return (&#13;
      seller,&#13;
      info.notary,&#13;
      info.dataHash,&#13;
      uint32(info.createdAt),&#13;
      uint32(info.closedAt),&#13;
      getDataResponseStatusAsString(info.status)&#13;
    );&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Gets the selected notary for the given seller.&#13;
   * @param seller Seller address.&#13;
   * @return Address of the notary assigned to the given seller.&#13;
   */&#13;
  function getNotaryForSeller(&#13;
    address seller&#13;
  ) public view validAddress(seller) returns (address) {&#13;
    require(hasSellerBeenAccepted(seller));&#13;
    SellerInfo memory info = sellerInfo[seller];&#13;
    return info.notary;&#13;
  }&#13;
&#13;
  function getDataResponseStatusAsString(&#13;
    DataResponseStatus drs&#13;
  ) internal pure returns (bytes32) {&#13;
    if (drs == DataResponseStatus.DataResponseAdded) {&#13;
      return bytes32("DataResponseAdded");&#13;
    }&#13;
&#13;
    if (drs == DataResponseStatus.RefundedToBuyer) {&#13;
      return bytes32("RefundedToBuyer");&#13;
    }&#13;
&#13;
    if (drs == DataResponseStatus.TransactionCompleted) {&#13;
      return bytes32("TransactionCompleted");&#13;
    }&#13;
&#13;
    throw; // solium-disable-line security/no-throw&#13;
  }&#13;
&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title MultiMap&#13;
 * @author Wibson Development Team &lt;<span class="__cf_email__" data-cfemail="51353427343d3e2134232211263833223e3f7f3e2336">[email protected]</span>&gt;&#13;
 * @notice An address `MultiMap`.&#13;
 * @dev `MultiMap` is useful when you need to keep track of a set of addresses.&#13;
 */&#13;
library MultiMap {&#13;
&#13;
  struct MapStorage {&#13;
    mapping(address =&gt; uint) addressToIndex;&#13;
    address[] addresses;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Retrieves a address from the given `MapStorage` using a index Key.&#13;
   * @param self `MapStorage` where the index must be searched.&#13;
   * @param index Index to find.&#13;
   * @return Address of the given Index.&#13;
   */&#13;
  function get(&#13;
    MapStorage storage self,&#13;
    uint index&#13;
  ) public view returns (address) {&#13;
    require(index &lt; self.addresses.length);&#13;
    return self.addresses[index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Checks if the given address exists in the storage.&#13;
   * @param self `MapStorage` where the key must be searched.&#13;
   * @param _key Address to find.&#13;
   * @return true if `_key` exists in the storage, false otherwise.&#13;
   */&#13;
  function exist(&#13;
    MapStorage storage self,&#13;
    address _key&#13;
  ) public view returns (bool) {&#13;
    if (_key != address(0)) {&#13;
      uint targetIndex = self.addressToIndex[_key];&#13;
      return targetIndex &lt; self.addresses.length &amp;&amp; self.addresses[targetIndex] == _key;&#13;
    } else {&#13;
      return false;&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Inserts a new address within the given storage.&#13;
   * @param self `MapStorage` where the key must be inserted.&#13;
   * @param _key Address to insert.&#13;
   * @return true if `_key` was added, reverts otherwise.&#13;
   */&#13;
  function insert(&#13;
    MapStorage storage self,&#13;
    address _key&#13;
  ) public returns (bool) {&#13;
    require(_key != address(0));&#13;
    if (exist(self, _key)) {&#13;
      return true;&#13;
    }&#13;
&#13;
    self.addressToIndex[_key] = self.addresses.length;&#13;
    self.addresses.push(_key);&#13;
&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Removes the given index from the storage.&#13;
   * @param self MapStorage` where the index lives.&#13;
   * @param index Index to remove.&#13;
   * @return true if address at `index` was removed, false otherwise.&#13;
   */&#13;
  function removeAt(MapStorage storage self, uint index) public returns (bool) {&#13;
    return remove(self, self.addresses[index]);&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Removes the given address from the storage.&#13;
   * @param self `MapStorage` where the address lives.&#13;
   * @param _key Address to remove.&#13;
   * @return true if `_key` was removed, false otherwise.&#13;
   */&#13;
  function remove(MapStorage storage self, address _key) public returns (bool) {&#13;
    require(_key != address(0));&#13;
    if (!exist(self, _key)) {&#13;
      return false;&#13;
    }&#13;
&#13;
    uint currentIndex = self.addressToIndex[_key];&#13;
&#13;
    uint lastIndex = SafeMath.sub(self.addresses.length, 1);&#13;
    address lastAddress = self.addresses[lastIndex];&#13;
    self.addressToIndex[lastAddress] = currentIndex;&#13;
    self.addresses[currentIndex] = lastAddress;&#13;
&#13;
    delete self.addresses[lastIndex];&#13;
    delete self.addressToIndex[_key];&#13;
&#13;
    self.addresses.length--;&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Gets the current length of the Map.&#13;
   * @param self `MapStorage` to get the length from.&#13;
   * @return The length of the MultiMap.&#13;
   */&#13;
  function length(MapStorage storage self) public view returns (uint) {&#13;
    return self.addresses.length;&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title CryptoUtils&#13;
 * @author Wibson Development Team &lt;<span class="__cf_email__" data-cfemail="c3a7a6b5a6afacb3a6b1b083b4aaa1b0acadedacb1a4">[email protected]</span>&gt;&#13;
 * @notice Cryptographic utilities used by the Wibson protocol.&#13;
 * @dev In order to get the same hashes using `Web3` upon which the signatures&#13;
 *      are checked, you must use `web3.utils.soliditySha3` in v1.0 (or the&#13;
 *      homonymous function in the `web3-utils` package)&#13;
 *      http://web3js.readthedocs.io/en/1.0/web3-utils.html#utils-soliditysha3&#13;
 */&#13;
library CryptoUtils {&#13;
&#13;
  /**&#13;
   * @notice Checks if the signature was created by the signer.&#13;
   * @param hash Hash of the data using the `keccak256` algorithm.&#13;
   * @param signer Signer address.&#13;
   * @param signature Signature over the hash.&#13;
   * @return true if `signer` is the one who signed the `hash`, false otherwise.&#13;
   */&#13;
  function isSignedBy(&#13;
    bytes32 hash,&#13;
    address signer,&#13;
    bytes signature&#13;
  ) private pure returns (bool) {&#13;
    require(signer != address(0));&#13;
    bytes32 prefixedHash = ECRecovery.toEthSignedMessageHash(hash);&#13;
    address recovered = ECRecovery.recover(prefixedHash, signature);&#13;
    return recovered == signer;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Checks if the notary's signature to be added to the DataOrder is valid.&#13;
   * @param order Order address.&#13;
   * @param notary Notary address.&#13;
   * @param responsesPercentage Percentage of DataResponses to audit per DataOrder.&#13;
   * @param notarizationFee Fee to be charged per validation done.&#13;
   * @param notarizationTermsOfService Notary terms and conditions for the order.&#13;
   * @param notarySignature Off-chain Notary signature.&#13;
   * @return true if `notarySignature` is valid, false otherwise.&#13;
   */&#13;
  function isNotaryAdditionValid(&#13;
    address order,&#13;
    address notary,&#13;
    uint256 responsesPercentage,&#13;
    uint256 notarizationFee,&#13;
    string notarizationTermsOfService,&#13;
    bytes notarySignature&#13;
  ) public pure returns (bool) {&#13;
    require(order != address(0));&#13;
    require(notary != address(0));&#13;
    bytes32 hash = keccak256(&#13;
      abi.encodePacked(&#13;
        order,&#13;
        responsesPercentage,&#13;
        notarizationFee,&#13;
        notarizationTermsOfService&#13;
      )&#13;
    );&#13;
&#13;
    return isSignedBy(hash, notary, notarySignature);&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Checks if the parameters passed correspond to the seller's signature used.&#13;
   * @param order Order address.&#13;
   * @param seller Seller address.&#13;
   * @param notary Notary address.&#13;
   * @param dataHash Hash of the data that must be sent, this is a SHA256.&#13;
   * @param signature Signature of DataResponse.&#13;
   * @return true if arguments are signed by the `seller`, false otherwise.&#13;
   */&#13;
  function isDataResponseValid(&#13;
    address order,&#13;
    address seller,&#13;
    address notary,&#13;
    string dataHash,&#13;
    bytes signature&#13;
  ) public pure returns (bool) {&#13;
    require(order != address(0));&#13;
    require(seller != address(0));&#13;
    require(notary != address(0));&#13;
&#13;
    bytes memory packed = bytes(dataHash).length &gt; 0&#13;
      ? abi.encodePacked(order, notary, dataHash)&#13;
      : abi.encodePacked(order, notary);&#13;
&#13;
    bytes32 hash = keccak256(packed);&#13;
    return isSignedBy(hash, seller, signature);&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Checks if the notary's signature to close the `DataResponse` is valid.&#13;
   * @param order Order address.&#13;
   * @param seller Seller address.&#13;
   * @param notary Notary address.&#13;
   * @param wasAudited Indicates whether the data was audited or not.&#13;
   * @param isDataValid Indicates the result of the audit, if happened.&#13;
   * @param notarySignature Off-chain Notary signature.&#13;
   * @return true if `notarySignature` is valid, false otherwise.&#13;
   */&#13;
  function isNotaryVeredictValid(&#13;
    address order,&#13;
    address seller,&#13;
    address notary,&#13;
    bool wasAudited,&#13;
    bool isDataValid,&#13;
    bytes notarySignature&#13;
  ) public pure returns (bool) {&#13;
    require(order != address(0));&#13;
    require(seller != address(0));&#13;
    require(notary != address(0));&#13;
    bytes32 hash = keccak256(&#13;
      abi.encodePacked(&#13;
        order,&#13;
        seller,&#13;
        wasAudited,&#13;
        isDataValid&#13;
      )&#13;
    );&#13;
&#13;
    return isSignedBy(hash, notary, notarySignature);&#13;
  }&#13;
}&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title DataExchange&#13;
 * @author Wibson Development Team &lt;<span class="__cf_email__" data-cfemail="d0b4b5a6b5bcbfa0b5a2a390a7b9b2a3bfbefebfa2b7">[email protected]</span>&gt;&#13;
 * @notice `DataExchange` is the core contract of the Wibson Protocol.&#13;
 *         This allows the creation, management, and tracking of DataOrders.&#13;
 * @dev This contract also contains some helper methods to access the data&#13;
 *      needed by the different parties involved in the Protocol.&#13;
 */&#13;
contract DataExchange is TokenDestructible, Pausable {&#13;
  using SafeMath for uint256;&#13;
  using MultiMap for MultiMap.MapStorage;&#13;
&#13;
  event NotaryRegistered(address indexed notary);&#13;
  event NotaryUpdated(address indexed notary);&#13;
  event NotaryUnregistered(address indexed notary);&#13;
&#13;
  event NewOrder(address indexed orderAddr);&#13;
  event NotaryAddedToOrder(address indexed orderAddr, address indexed notary);&#13;
  event DataAdded(address indexed orderAddr, address indexed seller);&#13;
  event TransactionCompleted(address indexed orderAddr, address indexed seller);&#13;
  event RefundedToBuyer(address indexed orderAddr, address indexed buyer);&#13;
  event OrderClosed(address indexed orderAddr);&#13;
&#13;
  struct NotaryInfo {&#13;
    address addr;&#13;
    string name;&#13;
    string notaryUrl;&#13;
    string publicKey;&#13;
  }&#13;
&#13;
  MultiMap.MapStorage openOrders;&#13;
  MultiMap.MapStorage allowedNotaries;&#13;
&#13;
  mapping(address =&gt; address[]) public ordersBySeller;&#13;
  mapping(address =&gt; address[]) public ordersByNotary;&#13;
  mapping(address =&gt; address[]) public ordersByBuyer;&#13;
  mapping(address =&gt; NotaryInfo) internal notaryInfo;&#13;
  // Tracks the orders created by this contract.&#13;
  mapping(address =&gt; bool) private orders;&#13;
&#13;
  // @dev buyerBalance Keeps track of the buyer's balance per order-seller.&#13;
  // TODO: Is there a better way to do this?&#13;
  mapping(&#13;
    address =&gt; mapping(address =&gt; mapping(address =&gt; uint256))&#13;
  ) public buyerBalance;&#13;
&#13;
  // @dev buyerRemainingBudgetForAudits Keeps track of the buyer's remaining&#13;
  // budget from the initial one set on the `DataOrder`&#13;
  mapping(address =&gt; mapping(address =&gt; uint256)) public buyerRemainingBudgetForAudits;&#13;
&#13;
  modifier validAddress(address addr) {&#13;
    require(addr != address(0));&#13;
    require(addr != address(this));&#13;
    _;&#13;
  }&#13;
&#13;
  modifier isOrderLegit(address order) {&#13;
    require(orders[order]);&#13;
    _;&#13;
  }&#13;
&#13;
  // @dev token A WIBToken implementation of an ERC20 standard token.&#13;
  WIBToken token;&#13;
&#13;
  // @dev The minimum for initial budget for audits per `DataOrder`.&#13;
  uint256 public minimumInitialBudgetForAudits;&#13;
&#13;
  /**&#13;
   * @notice Contract constructor.&#13;
   * @param tokenAddress Address of the WIBToken token address.&#13;
   * @param ownerAddress Address of the DataExchange owner.&#13;
   */&#13;
  constructor(&#13;
    address tokenAddress,&#13;
    address ownerAddress&#13;
  ) public validAddress(tokenAddress) validAddress(ownerAddress) {&#13;
    require(tokenAddress != ownerAddress);&#13;
&#13;
    token = WIBToken(tokenAddress);&#13;
    minimumInitialBudgetForAudits = 0;&#13;
    transferOwnership(ownerAddress);&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Registers a new notary or replaces an already existing one.&#13;
   * @dev At least one notary is needed to enable `DataExchange` operation.&#13;
   * @param notary Address of a Notary to add.&#13;
   * @param name Name Of the Notary.&#13;
   * @param notaryUrl Public URL of the notary where the data must be sent.&#13;
   * @param publicKey PublicKey used by the Notary.&#13;
   * @return true if the notary was successfully registered, reverts otherwise.&#13;
   */&#13;
  function registerNotary(&#13;
    address notary,&#13;
    string name,&#13;
    string notaryUrl,&#13;
    string publicKey&#13;
  ) public onlyOwner whenNotPaused validAddress(notary) returns (bool) {&#13;
    bool isNew = notaryInfo[notary].addr == address(0);&#13;
&#13;
    require(allowedNotaries.insert(notary));&#13;
    notaryInfo[notary] = NotaryInfo(&#13;
      notary,&#13;
      name,&#13;
      notaryUrl,&#13;
      publicKey&#13;
    );&#13;
&#13;
    if (isNew) {&#13;
      emit NotaryRegistered(notary);&#13;
    } else {&#13;
      emit NotaryUpdated(notary);&#13;
    }&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Unregisters an existing notary.&#13;
   * @param notary Address of a Notary to unregister.&#13;
   * @return true if the notary was successfully unregistered, reverts otherwise.&#13;
   */&#13;
  function unregisterNotary(&#13;
    address notary&#13;
  ) public onlyOwner whenNotPaused validAddress(notary) returns (bool) {&#13;
    require(allowedNotaries.remove(notary));&#13;
&#13;
    emit NotaryUnregistered(notary);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Sets the minimum initial budget for audits to be placed by a buyer&#13;
   * on DataOrder creation.&#13;
   * @dev The initial budget for audit is used as a preventive method to reduce&#13;
   *      spam DataOrders in the network.&#13;
   * @param _minimumInitialBudgetForAudits The new minimum for initial budget for&#13;
   * audits per DataOrder.&#13;
   * @return true if the value was successfully set, reverts otherwise.&#13;
   */&#13;
  function setMinimumInitialBudgetForAudits(&#13;
    uint256 _minimumInitialBudgetForAudits&#13;
  ) public onlyOwner whenNotPaused returns (bool) {&#13;
    minimumInitialBudgetForAudits = _minimumInitialBudgetForAudits;&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Creates a new DataOrder.&#13;
   * @dev The `msg.sender` will become the buyer of the order.&#13;
   * @param filters Target audience of the order.&#13;
   * @param dataRequest Requested data type (Geolocation, Facebook, etc).&#13;
   * @param price Price per added Data Response.&#13;
   * @param initialBudgetForAudits The initial budget set for future audits.&#13;
   * @param termsAndConditions Buyer's terms and conditions for the order.&#13;
   * @param buyerURL Public URL of the buyer where the data must be sent.&#13;
   * @param publicKey Public Key of the buyer, which will be used to encrypt the&#13;
   *        data to be sent.&#13;
   * @return The address of the newly created DataOrder. If the DataOrder could&#13;
   *         not be created, reverts.&#13;
   */&#13;
  function newOrder(&#13;
    string filters,&#13;
    string dataRequest,&#13;
    uint256 price,&#13;
    uint256 initialBudgetForAudits,&#13;
    string termsAndConditions,&#13;
    string buyerURL,&#13;
    string publicKey&#13;
  ) public whenNotPaused returns (address) {&#13;
    require(initialBudgetForAudits &gt;= minimumInitialBudgetForAudits);&#13;
    require(token.allowance(msg.sender, this) &gt;= initialBudgetForAudits);&#13;
&#13;
    address newOrderAddr = new DataOrder(&#13;
      msg.sender,&#13;
      filters,&#13;
      dataRequest,&#13;
      price,&#13;
      termsAndConditions,&#13;
      buyerURL,&#13;
      publicKey&#13;
    );&#13;
&#13;
    token.transferFrom(msg.sender, this, initialBudgetForAudits);&#13;
    buyerRemainingBudgetForAudits[msg.sender][newOrderAddr] = initialBudgetForAudits;&#13;
&#13;
    ordersByBuyer[msg.sender].push(newOrderAddr);&#13;
    orders[newOrderAddr] = true;&#13;
&#13;
    emit NewOrder(newOrderAddr);&#13;
    return newOrderAddr;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Adds a notary to the Data Order.&#13;
   * @dev The `msg.sender` must be the buyer.&#13;
   * @param orderAddr Order Address to accept notarize.&#13;
   * @param notary Notary address.&#13;
   * @param responsesPercentage Percentage of `DataResponses` to audit per DataOrder.&#13;
   *        Value must be between 0 and 100.&#13;
   * @param notarizationFee Fee to be charged per validation done.&#13;
   * @param notarizationTermsOfService Notary's terms and conditions for the order.&#13;
   * @param notarySignature Notary's signature over the other arguments.&#13;
   * @return true if the Notary was added successfully, reverts otherwise.&#13;
   */&#13;
  function addNotaryToOrder(&#13;
    address orderAddr,&#13;
    address notary,&#13;
    uint256 responsesPercentage,&#13;
    uint256 notarizationFee,&#13;
    string notarizationTermsOfService,&#13;
    bytes notarySignature&#13;
  ) public whenNotPaused isOrderLegit(orderAddr) validAddress(notary) returns (bool) {&#13;
    DataOrder order = DataOrder(orderAddr);&#13;
    address buyer = order.buyer();&#13;
    require(msg.sender == buyer);&#13;
&#13;
    require(!order.hasNotaryBeenAdded(notary));&#13;
    require(allowedNotaries.exist(notary));&#13;
&#13;
    require(&#13;
      CryptoUtils.isNotaryAdditionValid(&#13;
        orderAddr,&#13;
        notary,&#13;
        responsesPercentage,&#13;
        notarizationFee,&#13;
        notarizationTermsOfService,&#13;
        notarySignature&#13;
      )&#13;
    );&#13;
&#13;
    bool okay = order.addNotary(&#13;
      notary,&#13;
      responsesPercentage,&#13;
      notarizationFee,&#13;
      notarizationTermsOfService&#13;
    );&#13;
&#13;
    if (okay) {&#13;
      openOrders.insert(orderAddr);&#13;
      ordersByNotary[notary].push(orderAddr);&#13;
      emit NotaryAddedToOrder(order, notary);&#13;
    }&#13;
    return okay;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Adds a new DataResponse to the given order.&#13;
   * @dev 1. The `msg.sender` must be the buyer of the order.&#13;
   *      2. The buyer must allow the DataExchange to withdraw the price of the&#13;
   *         order.&#13;
   * @param orderAddr Order address where the DataResponse must be added.&#13;
   * @param seller Address of the Seller.&#13;
   * @param notary Notary address that the Seller chose to use as notarizer,&#13;
   *        this must be one within the allowed notaries and within the&#13;
   *        DataOrder's notaries.&#13;
   * @param dataHash Hash of the data that must be sent, this is a SHA256.&#13;
   * @param signature Signature of DataResponse.&#13;
   * @return true if the DataResponse was set successfully, reverts otherwise.&#13;
   */&#13;
  function addDataResponseToOrder(&#13;
    address orderAddr,&#13;
    address seller,&#13;
    address notary,&#13;
    string dataHash,&#13;
    bytes signature&#13;
  ) public whenNotPaused isOrderLegit(orderAddr) returns (bool) {&#13;
    DataOrder order = DataOrder(orderAddr);&#13;
    address buyer = order.buyer();&#13;
    require(msg.sender == buyer);&#13;
    allDistinct(&#13;
      [&#13;
        orderAddr,&#13;
        buyer,&#13;
        seller,&#13;
        notary,&#13;
        address(this)&#13;
      ]&#13;
    );&#13;
    require(order.hasNotaryBeenAdded(notary));&#13;
&#13;
    require(&#13;
      CryptoUtils.isDataResponseValid(&#13;
        orderAddr,&#13;
        seller,&#13;
        notary,&#13;
        dataHash,&#13;
        signature&#13;
      )&#13;
    );&#13;
&#13;
    bool okay = order.addDataResponse(&#13;
      seller,&#13;
      notary,&#13;
      dataHash&#13;
    );&#13;
    require(okay);&#13;
&#13;
    chargeBuyer(order, seller);&#13;
&#13;
    ordersBySeller[seller].push(orderAddr);&#13;
    emit DataAdded(order, seller);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Closes a DataResponse.&#13;
   * @dev Once the buyer receives the seller's data and checks that it is valid&#13;
   *      or not, he must close the DataResponse signaling the result.&#13;
   *        1. This method requires an offline signature from the notary set in&#13;
   *           the DataResponse, which will indicate the audit result or if&#13;
   *           the data was not audited at all.&#13;
   *             - If the notary did not audit the data or it verifies that it was&#13;
   *               valid, funds will be sent to the Seller.&#13;
   *             - If the notary signals the data as invalid, funds will be&#13;
   *               handed back to the Buyer.&#13;
   *             - Otherwise, funds will be locked at the `DataExchange` contract&#13;
   *               until the issue is solved.&#13;
   *        2. This also works as a pause mechanism in case the system is&#13;
   *           working under abnormal scenarios while allowing the parties to keep&#13;
   *           exchanging information without losing their funds until the system&#13;
   *           is back up.&#13;
   *        3. The `msg.sender` must be the buyer or the notary in case the&#13;
   *           former does not show up. Only through the notary's signature it is&#13;
   *           decided who must receive the funds.&#13;
   * @param orderAddr Order address where the DataResponse belongs to.&#13;
   * @param seller Seller address.&#13;
   * @param wasAudited Indicates whether the data was audited or not.&#13;
   * @param isDataValid Indicates the result of the audit, if happened.&#13;
   * @param notarySignature Off-chain Notary signature&#13;
   * @return true if the DataResponse was successfully closed, reverts otherwise.&#13;
   */&#13;
  function closeDataResponse(&#13;
    address orderAddr,&#13;
    address seller,&#13;
    bool wasAudited,&#13;
    bool isDataValid,&#13;
    bytes notarySignature&#13;
  ) public whenNotPaused isOrderLegit(orderAddr) returns (bool) {&#13;
    DataOrder order = DataOrder(orderAddr);&#13;
    address buyer = order.buyer();&#13;
    require(order.hasSellerBeenAccepted(seller));&#13;
&#13;
    address notary = order.getNotaryForSeller(seller);&#13;
    require(msg.sender == buyer || msg.sender == notary);&#13;
    require(&#13;
      CryptoUtils.isNotaryVeredictValid(&#13;
        orderAddr,&#13;
        seller,&#13;
        notary,&#13;
        wasAudited,&#13;
        isDataValid,&#13;
        notarySignature&#13;
      )&#13;
    );&#13;
    bool transactionCompleted = !wasAudited || isDataValid;&#13;
    require(order.closeDataResponse(seller, transactionCompleted));&#13;
    payPlayers(&#13;
      order,&#13;
      buyer,&#13;
      seller,&#13;
      notary,&#13;
      wasAudited,&#13;
      isDataValid&#13;
    );&#13;
&#13;
    if (transactionCompleted) {&#13;
      emit TransactionCompleted(order, seller);&#13;
    } else {&#13;
      emit RefundedToBuyer(order, buyer);&#13;
    }&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Closes the DataOrder.&#13;
   * @dev Onces the data is closed it will no longer accept new DataResponses.&#13;
   *      The `msg.sender` must be the buyer of the order or the owner of the&#13;
   *      contract in a emergency case.&#13;
   * @param orderAddr Order address to close.&#13;
   * @return true if the DataOrder was successfully closed, reverts otherwise.&#13;
   */&#13;
  function closeOrder(&#13;
    address orderAddr&#13;
  ) public whenNotPaused isOrderLegit(orderAddr) returns (bool) {&#13;
    require(openOrders.exist(orderAddr));&#13;
    DataOrder order = DataOrder(orderAddr);&#13;
    address buyer = order.buyer();&#13;
    require(msg.sender == buyer || msg.sender == owner);&#13;
&#13;
    bool okay = order.close();&#13;
    if (okay) {&#13;
      // remaining budget for audits go back to buyer.&#13;
      uint256 remainingBudget = buyerRemainingBudgetForAudits[buyer][order];&#13;
      buyerRemainingBudgetForAudits[buyer][order] = 0;&#13;
      require(token.transfer(buyer, remainingBudget));&#13;
&#13;
      openOrders.remove(orderAddr);&#13;
      emit OrderClosed(orderAddr);&#13;
    }&#13;
&#13;
    return okay;&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Gets all the data orders associated with a notary.&#13;
   * @param notary Notary address to get orders for.&#13;
   * @return A list of DataOrder addresses.&#13;
   */&#13;
  function getOrdersForNotary(&#13;
    address notary&#13;
  ) public view validAddress(notary) returns (address[]) {&#13;
    return ordersByNotary[notary];&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Gets all the data orders associated with a seller.&#13;
   * @param seller Seller address to get orders for.&#13;
   * @return List of DataOrder addresses.&#13;
   */&#13;
  function getOrdersForSeller(&#13;
    address seller&#13;
  ) public view validAddress(seller) returns (address[]) {&#13;
    return ordersBySeller[seller];&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Gets all the data orders associated with a buyer.&#13;
   * @param buyer Buyer address to get orders for.&#13;
   * @return List of DataOrder addresses.&#13;
   */&#13;
  function getOrdersForBuyer(&#13;
    address buyer&#13;
  ) public view validAddress(buyer) returns (address[]) {&#13;
    return ordersByBuyer[buyer];&#13;
  }&#13;
&#13;
  /**&#13;
   * @notice Gets all the open data orders, that is all the DataOrders that are&#13;
   *         still receiving new DataResponses.&#13;
   * @return List of DataOrder addresses.&#13;
   */&#13;
  function getOpenOrders() public view returns (address[]) {&#13;
    return openOrders.addresses;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the list of allowed notaries.&#13;
   * @return List of notary addresses.&#13;
   */&#13;
  function getAllowedNotaries() public view returns (address[]) {&#13;
    return allowedNotaries.addresses;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets information about a give notary.&#13;
   * @param notary Notary address to get info for.&#13;
   * @return Notary information (address, name, notaryUrl, publicKey, isActive).&#13;
   */&#13;
  function getNotaryInfo(&#13;
    address notary&#13;
  ) public view validAddress(notary) returns (address, string, string, string, bool) {&#13;
    NotaryInfo memory info = notaryInfo[notary];&#13;
&#13;
    return (&#13;
      info.addr,&#13;
      info.name,&#13;
      info.notaryUrl,&#13;
      info.publicKey,&#13;
      allowedNotaries.exist(notary)&#13;
    );&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Requires that five addresses are distinct between themselves and zero.&#13;
   * @param addresses array of five addresses to explore.&#13;
   */&#13;
  function allDistinct(address[5] addresses) private pure {&#13;
    for (uint i = 0; i &lt; addresses.length; i++) {&#13;
      require(addresses[i] != address(0));&#13;
      for (uint j = i + 1; j &lt; addresses.length; j++) { // solium-disable-line zeppelin/no-arithmetic-operations&#13;
        require(addresses[i] != addresses[j]);&#13;
      }&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Charges a buyer the final charges for a given `DataResponse`.&#13;
   * @notice 1. Tokens are held in the DataExchange contract until players are paid.&#13;
   *         2. This function follows a basic invoice flow:&#13;
   *&#13;
   *               DataOrder price&#13;
   *            + Notarization fee&#13;
   *            ------------------&#13;
   *                 Total charges&#13;
   *            -  Prepaid charges (Minimum between Notarization fee and Buyer remaining budget)&#13;
   *            ------------------&#13;
   *                 Final charges&#13;
   *&#13;
   * @param order DataOrder to which the DataResponse applies.&#13;
   * @param seller Address of the Seller.&#13;
   */&#13;
  function chargeBuyer(DataOrder order, address seller) private whenNotPaused {&#13;
    address buyer = order.buyer();&#13;
    address notary = order.getNotaryForSeller(seller);&#13;
    uint256 remainingBudget = buyerRemainingBudgetForAudits[buyer][order];&#13;
&#13;
    uint256 orderPrice = order.price();&#13;
    (,, uint256 notarizationFee,,) = order.getNotaryInfo(notary);&#13;
    uint256 totalCharges = orderPrice.add(notarizationFee);&#13;
&#13;
    uint256 prePaid = Math.min256(notarizationFee, remainingBudget);&#13;
    uint256 finalCharges = totalCharges.sub(prePaid);&#13;
&#13;
    buyerRemainingBudgetForAudits[buyer][order] = remainingBudget.sub(prePaid);&#13;
    require(token.transferFrom(buyer, this, finalCharges));&#13;
&#13;
    // Bookkeeping of the available tokens paid by the Buyer and now in control&#13;
    // of the DataExchange takes into account the total charges (final + pre-paid)&#13;
    buyerBalance[buyer][order][seller] = buyerBalance[buyer][order][seller].add(totalCharges);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Pays the seller, notary and/or buyer according to the notary's veredict.&#13;
   * @param order DataOrder to which the payments apply.&#13;
   * @param buyer Address of the Buyer.&#13;
   * @param seller Address of the Seller.&#13;
   * @param notary Address of the Notary.&#13;
   * @param wasAudited Indicates whether the data was audited or not.&#13;
   * @param isDataValid Indicates the result of the audit, if happened.&#13;
   */&#13;
  function payPlayers(&#13;
    DataOrder order,&#13;
    address buyer,&#13;
    address seller,&#13;
    address notary,&#13;
    bool wasAudited,&#13;
    bool isDataValid&#13;
  ) private whenNotPaused {&#13;
    uint256 orderPrice = order.price();&#13;
    (,, uint256 notarizationFee,,) = order.getNotaryInfo(notary);&#13;
    uint256 totalCharges = orderPrice.add(notarizationFee);&#13;
&#13;
    require(buyerBalance[buyer][order][seller] &gt;= totalCharges);&#13;
    buyerBalance[buyer][order][seller] = buyerBalance[buyer][order][seller].sub(totalCharges);&#13;
&#13;
    // if no notarization was done, notarization fee tokens go back to buyer.&#13;
    address notarizationFeeReceiver = wasAudited ? notary : buyer;&#13;
&#13;
    // if no notarization was done or data is valid, tokens go to the seller&#13;
    address orderPriceReceiver = (!wasAudited || isDataValid) ? seller : buyer;&#13;
&#13;
    require(token.transfer(notarizationFeeReceiver, notarizationFee));&#13;
    require(token.transfer(orderPriceReceiver, orderPrice));&#13;
  }&#13;
&#13;
}
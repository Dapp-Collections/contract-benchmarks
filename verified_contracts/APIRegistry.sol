pragma solidity 0.4.24;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f094918695b0919b9f9d9291de939f9d">[emailÂ protected]</a>&#13;
// released under Apache 2.0 licence&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  function Ownable() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    OwnershipTransferred(owner, newOwner);&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender) public view returns (uint256);&#13;
  function transferFrom(address from, address to, uint256 value) public returns (bool);&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
contract APIRegistry is Ownable {&#13;
&#13;
    struct APIForSale {&#13;
        uint pricePerCall;&#13;
        bytes32 sellerUsername;&#13;
        bytes32 apiName;&#13;
        address sellerAddress;&#13;
        string hostname;&#13;
        string docsUrl;&#13;
    }&#13;
&#13;
    mapping(string =&gt; uint) internal apiIds;&#13;
    mapping(uint =&gt; APIForSale) public apis;&#13;
&#13;
    uint public numApis;&#13;
    uint public version;&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Constructor, establishes ownership because contract is owned&#13;
    // ------------------------------------------------------------------------&#13;
    constructor() public {&#13;
        numApis = 0;&#13;
        version = 1;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)&#13;
    // ------------------------------------------------------------------------&#13;
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {&#13;
        return ERC20(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Lets a user list an API to sell&#13;
    // ------------------------------------------------------------------------&#13;
    function listApi(uint pricePerCall, bytes32 sellerUsername, bytes32 apiName, string hostname, string docsUrl) public {&#13;
        // make sure input params are valid&#13;
        require(pricePerCall != 0 &amp;&amp; sellerUsername != "" &amp;&amp; apiName != "" &amp;&amp; bytes(hostname).length != 0);&#13;
        &#13;
        // make sure the name isn't already taken&#13;
        require(apiIds[hostname] == 0);&#13;
&#13;
        numApis += 1;&#13;
        apiIds[hostname] = numApis;&#13;
&#13;
        APIForSale storage api = apis[numApis];&#13;
&#13;
        api.pricePerCall = pricePerCall;&#13;
        api.sellerUsername = sellerUsername;&#13;
        api.apiName = apiName;&#13;
        api.sellerAddress = msg.sender;&#13;
        api.hostname = hostname;&#13;
        api.docsUrl = docsUrl;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Get the ID number of an API given it's hostname&#13;
    // ------------------------------------------------------------------------&#13;
    function getApiId(string hostname) public view returns (uint) {&#13;
        return apiIds[hostname];&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Get info stored for the API but without the dynamic members, because solidity can't return dynamics to other smart contracts yet&#13;
    // ------------------------------------------------------------------------&#13;
    function getApiByIdWithoutDynamics(&#13;
        uint apiId&#13;
    ) &#13;
        public&#13;
        view &#13;
        returns (&#13;
            uint pricePerCall, &#13;
            bytes32 sellerUsername,&#13;
            bytes32 apiName, &#13;
            address sellerAddress&#13;
        ) &#13;
    {&#13;
        APIForSale storage api = apis[apiId];&#13;
&#13;
        pricePerCall = api.pricePerCall;&#13;
        sellerUsername = api.sellerUsername;&#13;
        apiName = api.apiName;&#13;
        sellerAddress = api.sellerAddress;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Get info stored for an API by id&#13;
    // ------------------------------------------------------------------------&#13;
    function getApiById(&#13;
        uint apiId&#13;
    ) &#13;
        public &#13;
        view &#13;
        returns (&#13;
            uint pricePerCall, &#13;
            bytes32 sellerUsername, &#13;
            bytes32 apiName, &#13;
            address sellerAddress, &#13;
            string hostname, &#13;
            string docsUrl&#13;
        ) &#13;
    {&#13;
        APIForSale storage api = apis[apiId];&#13;
&#13;
        pricePerCall = api.pricePerCall;&#13;
        sellerUsername = api.sellerUsername;&#13;
        apiName = api.apiName;&#13;
        sellerAddress = api.sellerAddress;&#13;
        hostname = api.hostname;&#13;
        docsUrl = api.docsUrl;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Get info stored for an API by hostname&#13;
    // ------------------------------------------------------------------------&#13;
    function getApiByName(&#13;
        string _hostname&#13;
    ) &#13;
        public &#13;
        view &#13;
        returns (&#13;
            uint pricePerCall, &#13;
            bytes32 sellerUsername, &#13;
            bytes32 apiName, &#13;
            address sellerAddress, &#13;
            string hostname, &#13;
            string docsUrl&#13;
        ) &#13;
    {&#13;
        uint apiId = apiIds[_hostname];&#13;
        if (apiId == 0) {&#13;
            return;&#13;
        }&#13;
        APIForSale storage api = apis[apiId];&#13;
&#13;
        pricePerCall = api.pricePerCall;&#13;
        sellerUsername = api.sellerUsername;&#13;
        apiName = api.apiName;&#13;
        sellerAddress = api.sellerAddress;&#13;
        hostname = api.hostname;&#13;
        docsUrl = api.docsUrl;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Edit an API listing&#13;
    // ------------------------------------------------------------------------&#13;
    function editApi(uint apiId, uint pricePerCall, address sellerAddress, string docsUrl) public {&#13;
        require(apiId != 0 &amp;&amp; pricePerCall != 0 &amp;&amp; sellerAddress != address(0));&#13;
&#13;
        APIForSale storage api = apis[apiId];&#13;
&#13;
        // prevent editing an empty api (effectively listing an api)&#13;
        require(&#13;
            api.pricePerCall != 0 &amp;&amp; api.sellerUsername != "" &amp;&amp; api.apiName != "" &amp;&amp;  bytes(api.hostname).length != 0 &amp;&amp; api.sellerAddress != address(0)&#13;
        );&#13;
&#13;
        // require that sender is the original api lister, or the contract owner&#13;
        // the contract owner clause lets us recover a api listing if a dev loses access to their privkey&#13;
        require(msg.sender == api.sellerAddress || msg.sender == owner);&#13;
&#13;
        api.pricePerCall = pricePerCall;&#13;
        api.sellerAddress = sellerAddress;&#13;
        api.docsUrl = docsUrl;&#13;
    }&#13;
}
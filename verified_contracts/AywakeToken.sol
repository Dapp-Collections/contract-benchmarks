pragma solidity ^0.4.18;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="690d081f0c29080206040b08470a0604">[emailÂ protected]</a>&#13;
// released under Apache 2.0 licence&#13;
contract Controlled {&#13;
    /// @notice The address of the controller is the only address that can call&#13;
    ///  a function with this modifier&#13;
    modifier onlyController { require(msg.sender == controller); _; }&#13;
&#13;
    address public controller;&#13;
&#13;
    function Controlled() public { controller = msg.sender;}&#13;
&#13;
    /// @notice Changes the controller of the contract&#13;
    /// @param _newController The new controller of the contract&#13;
    function changeController(address _newController) public onlyController {&#13;
        controller = _newController;&#13;
    }&#13;
}&#13;
contract TokenController {&#13;
    /// @notice Called when `_owner` sends ether to the MiniMe Token contract&#13;
    /// @param _owner The address that sent the ether to create tokens&#13;
    /// @return True if the ether is accepted, false if it throws&#13;
    function proxyPayment(address _owner) public payable returns(bool);&#13;
&#13;
    /// @notice Notifies the controller about a token transfer allowing the&#13;
    ///  controller to react if desired&#13;
    /// @param _from The origin of the transfer&#13;
    /// @param _to The destination of the transfer&#13;
    /// @param _amount The amount of the transfer&#13;
    /// @return False if the controller does not authorize the transfer&#13;
    function onTransfer(address _from, address _to, uint _amount) public returns(bool);&#13;
&#13;
    /// @notice Notifies the controller about an approval allowing the&#13;
    ///  controller to react if desired&#13;
    /// @param _owner The address that calls `approve()`&#13;
    /// @param _spender The spender in the `approve()` call&#13;
    /// @param _amount The amount in the `approve()` call&#13;
    /// @return False if the controller does not authorize the approval&#13;
    function onApprove(address _owner, address _spender, uint _amount) public&#13;
        returns(bool);&#13;
}&#13;
library SafeMath {&#13;
  function mul(uint a, uint b) internal returns (uint) {&#13;
    uint c = a * b;&#13;
    assert(a == 0 || c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint a, uint b) internal returns (uint) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint a, uint b) internal returns (uint) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint a, uint b) internal returns (uint) {&#13;
    uint c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
&#13;
  function max64(uint64 a, uint64 b) internal constant returns (uint64) {&#13;
    return a &gt;= b ? a : b;&#13;
  }&#13;
&#13;
  function min64(uint64 a, uint64 b) internal constant returns (uint64) {&#13;
    return a &lt; b ? a : b;&#13;
  }&#13;
&#13;
  function max256(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    return a &gt;= b ? a : b;&#13;
  }&#13;
&#13;
  function min256(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    return a &lt; b ? a : b;&#13;
  }&#13;
&#13;
  function assert(bool assertion) internal {&#13;
    require (assertion);&#13;
  }&#13;
}&#13;
&#13;
contract ERC20Basic {&#13;
  function totalSupply() constant returns (uint);&#13;
  function balanceOf(address who) constant returns (uint);&#13;
  function transfer(address to, uint value) returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint value);&#13;
}&#13;
/*&#13;
 * ERC20 interface&#13;
 * see https://github.com/ethereum/EIPs/issues/20&#13;
 *&#13;
 * Slightly modified version of OpenZeppelin's ERC20&#13;
 * Original can be found ./orig/ERC20.sol or https://github.com/OpenZeppelin/zeppelin-solidity/blob/master/contracts/token/ERC20.sol&#13;
 * Modifications:&#13;
 * - Added doTransfer so it can be used in VestedToken with implmentation from MiniMe token&#13;
 *&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
&#13;
  mapping(address =&gt; uint) balances;&#13;
&#13;
  function allowance(address owner, address spender) constant returns (uint);&#13;
  function transferFrom(address from, address to, uint value) returns (bool);&#13;
  function approve(address spender, uint value) returns (bool);&#13;
  function approveAndCall(address spender, uint256 value, bytes extraData) returns (bool);&#13;
  event Approval(address indexed owner, address indexed spender, uint value);&#13;
&#13;
  function doTransfer(address _from, address _to, uint _amount) internal returns(bool);&#13;
}&#13;
&#13;
contract ApproveAndCallFallBack {&#13;
    function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;&#13;
}&#13;
&#13;
/// @dev The actual token contract, the default controller is the msg.sender&#13;
///  that deploys the contract, so usually this token will be deployed by a&#13;
///  token controller contract, which Giveth will call a "Campaign"&#13;
contract MiniMeToken is Controlled {&#13;
&#13;
    string public name;                //The Token's name: e.g. DigixDAO Tokens&#13;
    uint8 public decimals;             //Number of decimals of the smallest unit&#13;
    string public symbol;              //An identifier: e.g. REP&#13;
    string public version = 'MMT_0.2'; //An arbitrary versioning scheme&#13;
&#13;
&#13;
    /// @dev `Checkpoint` is the structure that attaches a block number to a&#13;
    ///  given value, the block number attached is the one that last changed the&#13;
    ///  value&#13;
    struct  Checkpoint {&#13;
&#13;
        // `fromBlock` is the block number that the value was generated from&#13;
        uint128 fromBlock;&#13;
&#13;
        // `value` is the amount of tokens at a specific block number&#13;
        uint128 value;&#13;
    }&#13;
&#13;
    // `parentToken` is the Token address that was cloned to produce this token;&#13;
    //  it will be 0x0 for a token that was not cloned&#13;
    MiniMeToken public parentToken;&#13;
&#13;
    // `parentSnapShotBlock` is the block number from the Parent Token that was&#13;
    //  used to determine the initial distribution of the Clone Token&#13;
    uint public parentSnapShotBlock;&#13;
&#13;
    // `creationBlock` is the block number that the Clone Token was created&#13;
    uint public creationBlock;&#13;
&#13;
    // `balances` is the map that tracks the balance of each address, in this&#13;
    //  contract when the balance changes the block number that the change&#13;
    //  occurred is also included in the map&#13;
    mapping (address =&gt; Checkpoint[]) balances;&#13;
&#13;
    // `allowed` tracks any extra transfer rights as in all ERC20 tokens&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
&#13;
    // Tracks the history of the `totalSupply` of the token&#13;
    Checkpoint[] totalSupplyHistory;&#13;
&#13;
    // Flag that determines if the token is transferable or not.&#13;
    bool public transfersEnabled;&#13;
&#13;
    // The factory used to create new clone tokens&#13;
    MiniMeTokenFactory public tokenFactory;&#13;
&#13;
////////////////&#13;
// Constructor&#13;
////////////////&#13;
&#13;
    /// @notice Constructor to create a MiniMeToken&#13;
    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that&#13;
    ///  will create the Clone token contracts, the token factory needs to be&#13;
    ///  deployed first&#13;
    /// @param _parentToken Address of the parent token, set to 0x0 if it is a&#13;
    ///  new token&#13;
    /// @param _parentSnapShotBlock Block of the parent token that will&#13;
    ///  determine the initial distribution of the clone token, set to 0 if it&#13;
    ///  is a new token&#13;
    /// @param _tokenName Name of the new token&#13;
    /// @param _decimalUnits Number of decimals of the new token&#13;
    /// @param _tokenSymbol Token Symbol for the new token&#13;
    /// @param _transfersEnabled If true, tokens will be able to be transferred&#13;
    function MiniMeToken(&#13;
        address _tokenFactory,&#13;
        address _parentToken,&#13;
        uint _parentSnapShotBlock,&#13;
        string _tokenName,&#13;
        uint8 _decimalUnits,&#13;
        string _tokenSymbol,&#13;
        bool _transfersEnabled&#13;
    ) public {&#13;
        tokenFactory = MiniMeTokenFactory(_tokenFactory);&#13;
        name = _tokenName;                                 // Set the name&#13;
        decimals = _decimalUnits;                          // Set the decimals&#13;
        symbol = _tokenSymbol;                             // Set the symbol&#13;
        parentToken = MiniMeToken(_parentToken);&#13;
        parentSnapShotBlock = _parentSnapShotBlock;&#13;
        transfersEnabled = _transfersEnabled;&#13;
        creationBlock = block.number;&#13;
    }&#13;
&#13;
&#13;
///////////////////&#13;
// ERC20 Methods&#13;
///////////////////&#13;
&#13;
    /// @notice Send `_amount` tokens to `_to` from `msg.sender`&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return Whether the transfer was successful or not&#13;
    function transfer(address _to, uint256 _amount) public returns (bool success) {&#13;
        require(transfersEnabled);&#13;
        doTransfer(msg.sender, _to, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it&#13;
    ///  is approved by `_from`&#13;
    /// @param _from The address holding the tokens being transferred&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return True if the transfer was successful&#13;
    function transferFrom(address _from, address _to, uint256 _amount&#13;
    ) public returns (bool success) {&#13;
&#13;
        // The controller of this contract can move tokens around at will,&#13;
        //  this is important to recognize! Confirm that you trust the&#13;
        //  controller of this contract, which in most situations should be&#13;
        //  another open source smart contract or 0x0&#13;
        if (msg.sender != controller) {&#13;
            require(transfersEnabled);&#13;
&#13;
            // The standard ERC 20 transferFrom functionality&#13;
            require(allowed[_from][msg.sender] &gt;= _amount);&#13;
            allowed[_from][msg.sender] -= _amount;&#13;
        }&#13;
        doTransfer(_from, _to, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev This is the actual transfer function in the token contract, it can&#13;
    ///  only be called by other functions in this contract.&#13;
    /// @param _from The address holding the tokens being transferred&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return True if the transfer was successful&#13;
    function doTransfer(address _from, address _to, uint _amount&#13;
    ) internal {&#13;
&#13;
           if (_amount == 0) {&#13;
               Transfer(_from, _to, _amount);    // Follow the spec to louch the event when transfer 0&#13;
               return;&#13;
           }&#13;
&#13;
           require(parentSnapShotBlock &lt; block.number);&#13;
&#13;
           // Do not allow transfer to 0x0 or the token contract itself&#13;
           require((_to != 0) &amp;&amp; (_to != address(this)));&#13;
&#13;
           // If the amount being transfered is more than the balance of the&#13;
           //  account the transfer throws&#13;
           var previousBalanceFrom = balanceOfAt(_from, block.number);&#13;
&#13;
           require(previousBalanceFrom &gt;= _amount);&#13;
&#13;
           // Alerts the token controller of the transfer&#13;
           if (isContract(controller)) {&#13;
               require(TokenController(controller).onTransfer(_from, _to, _amount));&#13;
           }&#13;
&#13;
           // First update the balance array with the new value for the address&#13;
           //  sending the tokens&#13;
           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);&#13;
&#13;
           // Then update the balance array with the new value for the address&#13;
           //  receiving the tokens&#13;
           var previousBalanceTo = balanceOfAt(_to, block.number);&#13;
           require(previousBalanceTo + _amount &gt;= previousBalanceTo); // Check for overflow&#13;
           updateValueAtNow(balances[_to], previousBalanceTo + _amount);&#13;
&#13;
           // An event to make the transfer easy to find on the blockchain&#13;
           Transfer(_from, _to, _amount);&#13;
&#13;
    }&#13;
&#13;
    /// @param _owner The address that's balance is being requested&#13;
    /// @return The balance of `_owner` at the current block&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance) {&#13;
        return balanceOfAt(_owner, block.number);&#13;
    }&#13;
&#13;
    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on&#13;
    ///  its behalf. This is a modified version of the ERC20 approve function&#13;
    ///  to be a little bit safer&#13;
    /// @param _spender The address of the account able to transfer the tokens&#13;
    /// @param _amount The amount of tokens to be approved for transfer&#13;
    /// @return True if the approval was successful&#13;
    function approve(address _spender, uint256 _amount) public returns (bool success) {&#13;
        require(transfersEnabled);&#13;
&#13;
        // To change the approve amount you first have to reduce the addresses`&#13;
        //  allowance to zero by calling `approve(_spender,0)` if it is not&#13;
        //  already 0 to mitigate the race condition described here:&#13;
        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));&#13;
&#13;
        // Alerts the token controller of the approve function call&#13;
        if (isContract(controller)) {&#13;
            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));&#13;
        }&#13;
&#13;
        allowed[msg.sender][_spender] = _amount;&#13;
        Approval(msg.sender, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev This function makes it easy to read the `allowed[]` map&#13;
    /// @param _owner The address of the account that owns the token&#13;
    /// @param _spender The address of the account able to transfer the tokens&#13;
    /// @return Amount of remaining tokens of _owner that _spender is allowed&#13;
    ///  to spend&#13;
    function allowance(address _owner, address _spender&#13;
    ) public constant returns (uint256 remaining) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on&#13;
    ///  its behalf, and then a function is triggered in the contract that is&#13;
    ///  being approved, `_spender`. This allows users to use their tokens to&#13;
    ///  interact with contracts in one function call instead of two&#13;
    /// @param _spender The address of the contract able to transfer the tokens&#13;
    /// @param _amount The amount of tokens to be approved for transfer&#13;
    /// @return True if the function call was successful&#13;
    function approveAndCall(address _spender, uint256 _amount, bytes _extraData&#13;
    ) public returns (bool success) {&#13;
        require(approve(_spender, _amount));&#13;
&#13;
        ApproveAndCallFallBack(_spender).receiveApproval(&#13;
            msg.sender,&#13;
            _amount,&#13;
            this,&#13;
            _extraData&#13;
        );&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev This function makes it easy to get the total number of tokens&#13;
    /// @return The total number of tokens&#13;
    function totalSupply() public constant returns (uint) {&#13;
        return totalSupplyAt(block.number);&#13;
    }&#13;
&#13;
&#13;
////////////////&#13;
// Query balance and totalSupply in History&#13;
////////////////&#13;
&#13;
    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`&#13;
    /// @param _owner The address from which the balance will be retrieved&#13;
    /// @param _blockNumber The block number when the balance is queried&#13;
    /// @return The balance at `_blockNumber`&#13;
    function balanceOfAt(address _owner, uint _blockNumber) public constant&#13;
        returns (uint) {&#13;
&#13;
        // These next few lines are used when the balance of the token is&#13;
        //  requested before a check point was ever created for this token, it&#13;
        //  requires that the `parentToken.balanceOfAt` be queried at the&#13;
        //  genesis block for that token as this contains initial balance of&#13;
        //  this token&#13;
        if ((balances[_owner].length == 0)&#13;
            || (balances[_owner][0].fromBlock &gt; _blockNumber)) {&#13;
            if (address(parentToken) != 0) {&#13;
                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));&#13;
            } else {&#13;
                // Has no parent&#13;
                return 0;&#13;
            }&#13;
&#13;
        // This will return the expected balance during normal situations&#13;
        } else {&#13;
            return getValueAt(balances[_owner], _blockNumber);&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Total amount of tokens at a specific `_blockNumber`.&#13;
    /// @param _blockNumber The block number when the totalSupply is queried&#13;
    /// @return The total amount of tokens at `_blockNumber`&#13;
    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {&#13;
&#13;
        // These next few lines are used when the totalSupply of the token is&#13;
        //  requested before a check point was ever created for this token, it&#13;
        //  requires that the `parentToken.totalSupplyAt` be queried at the&#13;
        //  genesis block for this token as that contains totalSupply of this&#13;
        //  token at this block number.&#13;
        if ((totalSupplyHistory.length == 0)&#13;
            || (totalSupplyHistory[0].fromBlock &gt; _blockNumber)) {&#13;
            if (address(parentToken) != 0) {&#13;
                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));&#13;
            } else {&#13;
                return 0;&#13;
            }&#13;
&#13;
        // This will return the expected totalSupply during normal situations&#13;
        } else {&#13;
            return getValueAt(totalSupplyHistory, _blockNumber);&#13;
        }&#13;
    }&#13;
&#13;
////////////////&#13;
// Clone Token Method&#13;
////////////////&#13;
&#13;
    /// @notice Creates a new clone token with the initial distribution being&#13;
    ///  this token at `_snapshotBlock`&#13;
    /// @param _cloneTokenName Name of the clone token&#13;
    /// @param _cloneDecimalUnits Number of decimals of the smallest unit&#13;
    /// @param _cloneTokenSymbol Symbol of the clone token&#13;
    /// @param _snapshotBlock Block when the distribution of the parent token is&#13;
    ///  copied to set the initial distribution of the new clone token;&#13;
    ///  if the block is zero than the actual block, the current block is used&#13;
    /// @param _transfersEnabled True if transfers are allowed in the clone&#13;
    /// @return The address of the new MiniMeToken Contract&#13;
    function createCloneToken(&#13;
        string _cloneTokenName,&#13;
        uint8 _cloneDecimalUnits,&#13;
        string _cloneTokenSymbol,&#13;
        uint _snapshotBlock,&#13;
        bool _transfersEnabled&#13;
        ) public returns(address) {&#13;
        if (_snapshotBlock == 0) _snapshotBlock = block.number;&#13;
        MiniMeToken cloneToken = tokenFactory.createCloneToken(&#13;
            this,&#13;
            _snapshotBlock,&#13;
            _cloneTokenName,&#13;
            _cloneDecimalUnits,&#13;
            _cloneTokenSymbol,&#13;
            _transfersEnabled&#13;
            );&#13;
&#13;
        cloneToken.changeController(msg.sender);&#13;
&#13;
        // An event to make the token easy to find on the blockchain&#13;
        NewCloneToken(address(cloneToken), _snapshotBlock);&#13;
        return address(cloneToken);&#13;
    }&#13;
&#13;
////////////////&#13;
// Generate and destroy tokens&#13;
////////////////&#13;
&#13;
    /// @notice Generates `_amount` tokens that are assigned to `_owner`&#13;
    /// @param _owner The address that will be assigned the new tokens&#13;
    /// @param _amount The quantity of tokens generated&#13;
    /// @return True if the tokens are generated correctly&#13;
    function generateTokens(address _owner, uint _amount&#13;
    ) public onlyController returns (bool) {&#13;
        uint curTotalSupply = totalSupply();&#13;
        require(curTotalSupply + _amount &gt;= curTotalSupply); // Check for overflow&#13;
        uint previousBalanceTo = balanceOf(_owner);&#13;
        require(previousBalanceTo + _amount &gt;= previousBalanceTo); // Check for overflow&#13;
        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);&#13;
        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);&#13;
        Transfer(0, _owner, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    /// @notice Burns `_amount` tokens from `_owner`&#13;
    /// @param _owner The address that will lose the tokens&#13;
    /// @param _amount The quantity of tokens to burn&#13;
    /// @return True if the tokens are burned correctly&#13;
    function destroyTokens(address _owner, uint _amount&#13;
    ) onlyController public returns (bool) {&#13;
        uint curTotalSupply = totalSupply();&#13;
        require(curTotalSupply &gt;= _amount);&#13;
        uint previousBalanceFrom = balanceOf(_owner);&#13;
        require(previousBalanceFrom &gt;= _amount);&#13;
        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);&#13;
        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);&#13;
        Transfer(_owner, 0, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
////////////////&#13;
// Enable tokens transfers&#13;
////////////////&#13;
&#13;
&#13;
    /// @notice Enables token holders to transfer their tokens freely if true&#13;
    /// @param _transfersEnabled True if transfers are allowed in the clone&#13;
    function enableTransfers(bool _transfersEnabled) public onlyController {&#13;
        transfersEnabled = _transfersEnabled;&#13;
    }&#13;
&#13;
////////////////&#13;
// Internal helper functions to query and set a value in a snapshot array&#13;
////////////////&#13;
&#13;
    /// @dev `getValueAt` retrieves the number of tokens at a given block number&#13;
    /// @param checkpoints The history of values being queried&#13;
    /// @param _block The block number to retrieve the value at&#13;
    /// @return The number of tokens being queried&#13;
    function getValueAt(Checkpoint[] storage checkpoints, uint _block&#13;
    ) constant internal returns (uint) {&#13;
        if (checkpoints.length == 0) return 0;&#13;
&#13;
        // Shortcut for the actual value&#13;
        if (_block &gt;= checkpoints[checkpoints.length-1].fromBlock)&#13;
            return checkpoints[checkpoints.length-1].value;&#13;
        if (_block &lt; checkpoints[0].fromBlock) return 0;&#13;
&#13;
        // Binary search of the value in the array&#13;
        uint min = 0;&#13;
        uint max = checkpoints.length-1;&#13;
        while (max &gt; min) {&#13;
            uint mid = (max + min + 1)/ 2;&#13;
            if (checkpoints[mid].fromBlock&lt;=_block) {&#13;
                min = mid;&#13;
            } else {&#13;
                max = mid-1;&#13;
            }&#13;
        }&#13;
        return checkpoints[min].value;&#13;
    }&#13;
&#13;
    /// @dev `updateValueAtNow` used to update the `balances` map and the&#13;
    ///  `totalSupplyHistory`&#13;
    /// @param checkpoints The history of data being updated&#13;
    /// @param _value The new number of tokens&#13;
    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value&#13;
    ) internal  {&#13;
        if ((checkpoints.length == 0)&#13;
        || (checkpoints[checkpoints.length -1].fromBlock &lt; block.number)) {&#13;
               Checkpoint storage newCheckPoint = checkpoints[ checkpoints.length++ ];&#13;
               newCheckPoint.fromBlock =  uint128(block.number);&#13;
               newCheckPoint.value = uint128(_value);&#13;
           } else {&#13;
               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];&#13;
               oldCheckPoint.value = uint128(_value);&#13;
           }&#13;
    }&#13;
&#13;
    /// @dev Internal function to determine if an address is a contract&#13;
    /// @param _addr The address being queried&#13;
    /// @return True if `_addr` is a contract&#13;
    function isContract(address _addr) constant internal returns(bool) {&#13;
        uint size;&#13;
        if (_addr == 0) return false;&#13;
        assembly {&#13;
            size := extcodesize(_addr)&#13;
        }&#13;
        return size&gt;0;&#13;
    }&#13;
&#13;
    /// @dev Helper function to return a min betwen the two uints&#13;
    function min(uint a, uint b) pure internal returns (uint) {&#13;
        return a &lt; b ? a : b;&#13;
    }&#13;
&#13;
    /// @notice The fallback function: If the contract's controller has not been&#13;
    ///  set to 0, then the `proxyPayment` method is called which relays the&#13;
    ///  ether and creates tokens as described in the token controller contract&#13;
    function () public payable {&#13;
        require(isContract(controller));&#13;
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));&#13;
    }&#13;
&#13;
//////////&#13;
// Safety Methods&#13;
//////////&#13;
&#13;
    /// @notice This method can be used by the controller to extract mistakenly&#13;
    ///  sent tokens to this contract.&#13;
    /// @param _token The address of the token contract that you want to recover&#13;
    ///  set to 0 in case you want to extract ether.&#13;
    function claimTokens(address _token) public onlyController {&#13;
        if (_token == 0x0) {&#13;
            controller.transfer(this.balance);&#13;
            return;&#13;
        }&#13;
&#13;
        MiniMeToken token = MiniMeToken(_token);&#13;
        uint balance = token.balanceOf(this);&#13;
        token.transfer(controller, balance);&#13;
        ClaimedTokens(_token, controller, balance);&#13;
    }&#13;
&#13;
////////////////&#13;
// Events&#13;
////////////////&#13;
    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _amount);&#13;
    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);&#13;
    event Approval(&#13;
        address indexed _owner,&#13;
        address indexed _spender,&#13;
        uint256 _amount&#13;
        );&#13;
&#13;
}&#13;
&#13;
&#13;
////////////////&#13;
// MiniMeTokenFactory&#13;
////////////////&#13;
&#13;
/// @dev This contract is used to generate clone contracts from a contract.&#13;
///  In solidity this is the way to create a contract from a contract of the&#13;
///  same class&#13;
contract MiniMeTokenFactory {&#13;
&#13;
    /// @notice Update the DApp by creating a new token with new functionalities&#13;
    ///  the msg.sender becomes the controller of this clone token&#13;
    /// @param _parentToken Address of the token being cloned&#13;
    /// @param _snapshotBlock Block of the parent token that will&#13;
    ///  determine the initial distribution of the clone token&#13;
    /// @param _tokenName Name of the new token&#13;
    /// @param _decimalUnits Number of decimals of the new token&#13;
    /// @param _tokenSymbol Token Symbol for the new token&#13;
    /// @param _transfersEnabled If true, tokens will be able to be transferred&#13;
    /// @return The address of the new token contract&#13;
    function createCloneToken(&#13;
        address _parentToken,&#13;
        uint _snapshotBlock,&#13;
        string _tokenName,&#13;
        uint8 _decimalUnits,&#13;
        string _tokenSymbol,&#13;
        bool _transfersEnabled&#13;
    ) public returns (MiniMeToken) {&#13;
        MiniMeToken newToken = new MiniMeToken(&#13;
            this,&#13;
            _parentToken,&#13;
            _snapshotBlock,&#13;
            _tokenName,&#13;
            _decimalUnits,&#13;
            _tokenSymbol,&#13;
            _transfersEnabled&#13;
            );&#13;
&#13;
        newToken.changeController(msg.sender);&#13;
        return newToken;&#13;
    }&#13;
}&#13;
contract LimitedTransferToken is ERC20 {&#13;
  // Checks whether it can transfer or otherwise throws.&#13;
  modifier canTransfer(address _sender, uint _value) {&#13;
   require(_value &lt; transferableTokens(_sender, uint64(now)));&#13;
   _;&#13;
  }&#13;
&#13;
  // Checks modifier and allows transfer if tokens are not locked.&#13;
  function transfer(address _to, uint _value) canTransfer(msg.sender, _value) returns (bool) {&#13;
   return super.transfer(_to, _value);&#13;
  }&#13;
&#13;
  // Checks modifier and allows transfer if tokens are not locked.&#13;
  function transferFrom(address _from, address _to, uint _value) canTransfer(_from, _value) returns (bool) {&#13;
   return super.transferFrom(_from, _to, _value);&#13;
  }&#13;
&#13;
  // Default transferable tokens function returns all tokens for a holder (no limit).&#13;
  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {&#13;
    return balanceOf(holder);&#13;
  }&#13;
}&#13;
&#13;
contract VestedToken is LimitedTransferToken, Controlled {&#13;
  using SafeMath for uint;&#13;
&#13;
  uint256 MAX_GRANTS_PER_ADDRESS = 20;&#13;
&#13;
  struct TokenGrant {&#13;
    address granter;     // 20 bytes&#13;
    uint256 value;       // 32 bytes&#13;
    uint64 cliff;&#13;
    uint64 vesting;&#13;
    uint64 start;        // 3 * 8 = 24 bytes&#13;
    bool revokable;&#13;
    bool burnsOnRevoke;  // 2 * 1 = 2 bits? or 2 bytes?&#13;
  } // total 78 bytes = 3 sstore per operation (32 per sstore)&#13;
&#13;
  mapping (address =&gt; TokenGrant[]) public grants;&#13;
&#13;
  event NewTokenGrant(address indexed from, address indexed to, uint256 value, uint256 grantId);&#13;
&#13;
  /**&#13;
   * @dev Grant tokens to a specified address&#13;
   * @param _to address The address which the tokens will be granted to.&#13;
   * @param _value uint256 The amount of tokens to be granted.&#13;
   * @param _start uint64 Time of the beginning of the grant.&#13;
   * @param _cliff uint64 Time of the cliff period.&#13;
   * @param _vesting uint64 The vesting period.&#13;
   */&#13;
  function grantVestedTokens(&#13;
    address _to,&#13;
    uint256 _value,&#13;
    uint64 _start,&#13;
    uint64 _cliff,&#13;
    uint64 _vesting,&#13;
    bool _revokable,&#13;
    bool _burnsOnRevoke&#13;
  ) onlyController public {&#13;
&#13;
    // Check for date inconsistencies that may cause unexpected behavior&#13;
    require(_cliff &gt; _start &amp;&amp; _vesting &gt; _cliff);&#13;
&#13;
    require(tokenGrantsCount(_to) &lt; MAX_GRANTS_PER_ADDRESS);   // To prevent a user being spammed and have his balance locked (out of gas attack when calculating vesting).&#13;
&#13;
    uint count = grants[_to].push(&#13;
                TokenGrant(&#13;
                  _revokable ? msg.sender : 0, // avoid storing an extra 20 bytes when it is non-revokable&#13;
                  _value,&#13;
                  _cliff,&#13;
                  _vesting,&#13;
                  _start,&#13;
                  _revokable,&#13;
                  _burnsOnRevoke&#13;
                )&#13;
              );&#13;
&#13;
    transfer(_to, _value);&#13;
&#13;
    NewTokenGrant(msg.sender, _to, _value, count - 1);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Revoke the grant of tokens of a specifed address.&#13;
   * @param _holder The address which will have its tokens revoked.&#13;
   * @param _grantId The id of the token grant.&#13;
   */&#13;
  function revokeTokenGrant(address _holder, uint _grantId) public {&#13;
    TokenGrant storage grant = grants[_holder][_grantId];&#13;
&#13;
    require(grant.revokable); // Check if grant was revokable&#13;
    require(grant.granter == msg.sender); // Only granter can revoke it&#13;
    require(_grantId &gt;= grants[_holder].length);&#13;
&#13;
    address receiver = grant.burnsOnRevoke ? 0xdead : msg.sender;&#13;
&#13;
    uint256 nonVested = nonVestedTokens(grant, uint64(now));&#13;
&#13;
    // remove grant from array&#13;
    delete grants[_holder][_grantId];&#13;
    grants[_holder][_grantId] = grants[_holder][grants[_holder].length - 1];&#13;
    grants[_holder].length -= 1;&#13;
&#13;
    // This will call MiniMe's doTransfer method, so token is transferred according to&#13;
    // MiniMe Token logic&#13;
    doTransfer(_holder, receiver, nonVested);&#13;
&#13;
    Transfer(_holder, receiver, nonVested);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Revoke all grants of tokens of a specifed address.&#13;
   * @param _holder The address which will have its tokens revoked.&#13;
   */&#13;
    function revokeAllTokenGrants(address _holder) {&#13;
        var grantsCount = tokenGrantsCount(_holder);&#13;
        for (uint i = 0; i &lt; grantsCount; i++) {&#13;
          revokeTokenGrant(_holder, 0);&#13;
        }&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Calculate the total amount of transferable tokens of a holder at a given time&#13;
   * @param holder address The address of the holder&#13;
   * @param time uint64 The specific time.&#13;
   * @return An uint representing a holder's total amount of transferable tokens.&#13;
   */&#13;
  function transferableTokens(address holder, uint64 time) constant public returns (uint256) {&#13;
    uint256 grantIndex = tokenGrantsCount(holder);&#13;
&#13;
    if (grantIndex == 0) return balanceOf(holder); // shortcut for holder without grants&#13;
&#13;
    // Iterate through all the grants the holder has, and add all non-vested tokens&#13;
    uint256 nonVested = 0;&#13;
    for (uint256 i = 0; i &lt; grantIndex; i++) {&#13;
      nonVested = SafeMath.add(nonVested, nonVestedTokens(grants[holder][i], time));&#13;
    }&#13;
&#13;
    // Balance - totalNonVested is the amount of tokens a holder can transfer at any given time&#13;
    uint256 vestedTransferable = SafeMath.sub(balanceOf(holder), nonVested);&#13;
&#13;
    // Return the minimum of how many vested can transfer and other value&#13;
    // in case there are other limiting transferability factors (default is balanceOf)&#13;
    return SafeMath.min256(vestedTransferable, super.transferableTokens(holder, time));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Check the amount of grants that an address has.&#13;
   * @param _holder The holder of the grants.&#13;
   * @return A uint representing the total amount of grants.&#13;
   */&#13;
  function tokenGrantsCount(address _holder) constant returns (uint index) {&#13;
    return grants[_holder].length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Calculate amount of vested tokens at a specifc time.&#13;
   * @param tokens uint256 The amount of tokens grantted.&#13;
   * @param time uint64 The time to be checked&#13;
   * @param start uint64 A time representing the begining of the grant&#13;
   * @param cliff uint64 The cliff period.&#13;
   * @param vesting uint64 The vesting period.&#13;
   * @return An uint representing the amount of vested tokensof a specif grant.&#13;
   *  transferableTokens&#13;
   *   |                         _/--------   vestedTokens rect&#13;
   *   |                       _/&#13;
   *   |                     _/&#13;
   *   |                   _/&#13;
   *   |                 _/&#13;
   *   |                /&#13;
   *   |              .|&#13;
   *   |            .  |&#13;
   *   |          .    |&#13;
   *   |        .      |&#13;
   *   |      .        |&#13;
   *   |    .          |&#13;
   *   +===+===========+---------+----------&gt; time&#13;
   *      Start       Clift    Vesting&#13;
   */&#13;
  function calculateVestedTokens(&#13;
    uint256 tokens,&#13;
    uint256 time,&#13;
    uint256 start,&#13;
    uint256 cliff,&#13;
    uint256 vesting) constant returns (uint256)&#13;
    {&#13;
      // Shortcuts for before cliff and after vesting cases.&#13;
      if (time &lt; cliff) return 0;&#13;
      if (time &gt;= vesting) return tokens;&#13;
&#13;
      // Interpolate all vested tokens.&#13;
      // As before cliff the shortcut returns 0, we can use just calculate a value&#13;
      // in the vesting rect (as shown in above's figure)&#13;
&#13;
      // vestedTokens = tokens * (time - start) / (vesting - start)&#13;
      uint256 vestedTokens = SafeMath.div(&#13;
                                    SafeMath.mul(&#13;
                                      tokens,&#13;
                                      SafeMath.sub(time, start)&#13;
                                      ),&#13;
                                    SafeMath.sub(vesting, start)&#13;
                                    );&#13;
&#13;
      return vestedTokens;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Get all information about a specifc grant.&#13;
   * @param _holder The address which will have its tokens revoked.&#13;
   * @param _grantId The id of the token grant.&#13;
   * @return Returns all the values that represent a TokenGrant(address, value, start, cliff,&#13;
   * revokability, burnsOnRevoke, and vesting) plus the vested value at the current time.&#13;
   */&#13;
  function tokenGrant(address _holder, uint _grantId) constant returns (address granter, uint256 value, uint256 vested, uint64 start, uint64 cliff, uint64 vesting, bool revokable, bool burnsOnRevoke) {&#13;
    TokenGrant storage grant = grants[_holder][_grantId];&#13;
&#13;
    granter = grant.granter;&#13;
    value = grant.value;&#13;
    start = grant.start;&#13;
    cliff = grant.cliff;&#13;
    vesting = grant.vesting;&#13;
    revokable = grant.revokable;&#13;
    burnsOnRevoke = grant.burnsOnRevoke;&#13;
&#13;
    vested = vestedTokens(grant, uint64(now));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Get the amount of vested tokens at a specific time.&#13;
   * @param grant TokenGrant The grant to be checked.&#13;
   * @param time The time to be checked&#13;
   * @return An uint representing the amount of vested tokens of a specific grant at a specific time.&#13;
   */&#13;
  function vestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {&#13;
    return calculateVestedTokens(&#13;
      grant.value,&#13;
      uint256(time),&#13;
      uint256(grant.start),&#13;
      uint256(grant.cliff),&#13;
      uint256(grant.vesting)&#13;
    );&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Calculate the amount of non vested tokens at a specific time.&#13;
   * @param grant TokenGrant The grant to be checked.&#13;
   * @param time uint64 The time to be checked&#13;
   * @return An uint representing the amount of non vested tokens of a specifc grant on the&#13;
   * passed time frame.&#13;
   */&#13;
  function nonVestedTokens(TokenGrant grant, uint64 time) private constant returns (uint256) {&#13;
    return grant.value.sub(vestedTokens(grant, time));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Calculate the date when the holder can trasfer all its tokens&#13;
   * @param holder address The address of the holder&#13;
   * @return An uint representing the date of the last transferable tokens.&#13;
   */&#13;
  function lastTokenIsTransferableDate(address holder) constant public returns (uint64 date) {&#13;
    date = uint64(now);&#13;
    uint256 grantIndex = grants[holder].length;&#13;
    for (uint256 i = 0; i &lt; grantIndex; i++) {&#13;
      date = SafeMath.max64(grants[holder][i].vesting, date);&#13;
    }&#13;
  }&#13;
}&#13;
&#13;
contract AywakeToken is MiniMeToken {&#13;
     function AywakeToken (address _controller, address _tokenFactory)&#13;
        MiniMeToken(&#13;
            _tokenFactory,&#13;
            0x0,                        // no parent token&#13;
            0,                          // no snapshot block number from parent&#13;
            "AywakeToken",              // Token name&#13;
            18,                         // Decimals&#13;
            "AWK",                      // Symbol&#13;
            true                        // Enable transfers&#13;
            )&#13;
    {&#13;
        changeController(_controller);&#13;
    }&#13;
}
pragma solidity 0.4.17;

/*

 * source       https://github.com/blockbitsio/

 * @name        Application Asset Contract ABI
 * @package     BlockBitsIO
 * @author      Micky Socaci <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="05686c666e7c456b6a72696c73602b776a">[email protected]</a>&gt;&#13;
&#13;
 Any contract inheriting this will be usable as an Asset in the Application Entity&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
contract ABIApplicationAsset {&#13;
&#13;
    bytes32 public assetName;&#13;
    uint8 public CurrentEntityState;&#13;
    uint8 public RecordNum;&#13;
    bool public _initialized;&#13;
    bool public _settingsApplied;&#13;
    address public owner;&#13;
    address public deployerAddress;&#13;
    mapping (bytes32 =&gt; uint8) public EntityStates;&#13;
    mapping (bytes32 =&gt; uint8) public RecordStates;&#13;
&#13;
    function setInitialApplicationAddress(address _ownerAddress) public;&#13;
    function setInitialOwnerAndName(bytes32 _name) external returns (bool);&#13;
    function getRecordState(bytes32 name) public view returns (uint8);&#13;
    function getEntityState(bytes32 name) public view returns (uint8);&#13;
    function applyAndLockSettings() public returns(bool);&#13;
    function transferToNewOwner(address _newOwner) public returns (bool);&#13;
    function getApplicationAssetAddressByName(bytes32 _name) public returns(address);&#13;
    function getApplicationState() public view returns (uint8);&#13;
    function getApplicationEntityState(bytes32 name) public view returns (uint8);&#13;
    function getAppBylawUint256(bytes32 name) public view returns (uint256);&#13;
    function getAppBylawBytes32(bytes32 name) public view returns (bytes32);&#13;
    function getTimestamp() view public returns (uint256);&#13;
&#13;
&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
&#13;
 * @name        Funding Contract ABI&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ff92969c9486bf9190889396899ad18d90">[email protected]</a>&gt;&#13;
&#13;
 Contains the Funding Contract code deployed and linked to the Application Entity&#13;
&#13;
&#13;
    !!! Links directly to Milestones&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
contract ABIFunding is ABIApplicationAsset {&#13;
&#13;
    address public multiSigOutputAddress;&#13;
    address public DirectInput;&#13;
    address public MilestoneInput;&#13;
    address public TokenManagerEntity;&#13;
    address public FundingManagerEntity;&#13;
&#13;
    struct FundingStage {&#13;
        bytes32 name;&#13;
        uint8   state;&#13;
        uint256 time_start;&#13;
        uint256 time_end;&#13;
        uint256 amount_cap_soft;            // 0 = not enforced&#13;
        uint256 amount_cap_hard;            // 0 = not enforced&#13;
        uint256 amount_raised;              // 0 = not enforced&#13;
        // funding method settings&#13;
        uint256 minimum_entry;&#13;
        uint8   methods;                    // FundingMethodIds&#13;
        // token settings&#13;
        uint256 fixed_tokens;&#13;
        uint8   price_addition_percentage;  //&#13;
        uint8   token_share_percentage;&#13;
        uint8   index;&#13;
    }&#13;
&#13;
    mapping (uint8 =&gt; FundingStage) public Collection;&#13;
    uint8 public FundingStageNum;&#13;
    uint8 public currentFundingStage;&#13;
    uint256 public AmountRaised;&#13;
    uint256 public MilestoneAmountRaised;&#13;
    uint256 public GlobalAmountCapSoft;&#13;
    uint256 public GlobalAmountCapHard;&#13;
    uint8 public TokenSellPercentage;&#13;
    uint256 public Funding_Setting_funding_time_start;&#13;
    uint256 public Funding_Setting_funding_time_end;&#13;
    uint256 public Funding_Setting_cashback_time_start;&#13;
    uint256 public Funding_Setting_cashback_time_end;&#13;
    uint256 public Funding_Setting_cashback_before_start_wait_duration;&#13;
    uint256 public Funding_Setting_cashback_duration;&#13;
&#13;
&#13;
    function addFundingStage(&#13;
        bytes32 _name,&#13;
        uint256 _time_start,&#13;
        uint256 _time_end,&#13;
        uint256 _amount_cap_soft,&#13;
        uint256 _amount_cap_hard,   // required &gt; 0&#13;
        uint8   _methods,&#13;
        uint256 _minimum_entry,&#13;
        uint256 _fixed_tokens,&#13;
        uint8   _price_addition_percentage,&#13;
        uint8   _token_share_percentage&#13;
    )&#13;
    public;&#13;
&#13;
    function addSettings(address _outputAddress, uint256 soft_cap, uint256 hard_cap, uint8 sale_percentage, address _direct, address _milestone ) public;&#13;
    function getStageAmount(uint8 StageId) public view returns ( uint256 );&#13;
    function allowedPaymentMethod(uint8 _payment_method) public pure returns (bool);&#13;
    function receivePayment(address _sender, uint8 _payment_method) payable public returns(bool);&#13;
    function canAcceptPayment(uint256 _amount) public view returns (bool);&#13;
    function getValueOverCurrentCap(uint256 _amount) public view returns (uint256);&#13;
    function isFundingStageUpdateAllowed(uint8 _new_state ) public view returns (bool);&#13;
    function getRecordStateRequiredChanges() public view returns (uint8);&#13;
    function doStateChanges() public;&#13;
    function hasRequiredStateChanges() public view returns (bool);&#13;
    function getRequiredStateChanges() public view returns (uint8, uint8, uint8);&#13;
&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
&#13;
 * @name        Funding Vault ABI&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2b46424840526b45445c47425d4e055944">[email protected]</a>&gt;&#13;
&#13;
 each purchase creates a separate funding vault contract&#13;
&#13;
*/&#13;
&#13;
&#13;
contract ABIFundingVault {&#13;
&#13;
    bool public _initialized;&#13;
    address public vaultOwner;&#13;
    address public outputAddress;&#13;
    address public managerAddress;&#13;
    bool public allFundingProcessed;&#13;
    bool public DirectFundingProcessed;&#13;
    uint256 public amount_direct;&#13;
    uint256 public amount_milestone;&#13;
    bool public emergencyFundReleased;&#13;
&#13;
    struct PurchaseStruct {&#13;
        uint256 unix_time;&#13;
        uint8 payment_method;&#13;
        uint256 amount;&#13;
        uint8 funding_stage;&#13;
        uint16 index;&#13;
    }&#13;
&#13;
    bool public BalancesInitialised;&#13;
    uint8 public BalanceNum;&#13;
    uint16 public purchaseRecordsNum;&#13;
    mapping(uint16 =&gt; PurchaseStruct) public purchaseRecords;&#13;
    mapping (uint8 =&gt; uint256) public stageAmounts;&#13;
    mapping (uint8 =&gt; uint256) public stageAmountsDirect;&#13;
    mapping (uint8 =&gt; uint256) public etherBalances;&#13;
    mapping (uint8 =&gt; uint256) public tokenBalances;&#13;
&#13;
    function initialize( address _owner, address _output, address _fundingAddress, address _milestoneAddress, address _proposalsAddress ) public returns(bool);&#13;
    function addPayment(uint8 _payment_method, uint8 _funding_stage ) public payable returns (bool);&#13;
    function getBoughtTokens() public view returns (uint256);&#13;
    function getDirectBoughtTokens() public view returns (uint256);&#13;
    function ReleaseFundsAndTokens() public returns (bool);&#13;
    function releaseTokensAndEtherForEmergencyFund() public returns (bool);&#13;
    function ReleaseFundsToInvestor() public;&#13;
    function canCashBack() public view returns (bool);&#13;
    function checkFundingStateFailed() public view returns (bool);&#13;
    function checkMilestoneStateInvestorVotedNoVotingEndedNo() public view returns (bool);&#13;
    function checkOwnerFailedToSetTimeOnMeeting() public view returns (bool);&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
 * @name        Token Stake Calculation And Distribution Algorithm - Type 3 - Sell a variable amount of tokens for a fixed price&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9df0f4fef6e4ddf3f2eaf1f4ebf8b3eff2">[email protected]</a>&gt;&#13;
&#13;
&#13;
    Inputs:&#13;
&#13;
    Defined number of tokens per wei ( X Tokens = 1 wei )&#13;
    Received amount of ETH&#13;
    Generates:&#13;
&#13;
    Total Supply of tokens available in Funding Phase respectively Project&#13;
    Observations:&#13;
&#13;
    Will sell the whole supply of Tokens available to Current Funding Phase&#13;
    Use cases:&#13;
&#13;
    Any Funding Phase where you want the first Funding Phase to determine the token supply of the whole Project&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
contract TokenSCADAVariable {&#13;
&#13;
    ABIFunding FundingEntity;&#13;
&#13;
    bool public SCADA_requires_hard_cap = true;&#13;
    bool public initialized = false;&#13;
    address public deployerAddress;&#13;
&#13;
    function TokenSCADAVariable() public {&#13;
        deployerAddress = msg.sender;&#13;
    }&#13;
&#13;
    function addSettings(address _fundingContract) onlyDeployer public {&#13;
        require(initialized == false);&#13;
        FundingEntity = ABIFunding(_fundingContract);&#13;
        initialized = true;&#13;
    }&#13;
&#13;
    function requiresHardCap() public view returns (bool) {&#13;
        return SCADA_requires_hard_cap;&#13;
    }&#13;
&#13;
    function getTokensForValueInCurrentStage(uint256 _value) public view returns (uint256) {&#13;
        return getTokensForValueInStage(FundingEntity.currentFundingStage(), _value);&#13;
    }&#13;
&#13;
    function getTokensForValueInStage(uint8 _stage, uint256 _value) public view returns (uint256) {&#13;
        uint256 amount = FundingEntity.getStageAmount(_stage);&#13;
        return _value * amount;&#13;
    }&#13;
&#13;
    function getBoughtTokens( address _vaultAddress, bool _direct ) public view returns (uint256) {&#13;
        ABIFundingVault vault = ABIFundingVault(_vaultAddress);&#13;
&#13;
        if(_direct) {&#13;
            uint256 DirectTokens = getTokensForValueInStage(1, vault.stageAmountsDirect(1));&#13;
            DirectTokens+= getTokensForValueInStage(2, vault.stageAmountsDirect(2));&#13;
            return DirectTokens;&#13;
        } else {&#13;
            uint256 TotalTokens = getTokensForValueInStage(1, vault.stageAmounts(1));&#13;
            TotalTokens+= getTokensForValueInStage(2, vault.stageAmounts(2));&#13;
            return TotalTokens;&#13;
        }&#13;
    }&#13;
&#13;
    modifier onlyDeployer() {&#13;
        require(msg.sender == deployerAddress);&#13;
        _;&#13;
    }&#13;
}
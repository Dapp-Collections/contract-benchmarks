pragma solidity ^0.4.20;
// ----------------------------------------------------------------------------------------------
// CGRID Token by CGRID Limited.
// An ERC223 standard
//
// author: CGRID Team
// Contact: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="77141819031614033714160515181910051e13591e18">[emailÂ protected]</a>&#13;
&#13;
library SafeMath {&#13;
&#13;
    function add(uint a, uint b) internal pure returns (uint c) {&#13;
        c = a + b;&#13;
        require(c &gt;= a);&#13;
    }&#13;
&#13;
    function sub(uint a, uint b) internal pure returns (uint c) {&#13;
        require(b &lt;= a);&#13;
        c = a - b;&#13;
    }&#13;
&#13;
    function mul(uint a, uint b) internal pure returns (uint c) {&#13;
        c = a * b;&#13;
        require(a == 0 || c / a == b);&#13;
    }&#13;
&#13;
    function div(uint a, uint b) internal pure returns (uint c) {&#13;
        require(b &gt; 0);&#13;
        c = a / b;&#13;
    }&#13;
&#13;
}&#13;
&#13;
contract ERC20 {&#13;
    // Get the total token supply&#13;
    function totalSupply() public constant returns (uint256 _totalSupply);&#13;
 &#13;
    // Get the account balance of another account with address _owner&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance);&#13;
 &#13;
    // Send _value amount of tokens to address _to&#13;
    function transfer(address _to, uint256 _value) public returns (bool success);&#13;
    &#13;
    // transfer _value amount of token approved by address _from&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);&#13;
    &#13;
    // approve an address with _value amount of tokens&#13;
    function approve(address _spender, uint256 _value) public returns (bool success);&#13;
&#13;
    // get remaining token approved by _owner to _spender&#13;
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);&#13;
  &#13;
    // Triggered when tokens are transferred.&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
 &#13;
    // Triggered whenever approve(address _spender, uint256 _value) is called.&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
}&#13;
&#13;
contract ERC223 is ERC20{&#13;
    function transfer(address _to, uint _value, bytes _data) public returns (bool success);&#13;
    function transfer(address _to, uint _value, bytes _data, string _custom_fallback) public returns (bool success);&#13;
    event Transfer(address indexed _from, address indexed _to, uint _value, bytes indexed _data);&#13;
}&#13;
&#13;
/// contract receiver interface&#13;
contract ContractReceiver {  &#13;
    function tokenFallback(address _from, uint _value, bytes _data) external;&#13;
}&#13;
&#13;
contract BasicCGRID is ERC223 {&#13;
    using SafeMath for uint256;&#13;
    &#13;
    uint256 public constant decimals = 8;&#13;
    string public constant symbol = "CGRID";&#13;
    string public constant name = "Carbon Grid Token";&#13;
    uint256 public _totalSupply = 10**17; // total supply is 10^17 unit, equivalent to 1 Billion CGRID&#13;
&#13;
    // Owner of this contract&#13;
    address public owner;&#13;
    address public airdrop;&#13;
&#13;
    // tradable&#13;
    bool public tradable = false;&#13;
&#13;
    // Balances CGRID for each account&#13;
    mapping(address =&gt; uint256) balances;&#13;
    &#13;
    // Owner of account approves the transfer of an amount to another account&#13;
    mapping(address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
            &#13;
    /**&#13;
     * Functions with this modifier can only be executed by the owner&#13;
     */&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier isTradable(){&#13;
        require(tradable == true || msg.sender == airdrop || msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Constructor&#13;
    function BasicCGRID() &#13;
    public {&#13;
        owner = msg.sender;&#13;
        balances[owner] = _totalSupply;&#13;
        Transfer(0x0, owner, _totalSupply);&#13;
        airdrop = 0x00227086ab72678903091d315b04a8dacade39647a;&#13;
    }&#13;
    &#13;
    /// @dev Gets totalSupply&#13;
    /// @return Total supply&#13;
    function totalSupply()&#13;
    public &#13;
    constant &#13;
    returns (uint256) {&#13;
        return _totalSupply;&#13;
    }&#13;
        &#13;
    /// @dev Gets account's balance&#13;
    /// @param _addr Address of the account&#13;
    /// @return Account balance&#13;
    function balanceOf(address _addr) &#13;
    public&#13;
    constant &#13;
    returns (uint256) {&#13;
        return balances[_addr];&#13;
    }&#13;
    &#13;
    &#13;
    //assemble the given address bytecode. If bytecode exists then the _addr is a contract.&#13;
    function isContract(address _addr) &#13;
    private &#13;
    view &#13;
    returns (bool is_contract) {&#13;
        uint length;&#13;
        assembly {&#13;
            //retrieve the size of the code on target address, this needs assembly&#13;
            length := extcodesize(_addr)&#13;
        }&#13;
        return (length&gt;0);&#13;
    }&#13;
 &#13;
    /// @dev Transfers the balance from msg.sender to an account&#13;
    /// @param _to Recipient address&#13;
    /// @param _value Transfered amount in unit&#13;
    /// @return Transfer status&#13;
    // Standard function transfer similar to ERC20 transfer with no _data .&#13;
    // Added due to backwards compatibility reasons .&#13;
    function transfer(address _to, uint _value) &#13;
    public &#13;
    isTradable&#13;
    returns (bool success) {&#13;
        require(_to != 0x0);&#13;
        balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
&#13;
        Transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
    &#13;
    /// @dev Function that is called when a user or another contract wants to transfer funds .&#13;
    /// @param _to Recipient address&#13;
    /// @param _value Transfer amount in unit&#13;
    /// @param _data the data pass to contract reveiver&#13;
    function transfer(&#13;
        address _to, &#13;
        uint _value, &#13;
        bytes _data) &#13;
    public&#13;
    isTradable &#13;
    returns (bool success) {&#13;
        require(_to != 0x0);&#13;
        balances[msg.sender] = balanceOf(msg.sender).sub(_value);&#13;
        balances[_to] = balanceOf(_to).add(_value);&#13;
        Transfer(msg.sender, _to, _value);&#13;
        if(isContract(_to)) {&#13;
            ContractReceiver receiver = ContractReceiver(_to);&#13;
            receiver.tokenFallback(msg.sender, _value, _data);&#13;
            Transfer(msg.sender, _to, _value, _data);&#13;
        }&#13;
        &#13;
        return true;&#13;
    }&#13;
    &#13;
    /// @dev Function that is called when a user or another contract wants to transfer funds .&#13;
    /// @param _to Recipient address&#13;
    /// @param _value Transfer amount in unit&#13;
    /// @param _data the data pass to contract reveiver&#13;
    /// @param _custom_fallback custom name of fallback function&#13;
    function transfer(&#13;
        address _to, &#13;
        uint _value, &#13;
        bytes _data, &#13;
        string _custom_fallback) &#13;
    public &#13;
    isTradable&#13;
    returns (bool success) {&#13;
        require(_to != 0x0);&#13;
        balances[msg.sender] = balanceOf(msg.sender).sub(_value);&#13;
        balances[_to] = balanceOf(_to).add(_value);&#13;
        Transfer(msg.sender, _to, _value);&#13;
&#13;
        if(isContract(_to)) {&#13;
            assert(_to.call.value(0)(bytes4(keccak256(_custom_fallback)), msg.sender, _value, _data));&#13;
            Transfer(msg.sender, _to, _value, _data);&#13;
        }&#13;
        return true;&#13;
    }&#13;
         &#13;
    // Send _value amount of tokens from address _from to address _to&#13;
    // The transferFrom method is used for a withdraw workflow, allowing contracts to send&#13;
    // tokens on your behalf, for example to "deposit" to a contract address and/or to charge&#13;
    // fees in sub-currencies; the command should fail unless the _from account has&#13;
    // deliberately authorized the sender of the message via some mechanism; we propose&#13;
    // these standardized APIs for approval:&#13;
    function transferFrom(&#13;
        address _from,&#13;
        address _to,&#13;
        uint256 _value)&#13;
    public&#13;
    isTradable&#13;
    returns (bool success) {&#13;
        require(_to != 0x0);&#13;
        balances[_from] = balances[_from].sub(_value);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
&#13;
        Transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
    &#13;
    // Allow _spender to withdraw from your account, multiple times, up to the _value amount.&#13;
    // If this function is called again it overwrites the current allowance with _value.&#13;
    function approve(address _spender, uint256 _amount) &#13;
    public&#13;
    returns (bool success) {&#13;
        allowed[msg.sender][_spender] = _amount;&#13;
        Approval(msg.sender, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
    &#13;
    // get allowance&#13;
    function allowance(address _owner, address _spender) &#13;
    public&#13;
    constant &#13;
    returns (uint256 remaining) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    // withdraw any ERC20 token in this contract to owner&#13;
    function transferAnyERC20Token(address tokenAddress, uint tokens) public returns (bool success) {&#13;
        return ERC223(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
    &#13;
    // allow people can transfer their token&#13;
    // NOTE: can not turn off&#13;
    function turnOnTradable() &#13;
    public&#13;
    onlyOwner{&#13;
        tradable = true;&#13;
    }&#13;
&#13;
    // @dev allow owner to update airdrop admin&#13;
    function updateAirdrop(address newAirdropAdmin) &#13;
    public &#13;
    onlyOwner{&#13;
        airdrop = newAirdropAdmin;&#13;
    }&#13;
}&#13;
&#13;
contract CGRID is BasicCGRID {&#13;
&#13;
    bool public _selling = true;//initial selling&#13;
    &#13;
    uint256 public _originalBuyPrice = 36500 * 10 ** decimals; // original buy 1ETH = 36500 CGRID = 36500 * 10**8 unit&#13;
&#13;
    // List of approved investors&#13;
    mapping(address =&gt; bool) private approvedInvestorList;&#13;
    &#13;
    // deposit&#13;
    mapping(address =&gt; uint256) private deposit;&#13;
    &#13;
    // icoPercent&#13;
    uint256 public _icoPercent = 30;&#13;
    &#13;
    // _icoSupply is the avalable unit. Initially, it is _totalSupply&#13;
    uint256 public _icoSupply = (_totalSupply * _icoPercent) / 100;&#13;
    &#13;
    // minimum buy 0.3 ETH&#13;
    uint256 public _minimumBuy = 3 * 10 ** 17;&#13;
    &#13;
    // maximum buy 25 ETH&#13;
    uint256 public _maximumBuy = 25 * 10 ** 18;&#13;
&#13;
    // totalTokenSold&#13;
    uint256 public totalTokenSold = 0;&#13;
&#13;
    /**&#13;
     * Functions with this modifier check on sale status&#13;
     * Only allow sale if _selling is on&#13;
     */&#13;
    modifier onSale() {&#13;
        require(_selling);&#13;
        _;&#13;
    }&#13;
    &#13;
    /**&#13;
     * Functions with this modifier check the validity of address is investor&#13;
     */&#13;
    modifier validInvestor() {&#13;
        require(approvedInvestorList[msg.sender]);&#13;
        _;&#13;
    }&#13;
    &#13;
    /**&#13;
     * Functions with this modifier check the validity of msg value&#13;
     * value must greater than equal minimumBuyPrice&#13;
     * total deposit must less than equal maximumBuyPrice&#13;
     */&#13;
    modifier validValue(){&#13;
        // require value &gt;= _minimumBuy AND total deposit of msg.sender &lt;= maximumBuyPrice&#13;
        require ( (msg.value &gt;= _minimumBuy) &amp;&amp;&#13;
                ( (deposit[msg.sender].add(msg.value)) &lt;= _maximumBuy) );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Fallback function allows to buy by ether.&#13;
    function()&#13;
    public&#13;
    payable {&#13;
        buyCGRID();&#13;
    }&#13;
    &#13;
    /// @dev buy function allows to buy ether. for using optional data&#13;
    function buyCGRID()&#13;
    public&#13;
    payable&#13;
    onSale&#13;
    validValue&#13;
    validInvestor {&#13;
        uint256 requestedUnits = (msg.value * _originalBuyPrice) / 10**18;&#13;
        require(balances[owner] &gt;= requestedUnits);&#13;
        // prepare transfer data&#13;
        balances[owner] = balances[owner].sub(requestedUnits);&#13;
        balances[msg.sender] = balances[msg.sender].add(requestedUnits);&#13;
        &#13;
        // increase total deposit amount&#13;
        deposit[msg.sender] = deposit[msg.sender].add(msg.value);&#13;
        &#13;
        // check total and auto turnOffSale&#13;
        totalTokenSold = totalTokenSold.add(requestedUnits);&#13;
        if (totalTokenSold &gt;= _icoSupply){&#13;
            _selling = false;&#13;
        }&#13;
        &#13;
        // submit transfer&#13;
        Transfer(owner, msg.sender, requestedUnits);&#13;
        owner.transfer(msg.value);&#13;
    }&#13;
&#13;
    /// @dev Constructor&#13;
    function CGRID() BasicCGRID()&#13;
    public {&#13;
        setBuyPrice(_originalBuyPrice);&#13;
    }&#13;
    &#13;
    /// @dev Disables sale&#13;
    function turnOffSale() onlyOwner &#13;
    public {&#13;
        _selling = false;&#13;
    }&#13;
    &#13;
    /// @dev set new icoPercent&#13;
    /// @param newIcoPercent new value of icoPercent&#13;
    function setIcoPercent(uint256 newIcoPercent)&#13;
    public &#13;
    onlyOwner {&#13;
        _icoPercent = newIcoPercent;&#13;
        _icoSupply = (_totalSupply * _icoPercent) / 100;&#13;
    }&#13;
    &#13;
    /// @dev set new _maximumBuy&#13;
    /// @param newMaximumBuy new value of _maximumBuy&#13;
    function setMaximumBuy(uint256 newMaximumBuy)&#13;
    public &#13;
    onlyOwner {&#13;
        _maximumBuy = newMaximumBuy;&#13;
    }&#13;
&#13;
    /// @dev Updates buy price (owner ONLY)&#13;
    /// @param newBuyPrice New buy price (in UNIT)&#13;
    function setBuyPrice(uint256 newBuyPrice) &#13;
    onlyOwner &#13;
    public {&#13;
        require(newBuyPrice&gt;0);&#13;
        _originalBuyPrice = newBuyPrice; // unit&#13;
        // control _maximumBuy_USD = 10,000 USD, CGRID price is 0.0365USD&#13;
        _maximumBuy = (10**18 * 10**14) /_originalBuyPrice;&#13;
    }&#13;
    &#13;
    /// @dev check address is approved investor&#13;
    /// @param _addr address&#13;
    function isApprovedInvestor(address _addr)&#13;
    public&#13;
    constant&#13;
    returns (bool) {&#13;
        return approvedInvestorList[_addr];&#13;
    }&#13;
    &#13;
    /// @dev get ETH deposit&#13;
    /// @param _addr address get deposit&#13;
    /// @return amount deposit of an buyer&#13;
    function getDeposit(address _addr)&#13;
    public&#13;
    constant&#13;
    returns(uint256){&#13;
        return deposit[_addr];&#13;
}&#13;
    &#13;
    /// @dev Adds list of new investors to the investors list and approve all&#13;
    /// @param newInvestorList Array of new investors addresses to be added&#13;
    function addInvestorList(address[] newInvestorList)&#13;
    onlyOwner&#13;
    public {&#13;
        for (uint256 i = 0; i &lt; newInvestorList.length; i++){&#13;
            approvedInvestorList[newInvestorList[i]] = true;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Removes list of investors from list&#13;
    /// @param investorList Array of addresses of investors to be removed&#13;
    function removeInvestorList(address[] investorList)&#13;
    onlyOwner&#13;
    public {&#13;
        for (uint256 i = 0; i &lt; investorList.length; i++){&#13;
            approvedInvestorList[investorList[i]] = false;&#13;
        }&#13;
    }&#13;
    &#13;
    /// @dev Withdraws Ether in contract (Owner only)&#13;
    /// @return Status of withdrawal&#13;
    function withdraw() onlyOwner &#13;
    public &#13;
    returns (bool) {&#13;
        return owner.send(this.balance);&#13;
    }&#13;
}&#13;
&#13;
contract MultiSigWallet {&#13;
&#13;
    uint constant public MAX_OWNER_COUNT = 50;&#13;
&#13;
    event Confirmation(address indexed sender, uint indexed transactionId);&#13;
    event Revocation(address indexed sender, uint indexed transactionId);&#13;
    event Submission(uint indexed transactionId);&#13;
    event Execution(uint indexed transactionId);&#13;
    event ExecutionFailure(uint indexed transactionId);&#13;
    event Deposit(address indexed sender, uint value);&#13;
    event OwnerAddition(address indexed owner);&#13;
    event OwnerRemoval(address indexed owner);&#13;
    event RequirementChange(uint required);&#13;
    event CoinCreation(address coin);&#13;
&#13;
    mapping (uint =&gt; Transaction) public transactions;&#13;
    mapping (uint =&gt; mapping (address =&gt; bool)) public confirmations;&#13;
    mapping (address =&gt; bool) public isOwner;&#13;
    address[] public owners;&#13;
    uint public required;&#13;
    uint public transactionCount;&#13;
    bool flag = true;&#13;
&#13;
    struct Transaction {&#13;
        address destination;&#13;
        uint value;&#13;
        bytes data;&#13;
        bool executed;&#13;
    }&#13;
&#13;
    modifier onlyWallet() {&#13;
        if (msg.sender != address(this))&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier ownerDoesNotExist(address owner) {&#13;
        if (isOwner[owner])&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier ownerExists(address owner) {&#13;
        if (!isOwner[owner])&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier transactionExists(uint transactionId) {&#13;
        if (transactions[transactionId].destination == 0)&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier confirmed(uint transactionId, address owner) {&#13;
        if (!confirmations[transactionId][owner])&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notConfirmed(uint transactionId, address owner) {&#13;
        if (confirmations[transactionId][owner])&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notExecuted(uint transactionId) {&#13;
        if (transactions[transactionId].executed)&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier notNull(address _address) {&#13;
        if (_address == 0)&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    modifier validRequirement(uint ownerCount, uint _required) {&#13;
        if (   ownerCount &gt; MAX_OWNER_COUNT&#13;
            || _required &gt; ownerCount&#13;
            || _required == 0&#13;
            || ownerCount == 0)&#13;
            revert();&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Fallback function allows to deposit ether.&#13;
    function()&#13;
        payable&#13;
    {&#13;
        if (msg.value &gt; 0)&#13;
            Deposit(msg.sender, msg.value);&#13;
    }&#13;
&#13;
    /*&#13;
     * Public functions&#13;
     */&#13;
    /// @dev Contract constructor sets initial owners and required number of confirmations.&#13;
    /// @param _owners List of initial owners.&#13;
    /// @param _required Number of required confirmations.&#13;
    function MultiSigWallet(address[] _owners, uint _required)&#13;
        public&#13;
        validRequirement(_owners.length, _required)&#13;
    {&#13;
        for (uint i=0; i&lt;_owners.length; i++) {&#13;
            if (isOwner[_owners[i]] || _owners[i] == 0)&#13;
                revert();&#13;
            isOwner[_owners[i]] = true;&#13;
        }&#13;
        owners = _owners;&#13;
        required = _required;&#13;
    }&#13;
&#13;
    /// @dev Allows to add a new owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of new owner.&#13;
    function addOwner(address owner)&#13;
        public&#13;
        onlyWallet&#13;
        ownerDoesNotExist(owner)&#13;
        notNull(owner)&#13;
        validRequirement(owners.length + 1, required)&#13;
    {&#13;
        isOwner[owner] = true;&#13;
        owners.push(owner);&#13;
        OwnerAddition(owner);&#13;
    }&#13;
&#13;
    /// @dev Allows to remove an owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of owner.&#13;
    function removeOwner(address owner)&#13;
        public&#13;
        onlyWallet&#13;
        ownerExists(owner)&#13;
    {&#13;
        isOwner[owner] = false;&#13;
        for (uint i=0; i&lt;owners.length - 1; i++)&#13;
            if (owners[i] == owner) {&#13;
                owners[i] = owners[owners.length - 1];&#13;
                break;&#13;
            }&#13;
        owners.length -= 1;&#13;
        if (required &gt; owners.length)&#13;
            changeRequirement(owners.length);&#13;
        OwnerRemoval(owner);&#13;
    }&#13;
&#13;
    /// @dev Allows to replace an owner with a new owner. Transaction has to be sent by wallet.&#13;
    /// @param owner Address of owner to be replaced.&#13;
    /// @param owner Address of new owner.&#13;
    function replaceOwner(address owner, address newOwner)&#13;
        public&#13;
        onlyWallet&#13;
        ownerExists(owner)&#13;
        ownerDoesNotExist(newOwner)&#13;
    {&#13;
        for (uint i=0; i&lt;owners.length; i++)&#13;
            if (owners[i] == owner) {&#13;
                owners[i] = newOwner;&#13;
                break;&#13;
            }&#13;
        isOwner[owner] = false;&#13;
        isOwner[newOwner] = true;&#13;
        OwnerRemoval(owner);&#13;
        OwnerAddition(newOwner);&#13;
    }&#13;
&#13;
    /// @dev Allows to change the number of required confirmations. Transaction has to be sent by wallet.&#13;
    /// @param _required Number of required confirmations.&#13;
    function changeRequirement(uint _required)&#13;
        public&#13;
        onlyWallet&#13;
        validRequirement(owners.length, _required)&#13;
    {&#13;
        required = _required;&#13;
        RequirementChange(_required);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to submit and confirm a transaction.&#13;
    /// @param destination Transaction target address.&#13;
    /// @param value Transaction ether value.&#13;
    /// @param data Transaction data payload.&#13;
    /// @return Returns transaction ID.&#13;
    function submitTransaction(address destination, uint value, bytes data)&#13;
        public&#13;
        returns (uint transactionId)&#13;
    {&#13;
        transactionId = addTransaction(destination, value, data);&#13;
        confirmTransaction(transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to confirm a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function confirmTransaction(uint transactionId)&#13;
        public&#13;
        ownerExists(msg.sender)&#13;
        transactionExists(transactionId)&#13;
        notConfirmed(transactionId, msg.sender)&#13;
    {&#13;
        confirmations[transactionId][msg.sender] = true;&#13;
        Confirmation(msg.sender, transactionId);&#13;
        executeTransaction(transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows an owner to revoke a confirmation for a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function revokeConfirmation(uint transactionId)&#13;
        public&#13;
        ownerExists(msg.sender)&#13;
        confirmed(transactionId, msg.sender)&#13;
        notExecuted(transactionId)&#13;
    {&#13;
        confirmations[transactionId][msg.sender] = false;&#13;
        Revocation(msg.sender, transactionId);&#13;
    }&#13;
&#13;
    /// @dev Allows anyone to execute a confirmed transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    function executeTransaction(uint transactionId)&#13;
        public&#13;
        notExecuted(transactionId)&#13;
    {&#13;
        if (isConfirmed(transactionId)) {&#13;
            Transaction tx = transactions[transactionId];&#13;
            tx.executed = true;&#13;
            if (tx.destination.call.value(tx.value)(tx.data))&#13;
                Execution(transactionId);&#13;
            else {&#13;
                ExecutionFailure(transactionId);&#13;
                tx.executed = false;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Returns the confirmation status of a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Confirmation status.&#13;
    function isConfirmed(uint transactionId)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        uint count = 0;&#13;
        for (uint i=0; i&lt;owners.length; i++) {&#13;
            if (confirmations[transactionId][owners[i]])&#13;
                count += 1;&#13;
            if (count == required)&#13;
                return true;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * Internal functions&#13;
     */&#13;
    /// @dev Adds a new transaction to the transaction mapping, if transaction does not exist yet.&#13;
    /// @param destination Transaction target address.&#13;
    /// @param value Transaction ether value.&#13;
    /// @param data Transaction data payload.&#13;
    /// @return Returns transaction ID.&#13;
    function addTransaction(address destination, uint value, bytes data)&#13;
        internal&#13;
        notNull(destination)&#13;
        returns (uint transactionId)&#13;
    {&#13;
        transactionId = transactionCount;&#13;
        transactions[transactionId] = Transaction({&#13;
            destination: destination,&#13;
            value: value,&#13;
            data: data,&#13;
            executed: false&#13;
        });&#13;
        transactionCount += 1;&#13;
        Submission(transactionId);&#13;
    }&#13;
&#13;
    /*&#13;
     * Web3 call functions&#13;
     */&#13;
    /// @dev Returns number of confirmations of a transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Number of confirmations.&#13;
    function getConfirmationCount(uint transactionId)&#13;
        public&#13;
        constant&#13;
        returns (uint count)&#13;
    {&#13;
        for (uint i=0; i&lt;owners.length; i++)&#13;
            if (confirmations[transactionId][owners[i]])&#13;
                count += 1;&#13;
    }&#13;
&#13;
    /// @dev Returns total number of transactions after filers are applied.&#13;
    /// @param pending Include pending transactions.&#13;
    /// @param executed Include executed transactions.&#13;
    /// @return Total number of transactions after filters are applied.&#13;
    function getTransactionCount(bool pending, bool executed)&#13;
        public&#13;
        constant&#13;
        returns (uint count)&#13;
    {&#13;
        for (uint i=0; i&lt;transactionCount; i++)&#13;
            if (   pending &amp;&amp; !transactions[i].executed&#13;
                || executed &amp;&amp; transactions[i].executed)&#13;
                count += 1;&#13;
    }&#13;
&#13;
    /// @dev Returns list of owners.&#13;
    /// @return List of owner addresses.&#13;
    function getOwners()&#13;
        public&#13;
        constant&#13;
        returns (address[])&#13;
    {&#13;
        return owners;&#13;
    }&#13;
&#13;
    /// @dev Returns array with owner addresses, which confirmed transaction.&#13;
    /// @param transactionId Transaction ID.&#13;
    /// @return Returns array of owner addresses.&#13;
    function getConfirmations(uint transactionId)&#13;
        public&#13;
        constant&#13;
        returns (address[] _confirmations)&#13;
    {&#13;
        address[] memory confirmationsTemp = new address[](owners.length);&#13;
        uint count = 0;&#13;
        uint i;&#13;
        for (i=0; i&lt;owners.length; i++)&#13;
            if (confirmations[transactionId][owners[i]]) {&#13;
                confirmationsTemp[count] = owners[i];&#13;
                count += 1;&#13;
            }&#13;
        _confirmations = new address[](count);&#13;
        for (i=0; i&lt;count; i++)&#13;
            _confirmations[i] = confirmationsTemp[i];&#13;
    }&#13;
&#13;
    /// @dev Returns list of transaction IDs in defined range.&#13;
    /// @param from Index start position of transaction array.&#13;
    /// @param to Index end position of transaction array.&#13;
    /// @param pending Include pending transactions.&#13;
    /// @param executed Include executed transactions.&#13;
    /// @return Returns array of transaction IDs.&#13;
    function getTransactionIds(uint from, uint to, bool pending, bool executed)&#13;
        public&#13;
        constant&#13;
        returns (uint[] _transactionIds)&#13;
    {&#13;
        uint[] memory transactionIdsTemp = new uint[](transactionCount);&#13;
        uint count = 0;&#13;
        uint i;&#13;
        for (i=0; i&lt;transactionCount; i++)&#13;
            if (   pending &amp;&amp; !transactions[i].executed&#13;
                || executed &amp;&amp; transactions[i].executed)&#13;
            {&#13;
                transactionIdsTemp[count] = i;&#13;
                count += 1;&#13;
            }&#13;
        _transactionIds = new uint[](to - from);&#13;
        for (i=from; i&lt;to; i++)&#13;
            _transactionIds[i - from] = transactionIdsTemp[i];&#13;
    }&#13;
    &#13;
    /// @dev Create new coin.&#13;
    function createCoin()&#13;
        external&#13;
        onlyWallet&#13;
    {&#13;
        require(flag == true);&#13;
        CoinCreation(new CGRID());&#13;
        flag = false;&#13;
    }&#13;
}
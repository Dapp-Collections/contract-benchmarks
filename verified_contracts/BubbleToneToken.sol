// Bubble token air drop smart contract.
// Developed by Phenom.Team <<span class="__cf_email__" data-cfemail="a1c8cfc7cee1d1c9c4cfcecc8fd5c4c0cc">[emailÂ protected]</span>&gt;&#13;
pragma solidity ^0.4.18;&#13;
&#13;
/**&#13;
 *   @title SafeMath&#13;
 *   @dev Math operations with safety checks that throw on error&#13;
 */&#13;
&#13;
library SafeMath {&#13;
&#13;
  function mul(uint a, uint b) internal constant returns (uint) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint a, uint b) internal constant returns(uint) {&#13;
    assert(b &gt; 0);&#13;
    uint c = a / b;&#13;
    assert(a == b * c + a % b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint a, uint b) internal constant returns(uint) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint a, uint b) internal constant returns(uint) {&#13;
    uint c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 *   @title ERC20&#13;
 *   @dev Standart ERC20 token interface&#13;
 */&#13;
&#13;
contract ERC20 {&#13;
    uint public totalSupply = 0;&#13;
&#13;
    mapping(address =&gt; uint) balances;&#13;
    mapping(address =&gt; mapping (address =&gt; uint)) allowed;&#13;
&#13;
    function balanceOf(address _owner) constant returns (uint);&#13;
    function transfer(address _to, uint _value) returns (bool);&#13;
    function transferFrom(address _from, address _to, uint _value) returns (bool);&#13;
    function approve(address _spender, uint _value) returns (bool);&#13;
    function allowance(address _owner, address _spender) constant returns (uint);&#13;
&#13;
    event Transfer(address indexed _from, address indexed _to, uint _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint _value);&#13;
&#13;
}&#13;
&#13;
/**&#13;
 *   @title BubbleToneToken&#13;
 *   @dev Universal Bonus Token contract&#13;
 */&#13;
contract BubbleToneToken is ERC20 {&#13;
    using SafeMath for uint;&#13;
    string public name = "Universal Bonus Token | t.me/bubbletonebot";&#13;
    string public symbol = "UBT";&#13;
    uint public decimals = 18;  &#13;
&#13;
    // Smart-contract owner address&#13;
    address public owner;&#13;
    &#13;
    //events&#13;
    event Burn(address indexed _from, uint _value);&#13;
    event Mint(address indexed _to, uint _value);&#13;
    event ManagerAdded(address _manager);&#13;
    event ManagerRemoved(address _manager);&#13;
    event Defrosted(uint timestamp);&#13;
    event Frosted(uint timestamp);&#13;
&#13;
    // Tokens transfer ability status&#13;
    bool public tokensAreFrozen = true;&#13;
&#13;
    // mapping of user permissions&#13;
    mapping(address =&gt; bool) public isManager;&#13;
&#13;
&#13;
    // Allows execution by the owner only&#13;
    modifier onlyOwner { &#13;
        require(msg.sender == owner); &#13;
        _; &#13;
    }&#13;
&#13;
    // Allows execution by the managers only&#13;
    modifier onlyManagers { &#13;
        require(isManager[msg.sender]); &#13;
        _; &#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Contract constructor function sets owner address&#13;
    *   @param _owner        owner address&#13;
    */&#13;
    function BubbleToneToken(address _owner) public {&#13;
       owner = _owner;&#13;
       isManager[_owner] = true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Get balance of tokens holder&#13;
    *   @param _holder        holder's address&#13;
    *   @return               balance of investor&#13;
    */&#13;
    function balanceOf(address _holder) constant returns (uint) {&#13;
         return balances[_holder];&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Send coins&#13;
    *   throws on any error rather then return a false flag to minimize&#13;
    *   user errors&#13;
    *   @param _to           target address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transfer(address _to, uint _amount) public returns (bool) {&#13;
        require(!tokensAreFrozen);&#13;
        require(_to != address(0) &amp;&amp; _to != address(this));&#13;
        balances[msg.sender] = balances[msg.sender].sub(_amount);&#13;
        balances[_to] = balances[_to].add(_amount);&#13;
        Transfer(msg.sender, _to, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev An account/contract attempts to get the coins&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   @param _from         source address&#13;
    *   @param _to           target address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {&#13;
        require(!tokensAreFrozen);&#13;
        balances[_from] = balances[_from].sub(_amount);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);&#13;
        balances[_to] = balances[_to].add(_amount);&#13;
        Transfer(_from, _to, _amount);&#13;
        return true;&#13;
     }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Allows another account/contract to spend some tokens on its behalf&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   also, to minimize the risk of the approve/transferFrom attack vector&#13;
    *   approve has to be called twice in 2 separate transactions - once to&#13;
    *   change the allowance to 0 and secondly to change it to the new allowance&#13;
    *   value&#13;
    *&#13;
    *   @param _spender      approved address&#13;
    *   @param _amount       allowance amount&#13;
    *&#13;
    *   @return true if the approval was successful&#13;
    */&#13;
    function approve(address _spender, uint _amount) public returns (bool) {&#13;
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));&#13;
        allowed[msg.sender][_spender] = _amount;&#13;
        Approval(msg.sender, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
    *&#13;
    *   @param _owner        the address which owns the funds&#13;
    *   @param _spender      the address which will spend the funds&#13;
    *&#13;
    *   @return              the amount of tokens still avaible for the spender&#13;
    */&#13;
    function allowance(address _owner, address _spender) constant returns (uint) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
&#13;
&#13;
  /**&#13;
   * @dev Function to add an address to the managers&#13;
   * @param _manager         an address that will be added to managers list&#13;
   */&#13;
    function addManager(address _manager) onlyOwner external {&#13;
        require(!isManager[_manager]);&#13;
        isManager[_manager] = true;&#13;
        ManagerAdded(_manager);&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Function to remove an address to the managers&#13;
   * @param _manager         an address that will be removed from managers list&#13;
   */&#13;
    function removeManager(address _manager) onlyOwner external {&#13;
        require(isManager[_manager]);&#13;
        isManager[_manager] = false;&#13;
        ManagerRemoved(_manager);&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to enable token transfers&#13;
    */&#13;
    function unfreeze() external onlyOwner {&#13;
       tokensAreFrozen = false;&#13;
       Defrosted(now);&#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Function to enable token transfers&#13;
    */&#13;
    function freeze() external onlyOwner {&#13;
       tokensAreFrozen = true;&#13;
       Frosted(now);&#13;
    }&#13;
&#13;
&#13;
&#13;
    /**&#13;
     * @dev Function to batch mint tokens&#13;
     * @param                _holders an array of addresses that will receive the promo tokens.&#13;
     * @param                _amount an array with the amounts of tokens each address will get minted.&#13;
     */&#13;
    function batchMint(&#13;
        address[] _holders, &#13;
        uint[] _amount) &#13;
        external&#13;
        onlyManagers {&#13;
        require(_holders.length == _amount.length);&#13;
        for (uint i = 0; i &lt; _holders.length; i++) {&#13;
            require(_mint(_holders[i], _amount[i]));&#13;
        }&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to burn Tokens&#13;
    *   @param _holder       token holder address which the tokens will be burnt&#13;
    *   @param _value        number of tokens to burn&#13;
    */&#13;
    function burnTokens(address _holder, uint _value) external onlyManagers {&#13;
        require(balances[_holder] &gt; 0);&#13;
        totalSupply = totalSupply.sub(_value);&#13;
        balances[_holder] = balances[_holder].sub(_value);&#13;
        Burn(_holder, _value);&#13;
    }&#13;
&#13;
&#13;
&#13;
    /** &#13;
    *   @dev Allows owner to transfer out any accidentally sent ERC20 tokens&#13;
    *&#13;
    *   @param _token        token address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *&#13;
    */&#13;
    function withdraw(address _token, uint _amount) &#13;
        external&#13;
        onlyOwner &#13;
        returns (bool success) {&#13;
        return ERC20(_token).transfer(owner, _amount);&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to mint tokens&#13;
    *   @param _holder       beneficiary address the tokens will be issued to&#13;
    *   @param _value        amount of tokens to issue&#13;
    */&#13;
    function _mint(address _holder, uint _value) private returns (bool) {&#13;
        require(_value &gt; 0);&#13;
        require(_holder != address(0) &amp;&amp; _holder != address(this));&#13;
        balances[_holder] = balances[_holder].add(_value);&#13;
        totalSupply = totalSupply.add(_value);&#13;
        Transfer(address(0), _holder, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
}
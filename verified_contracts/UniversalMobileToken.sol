/*
*
* Universal Mobile Token smart contract
* Developed by Phenom.team <<span class="__cf_email__" data-cfemail="8ee7e0e8e1cefee6ebe0e1e3a0faebefe3">[emailÂ protected]</span>&gt;   &#13;
*&#13;
*/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, newOwner);&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint a, uint b) internal pure returns (uint) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint a, uint b) internal pure returns (uint) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint a, uint b) internal pure returns (uint) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint a, uint b) internal pure returns (uint) {&#13;
    uint c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
contract UniversalMobileToken is Ownable {&#13;
    &#13;
    using SafeMath for uint;&#13;
&#13;
    /*&#13;
        Standard ERC20 token&#13;
    */&#13;
    &#13;
    event Transfer(address indexed from, address indexed to, uint tokens);&#13;
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);&#13;
&#13;
    // Name of token&#13;
    string public name;&#13;
    // Short symbol for token&#13;
    string public symbol;&#13;
&#13;
    // Nubmer of decimal places&#13;
    uint public decimals;&#13;
&#13;
    // Token's total supply&#13;
    uint public totalSupply;&#13;
&#13;
    // Is minting active&#13;
    bool public mintingIsFinished;&#13;
&#13;
    // Is transfer possible&#13;
    bool public transferIsPossible;&#13;
&#13;
    modifier onlyEmitter() {&#13;
        require(emitters[msg.sender] == true);&#13;
        _;&#13;
    }&#13;
    &#13;
    mapping (address =&gt; uint) public balances;&#13;
    mapping (address =&gt; bool) public emitters;&#13;
    mapping (address =&gt; mapping (address =&gt; uint)) internal allowed;&#13;
    &#13;
    constructor() Ownable() public {&#13;
        name = "Universal Mobile Token";&#13;
        symbol = "UMT";&#13;
        decimals = 18;   &#13;
        // Make the Owner also an emitter&#13;
        emitters[msg.sender] = true;&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Finish minting process&#13;
    */&#13;
    function finishMinting() public onlyOwner {&#13;
        mintingIsFinished = true;&#13;
        transferIsPossible = true;&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Send coins&#13;
    *   throws on any error rather then return a false flag to minimize&#13;
    *   user errors&#13;
    *   @param _to           target address&#13;
    *   @param _value       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transfer(address _to, uint _value) public returns (bool success) {&#13;
        // Make transfer only if transfer is possible&#13;
        require(transferIsPossible);&#13;
        require(_to != address(0) &amp;&amp; _to != address(this));&#13;
        balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
        emit Transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Allows another account/contract to spend some tokens on its behalf&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   also, to minimize the risk of the approve/transferFrom attack vector&#13;
    *   approve has to be called twice in 2 separate transactions - once to&#13;
    *   change the allowance to 0 and secondly to change it to the new allowance&#13;
    *   value&#13;
    *&#13;
    *   @param _spender      approved address&#13;
    *   @param _value       allowance amount&#13;
    *&#13;
    *   @return true if the approval was successful&#13;
    */&#13;
    function approve(address _spender, uint _value) public returns (bool success) {&#13;
        require((_value == 0) || (allowed[msg.sender][_spender] == 0));&#13;
        allowed[msg.sender][_spender] = _value;&#13;
        emit Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev An account/contract attempts to get the coins&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   @param _from         source address&#13;
    *   @param _to           target address&#13;
    *   @param _value        amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transferFrom(address _from, address _to, uint _value) public returns (bool success) {&#13;
        // Make transfer only if transfer is possible&#13;
        require(transferIsPossible);&#13;
&#13;
        require(_to != address(0) &amp;&amp; _to != address(this));&#13;
&#13;
        balances[_from] = balances[_from].sub(_value);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
        emit Transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Add an emitter account&#13;
    *   &#13;
    *   @param _emitter     emitter's address&#13;
    */&#13;
    function addEmitter(address _emitter) public onlyOwner {&#13;
        emitters[_emitter] = true;&#13;
    }&#13;
    &#13;
    /**&#13;
    *   @dev Remove an emitter account&#13;
    *   &#13;
    *   @param _emitter     emitter's address&#13;
    */&#13;
    function removeEmitter(address _emitter) public onlyOwner {&#13;
        emitters[_emitter] = false;&#13;
    }&#13;
    &#13;
    /**&#13;
    *   @dev Mint token in batches&#13;
    *   &#13;
    *   @param _adresses     token holders' adresses&#13;
    *   @param _values       token holders' values&#13;
    */&#13;
    function batchMint(address[] _adresses, uint[] _values) public onlyEmitter {&#13;
        require(_adresses.length == _values.length);&#13;
        for (uint i = 0; i &lt; _adresses.length; i++) {&#13;
            require(minted(_adresses[i], _values[i]));&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Transfer token in batches&#13;
    *   &#13;
    *   @param _adresses     token holders' adresses&#13;
    *   @param _values       token holders' values&#13;
    */&#13;
    function batchTransfer(address[] _adresses, uint[] _values) public {&#13;
        require(_adresses.length == _values.length);&#13;
        for (uint i = 0; i &lt; _adresses.length; i++) {&#13;
            require(transfer(_adresses[i], _values[i]));&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Burn Tokens&#13;
    *   @param _from       token holder address which the tokens will be burnt&#13;
    *   @param _value      number of tokens to burn&#13;
    */&#13;
    function burn(address _from, uint _value) public onlyEmitter {&#13;
        // Burn tokens only if minting stage is not finished&#13;
        require(!mintingIsFinished);&#13;
&#13;
        require(_value &lt;= balances[_from]);&#13;
        balances[_from] = balances[_from].sub(_value);&#13;
        totalSupply = totalSupply.sub(_value);&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
    *&#13;
    *   @param _tokenOwner        the address which owns the funds&#13;
    *   @param _spender      the address which will spend the funds&#13;
    *&#13;
    *   @return              the amount of tokens still avaible for the spender&#13;
    */&#13;
    function allowance(address _tokenOwner, address _spender) public constant returns (uint remaining) {&#13;
        return allowed[_tokenOwner][_spender];&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Function to check the amount of tokens that _tokenOwner has.&#13;
    *&#13;
    *   @param _tokenOwner        the address which owns the funds&#13;
    *&#13;
    *   @return              the amount of tokens _tokenOwner has&#13;
    */&#13;
    function balanceOf(address _tokenOwner) public constant returns (uint balance) {&#13;
        return balances[_tokenOwner];&#13;
    }&#13;
&#13;
    function minted(address _to, uint _value) internal returns (bool) {&#13;
        // Mint tokens only if minting stage is not finished&#13;
        require(!mintingIsFinished);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
        totalSupply = totalSupply.add(_value);&#13;
        emit Transfer(address(0), _to, _value);&#13;
        return true;&#13;
    }&#13;
}
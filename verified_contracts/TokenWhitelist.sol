pragma solidity ^0.4.24;

// <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e7889782899d829797828b8e89ca94888b8e838e939ea7d6c9d6d5c9d7">[emailÂ protected]</a> from NPM&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipRenounced(address indexed previousOwner);&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   * @notice Renouncing to ownership will leave the contract without an owner.&#13;
   * It will not be possible to call the functions with the `onlyOwner`&#13;
   * modifier anymore.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipRenounced(owner);&#13;
    owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address _newOwner) public onlyOwner {&#13;
    _transferOwnership(_newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address _newOwner) internal {&#13;
    require(_newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, _newOwner);&#13;
    owner = _newOwner;&#13;
  }&#13;
}&#13;
&#13;
contract TokenWhitelist is Ownable {&#13;
&#13;
    mapping(address =&gt; bool) private whitelist;&#13;
&#13;
    event Whitelisted(address indexed wallet);&#13;
    event Dewhitelisted(address indexed wallet);&#13;
&#13;
    function enableWallet(address _wallet) public onlyOwner {&#13;
        require(_wallet != address(0), "Invalid wallet");&#13;
        whitelist[_wallet] = true;&#13;
        emit Whitelisted(_wallet);&#13;
    }&#13;
&#13;
    function disableWallet(address _wallet) public onlyOwner {&#13;
        whitelist[_wallet] = false;&#13;
        emit Dewhitelisted (_wallet);&#13;
    }&#13;
    &#13;
    function checkWhitelisted(address _wallet) public view returns (bool){&#13;
        return whitelist[_wallet];&#13;
    }&#13;
    &#13;
}
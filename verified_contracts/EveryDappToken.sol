pragma solidity 0.4.24;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="89ede8ffecc9e8e2e6e4ebe8a7eae6e4">[emailÂ protected]</a>&#13;
// released under Apache 2.0 licence&#13;
contract ERC721Basic {&#13;
  event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);&#13;
  event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);&#13;
  event ApprovalForAll(address indexed _owner, address indexed _operator, bool _approved);&#13;
&#13;
  function balanceOf(address _owner) public view returns (uint256 _balance);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address _owner);&#13;
  function exists(uint256 _tokenId) public view returns (bool _exists);&#13;
&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function getApproved(uint256 _tokenId) public view returns (address _operator);&#13;
&#13;
  function setApprovalForAll(address _operator, bool _approved) public;&#13;
  function isApprovedForAll(address _owner, address _operator) public view returns (bool);&#13;
&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function safeTransferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public;&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
contract ERC721Receiver {&#13;
  /**&#13;
   * @dev Magic value to be returned upon successful reception of an NFT&#13;
   *  Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`,&#13;
   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`&#13;
   */&#13;
  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;&#13;
&#13;
  /**&#13;
   * @notice Handle the receipt of an NFT&#13;
   * @dev The ERC721 smart contract calls this function on the recipient&#13;
   *  after a `safetransfer`. This function MAY throw to revert and reject the&#13;
   *  transfer. This function MUST use 50,000 gas or less. Return of other&#13;
   *  than the magic value MUST result in the transaction being reverted.&#13;
   *  Note: the contract address is always the message sender.&#13;
   * @param _from The sending address&#13;
   * @param _tokenId The NFT identifier which is being transfered&#13;
   * @param _data Additional data with no specified format&#13;
   * @return `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`&#13;
   */&#13;
  function onERC721Received(address _from, uint256 _tokenId, bytes _data) public returns(bytes4);&#13;
}&#13;
&#13;
library AddressUtils {&#13;
&#13;
  /**&#13;
   * Returns whether the target address is a contract&#13;
   * @dev This function will return false if invoked during the constructor of a contract,&#13;
   *  as the code is not actually created until after the constructor finishes.&#13;
   * @param addr address to check&#13;
   * @return whether the target address is a contract&#13;
   */&#13;
  function isContract(address addr) internal view returns (bool) {&#13;
    uint256 size;&#13;
    // XXX Currently there is no better way to check if there is a contract in an address&#13;
    // than to check the size of the code at that address.&#13;
    // See https://ethereum.stackexchange.com/a/14016/36603&#13;
    // for more details about how this works.&#13;
    // TODO Check this again before the Serenity release, because all addresses will be&#13;
    // contracts then.&#13;
    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly&#13;
    return size &gt; 0;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  function Ownable() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, newOwner);&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
contract ERC721Enumerable is ERC721Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256 _tokenId);&#13;
  function tokenByIndex(uint256 _index) public view returns (uint256);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Metadata is ERC721Basic {&#13;
  function name() public view returns (string _name);&#13;
  function symbol() public view returns (string _symbol);&#13;
  function tokenURI(uint256 _tokenId) public view returns (string);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, full implementation interface&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {&#13;
}&#13;
&#13;
contract ERC721BasicToken is ERC721Basic {&#13;
  using SafeMath for uint256;&#13;
  using AddressUtils for address;&#13;
&#13;
  // Equals to `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`&#13;
  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`&#13;
  bytes4 constant ERC721_RECEIVED = 0xf0b9e5ba;&#13;
&#13;
  // Mapping from token ID to owner&#13;
  mapping (uint256 =&gt; address) internal tokenOwner;&#13;
&#13;
  // Mapping from token ID to approved address&#13;
  mapping (uint256 =&gt; address) internal tokenApprovals;&#13;
&#13;
  // Mapping from owner to number of owned token&#13;
  mapping (address =&gt; uint256) internal ownedTokensCount;&#13;
&#13;
  // Mapping from owner to operator approvals&#13;
  mapping (address =&gt; mapping (address =&gt; bool)) internal operatorApprovals;&#13;
&#13;
  /**&#13;
   * @dev Guarantees msg.sender is owner of the given token&#13;
   * @param _tokenId uint256 ID of the token to validate its ownership belongs to msg.sender&#13;
   */&#13;
  modifier onlyOwnerOf(uint256 _tokenId) {&#13;
    require(ownerOf(_tokenId) == msg.sender);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks msg.sender can transfer a token, by being owner, approved, or operator&#13;
   * @param _tokenId uint256 ID of the token to validate&#13;
   */&#13;
  modifier canTransfer(uint256 _tokenId) {&#13;
    require(isApprovedOrOwner(msg.sender, _tokenId));&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the balance of the specified address&#13;
   * @param _owner address to query the balance of&#13;
   * @return uint256 representing the amount owned by the passed address&#13;
   */&#13;
  function balanceOf(address _owner) public view returns (uint256) {&#13;
    require(_owner != address(0));&#13;
    return ownedTokensCount[_owner];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the owner of the specified token ID&#13;
   * @param _tokenId uint256 ID of the token to query the owner of&#13;
   * @return owner address currently marked as the owner of the given token ID&#13;
   */&#13;
  function ownerOf(uint256 _tokenId) public view returns (address) {&#13;
    address owner = tokenOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
    return owner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether the specified token exists&#13;
   * @param _tokenId uint256 ID of the token to query the existance of&#13;
   * @return whether the token exists&#13;
   */&#13;
  function exists(uint256 _tokenId) public view returns (bool) {&#13;
    address owner = tokenOwner[_tokenId];&#13;
    return owner != address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approves another address to transfer the given token ID&#13;
   * @dev The zero address indicates there is no approved address.&#13;
   * @dev There can only be one approved address per token at a given time.&#13;
   * @dev Can only be called by the token owner or an approved operator.&#13;
   * @param _to address to be approved for the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be approved&#13;
   */&#13;
  function approve(address _to, uint256 _tokenId) public {&#13;
    address owner = ownerOf(_tokenId);&#13;
    require(_to != owner);&#13;
    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));&#13;
&#13;
    if (getApproved(_tokenId) != address(0) || _to != address(0)) {&#13;
      tokenApprovals[_tokenId] = _to;&#13;
      emit Approval(owner, _to, _tokenId);&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the approved address for a token ID, or zero if no address set&#13;
   * @param _tokenId uint256 ID of the token to query the approval of&#13;
   * @return address currently approved for a the given token ID&#13;
   */&#13;
  function getApproved(uint256 _tokenId) public view returns (address) {&#13;
    return tokenApprovals[_tokenId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Sets or unsets the approval of a given operator&#13;
   * @dev An operator is allowed to transfer all tokens of the sender on their behalf&#13;
   * @param _to operator address to set the approval&#13;
   * @param _approved representing the status of the approval to be set&#13;
   */&#13;
  function setApprovalForAll(address _to, bool _approved) public {&#13;
    require(_to != msg.sender);&#13;
    operatorApprovals[msg.sender][_to] = _approved;&#13;
    emit ApprovalForAll(msg.sender, _to, _approved);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Tells whether an operator is approved by a given owner&#13;
   * @param _owner owner address which you want to query the approval of&#13;
   * @param _operator operator address which you want to query the approval of&#13;
   * @return bool whether the given operator is approved by the given owner&#13;
   */&#13;
  function isApprovedForAll(address _owner, address _operator) public view returns (bool) {&#13;
    return operatorApprovals[_owner][_operator];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers the ownership of a given token ID to another address&#13;
   * @dev Usage of this method is discouraged, use `safeTransferFrom` whenever possible&#13;
   * @dev Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
  */&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public canTransfer(_tokenId) {&#13;
    require(_from != address(0));&#13;
    require(_to != address(0));&#13;
&#13;
    clearApproval(_from, _tokenId);&#13;
    removeTokenFrom(_from, _tokenId);&#13;
    addTokenTo(_to, _tokenId);&#13;
&#13;
    emit Transfer(_from, _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Safely transfers the ownership of a given token ID to another address&#13;
   * @dev If the target address is a contract, it must implement `onERC721Received`,&#13;
   *  which is called upon a safe transfer, and return the magic value&#13;
   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,&#13;
   *  the transfer is reverted.&#13;
   * @dev Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
  */&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  )&#13;
    public&#13;
    canTransfer(_tokenId)&#13;
  {&#13;
    // solium-disable-next-line arg-overflow&#13;
    safeTransferFrom(_from, _to, _tokenId, "");&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Safely transfers the ownership of a given token ID to another address&#13;
   * @dev If the target address is a contract, it must implement `onERC721Received`,&#13;
   *  which is called upon a safe transfer, and return the magic value&#13;
   *  `bytes4(keccak256("onERC721Received(address,uint256,bytes)"))`; otherwise,&#13;
   *  the transfer is reverted.&#13;
   * @dev Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @param _data bytes data to send along with a safe transfer check&#13;
   */&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public&#13;
    canTransfer(_tokenId)&#13;
  {&#13;
    transferFrom(_from, _to, _tokenId);&#13;
    // solium-disable-next-line arg-overflow&#13;
    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether the given spender can transfer a given token ID&#13;
   * @param _spender address of the spender to query&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @return bool whether the msg.sender is approved for the given token ID,&#13;
   *  is an operator of the owner, or is the owner of the token&#13;
   */&#13;
  function isApprovedOrOwner(address _spender, uint256 _tokenId) internal view returns (bool) {&#13;
    address owner = ownerOf(_tokenId);&#13;
    return _spender == owner || getApproved(_tokenId) == _spender || isApprovedForAll(owner, _spender);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to mint a new token&#13;
   * @dev Reverts if the given token ID already exists&#13;
   * @param _to The address that will own the minted token&#13;
   * @param _tokenId uint256 ID of the token to be minted by the msg.sender&#13;
   */&#13;
  function _mint(address _to, uint256 _tokenId) internal {&#13;
    require(_to != address(0));&#13;
    addTokenTo(_to, _tokenId);&#13;
    emit Transfer(address(0), _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to burn a specific token&#13;
   * @dev Reverts if the token does not exist&#13;
   * @param _tokenId uint256 ID of the token being burned by the msg.sender&#13;
   */&#13;
  function _burn(address _owner, uint256 _tokenId) internal {&#13;
    clearApproval(_owner, _tokenId);&#13;
    removeTokenFrom(_owner, _tokenId);&#13;
    emit Transfer(_owner, address(0), _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to clear current approval of a given token ID&#13;
   * @dev Reverts if the given address is not indeed the owner of the token&#13;
   * @param _owner owner of the token&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   */&#13;
  function clearApproval(address _owner, uint256 _tokenId) internal {&#13;
    require(ownerOf(_tokenId) == _owner);&#13;
    if (tokenApprovals[_tokenId] != address(0)) {&#13;
      tokenApprovals[_tokenId] = address(0);&#13;
      emit Approval(_owner, address(0), _tokenId);&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to add a token ID to the list of a given address&#13;
   * @param _to address representing the new owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address&#13;
   */&#13;
  function addTokenTo(address _to, uint256 _tokenId) internal {&#13;
    require(tokenOwner[_tokenId] == address(0));&#13;
    tokenOwner[_tokenId] = _to;&#13;
    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to remove a token ID from the list of a given address&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address&#13;
   */&#13;
  function removeTokenFrom(address _from, uint256 _tokenId) internal {&#13;
    require(ownerOf(_tokenId) == _from);&#13;
    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);&#13;
    tokenOwner[_tokenId] = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to invoke `onERC721Received` on a target address&#13;
   * @dev The call is not executed if the target address is not a contract&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _to target address that will receive the tokens&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @param _data bytes optional data to send along with the call&#13;
   * @return whether the call correctly returned the expected magic value&#13;
   */&#13;
  function checkAndCallSafeTransfer(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    internal&#13;
    returns (bool)&#13;
  {&#13;
    if (!_to.isContract()) {&#13;
      return true;&#13;
    }&#13;
    bytes4 retval = ERC721Receiver(_to).onERC721Received(_from, _tokenId, _data);&#13;
    return (retval == ERC721_RECEIVED);&#13;
  }&#13;
}&#13;
&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender) public view returns (uint256);&#13;
  function transferFrom(address from, address to, uint256 value) public returns (bool);&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
contract ERC721Token is ERC721, ERC721BasicToken {&#13;
  // Token name&#13;
  string internal name_;&#13;
&#13;
  // Token symbol&#13;
  string internal symbol_;&#13;
&#13;
  // Mapping from owner to list of owned token IDs&#13;
  mapping (address =&gt; uint256[]) internal ownedTokens;&#13;
&#13;
  // Mapping from token ID to index of the owner tokens list&#13;
  mapping(uint256 =&gt; uint256) internal ownedTokensIndex;&#13;
&#13;
  // Array with all token ids, used for enumeration&#13;
  uint256[] internal allTokens;&#13;
&#13;
  // Mapping from token id to position in the allTokens array&#13;
  mapping(uint256 =&gt; uint256) internal allTokensIndex;&#13;
&#13;
  // Optional mapping for token URIs&#13;
  mapping(uint256 =&gt; string) internal tokenURIs;&#13;
&#13;
  /**&#13;
   * @dev Constructor function&#13;
   */&#13;
  function ERC721Token(string _name, string _symbol) public {&#13;
    name_ = _name;&#13;
    symbol_ = _symbol;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token name&#13;
   * @return string representing the token name&#13;
   */&#13;
  function name() public view returns (string) {&#13;
    return name_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token symbol&#13;
   * @return string representing the token symbol&#13;
   */&#13;
  function symbol() public view returns (string) {&#13;
    return symbol_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns an URI for a given token ID&#13;
   * @dev Throws if the token ID does not exist. May return an empty string.&#13;
   * @param _tokenId uint256 ID of the token to query&#13;
   */&#13;
  function tokenURI(uint256 _tokenId) public view returns (string) {&#13;
    require(exists(_tokenId));&#13;
    return tokenURIs[_tokenId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token ID at a given index of the tokens list of the requested owner&#13;
   * @param _owner address owning the tokens list to be accessed&#13;
   * @param _index uint256 representing the index to be accessed of the requested tokens list&#13;
   * @return uint256 token ID at the given index of the tokens list owned by the requested address&#13;
   */&#13;
  function tokenOfOwnerByIndex(address _owner, uint256 _index) public view returns (uint256) {&#13;
    require(_index &lt; balanceOf(_owner));&#13;
    return ownedTokens[_owner][_index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the total amount of tokens stored by the contract&#13;
   * @return uint256 representing the total amount of tokens&#13;
   */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return allTokens.length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token ID at a given index of all the tokens in this contract&#13;
   * @dev Reverts if the index is greater or equal to the total number of tokens&#13;
   * @param _index uint256 representing the index to be accessed of the tokens list&#13;
   * @return uint256 token ID at the given index of the tokens list&#13;
   */&#13;
  function tokenByIndex(uint256 _index) public view returns (uint256) {&#13;
    require(_index &lt; totalSupply());&#13;
    return allTokens[_index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to set the token URI for a given token&#13;
   * @dev Reverts if the token ID does not exist&#13;
   * @param _tokenId uint256 ID of the token to set its URI&#13;
   * @param _uri string URI to assign&#13;
   */&#13;
  function _setTokenURI(uint256 _tokenId, string _uri) internal {&#13;
    require(exists(_tokenId));&#13;
    tokenURIs[_tokenId] = _uri;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to add a token ID to the list of a given address&#13;
   * @param _to address representing the new owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address&#13;
   */&#13;
  function addTokenTo(address _to, uint256 _tokenId) internal {&#13;
    super.addTokenTo(_to, _tokenId);&#13;
    uint256 length = ownedTokens[_to].length;&#13;
    ownedTokens[_to].push(_tokenId);&#13;
    ownedTokensIndex[_tokenId] = length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to remove a token ID from the list of a given address&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address&#13;
   */&#13;
  function removeTokenFrom(address _from, uint256 _tokenId) internal {&#13;
    super.removeTokenFrom(_from, _tokenId);&#13;
&#13;
    uint256 tokenIndex = ownedTokensIndex[_tokenId];&#13;
    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);&#13;
    uint256 lastToken = ownedTokens[_from][lastTokenIndex];&#13;
&#13;
    ownedTokens[_from][tokenIndex] = lastToken;&#13;
    ownedTokens[_from][lastTokenIndex] = 0;&#13;
    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to&#13;
    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping&#13;
    // the lastToken to the first position, and then dropping the element placed in the last position of the list&#13;
&#13;
    ownedTokens[_from].length--;&#13;
    ownedTokensIndex[_tokenId] = 0;&#13;
    ownedTokensIndex[lastToken] = tokenIndex;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to mint a new token&#13;
   * @dev Reverts if the given token ID already exists&#13;
   * @param _to address the beneficiary that will own the minted token&#13;
   * @param _tokenId uint256 ID of the token to be minted by the msg.sender&#13;
   */&#13;
  function _mint(address _to, uint256 _tokenId) internal {&#13;
    super._mint(_to, _tokenId);&#13;
&#13;
    allTokensIndex[_tokenId] = allTokens.length;&#13;
    allTokens.push(_tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to burn a specific token&#13;
   * @dev Reverts if the token does not exist&#13;
   * @param _owner owner of the token to burn&#13;
   * @param _tokenId uint256 ID of the token being burned by the msg.sender&#13;
   */&#13;
  function _burn(address _owner, uint256 _tokenId) internal {&#13;
    super._burn(_owner, _tokenId);&#13;
&#13;
    // Clear metadata (if any)&#13;
    if (bytes(tokenURIs[_tokenId]).length != 0) {&#13;
      delete tokenURIs[_tokenId];&#13;
    }&#13;
&#13;
    // Reorg all tokens array&#13;
    uint256 tokenIndex = allTokensIndex[_tokenId];&#13;
    uint256 lastTokenIndex = allTokens.length.sub(1);&#13;
    uint256 lastToken = allTokens[lastTokenIndex];&#13;
&#13;
    allTokens[tokenIndex] = lastToken;&#13;
    allTokens[lastTokenIndex] = 0;&#13;
&#13;
    allTokens.length--;&#13;
    allTokensIndex[_tokenId] = 0;&#13;
    allTokensIndex[lastToken] = tokenIndex;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract EveryDappToken is ERC721Token, Ownable {&#13;
    using SafeMath for uint256;&#13;
&#13;
    struct Ad {&#13;
        uint32 width; //in pixels&#13;
        uint32 height;&#13;
        string imageUrl;&#13;
        string href;&#13;
        bool forSale;&#13;
        uint256 price;&#13;
    }&#13;
&#13;
    event AdOffered(uint256 adId, uint256 price);&#13;
    event OfferCancelled(uint256 adId);&#13;
    event AdBought(uint256 adId);&#13;
    event AdAdded(uint256 adId);&#13;
&#13;
    mapping(uint256 =&gt; Ad) public ads;&#13;
    mapping(uint256 =&gt; uint) public suggestedAdPrices;&#13;
    uint256 public ownerCut; //0-10000, in 0,01% so 10000 means 100%&#13;
    uint256 public priceProgression; //0-10000, in 0,01% so 10000 means 100%&#13;
&#13;
    constructor() public ERC721Token("EveryDapp Token", "EVDT") {&#13;
        ownerCut = 1000;&#13;
        priceProgression = 1000;&#13;
    }&#13;
&#13;
    modifier onlyExistingAd(uint256 _adId) {&#13;
        require(exists(_adId));&#13;
        _;&#13;
    }&#13;
&#13;
    function adIds() public view returns (uint256[]) {&#13;
        return allTokens;&#13;
    }&#13;
&#13;
    function transferFrom(&#13;
        address _from,&#13;
        address _to,&#13;
        uint256 _adId&#13;
    ) public {&#13;
        ERC721BasicToken.transferFrom(_from, _to, _adId);&#13;
&#13;
        _cancelOffer(_adId);&#13;
    }&#13;
&#13;
    function addAd(&#13;
        uint32 _width,&#13;
        uint32 _height,&#13;
        string _imageUrl,&#13;
        string _href,&#13;
        uint256 _initialPrice&#13;
    ) public onlyOwner {&#13;
        uint256 newAdId = allTokens.length;&#13;
        super._mint(owner, newAdId);&#13;
        ads[newAdId] = Ad({&#13;
            width: _width,&#13;
            height: _height,&#13;
            imageUrl: _imageUrl,&#13;
            href: _href,&#13;
            forSale: false,&#13;
            price: 0&#13;
        });&#13;
        _setSuggestedAdPrice(newAdId, _initialPrice);&#13;
&#13;
        emit AdAdded(newAdId);&#13;
    }&#13;
&#13;
    function setAdData(&#13;
        uint256 _adId,&#13;
        string _imageUrl,&#13;
        string _href&#13;
    ) public onlyOwnerOf(_adId) {&#13;
        ads[_adId].imageUrl = _imageUrl;&#13;
        ads[_adId].href = _href;&#13;
    }&#13;
&#13;
    function offerAd(uint256 _adId, uint256 _price) public onlyOwnerOf(_adId) {&#13;
        ads[_adId].forSale = true;&#13;
&#13;
        if (_price == 0) {&#13;
            ads[_adId].price = suggestedAdPrices[_adId];&#13;
        } else {&#13;
            ads[_adId].price = _price;&#13;
        }&#13;
&#13;
        emit AdOffered(_adId, ads[_adId].price);&#13;
    }&#13;
&#13;
    function cancelOffer(uint256 _adId) public onlyOwnerOf(_adId) {&#13;
        _cancelOffer(_adId);&#13;
    }&#13;
&#13;
    function buyAd(uint256 _adId) public payable onlyExistingAd(_adId) {&#13;
        address adOwner = ownerOf(_adId);&#13;
        uint256 adPrice = ads[_adId].price;&#13;
&#13;
        require(ads[_adId].forSale);&#13;
        require(msg.value == adPrice);&#13;
        require(msg.sender != adOwner);&#13;
&#13;
        tokenApprovals[_adId] = msg.sender;&#13;
        safeTransferFrom(adOwner, msg.sender, _adId);&#13;
&#13;
        _setSuggestedAdPrice(_adId, _progressAdPrice(adPrice));&#13;
&#13;
        uint256 ownerFee = calculateOwnerFee(msg.value);&#13;
        uint256 sellerFee = msg.value - ownerFee;&#13;
&#13;
        owner.transfer(ownerFee);&#13;
        adOwner.transfer(sellerFee);&#13;
&#13;
        emit AdBought(_adId);&#13;
    }&#13;
&#13;
    function setOwnerCut(uint16 _ownerCut) public onlyOwner {&#13;
        ownerCut = _ownerCut;&#13;
    }&#13;
&#13;
    function setPriceProgression(uint16 _priceProgression) public onlyOwner {&#13;
        priceProgression = _priceProgression;&#13;
    }&#13;
&#13;
    function setSuggestedAdPrice(uint256 _adId, uint256 _price) public onlyOwner {&#13;
        require(!ads[_adId].forSale);&#13;
&#13;
        _setSuggestedAdPrice(_adId, _price);&#13;
    }&#13;
&#13;
    function calculateOwnerFee(uint256 _value) public view returns (uint256) {&#13;
        return _value.mul(ownerCut).div(10000);&#13;
    }&#13;
&#13;
    function _cancelOffer(uint256 _adId) private {&#13;
        bool wasOffered = ads[_adId].forSale;&#13;
&#13;
        ads[_adId].forSale = false;&#13;
        ads[_adId].price = 0;&#13;
&#13;
        if (wasOffered) {&#13;
            emit OfferCancelled(_adId);&#13;
        }&#13;
    }&#13;
&#13;
    function _setSuggestedAdPrice(uint256 _adId, uint256 _price) private {&#13;
        require(!ads[_adId].forSale);&#13;
&#13;
        suggestedAdPrices[_adId] = _price;&#13;
    }&#13;
&#13;
    function _progressAdPrice(uint256 _basePrice) private view returns (uint256) {&#13;
        return _basePrice.mul(priceProgression.add(10000)).div(10000);&#13;
    }&#13;
&#13;
    // In case of accidental ether lock on contract&#13;
    function withdraw() public onlyOwner {&#13;
        owner.transfer(address(this).balance);&#13;
    }&#13;
&#13;
    // In case of accidental token transfer to this address, owner can transfer it elsewhere&#13;
    function transferERC20Token(&#13;
        address _tokenAddress,&#13;
        address _to,&#13;
        uint256 _value&#13;
    ) public onlyOwner {&#13;
        ERC20 token = ERC20(_tokenAddress);&#13;
        assert(token.transfer(_to, _value));&#13;
    }&#13;
}
pragma solidity ^0.4.11;


/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<span class="__cf_email__" data-cfemail="f397968796b3928b9a9c9e89969ddd909c">[emailÂ protected]</span>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
    // Required methods&#13;
    function totalSupply() public view returns (uint256 total);&#13;
    function balanceOf(address _owner) public view returns (uint256 balance);&#13;
    function ownerOf(uint256 _tokenId) external view returns (address owner);&#13;
    function approve(address _to, uint256 _tokenId) external;&#13;
    function transfer(address _to, uint256 _tokenId) external;&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
&#13;
    // Events&#13;
    event Transfer(address from, address to, uint256 tokenId);&#13;
    event Approval(address owner, address approved, uint256 tokenId);&#13;
&#13;
    // Optional&#13;
    // function name() public view returns (string name);&#13;
    // function symbol() public view returns (string symbol);&#13;
    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);&#13;
    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);&#13;
&#13;
    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool);&#13;
}&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
    address public owner;&#13;
&#13;
&#13;
    /**&#13;
     * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
     * account.&#13;
     */&#13;
    function Ownable() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
&#13;
    /**&#13;
     * @dev Throws if called by any account other than the owner.&#13;
     */&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
&#13;
    /**&#13;
     * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
     * @param newOwner The address to transfer ownership to.&#13;
     */&#13;
    function transferOwnership(address newOwner) public onlyOwner {&#13;
        if (newOwner != address(0)) {&#13;
            owner = newOwner;&#13;
        }&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is Ownable {&#13;
    event Pause();&#13;
    event Unpause();&#13;
&#13;
    bool public paused = false;&#13;
&#13;
&#13;
    /**&#13;
     * @dev modifier to allow actions only when the contract IS paused&#13;
     */&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev modifier to allow actions only when the contract IS NOT paused&#13;
     */&#13;
    modifier whenPaused {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev called by the owner to pause, triggers stopped state&#13;
     */&#13;
    function pause() public onlyOwner whenNotPaused returns (bool) {&#13;
        paused = true;&#13;
        Pause();&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev called by the owner to unpause, returns to normal state&#13;
     */&#13;
    function unpause() public onlyOwner whenPaused returns (bool) {&#13;
        paused = false;&#13;
        Unpause();&#13;
        return true;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title Auction Core&#13;
/// @dev Contains models, variables, and internal methods for the auction.&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract ClockAuctionBase {&#13;
&#13;
    // Represents an auction on an NFT&#13;
    struct Auction {&#13;
    // Current owner of NFT&#13;
    address seller;&#13;
    // Price (in wei) at beginning of auction&#13;
    uint128 startingPrice;&#13;
    // Price (in wei) at end of auction&#13;
    uint128 endingPrice;&#13;
    // Duration (in seconds) of auction&#13;
    uint64 duration;&#13;
    // Time when auction started&#13;
    // NOTE: 0 if this auction has been concluded&#13;
    uint64 startedAt;&#13;
    }&#13;
&#13;
    // Reference to contract tracking NFT ownership&#13;
    ERC721 public nonFungibleContract;&#13;
&#13;
    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).&#13;
    // Values 0-10,000 map to 0%-100%&#13;
    uint256 public ownerCut;&#13;
&#13;
    // Map from token ID to their corresponding auction.&#13;
    mapping (uint256 =&gt; Auction) tokenIdToAuction;&#13;
&#13;
    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);&#13;
    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);&#13;
    event AuctionCancelled(uint256 tokenId);&#13;
&#13;
    /// @dev Returns true if the claimant owns the token.&#13;
    /// @param _claimant - Address claiming to own the token.&#13;
    /// @param _tokenId - ID of token whose ownership to verify.&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);&#13;
    }&#13;
&#13;
    /// @dev Escrows the NFT, assigning ownership to this contract.&#13;
    /// Throws if the escrow fails.&#13;
    /// @param _owner - Current owner address of token to escrow.&#13;
    /// @param _tokenId - ID of token whose approval to verify.&#13;
    function _escrow(address _owner, uint256 _tokenId) internal {&#13;
        // it will throw if transfer fails&#13;
        nonFungibleContract.transferFrom(_owner, this, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Transfers an NFT owned by this contract to another address.&#13;
    /// Returns true if the transfer succeeds.&#13;
    /// @param _receiver - Address to transfer NFT to.&#13;
    /// @param _tokenId - ID of token to transfer.&#13;
    function _transfer(address _receiver, uint256 _tokenId) internal {&#13;
        // it will throw if transfer fails&#13;
        nonFungibleContract.transfer(_receiver, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Adds an auction to the list of open auctions. Also fires the&#13;
    ///  AuctionCreated event.&#13;
    /// @param _tokenId The ID of the token to be put on auction.&#13;
    /// @param _auction Auction to add.&#13;
    function _addAuction(uint256 _tokenId, Auction _auction) internal {&#13;
        // Require that all auctions have a duration of&#13;
        // at least one minute. (Keeps our math from getting hairy!)&#13;
        require(_auction.duration &gt;= 1 minutes);&#13;
&#13;
        tokenIdToAuction[_tokenId] = _auction;&#13;
&#13;
        AuctionCreated(&#13;
        uint256(_tokenId),&#13;
        uint256(_auction.startingPrice),&#13;
        uint256(_auction.endingPrice),&#13;
        uint256(_auction.duration)&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction unconditionally.&#13;
    function _cancelAuction(uint256 _tokenId, address _seller) internal {&#13;
        _removeAuction(_tokenId);&#13;
        _transfer(_seller, _tokenId);&#13;
        AuctionCancelled(_tokenId);&#13;
    }&#13;
&#13;
    /// @dev Computes the price and transfers winnings.&#13;
    /// Does NOT transfer ownership of token.&#13;
    function _bid(uint256 _tokenId, uint256 _bidAmount)&#13;
    internal&#13;
    returns (uint256)&#13;
    {&#13;
        // Get a reference to the auction struct&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
&#13;
        // Explicitly check that this auction is currently live.&#13;
        // (Because of how Ethereum mappings work, we can't just count&#13;
        // on the lookup above failing. An invalid _tokenId will just&#13;
        // return an auction object that is all zeros.)&#13;
        require(_isOnAuction(auction));&#13;
&#13;
        // Check that the bid is greater than or equal to the current price&#13;
        uint256 price = _currentPrice(auction);&#13;
        require(_bidAmount &gt;= price);&#13;
&#13;
        // Grab a reference to the seller before the auction struct&#13;
        // gets deleted.&#13;
        address seller = auction.seller;&#13;
&#13;
        // The bid is good! Remove the auction before sending the fees&#13;
        // to the sender so we can't have a reentrancy attack.&#13;
        _removeAuction(_tokenId);&#13;
&#13;
        // Transfer proceeds to seller (if there are any!)&#13;
        if (price &gt; 0) {&#13;
            // Calculate the auctioneer's cut.&#13;
            // (NOTE: _computeCut() is guaranteed to return a&#13;
            // value &lt;= price, so this subtraction can't go negative.)&#13;
            uint256 auctioneerCut = _computeCut(price);&#13;
            uint256 sellerProceeds = price - auctioneerCut;&#13;
&#13;
            // NOTE: Doing a transfer() in the middle of a complex&#13;
            // method like this is generally discouraged because of&#13;
            // reentrancy attacks and DoS attacks if the seller is&#13;
            // a contract with an invalid fallback function. We explicitly&#13;
            // guard against reentrancy attacks by removing the auction&#13;
            // before calling transfer(), and the only thing the seller&#13;
            // can DoS is the sale of their own asset! (And if it's an&#13;
            // accident, they can call cancelAuction(). )&#13;
            seller.transfer(sellerProceeds);&#13;
        }&#13;
&#13;
        // Calculate any excess funds included with the bid. If the excess&#13;
        // is anything worth worrying about, transfer it back to bidder.&#13;
        // NOTE: We checked above that the bid amount is greater than or&#13;
        // equal to the price so this cannot underflow.&#13;
        uint256 bidExcess = _bidAmount - price;&#13;
&#13;
        // Return the funds. Similar to the previous transfer, this is&#13;
        // not susceptible to a re-entry attack because the auction is&#13;
        // removed before any transfers occur.&#13;
        msg.sender.transfer(bidExcess);&#13;
&#13;
        // Tell the world!&#13;
        AuctionSuccessful(_tokenId, price, msg.sender);&#13;
&#13;
        return price;&#13;
    }&#13;
&#13;
    /// @dev Removes an auction from the list of open auctions.&#13;
    /// @param _tokenId - ID of NFT on auction.&#13;
    function _removeAuction(uint256 _tokenId) internal {&#13;
        delete tokenIdToAuction[_tokenId];&#13;
    }&#13;
&#13;
    /// @dev Returns true if the NFT is on auction.&#13;
    /// @param _auction - Auction to check.&#13;
    function _isOnAuction(Auction storage _auction) internal view returns (bool) {&#13;
        return (_auction.startedAt &gt; 0);&#13;
    }&#13;
&#13;
    /// @dev Returns current price of an NFT on auction. Broken into two&#13;
    ///  functions (this one, that computes the duration from the auction&#13;
    ///  structure, and the other that does the price computation) so we&#13;
    ///  can easily test that the price computation works correctly.&#13;
    function _currentPrice(Auction storage _auction)&#13;
    internal&#13;
    view&#13;
    returns (uint256)&#13;
    {&#13;
        uint256 secondsPassed = 0;&#13;
&#13;
        // A bit of insurance against negative values (or wraparound).&#13;
        // Probably not necessary (since Ethereum guarnatees that the&#13;
        // now variable doesn't ever go backwards).&#13;
        if (now &gt; _auction.startedAt) {&#13;
            secondsPassed = now - _auction.startedAt;&#13;
        }&#13;
&#13;
        return _computeCurrentPrice(&#13;
        _auction.startingPrice,&#13;
        _auction.endingPrice,&#13;
        _auction.duration,&#13;
        secondsPassed&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Computes the current price of an auction. Factored out&#13;
    ///  from _currentPrice so we can run extensive unit tests.&#13;
    ///  When testing, make this function public and turn on&#13;
    ///  `Current price computation` test suite.&#13;
    function _computeCurrentPrice(&#13;
    uint256 _startingPrice,&#13;
    uint256 _endingPrice,&#13;
    uint256 _duration,&#13;
    uint256 _secondsPassed&#13;
    )&#13;
    internal&#13;
    pure&#13;
    returns (uint256)&#13;
    {&#13;
        // NOTE: We don't use SafeMath (or similar) in this function because&#13;
        //  all of our public functions carefully cap the maximum values for&#13;
        //  time (at 64-bits) and currency (at 128-bits). _duration is&#13;
        //  also known to be non-zero (see the require() statement in&#13;
        //  _addAuction())&#13;
        if (_secondsPassed &gt;= _duration) {&#13;
            // We've reached the end of the dynamic pricing portion&#13;
            // of the auction, just return the end price.&#13;
            return _endingPrice;&#13;
        } else {&#13;
            // Starting price can be higher than ending price (and often is!), so&#13;
            // this delta can be negative.&#13;
            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);&#13;
&#13;
            // This multiplication can't overflow, _secondsPassed will easily fit within&#13;
            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product&#13;
            // will always fit within 256-bits.&#13;
            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);&#13;
&#13;
            // currentPriceChange can be negative, but if so, will have a magnitude&#13;
            // less that _startingPrice. Thus, this result will always end up positive.&#13;
            int256 currentPrice = int256(_startingPrice) + currentPriceChange;&#13;
&#13;
            return uint256(currentPrice);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Computes owner's cut of a sale.&#13;
    /// @param _price - Sale price of NFT.&#13;
    function _computeCut(uint256 _price) internal view returns (uint256) {&#13;
        // NOTE: We don't use SafeMath (or similar) in this function because&#13;
        //  all of our entry functions carefully cap the maximum values for&#13;
        //  currency (at 128-bits), and ownerCut &lt;= 10000 (see the require()&#13;
        //  statement in the ClockAuction constructor). The result of this&#13;
        //  function is always guaranteed to be &lt;= _price.&#13;
        return _price * ownerCut / 10000;&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title Clock auction for non-fungible tokens.&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract ClockAuction is Pausable, ClockAuctionBase {&#13;
&#13;
    /// @dev The ERC-165 interface signature for ERC-721.&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/165&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/721&#13;
    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);&#13;
&#13;
    /// @dev Constructor creates a reference to the NFT ownership contract&#13;
    ///  and verifies the owner cut is in the valid range.&#13;
    /// @param _nftAddress - address of a deployed contract implementing&#13;
    ///  the Nonfungible Interface.&#13;
    /// @param _cut - percent cut the owner takes on each auction, must be&#13;
    ///  between 0-10,000.&#13;
    function ClockAuction(address _nftAddress, uint256 _cut) public {&#13;
        require(_cut &lt;= 10000);&#13;
        ownerCut = _cut;&#13;
&#13;
        ERC721 candidateContract = ERC721(_nftAddress);&#13;
        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));&#13;
        nonFungibleContract = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Remove all Ether from the contract, which is the owner's cuts&#13;
    ///  as well as any Ether sent directly to the contract address.&#13;
    ///  Always transfers to the NFT contract, but can be called either by&#13;
    ///  the owner or the NFT contract.&#13;
    function withdrawBalance() external {&#13;
        address nftAddress = address(nonFungibleContract);&#13;
&#13;
        require(&#13;
        msg.sender == owner ||&#13;
        msg.sender == nftAddress&#13;
        );&#13;
        // We are using this boolean method to make sure that even if one fails it will still work&#13;
        nftAddress.transfer(this.balance);&#13;
    }&#13;
&#13;
    /// @dev Creates and begins a new auction.&#13;
    /// @param _tokenId - ID of token to auction, sender must be owner.&#13;
    /// @param _startingPrice - Price of item (in wei) at beginning of auction.&#13;
    /// @param _endingPrice - Price of item (in wei) at end of auction.&#13;
    /// @param _duration - Length of time to move between starting&#13;
    ///  price and ending price (in seconds).&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createAuction(&#13;
    uint256 _tokenId,&#13;
    uint256 _startingPrice,&#13;
    uint256 _endingPrice,&#13;
    uint256 _duration,&#13;
    address _seller&#13;
    )&#13;
    external&#13;
    whenNotPaused&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_startingPrice == uint256(uint128(_startingPrice)));&#13;
        require(_endingPrice == uint256(uint128(_endingPrice)));&#13;
        require(_duration == uint256(uint64(_duration)));&#13;
&#13;
        require(_owns(msg.sender, _tokenId));&#13;
        _escrow(msg.sender, _tokenId);&#13;
        Auction memory auction = Auction(&#13;
        _seller,&#13;
        uint128(_startingPrice),&#13;
        uint128(_endingPrice),&#13;
        uint64(_duration),&#13;
        uint64(now)&#13;
        );&#13;
        _addAuction(_tokenId, auction);&#13;
    }&#13;
&#13;
    /// @dev Bids on an open auction, completing the auction and transferring&#13;
    ///  ownership of the NFT if enough Ether is supplied.&#13;
    /// @param _tokenId - ID of token to bid on.&#13;
    function bid(uint256 _tokenId)&#13;
    external&#13;
    payable&#13;
    whenNotPaused&#13;
    {&#13;
        // _bid will throw if the bid or funds transfer fails&#13;
        _bid(_tokenId, msg.value);&#13;
        _transfer(msg.sender, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction that hasn't been won yet.&#13;
    ///  Returns the NFT to original owner.&#13;
    /// @notice This is a state-modifying function that can&#13;
    ///  be called while the contract is paused.&#13;
    /// @param _tokenId - ID of token on auction&#13;
    function cancelAuction(uint256 _tokenId)&#13;
    external&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        address seller = auction.seller;&#13;
        require(msg.sender == seller);&#13;
        _cancelAuction(_tokenId, seller);&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction when the contract is paused.&#13;
    ///  Only the owner may do this, and NFTs are returned to&#13;
    ///  the seller. This should only be used in emergencies.&#13;
    /// @param _tokenId - ID of the NFT on auction to cancel.&#13;
    function cancelAuctionWhenPaused(uint256 _tokenId)&#13;
    whenPaused&#13;
    onlyOwner&#13;
    external&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        _cancelAuction(_tokenId, auction.seller);&#13;
    }&#13;
&#13;
    /// @dev Returns auction info for an NFT on auction.&#13;
    /// @param _tokenId - ID of NFT on auction.&#13;
    function getAuction(uint256 _tokenId)&#13;
    external&#13;
    view&#13;
    returns&#13;
    (&#13;
    address seller,&#13;
    uint256 startingPrice,&#13;
    uint256 endingPrice,&#13;
    uint256 duration,&#13;
    uint256 startedAt&#13;
    ) {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        return (&#13;
        auction.seller,&#13;
        auction.startingPrice,&#13;
        auction.endingPrice,&#13;
        auction.duration,&#13;
        auction.startedAt&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Returns the current price of an auction.&#13;
    /// @param _tokenId - ID of the token price we are checking.&#13;
    function getCurrentPrice(uint256 _tokenId)&#13;
    external&#13;
    view&#13;
    returns (uint256)&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        return _currentPrice(auction);&#13;
    }&#13;
&#13;
}&#13;
&#13;
//&#13;
contract GeneScience {&#13;
&#13;
    uint64 _seed = 0;&#13;
&#13;
    /// @dev simply a boolean to indicate this is the contract we expect to be&#13;
    /// pure means "they promise not to read from or modify the state."&#13;
    function isGeneScience() public pure returns (bool) {&#13;
        return true;&#13;
    }&#13;
&#13;
    // return a pseudo random number between lower and upper bounds&#13;
    // given the number of previous blocks it should hash.&#13;
    function random(uint64 upper) internal returns (uint64) {&#13;
        _seed = uint64(keccak256(keccak256(block.blockhash(block.number), _seed), now));&#13;
        return _seed % upper;&#13;
    }&#13;
&#13;
    function randomBetween(uint32 a, uint32 b) internal returns (uint32) {&#13;
        uint32 min;&#13;
        uint32 max;&#13;
        if(a &lt; b) {&#13;
            min = a;&#13;
            max = b;&#13;
        } else {&#13;
            min = b;&#13;
            max = a;&#13;
        }&#13;
&#13;
        return min + uint32(random(max - min + 1));&#13;
    }&#13;
&#13;
    function randomCode() internal returns (uint8) {&#13;
        //&#13;
        uint64 r = random(1000000);&#13;
&#13;
        if (r &lt;= 163) return 151;&#13;
        if (r &lt;= 327) return 251;&#13;
        if (r &lt;= 490) return 196;&#13;
        if (r &lt;= 654) return 197;&#13;
        if (r &lt;= 817) return 238;&#13;
        if (r &lt;= 981) return 240;&#13;
        if (r &lt;= 1144) return 239;&#13;
        if (r &lt;= 1308) return 173;&#13;
        if (r &lt;= 1471) return 175;&#13;
        if (r &lt;= 1635) return 174;&#13;
        if (r &lt;= 1798) return 236;&#13;
        if (r &lt;= 1962) return 172;&#13;
        if (r &lt;= 2289) return 250;&#13;
        if (r &lt;= 2616) return 249;&#13;
        if (r &lt;= 2943) return 244;&#13;
        if (r &lt;= 3270) return 243;&#13;
        if (r &lt;= 3597) return 245;&#13;
        if (r &lt;= 4087) return 145;&#13;
        if (r &lt;= 4577) return 146;&#13;
        if (r &lt;= 5068) return 144;&#13;
        if (r &lt;= 5885) return 248;&#13;
        if (r &lt;= 6703) return 149;&#13;
        if (r &lt;= 7520) return 143;&#13;
        if (r &lt;= 8337) return 112;&#13;
        if (r &lt;= 9155) return 242;&#13;
        if (r &lt;= 9972) return 212;&#13;
        if (r &lt;= 10790) return 160;&#13;
        if (r &lt;= 11607) return 6;&#13;
        if (r &lt;= 12424) return 157;&#13;
        if (r &lt;= 13242) return 131;&#13;
        if (r &lt;= 14059) return 3;&#13;
        if (r &lt;= 14877) return 233;&#13;
        if (r &lt;= 15694) return 9;&#13;
        if (r &lt;= 16511) return 154;&#13;
        if (r &lt;= 17329) return 182;&#13;
        if (r &lt;= 18146) return 176;&#13;
        if (r &lt;= 19127) return 150;&#13;
        if (r &lt;= 20762) return 130;&#13;
        if (r &lt;= 22397) return 68;&#13;
        if (r &lt;= 24031) return 65;&#13;
        if (r &lt;= 25666) return 59;&#13;
        if (r &lt;= 27301) return 94;&#13;
        if (r &lt;= 28936) return 199;&#13;
        if (r &lt;= 30571) return 169;&#13;
        if (r &lt;= 32205) return 208;&#13;
        if (r &lt;= 33840) return 230;&#13;
        if (r &lt;= 35475) return 186;&#13;
        if (r &lt;= 37110) return 36;&#13;
        if (r &lt;= 38744) return 38;&#13;
        if (r &lt;= 40379) return 192;&#13;
        if (r &lt;= 42014) return 26;&#13;
        if (r &lt;= 43649) return 237;&#13;
        if (r &lt;= 45284) return 148;&#13;
        if (r &lt;= 46918) return 247;&#13;
        if (r &lt;= 48553) return 2;&#13;
        if (r &lt;= 50188) return 5;&#13;
        if (r &lt;= 51823) return 8;&#13;
        if (r &lt;= 53785) return 134;&#13;
        if (r &lt;= 55746) return 232;&#13;
        if (r &lt;= 57708) return 76;&#13;
        if (r &lt;= 59670) return 136;&#13;
        if (r &lt;= 61632) return 135;&#13;
        if (r &lt;= 63593) return 181;&#13;
        if (r &lt;= 65555) return 62;&#13;
        if (r &lt;= 67517) return 34;&#13;
        if (r &lt;= 69479) return 31;&#13;
        if (r &lt;= 71440) return 221;&#13;
        if (r &lt;= 73402) return 71;&#13;
        if (r &lt;= 75364) return 185;&#13;
        if (r &lt;= 77325) return 18;&#13;
        if (r &lt;= 79287) return 15;&#13;
        if (r &lt;= 81249) return 12;&#13;
        if (r &lt;= 83211) return 159;&#13;
        if (r &lt;= 85172) return 189;&#13;
        if (r &lt;= 87134) return 219;&#13;
        if (r &lt;= 89096) return 156;&#13;
        if (r &lt;= 91058) return 153;&#13;
        if (r &lt;= 93510) return 217;&#13;
        if (r &lt;= 95962) return 139;&#13;
        if (r &lt;= 98414) return 229;&#13;
        if (r &lt;= 100866) return 141;&#13;
        if (r &lt;= 103319) return 210;&#13;
        if (r &lt;= 105771) return 45;&#13;
        if (r &lt;= 108223) return 205;&#13;
        if (r &lt;= 110675) return 78;&#13;
        if (r &lt;= 113127) return 224;&#13;
        if (r &lt;= 115580) return 171;&#13;
        if (r &lt;= 118032) return 164;&#13;
        if (r &lt;= 120484) return 178;&#13;
        if (r &lt;= 122936) return 195;&#13;
        if (r &lt;= 125388) return 105;&#13;
        if (r &lt;= 127840) return 162;&#13;
        if (r &lt;= 130293) return 168;&#13;
        if (r &lt;= 132745) return 184;&#13;
        if (r &lt;= 135197) return 166;&#13;
        if (r &lt;= 138467) return 103;&#13;
        if (r &lt;= 141736) return 89;&#13;
        if (r &lt;= 145006) return 99;&#13;
        if (r &lt;= 148275) return 142;&#13;
        if (r &lt;= 151545) return 80;&#13;
        if (r &lt;= 154814) return 91;&#13;
        if (r &lt;= 158084) return 115;&#13;
        if (r &lt;= 161354) return 106;&#13;
        if (r &lt;= 164623) return 73;&#13;
        if (r &lt;= 167893) return 28;&#13;
        if (r &lt;= 171162) return 241;&#13;
        if (r &lt;= 174432) return 121;&#13;
        if (r &lt;= 177701) return 55;&#13;
        if (r &lt;= 180971) return 126;&#13;
        if (r &lt;= 184241) return 82;&#13;
        if (r &lt;= 187510) return 125;&#13;
        if (r &lt;= 190780) return 110;&#13;
        if (r &lt;= 194049) return 85;&#13;
        if (r &lt;= 197319) return 57;&#13;
        if (r &lt;= 200589) return 107;&#13;
        if (r &lt;= 203858) return 97;&#13;
        if (r &lt;= 207128) return 119;&#13;
        if (r &lt;= 210397) return 227;&#13;
        if (r &lt;= 213667) return 117;&#13;
        if (r &lt;= 216936) return 49;&#13;
        if (r &lt;= 220206) return 40;&#13;
        if (r &lt;= 223476) return 101;&#13;
        if (r &lt;= 226745) return 87;&#13;
        if (r &lt;= 230015) return 215;&#13;
        if (r &lt;= 233284) return 42;&#13;
        if (r &lt;= 236554) return 22;&#13;
        if (r &lt;= 239823) return 207;&#13;
        if (r &lt;= 243093) return 24;&#13;
        if (r &lt;= 246363) return 93;&#13;
        if (r &lt;= 249632) return 47;&#13;
        if (r &lt;= 252902) return 20;&#13;
        if (r &lt;= 256171) return 53;&#13;
        if (r &lt;= 259441) return 113;&#13;
        if (r &lt;= 262710) return 198;&#13;
        if (r &lt;= 265980) return 51;&#13;
        if (r &lt;= 269250) return 108;&#13;
        if (r &lt;= 272519) return 190;&#13;
        if (r &lt;= 275789) return 158;&#13;
        if (r &lt;= 279058) return 95;&#13;
        if (r &lt;= 282328) return 1;&#13;
        if (r &lt;= 285598) return 225;&#13;
        if (r &lt;= 288867) return 4;&#13;
        if (r &lt;= 292137) return 155;&#13;
        if (r &lt;= 295406) return 7;&#13;
        if (r &lt;= 298676) return 152;&#13;
        if (r &lt;= 301945) return 25;&#13;
        if (r &lt;= 305215) return 132;&#13;
        if (r &lt;= 309302) return 67;&#13;
        if (r &lt;= 313389) return 64;&#13;
        if (r &lt;= 317476) return 75;&#13;
        if (r &lt;= 321563) return 70;&#13;
        if (r &lt;= 325650) return 180;&#13;
        if (r &lt;= 329737) return 61;&#13;
        if (r &lt;= 333824) return 33;&#13;
        if (r &lt;= 337911) return 30;&#13;
        if (r &lt;= 341998) return 17;&#13;
        if (r &lt;= 346085) return 202;&#13;
        if (r &lt;= 350172) return 188;&#13;
        if (r &lt;= 354259) return 11;&#13;
        if (r &lt;= 358346) return 14;&#13;
        if (r &lt;= 362433) return 235;&#13;
        if (r &lt;= 367337) return 214;&#13;
        if (r &lt;= 372241) return 127;&#13;
        if (r &lt;= 377146) return 124;&#13;
        if (r &lt;= 382050) return 128;&#13;
        if (r &lt;= 386954) return 123;&#13;
        if (r &lt;= 391859) return 226;&#13;
        if (r &lt;= 396763) return 234;&#13;
        if (r &lt;= 401667) return 122;&#13;
        if (r &lt;= 406572) return 211;&#13;
        if (r &lt;= 411476) return 203;&#13;
        if (r &lt;= 416381) return 200;&#13;
        if (r &lt;= 421285) return 206;&#13;
        if (r &lt;= 426189) return 44;&#13;
        if (r &lt;= 431094) return 193;&#13;
        if (r &lt;= 435998) return 222;&#13;
        if (r &lt;= 440902) return 58;&#13;
        if (r &lt;= 445807) return 83;&#13;
        if (r &lt;= 450711) return 35;&#13;
        if (r &lt;= 455615) return 201;&#13;
        if (r &lt;= 460520) return 37;&#13;
        if (r &lt;= 465424) return 218;&#13;
        if (r &lt;= 470329) return 220;&#13;
        if (r &lt;= 475233) return 213;&#13;
        if (r &lt;= 481772) return 114;&#13;
        if (r &lt;= 488311) return 137;&#13;
        if (r &lt;= 494850) return 77;&#13;
        if (r &lt;= 501390) return 138;&#13;
        if (r &lt;= 507929) return 140;&#13;
        if (r &lt;= 514468) return 209;&#13;
        if (r &lt;= 521007) return 228;&#13;
        if (r &lt;= 527546) return 170;&#13;
        if (r &lt;= 534085) return 204;&#13;
        if (r &lt;= 540624) return 92;&#13;
        if (r &lt;= 547164) return 133;&#13;
        if (r &lt;= 553703) return 104;&#13;
        if (r &lt;= 560242) return 177;&#13;
        if (r &lt;= 566781) return 246;&#13;
        if (r &lt;= 573320) return 147;&#13;
        if (r &lt;= 579859) return 46;&#13;
        if (r &lt;= 586399) return 194;&#13;
        if (r &lt;= 594573) return 111;&#13;
        if (r &lt;= 602746) return 98;&#13;
        if (r &lt;= 610920) return 88;&#13;
        if (r &lt;= 619094) return 79;&#13;
        if (r &lt;= 627268) return 66;&#13;
        if (r &lt;= 635442) return 27;&#13;
        if (r &lt;= 643616) return 74;&#13;
        if (r &lt;= 651790) return 216;&#13;
        if (r &lt;= 659964) return 231;&#13;
        if (r &lt;= 668138) return 63;&#13;
        if (r &lt;= 676312) return 102;&#13;
        if (r &lt;= 684486) return 109;&#13;
        if (r &lt;= 692660) return 81;&#13;
        if (r &lt;= 700834) return 84;&#13;
        if (r &lt;= 709008) return 118;&#13;
        if (r &lt;= 717182) return 56;&#13;
        if (r &lt;= 725356) return 96;&#13;
        if (r &lt;= 733530) return 54;&#13;
        if (r &lt;= 741703) return 90;&#13;
        if (r &lt;= 749877) return 72;&#13;
        if (r &lt;= 758051) return 120;&#13;
        if (r &lt;= 766225) return 116;&#13;
        if (r &lt;= 774399) return 69;&#13;
        if (r &lt;= 782573) return 48;&#13;
        if (r &lt;= 790747) return 86;&#13;
        if (r &lt;= 798921) return 179;&#13;
        if (r &lt;= 807095) return 100;&#13;
        if (r &lt;= 815269) return 23;&#13;
        if (r &lt;= 823443) return 223;&#13;
        if (r &lt;= 831617) return 32;&#13;
        if (r &lt;= 839791) return 29;&#13;
        if (r &lt;= 847965) return 39;&#13;
        if (r &lt;= 856139) return 60;&#13;
        if (r &lt;= 864313) return 167;&#13;
        if (r &lt;= 872487) return 21;&#13;
        if (r &lt;= 880660) return 165;&#13;
        if (r &lt;= 888834) return 163;&#13;
        if (r &lt;= 897008) return 52;&#13;
        if (r &lt;= 905182) return 19;&#13;
        if (r &lt;= 913356) return 16;&#13;
        if (r &lt;= 921530) return 41;&#13;
        if (r &lt;= 929704) return 161;&#13;
        if (r &lt;= 937878) return 187;&#13;
        if (r &lt;= 946052) return 50;&#13;
        if (r &lt;= 954226) return 183;&#13;
        if (r &lt;= 962400) return 13;&#13;
        if (r &lt;= 970574) return 10;&#13;
        if (r &lt;= 978748) return 191;&#13;
        if (r &lt;= 988556) return 43;&#13;
        if (r &lt;= 1000000) return 129;&#13;
&#13;
        return 129;&#13;
    }&#13;
&#13;
    function getBaseStats(uint8 id) public pure returns (uint32 ra, uint32 rd, uint32 rs) {&#13;
        if (id == 151) return (210, 210, 200);&#13;
        if (id == 251) return (210, 210, 200);&#13;
        if (id == 196) return (261, 194, 130);&#13;
        if (id == 197) return (126, 250, 190);&#13;
        if (id == 238) return (153, 116, 90);&#13;
        if (id == 240) return (151, 108, 90);&#13;
        if (id == 239) return (135, 110, 90);&#13;
        if (id == 173) return (75, 91, 100);&#13;
        if (id == 175) return (67, 116, 70);&#13;
        if (id == 174) return (69, 34, 180);&#13;
        if (id == 236) return (64, 64, 70);&#13;
        if (id == 172) return (77, 63, 40);&#13;
        if (id == 250) return (239, 274, 193);&#13;
        if (id == 249) return (193, 323, 212);&#13;
        if (id == 244) return (235, 176, 230);&#13;
        if (id == 243) return (241, 210, 180);&#13;
        if (id == 245) return (180, 235, 200);&#13;
        if (id == 145) return (253, 188, 180);&#13;
        if (id == 146) return (251, 184, 180);&#13;
        if (id == 144) return (192, 249, 180);&#13;
        if (id == 248) return (251, 212, 200);&#13;
        if (id == 149) return (263, 201, 182);&#13;
        if (id == 143) return (190, 190, 320);&#13;
        if (id == 112) return (222, 206, 210);&#13;
        if (id == 242) return (129, 229, 510);&#13;
        if (id == 212) return (236, 191, 140);&#13;
        if (id == 160) return (205, 197, 170);&#13;
        if (id == 6) return (223, 176, 156);&#13;
        if (id == 157) return (223, 176, 156);&#13;
        if (id == 131) return (165, 180, 260);&#13;
        if (id == 3) return (198, 198, 160);&#13;
        if (id == 233) return (198, 183, 170);&#13;
        if (id == 9) return (171, 210, 158);&#13;
        if (id == 154) return (168, 202, 160);&#13;
        if (id == 182) return (169, 189, 150);&#13;
        if (id == 176) return (139, 191, 110);&#13;
        if (id == 150) return (300, 182, 193);&#13;
        if (id == 130) return (237, 197, 190);&#13;
        if (id == 68) return (234, 162, 180);&#13;
        if (id == 65) return (271, 194, 110);&#13;
        if (id == 59) return (227, 166, 180);&#13;
        if (id == 94) return (261, 156, 120);&#13;
        if (id == 199) return (177, 194, 190);&#13;
        if (id == 169) return (194, 178, 170);&#13;
        if (id == 208) return (148, 333, 150);&#13;
        if (id == 230) return (194, 194, 150);&#13;
        if (id == 186) return (174, 192, 180);&#13;
        if (id == 36) return (178, 171, 190);&#13;
        if (id == 38) return (169, 204, 146);&#13;
        if (id == 192) return (185, 148, 150);&#13;
        if (id == 26) return (193, 165, 120);&#13;
        if (id == 237) return (173, 214, 100);&#13;
        if (id == 148) return (163, 138, 122);&#13;
        if (id == 247) return (155, 133, 140);&#13;
        if (id == 2) return (151, 151, 120);&#13;
        if (id == 5) return (158, 129, 116);&#13;
        if (id == 8) return (126, 155, 118);&#13;
        if (id == 134) return (205, 177, 260);&#13;
        if (id == 232) return (214, 214, 180);&#13;
        if (id == 76) return (211, 229, 160);&#13;
        if (id == 136) return (246, 204, 130);&#13;
        if (id == 135) return (232, 201, 130);&#13;
        if (id == 181) return (211, 172, 180);&#13;
        if (id == 62) return (182, 187, 180);&#13;
        if (id == 34) return (204, 157, 162);&#13;
        if (id == 31) return (180, 174, 180);&#13;
        if (id == 221) return (181, 147, 200);&#13;
        if (id == 71) return (207, 138, 160);&#13;
        if (id == 185) return (167, 198, 140);&#13;
        if (id == 18) return (166, 157, 166);&#13;
        if (id == 15) return (169, 150, 130);&#13;
        if (id == 12) return (167, 151, 120);&#13;
        if (id == 159) return (150, 151, 130);&#13;
        if (id == 189) return (118, 197, 150);&#13;
        if (id == 219) return (139, 209, 100);&#13;
        if (id == 156) return (158, 129, 116);&#13;
        if (id == 153) return (122, 155, 120);&#13;
        if (id == 217) return (236, 144, 180);&#13;
        if (id == 139) return (207, 227, 140);&#13;
        if (id == 229) return (224, 159, 150);&#13;
        if (id == 141) return (220, 203, 120);&#13;
        if (id == 210) return (212, 137, 180);&#13;
        if (id == 45) return (202, 170, 150);&#13;
        if (id == 205) return (161, 242, 150);&#13;
        if (id == 78) return (207, 167, 130);&#13;
        if (id == 224) return (197, 141, 150);&#13;
        if (id == 171) return (146, 146, 250);&#13;
        if (id == 164) return (145, 179, 200);&#13;
        if (id == 178) return (192, 146, 130);&#13;
        if (id == 195) return (152, 152, 190);&#13;
        if (id == 105) return (144, 200, 120);&#13;
        if (id == 162) return (148, 130, 170);&#13;
        if (id == 168) return (161, 128, 140);&#13;
        if (id == 184) return (112, 152, 200);&#13;
        if (id == 166) return (107, 209, 110);&#13;
        if (id == 103) return (233, 158, 190);&#13;
        if (id == 89) return (190, 184, 210);&#13;
        if (id == 99) return (240, 214, 110);&#13;
        if (id == 142) return (221, 164, 160);&#13;
        if (id == 80) return (177, 194, 190);&#13;
        if (id == 91) return (186, 323, 100);&#13;
        if (id == 115) return (181, 165, 210);&#13;
        if (id == 106) return (224, 211, 100);&#13;
        if (id == 73) return (166, 237, 160);&#13;
        if (id == 28) return (182, 202, 150);&#13;
        if (id == 241) return (157, 211, 190);&#13;
        if (id == 121) return (210, 184, 120);&#13;
        if (id == 55) return (191, 163, 160);&#13;
        if (id == 126) return (206, 169, 130);&#13;
        if (id == 82) return (223, 182, 100);&#13;
        if (id == 125) return (198, 173, 130);&#13;
        if (id == 110) return (174, 221, 130);&#13;
        if (id == 85) return (218, 145, 120);&#13;
        if (id == 57) return (207, 144, 130);&#13;
        if (id == 107) return (193, 212, 100);&#13;
        if (id == 97) return (144, 215, 170);&#13;
        if (id == 119) return (175, 154, 160);&#13;
        if (id == 227) return (148, 260, 130);&#13;
        if (id == 117) return (187, 182, 110);&#13;
        if (id == 49) return (179, 150, 140);&#13;
        if (id == 40) return (156, 93, 280);&#13;
        if (id == 101) return (173, 179, 120);&#13;
        if (id == 87) return (139, 184, 180);&#13;
        if (id == 215) return (189, 157, 110);&#13;
        if (id == 42) return (161, 153, 150);&#13;
        if (id == 22) return (182, 135, 130);&#13;
        if (id == 207) return (143, 204, 130);&#13;
        if (id == 24) return (167, 158, 120);&#13;
        if (id == 93) return (223, 112, 90);&#13;
        if (id == 47) return (165, 146, 120);&#13;
        if (id == 20) return (161, 144, 110);&#13;
        if (id == 53) return (150, 139, 130);&#13;
        if (id == 113) return (60, 176, 500);&#13;
        if (id == 198) return (175, 87, 120);&#13;
        if (id == 51) return (167, 147, 70);&#13;
        if (id == 108) return (108, 137, 180);&#13;
        if (id == 190) return (136, 112, 110);&#13;
        if (id == 158) return (117, 116, 100);&#13;
        if (id == 95) return (85, 288, 70);&#13;
        if (id == 1) return (118, 118, 90);&#13;
        if (id == 225) return (128, 90, 90);&#13;
        if (id == 4) return (116, 96, 78);&#13;
        if (id == 155) return (116, 96, 78);&#13;
        if (id == 7) return (94, 122, 88);&#13;
        if (id == 152) return (92, 122, 90);&#13;
        if (id == 25) return (112, 101, 70);&#13;
        if (id == 132) return (91, 91, 96);&#13;
        if (id == 67) return (177, 130, 160);&#13;
        if (id == 64) return (232, 138, 80);&#13;
        if (id == 75) return (164, 196, 110);&#13;
        if (id == 70) return (172, 95, 130);&#13;
        if (id == 180) return (145, 112, 140);&#13;
        if (id == 61) return (130, 130, 130);&#13;
        if (id == 33) return (137, 112, 122);&#13;
        if (id == 30) return (117, 126, 140);&#13;
        if (id == 17) return (117, 108, 126);&#13;
        if (id == 202) return (60, 106, 380);&#13;
        if (id == 188) return (91, 127, 110);&#13;
        if (id == 11) return (45, 94, 100);&#13;
        if (id == 14) return (46, 86, 90);&#13;
        if (id == 235) return (40, 88, 110);&#13;
        if (id == 214) return (234, 189, 160);&#13;
        if (id == 127) return (238, 197, 130);&#13;
        if (id == 124) return (223, 182, 130);&#13;
        if (id == 128) return (198, 197, 150);&#13;
        if (id == 123) return (218, 170, 140);&#13;
        if (id == 226) return (148, 260, 130);&#13;
        if (id == 234) return (192, 132, 146);&#13;
        if (id == 122) return (192, 233, 80);&#13;
        if (id == 211) return (184, 148, 130);&#13;
        if (id == 203) return (182, 133, 140);&#13;
        if (id == 200) return (167, 167, 120);&#13;
        if (id == 206) return (131, 131, 200);&#13;
        if (id == 44) return (153, 139, 120);&#13;
        if (id == 193) return (154, 94, 130);&#13;
        if (id == 222) return (118, 156, 110);&#13;
        if (id == 58) return (136, 96, 110);&#13;
        if (id == 83) return (124, 118, 104);&#13;
        if (id == 35) return (107, 116, 140);&#13;
        if (id == 201) return (136, 91, 96);&#13;
        if (id == 37) return (96, 122, 76);&#13;
        if (id == 218) return (118, 71, 80);&#13;
        if (id == 220) return (90, 74, 100);&#13;
        if (id == 213) return (17, 396, 40);&#13;
        if (id == 114) return (183, 205, 130);&#13;
        if (id == 137) return (153, 139, 130);&#13;
        if (id == 77) return (170, 132, 100);&#13;
        if (id == 138) return (155, 174, 70);&#13;
        if (id == 140) return (148, 162, 60);&#13;
        if (id == 209) return (137, 89, 120);&#13;
        if (id == 228) return (152, 93, 90);&#13;
        if (id == 170) return (106, 106, 150);&#13;
        if (id == 204) return (108, 146, 100);&#13;
        if (id == 92) return (186, 70, 60);&#13;
        if (id == 133) return (104, 121, 110);&#13;
        if (id == 104) return (90, 165, 100);&#13;
        if (id == 177) return (134, 89, 80);&#13;
        if (id == 246) return (115, 93, 100);&#13;
        if (id == 147) return (119, 94, 82);&#13;
        if (id == 46) return (121, 99, 70);&#13;
        if (id == 194) return (75, 75, 110);&#13;
        if (id == 111) return (140, 157, 160);&#13;
        if (id == 98) return (181, 156, 60);&#13;
        if (id == 88) return (135, 90, 160);&#13;
        if (id == 79) return (109, 109, 180);&#13;
        if (id == 66) return (137, 88, 140);&#13;
        if (id == 27) return (126, 145, 100);&#13;
        if (id == 74) return (132, 163, 80);&#13;
        if (id == 216) return (142, 93, 120);&#13;
        if (id == 231) return (107, 107, 180);&#13;
        if (id == 63) return (195, 103, 50);&#13;
        if (id == 102) return (107, 140, 120);&#13;
        if (id == 109) return (119, 164, 80);&#13;
        if (id == 81) return (165, 128, 50);&#13;
        if (id == 84) return (158, 88, 70);&#13;
        if (id == 118) return (123, 115, 90);&#13;
        if (id == 56) return (148, 87, 80);&#13;
        if (id == 96) return (89, 158, 120);&#13;
        if (id == 54) return (122, 96, 100);&#13;
        if (id == 90) return (116, 168, 60);&#13;
        if (id == 72) return (97, 182, 80);&#13;
        if (id == 120) return (137, 112, 60);&#13;
        if (id == 116) return (129, 125, 60);&#13;
        if (id == 69) return (139, 64, 100);&#13;
        if (id == 48) return (100, 102, 120);&#13;
        if (id == 86) return (85, 128, 130);&#13;
        if (id == 179) return (114, 82, 110);&#13;
        if (id == 100) return (109, 114, 80);&#13;
        if (id == 23) return (110, 102, 70);&#13;
        if (id == 223) return (127, 69, 70);&#13;
        if (id == 32) return (105, 76, 92);&#13;
        if (id == 29) return (86, 94, 110);&#13;
        if (id == 39) return (80, 44, 230);&#13;
        if (id == 60) return (101, 82, 80);&#13;
        if (id == 167) return (105, 73, 80);&#13;
        if (id == 21) return (112, 61, 80);&#13;
        if (id == 165) return (72, 142, 80);&#13;
        if (id == 163) return (67, 101, 120);&#13;
        if (id == 52) return (92, 81, 80);&#13;
        if (id == 19) return (103, 70, 60);&#13;
        if (id == 16) return (85, 76, 80);&#13;
        if (id == 41) return (83, 76, 80);&#13;
        if (id == 161) return (79, 77, 70);&#13;
        if (id == 187) return (67, 101, 70);&#13;
        if (id == 50) return (109, 88, 20);&#13;
        if (id == 183) return (37, 93, 140);&#13;
        if (id == 13) return (63, 55, 80);&#13;
        if (id == 10) return (55, 62, 90);&#13;
        if (id == 191) return (55, 55, 60);&#13;
        if (id == 43) return (131, 116, 90);&#13;
        if (id == 129) return (29, 102, 40);&#13;
        return (0, 0, 0);&#13;
&#13;
    }&#13;
&#13;
    function sqrt(uint256 x) public pure returns (uint256 y) {&#13;
        uint256 z = (x + 1) / 2;&#13;
        y = x;&#13;
        while (z &lt; y) {&#13;
            y = z;&#13;
            z = (x / z + z) / 2;&#13;
        }&#13;
    }&#13;
&#13;
    function maxCP(uint256 genes, uint16 generation) public pure returns (uint32 max_cp) {&#13;
        var code = uint8(genes &amp; 0xFF);&#13;
        var a = uint32((genes &gt;&gt; 8) &amp; 0xFF);&#13;
        var d = uint32((genes &gt;&gt; 16) &amp; 0xFF);&#13;
        var s = uint32((genes &gt;&gt; 24) &amp; 0xFF);&#13;
        //      var gender = uint32((genes &gt;&gt; 32) &amp; 0x1);&#13;
        var bgColor = uint8((genes &gt;&gt; 33) &amp; 0xFF);&#13;
        var (ra, rd, rs) = getBaseStats(code);&#13;
&#13;
&#13;
        max_cp = uint32(sqrt(uint256(ra + a) * uint256(ra + a) * uint256(rd + d) * uint256(rs + s) * 3900927938993281/10000000000000000 / 100));&#13;
        if(max_cp &lt; 10)&#13;
        max_cp = 10;&#13;
&#13;
        if(generation &lt; 10)&#13;
        max_cp += (10 - generation) * 50;&#13;
&#13;
        // bgColor&#13;
        if(bgColor &gt;= 8)&#13;
        bgColor = 0;&#13;
&#13;
        max_cp += bgColor * 25;&#13;
        return max_cp;&#13;
    }&#13;
&#13;
    function getCode(uint256 genes) pure public returns (uint8) {&#13;
        return uint8(genes &amp; 0xFF);&#13;
    }&#13;
&#13;
    function getAttack(uint256 genes) pure public returns (uint8) {&#13;
        return uint8((genes &gt;&gt; 8) &amp; 0xFF);&#13;
    }&#13;
&#13;
    function getDefense(uint256 genes) pure public returns (uint8) {&#13;
        return uint8((genes &gt;&gt; 16) &amp; 0xFF);&#13;
    }&#13;
&#13;
    function getStamina(uint256 genes) pure public returns (uint8) {&#13;
        return uint8((genes &gt;&gt; 24) &amp; 0xFF);&#13;
    }&#13;
&#13;
    /// @dev given genes of kitten 1 &amp; 2, return a genetic combination - may have a random factor&#13;
    /// @param genes1 genes of mom&#13;
    /// @param genes2 genes of sire&#13;
    /// @return the genes that are supposed to be passed down the child&#13;
    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256) {&#13;
&#13;
        uint8 code;&#13;
        var r = random(3);&#13;
&#13;
        // 60 percent of parents DNA&#13;
        if(r == 0)&#13;
        code = getCode(genes1);&#13;
        else if(r == 1)&#13;
        code = getCode(genes2);&#13;
        else&#13;
        code = randomCode();&#13;
&#13;
        // 70% percent of parents DNA&#13;
        var attack = random(3) == 0 ? uint8(random(32)) : uint8(randomBetween(getAttack(genes1), getAttack(genes2)));&#13;
        var defense = random(3) == 0 ? uint8(random(32)) : uint8(randomBetween(getDefense(genes1), getDefense(genes2)));&#13;
        var stamina = random(3) == 0 ? uint8(random(32)) : uint8(randomBetween(getStamina(genes1), getStamina(genes2)));&#13;
        var gender = uint8(random(2));&#13;
        var bgColor = uint8(random(8));&#13;
        var rand = random(~uint64(0));&#13;
&#13;
        return uint256(code) // 8&#13;
        | (uint256(attack) &lt;&lt; 8) // 8&#13;
        | (uint256(defense) &lt;&lt; 16) // 8&#13;
        | (uint256(stamina) &lt;&lt; 24) // 8&#13;
        | (uint256(gender) &lt;&lt; 32) // 1&#13;
        | (uint256(bgColor) &lt;&lt; 33) // 8&#13;
        | (uint256(rand) &lt;&lt; 41) // 64&#13;
        ;&#13;
    }&#13;
&#13;
    function randomGenes() public returns (uint256) {&#13;
        var code = randomCode();&#13;
        var attack = uint8(random(32));&#13;
        var defense = uint8(random(32));&#13;
        var stamina = uint8(random(32));&#13;
        var gender = uint8(random(2));&#13;
        var bgColor = uint8(random(8));&#13;
        var rand = random(~uint64(0));&#13;
&#13;
        return uint256(code) // 8&#13;
        | (uint256(attack) &lt;&lt; 8) // 8&#13;
        | (uint256(defense) &lt;&lt; 16) // 8&#13;
        | (uint256(stamina) &lt;&lt; 24) // 8&#13;
        | (uint256(gender) &lt;&lt; 32) // 1&#13;
        | (uint256(bgColor) &lt;&lt; 33) // 8&#13;
        | (uint256(rand) &lt;&lt; 41) // 64&#13;
        ;&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title Clock auction modified for sale of monsters&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract SaleClockAuction is ClockAuction {&#13;
&#13;
    // @dev Sanity check that allows us to ensure that we are pointing to the&#13;
    //  right auction in our setSaleAuctionAddress() call.&#13;
    bool public isSaleClockAuction = true;&#13;
&#13;
    // Tracks last 5 sale price of gen0 monster sales&#13;
    uint256 public gen0SaleCount;&#13;
    uint256[5] public lastGen0SalePrices;&#13;
&#13;
    // Delegate constructor&#13;
    function SaleClockAuction(address _nftAddr, uint256 _cut) public&#13;
    ClockAuction(_nftAddr, _cut) {}&#13;
&#13;
    /// @dev Creates and begins a new auction.&#13;
    /// @param _tokenId - ID of token to auction, sender must be owner.&#13;
    /// @param _startingPrice - Price of item (in wei) at beginning of auction.&#13;
    /// @param _endingPrice - Price of item (in wei) at end of auction.&#13;
    /// @param _duration - Length of auction (in seconds).&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createAuction(&#13;
    uint256 _tokenId,&#13;
    uint256 _startingPrice,&#13;
    uint256 _endingPrice,&#13;
    uint256 _duration,&#13;
    address _seller&#13;
    )&#13;
    external&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_startingPrice == uint256(uint128(_startingPrice)));&#13;
        require(_endingPrice == uint256(uint128(_endingPrice)));&#13;
        require(_duration == uint256(uint64(_duration)));&#13;
&#13;
        require(msg.sender == address(nonFungibleContract));&#13;
        _escrow(_seller, _tokenId);&#13;
        Auction memory auction = Auction(&#13;
        _seller,&#13;
        uint128(_startingPrice),&#13;
        uint128(_endingPrice),&#13;
        uint64(_duration),&#13;
        uint64(now)&#13;
        );&#13;
        _addAuction(_tokenId, auction);&#13;
    }&#13;
&#13;
    /// @dev Updates lastSalePrice if seller is the nft contract&#13;
    /// Otherwise, works the same as default bid method.&#13;
    function bid(uint256 _tokenId)&#13;
    external&#13;
    payable&#13;
    {&#13;
        // _bid verifies token ID size&#13;
        address seller = tokenIdToAuction[_tokenId].seller;&#13;
        uint256 price = _bid(_tokenId, msg.value);&#13;
        _transfer(msg.sender, _tokenId);&#13;
&#13;
        // If not a gen0 auction, exit&#13;
        if (seller == address(nonFungibleContract)) {&#13;
            // Track gen0 sale prices&#13;
            lastGen0SalePrices[gen0SaleCount % 5] = price;&#13;
            gen0SaleCount++;&#13;
        }&#13;
    }&#13;
&#13;
    function averageGen0SalePrice() external view returns (uint256) {&#13;
        uint256 sum = 0;&#13;
        for (uint256 i = 0; i &lt; 5; i++) {&#13;
            sum += lastGen0SalePrices[i];&#13;
        }&#13;
        return sum / 5;&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
/// @title Reverse auction modified for siring&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract SiringClockAuction is ClockAuction {&#13;
&#13;
    // @dev Sanity check that allows us to ensure that we are pointing to the&#13;
    //  right auction in our setSiringAuctionAddress() call.&#13;
    bool public isSiringClockAuction = true;&#13;
&#13;
    // Delegate constructor&#13;
    function SiringClockAuction(address _nftAddr, uint256 _cut) public&#13;
    ClockAuction(_nftAddr, _cut) {}&#13;
&#13;
    /// @dev Creates and begins a new auction. Since this function is wrapped,&#13;
    /// require sender to be MonsterCore contract.&#13;
    /// @param _tokenId - ID of token to auction, sender must be owner.&#13;
    /// @param _startingPrice - Price of item (in wei) at beginning of auction.&#13;
    /// @param _endingPrice - Price of item (in wei) at end of auction.&#13;
    /// @param _duration - Length of auction (in seconds).&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createAuction(&#13;
    uint256 _tokenId,&#13;
    uint256 _startingPrice,&#13;
    uint256 _endingPrice,&#13;
    uint256 _duration,&#13;
    address _seller&#13;
    )&#13;
    external&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_startingPrice == uint256(uint128(_startingPrice)));&#13;
        require(_endingPrice == uint256(uint128(_endingPrice)));&#13;
        require(_duration == uint256(uint64(_duration)));&#13;
&#13;
        require(msg.sender == address(nonFungibleContract));&#13;
        _escrow(_seller, _tokenId);&#13;
        Auction memory auction = Auction(&#13;
        _seller,&#13;
        uint128(_startingPrice),&#13;
        uint128(_endingPrice),&#13;
        uint64(_duration),&#13;
        uint64(now)&#13;
        );&#13;
        _addAuction(_tokenId, auction);&#13;
    }&#13;
&#13;
    /// @dev Places a bid for siring. Requires the sender&#13;
    /// is the MonsterCore contract because all bid methods&#13;
    /// should be wrapped. Also returns the monster to the&#13;
    /// seller rather than the winner.&#13;
    function bid(uint256 _tokenId)&#13;
    external&#13;
    payable&#13;
    {&#13;
        require(msg.sender == address(nonFungibleContract));&#13;
        address seller = tokenIdToAuction[_tokenId].seller;&#13;
        // _bid checks that token ID is valid and will throw if bid fails&#13;
        _bid(_tokenId, msg.value);&#13;
        // We transfer the monster back to the seller, the winner will get&#13;
        // the offspring&#13;
        _transfer(seller, _tokenId);&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title A facet of MonsterCore that manages special access privileges.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev See the MonsterCore contract documentation to understand how the various contract facets are arranged.&#13;
contract MonsterAccessControl {&#13;
    // This facet controls access control for CryptoMonsters. There are four roles managed here:&#13;
    //&#13;
    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart&#13;
    //         contracts. It is also the only role that can unpause the smart contract. It is initially&#13;
    //         set to the address that created the smart contract in the MonsterCore constructor.&#13;
    //&#13;
    //     - The CFO: The CFO can withdraw funds from MonsterCore and its auction contracts.&#13;
    //&#13;
    //     - The COO: The COO can release gen0 monsters to auction, and mint promo monsters.&#13;
    //&#13;
    // It should be noted that these roles are distinct without overlap in their access abilities, the&#13;
    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any&#13;
    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This&#13;
    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of&#13;
    // convenience. The less we use an address, the less likely it is that we somehow compromise the&#13;
    // account.&#13;
&#13;
    /// @dev Emited when contract is upgraded - See README.md for updgrade plan&#13;
    event ContractUpgrade(address newContract);&#13;
&#13;
    // The addresses of the accounts (or contracts) that can execute actions within each roles.&#13;
    address public ceoAddress;&#13;
    address public cfoAddress;&#13;
    address public cooAddress;&#13;
&#13;
    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked&#13;
    bool public paused = false;&#13;
&#13;
    /// @dev Access modifier for CEO-only functionality&#13;
    modifier onlyCEO() {&#13;
        require(msg.sender == ceoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access modifier for CFO-only functionality&#13;
    modifier onlyCFO() {&#13;
        require(msg.sender == cfoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access modifier for COO-only functionality&#13;
    modifier onlyCOO() {&#13;
        require(msg.sender == cooAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyCLevel() {&#13;
        require(&#13;
        msg.sender == cooAddress ||&#13;
        msg.sender == ceoAddress ||&#13;
        msg.sender == cfoAddress&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.&#13;
    /// @param _newCEO The address of the new CEO&#13;
    function setCEO(address _newCEO) external onlyCEO {&#13;
        require(_newCEO != address(0));&#13;
&#13;
        ceoAddress = _newCEO;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.&#13;
    /// @param _newCFO The address of the new CFO&#13;
    function setCFO(address _newCFO) external onlyCEO {&#13;
        require(_newCFO != address(0));&#13;
&#13;
        cfoAddress = _newCFO;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.&#13;
    /// @param _newCOO The address of the new COO&#13;
    function setCOO(address _newCOO) external onlyCEO {&#13;
        require(_newCOO != address(0));&#13;
&#13;
        cooAddress = _newCOO;&#13;
    }&#13;
&#13;
    /*** Pausable functionality adapted from OpenZeppelin ***/&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS NOT paused&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS paused&#13;
    modifier whenPaused {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Called by any "C-level" role to pause the contract. Used only when&#13;
    ///  a bug or exploit is detected and we need to limit damage.&#13;
    function pause() external onlyCLevel whenNotPaused {&#13;
        paused = true;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the CEO, since&#13;
    ///  one reason we may pause the contract is when CFO or COO accounts are&#13;
    ///  compromised.&#13;
    /// @notice This is public rather than external so it can be called by&#13;
    ///  derived contracts.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        // can't unpause if contract was upgraded&#13;
        paused = false;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
/// @title Base contract for CryptoMonsters. Holds all common structs, events and base variables.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev See the MonsterCore contract documentation to understand how the various contract facets are arranged.&#13;
contract MonsterBase is MonsterAccessControl {&#13;
    /*** EVENTS ***/&#13;
&#13;
    /// @dev The Birth event is fired whenever a new monster comes into existence. This obviously&#13;
    ///  includes any time a monster is created through the giveBirth method, but it is also called&#13;
    ///  when a new gen0 monster is created.&#13;
    event Birth(address owner, uint256 monsterId, uint256 matronId, uint256 sireId, uint256 genes, uint16 generation);&#13;
&#13;
    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a monster&#13;
    ///  ownership is assigned, including births.&#13;
    event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
    /*** DATA TYPES ***/&#13;
&#13;
    /// @dev The main Monster struct. Every monster in CryptoMonsters is represented by a copy&#13;
    ///  of this structure, so great care was taken to ensure that it fits neatly into&#13;
    ///  exactly two 256-bit words. Note that the order of the members in this structure&#13;
    ///  is important because of the byte-packing rules used by Ethereum.&#13;
    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html&#13;
    struct Monster {&#13;
    // The Monster's genetic code is packed into these 256-bits, the format is&#13;
    // sooper-sekret! A monster's genes never change.&#13;
    uint256 genes;&#13;
&#13;
    // The timestamp from the block when this monster came into existence.&#13;
    uint64 birthTime;&#13;
&#13;
    // The minimum timestamp after which this monster can engage in breeding&#13;
    // activities again. This same timestamp is used for the pregnancy&#13;
    // timer (for matrons) as well as the siring cooldown.&#13;
    uint64 cooldownEndBlock;&#13;
&#13;
    // The ID of the parents of this monster, set to 0 for gen0 monsters.&#13;
    // Note that using 32-bit unsigned integers limits us to a "mere"&#13;
    // 4 billion monsters. This number might seem small until you realize&#13;
    // that Ethereum currently has a limit of about 500 million&#13;
    // transactions per year! So, this definitely won't be a problem&#13;
    // for several years (even as Ethereum learns to scale).&#13;
    uint32 matronId;&#13;
    uint32 sireId;&#13;
&#13;
    // Set to the ID of the sire monster for matrons that are pregnant,&#13;
    // zero otherwise. A non-zero value here is how we know a monster&#13;
    // is pregnant. Used to retrieve the genetic material for the new&#13;
    // monster when the birth transpires.&#13;
    uint32 siringWithId;&#13;
&#13;
    // Set to the index in the cooldown array (see below) that represents&#13;
    // the current cooldown duration for this Monster. This starts at zero&#13;
    // for gen0 monsters, and is initialized to floor(generation/2) for others.&#13;
    // Incremented by one for each successful breeding action, regardless&#13;
    // of whether this monster is acting as matron or sire.&#13;
    uint16 cooldownIndex;&#13;
&#13;
    // The "generation number" of this monster. Monsters minted by the CK contract&#13;
    // for sale are called "gen0" and have a generation number of 0. The&#13;
    // generation number of all other monsters is the larger of the two generation&#13;
    // numbers of their parents, plus one.&#13;
    // (i.e. max(matron.generation, sire.generation) + 1)&#13;
    uint16 generation;&#13;
    }&#13;
&#13;
    /*** CONSTANTS ***/&#13;
&#13;
    /// @dev A lookup table indimonstering the cooldown duration after any successful&#13;
    ///  breeding action, called "pregnancy time" for matrons and "siring cooldown"&#13;
    ///  for sires. Designed such that the cooldown roughly doubles each time a monster&#13;
    ///  is bred, encouraging owners not to just keep breeding the same monster over&#13;
    ///  and over again. Caps out at one week (a monster can breed an unbounded number&#13;
    ///  of times, and the maximum cooldown is always seven days).&#13;
    uint32[14] public cooldowns = [&#13;
    uint32(1 minutes),&#13;
    uint32(2 minutes),&#13;
    uint32(5 minutes),&#13;
    uint32(10 minutes),&#13;
    uint32(30 minutes),&#13;
    uint32(1 hours),&#13;
    uint32(2 hours),&#13;
    uint32(4 hours),&#13;
    uint32(8 hours),&#13;
    uint32(16 hours),&#13;
    uint32(1 days),&#13;
    uint32(2 days),&#13;
    uint32(4 days),&#13;
    uint32(7 days)&#13;
    ];&#13;
&#13;
    // An approximation of currently how many seconds are in between blocks.&#13;
    uint256 public secondsPerBlock = 15;&#13;
&#13;
    /*** STORAGE ***/&#13;
&#13;
    /// @dev An array containing the Monster struct for all Monsters in existence. The ID&#13;
    ///  of each monster is actually an index into this array. Note that ID 0 is a negamonster,&#13;
    ///  the unMonster, the mythical beast that is the parent of all gen0 monsters. A bizarre&#13;
    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.&#13;
    ///  In other words, monster ID 0 is invalid... ;-)&#13;
    Monster[] monsters;&#13;
&#13;
    /// @dev A mapping from monster IDs to the address that owns them. All monsters have&#13;
    ///  some valid owner address, even gen0 monsters are created with a non-zero owner.&#13;
    mapping(uint256 =&gt; address) public monsterIndexToOwner;&#13;
&#13;
    // @dev A mapping from owner address to count of tokens that address owns.&#13;
    //  Used internally inside balanceOf() to resolve ownership count.&#13;
    mapping(address =&gt; uint256) ownershipTokenCount;&#13;
&#13;
    /// @dev A mapping from MonsterIDs to an address that has been approved to call&#13;
    ///  transferFrom(). Each Monster can only have one approved address for transfer&#13;
    ///  at any time. A zero value means no approval is outstanding.&#13;
    mapping(uint256 =&gt; address) public monsterIndexToApproved;&#13;
&#13;
    /// @dev A mapping from MonsterIDs to an address that has been approved to use&#13;
    ///  this Monster for siring via breedWith(). Each Monster can only have one approved&#13;
    ///  address for siring at any time. A zero value means no approval is outstanding.&#13;
    mapping(uint256 =&gt; address) public sireAllowedToAddress;&#13;
&#13;
    /// @dev The address of the ClockAuction contract that handles sales of Monsters. This&#13;
    ///  same contract handles both peer-to-peer sales as well as the gen0 sales which are&#13;
    ///  initiated every 15 minutes.&#13;
    SaleClockAuction public saleAuction;&#13;
&#13;
    /// @dev The address of a custom ClockAuction subclassed contract that handles siring&#13;
    ///  auctions. Needs to be separate from saleAuction because the actions taken on success&#13;
    ///  after a sales and siring auction are quite different.&#13;
    SiringClockAuction public siringAuction;&#13;
&#13;
    GeneScience public geneScience;&#13;
&#13;
    /// @dev Assigns ownership of a specific Monster to an address.&#13;
    function _transfer(address _from, address _to, uint256 _tokenId) internal {&#13;
        // Since the number of monsters is capped to 2^32 we can't overflow this&#13;
        ownershipTokenCount[_to]++;&#13;
        // transfer ownership&#13;
        monsterIndexToOwner[_tokenId] = _to;&#13;
&#13;
        // When creating new monsters _from is 0x0, but we can't account that address.&#13;
        if (_from != address(0)) {&#13;
            ownershipTokenCount[_from]--;&#13;
            // once the monster is transferred also clear sire allowances&#13;
            delete sireAllowedToAddress[_tokenId];&#13;
            // clear any previously approved ownership exchange&#13;
            delete monsterIndexToApproved[_tokenId];&#13;
        }&#13;
        // Emit the transfer event.&#13;
        Transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev An internal method that creates a new monster and stores it. This&#13;
    ///  method doesn't do any checking and should only be called when the&#13;
    ///  input data is known to be valid. Will generate both a Birth event&#13;
    ///  and a Transfer event.&#13;
    /// @param _matronId The monster ID of the matron of this monster (zero for gen0)&#13;
    /// @param _sireId The monster ID of the sire of this monster (zero for gen0)&#13;
    /// @param _generation The generation number of this monster, must be computed by caller.&#13;
    /// @param _genes The monster's genetic code.&#13;
    /// @param _owner The inital owner of this monster, must be non-zero (except for the unMonster, ID 0)&#13;
    function _createMonster(&#13;
    uint256 _matronId,&#13;
    uint256 _sireId,&#13;
    uint256 _generation,&#13;
    uint256 _genes,&#13;
    address _owner&#13;
    )&#13;
    internal&#13;
    returns (uint)&#13;
    {&#13;
        // These requires are not strictly necessary, our calling code should make&#13;
        // sure that these conditions are never broken. However! _createMonster() is already&#13;
        // an expensive call (for storage), and it doesn't hurt to be especially careful&#13;
        // to ensure our data structures are always valid.&#13;
        require(_matronId == uint256(uint32(_matronId)));&#13;
        require(_sireId == uint256(uint32(_sireId)));&#13;
        require(_generation == uint256(uint16(_generation)));&#13;
&#13;
        // New monster starts with the same cooldown as parent gen/2&#13;
        uint16 cooldownIndex = uint16(_generation / 2);&#13;
        if (cooldownIndex &gt; 13) {&#13;
            cooldownIndex = 13;&#13;
        }&#13;
&#13;
        Monster memory _monster = Monster({&#13;
        genes : _genes,&#13;
        birthTime : uint64(now),&#13;
        cooldownEndBlock : 0,&#13;
        matronId : uint32(_matronId),&#13;
        sireId : uint32(_sireId),&#13;
        siringWithId : 0,&#13;
        cooldownIndex : cooldownIndex,&#13;
        generation : uint16(_generation)&#13;
        });&#13;
        uint256 newKittenId = monsters.push(_monster) - 1;&#13;
&#13;
        // It's probably never going to happen, 4 billion monsters is A LOT, but&#13;
        // let's just be 100% sure we never let this happen.&#13;
        require(newKittenId == uint256(uint32(newKittenId)));&#13;
&#13;
        // emit the birth event&#13;
        Birth(&#13;
        _owner,&#13;
        newKittenId,&#13;
        uint256(_monster.matronId),&#13;
        uint256(_monster.sireId),&#13;
        _monster.genes,&#13;
        uint16(_generation)&#13;
        );&#13;
&#13;
        // This will assign ownership, and also emit the Transfer event as&#13;
        // per ERC721 draft&#13;
        _transfer(0, _owner, newKittenId);&#13;
&#13;
        return newKittenId;&#13;
    }&#13;
&#13;
    // Any C-level can fix how many seconds per blocks are currently observed.&#13;
    function setSecondsPerBlock(uint256 secs) external onlyCLevel {&#13;
        require(secs &lt; cooldowns[0]);&#13;
        secondsPerBlock = secs;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title The external contract that is responsible for generating metadata for the monsters,&#13;
///  it has one function that will return the data as bytes.&#13;
contract ERC721Metadata {&#13;
    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.&#13;
    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {&#13;
        if (_tokenId == 1) {&#13;
            buffer[0] = "Hello World! :D";&#13;
            count = 15;&#13;
        } else if (_tokenId == 2) {&#13;
            buffer[0] = "I would definitely choose a medi";&#13;
            buffer[1] = "um length string.";&#13;
            count = 49;&#13;
        } else if (_tokenId == 3) {&#13;
            buffer[0] = "Lorem ipsum dolor sit amet, mi e";&#13;
            buffer[1] = "st accumsan dapibus augue lorem,";&#13;
            buffer[2] = " tristique vestibulum id, libero";&#13;
            buffer[3] = " suscipit varius sapien aliquam.";&#13;
            count = 128;&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title The facet of the CryptoMonsters core contract that manages ownership, ERC-721 (draft) compliant.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev Ref: https://github.com/ethereum/EIPs/issues/721&#13;
///  See the MonsterCore contract documentation to understand how the various contract facets are arranged.&#13;
contract MonsterOwnership is MonsterBase, ERC721 {&#13;
&#13;
    /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
    string public constant name = "Ethermon";&#13;
    string public constant symbol = "EM";&#13;
&#13;
    // The contract that will return monster metadata&#13;
    ERC721Metadata public erc721Metadata;&#13;
&#13;
    bytes4 constant InterfaceSignature_ERC165 =&#13;
    bytes4(keccak256('supportsInterface(bytes4)'));&#13;
&#13;
    bytes4 constant InterfaceSignature_ERC721 =&#13;
    bytes4(keccak256('name()')) ^&#13;
    bytes4(keccak256('symbol()')) ^&#13;
    bytes4(keccak256('totalSupply()')) ^&#13;
    bytes4(keccak256('balanceOf(address)')) ^&#13;
    bytes4(keccak256('ownerOf(uint256)')) ^&#13;
    bytes4(keccak256('approve(address,uint256)')) ^&#13;
    bytes4(keccak256('transfer(address,uint256)')) ^&#13;
    bytes4(keccak256('transferFrom(address,address,uint256)')) ^&#13;
    bytes4(keccak256('tokensOfOwner(address)')) ^&#13;
    bytes4(keccak256('tokenMetadata(uint256,string)'));&#13;
&#13;
    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).&#13;
    ///  Returns true for any standardized interfaces implemented by this contract. We implement&#13;
    ///  ERC-165 (obviously!) and ERC-721.&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool)&#13;
    {&#13;
        // DEBUG ONLY&#13;
        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) &amp;&amp; (InterfaceSignature_ERC721 == 0x9a20483d));&#13;
&#13;
        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));&#13;
    }&#13;
&#13;
    /// @dev Set the address of the sibling contract that tracks metadata.&#13;
    ///  CEO only.&#13;
    function setMetadataAddress(address _contractAddress) public onlyCEO {&#13;
        erc721Metadata = ERC721Metadata(_contractAddress);&#13;
    }&#13;
&#13;
    // Internal utility functions: These functions all assume that their input arguments&#13;
    // are valid. We leave it to public methods to sanitize their inputs and follow&#13;
    // the required logic.&#13;
&#13;
    /// @dev Checks if a given address is the current owner of a particular Monster.&#13;
    /// @param _claimant the address we are validating against.&#13;
    /// @param _tokenId monster id, only valid when &gt; 0&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return monsterIndexToOwner[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Checks if a given address currently has transferApproval for a particular Monster.&#13;
    /// @param _claimant the address we are confirming monster is approved for.&#13;
    /// @param _tokenId monster id, only valid when &gt; 0&#13;
    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return monsterIndexToApproved[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous&#13;
    ///  approval. Setting _approved to address(0) clears all transfer approval.&#13;
    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because&#13;
    ///  _approve() and transferFrom() are used together for putting Monsters on auction, and&#13;
    ///  there is no value in spamming the log with Approval events in that case.&#13;
    function _approve(uint256 _tokenId, address _approved) internal {&#13;
        monsterIndexToApproved[_tokenId] = _approved;&#13;
    }&#13;
&#13;
    /// @notice Returns the number of Monsters owned by a specific address.&#13;
    /// @param _owner The owner address to check.&#13;
    /// @dev Required for ERC-721 compliance&#13;
    function balanceOf(address _owner) public view returns (uint256 count) {&#13;
        return ownershipTokenCount[_owner];&#13;
    }&#13;
&#13;
    /// @notice Transfers a Monster to another address. If transferring to a smart&#13;
    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or&#13;
    ///  CryptoMonsters specifically) or your Monster may be lost forever. Seriously.&#13;
    /// @param _to The address of the recipient, can be a user or contract.&#13;
    /// @param _tokenId The ID of the Monster to transfer.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function transfer(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
    )&#13;
    external&#13;
    whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any monsters (except very briefly&#13;
        // after a gen0 monster is created and before it goes on auction).&#13;
        require(_to != address(this));&#13;
        // Disallow transfers to the auction contracts to prevent accidental&#13;
        // misuse. Auction contracts should only take ownership of monsters&#13;
        // through the allow + transferFrom flow.&#13;
        require(_to != address(saleAuction));&#13;
        require(_to != address(siringAuction));&#13;
&#13;
        // You can only send your own monster.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Reassign ownership, clear pending approvals, emit Transfer event.&#13;
        _transfer(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Grant another address the right to transfer a specific Monster via&#13;
    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.&#13;
    /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
    ///  clear all approvals.&#13;
    /// @param _tokenId The ID of the Monster that can be transferred if this call succeeds.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function approve(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
    )&#13;
    external&#13;
    whenNotPaused&#13;
    {&#13;
        // Only an owner can grant transfer approval.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Register the approval (replacing any previous approval).&#13;
        _approve(_tokenId, _to);&#13;
&#13;
        // Emit approval event.&#13;
        Approval(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Transfer a Monster owned by another address, for which the calling address&#13;
    ///  has previously been granted transfer approval by the owner.&#13;
    /// @param _from The address that owns the Monster to be transfered.&#13;
    /// @param _to The address that should take ownership of the Monster. Can be any address,&#13;
    ///  including the caller.&#13;
    /// @param _tokenId The ID of the Monster to be transferred.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
    )&#13;
    external&#13;
    whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any monsters (except very briefly&#13;
        // after a gen0 monster is created and before it goes on auction).&#13;
        require(_to != address(this));&#13;
        // Check for approval and valid ownership&#13;
        require(_approvedFor(msg.sender, _tokenId));&#13;
        require(_owns(_from, _tokenId));&#13;
&#13;
        // Reassign ownership (also clears pending approvals and emits Transfer event).&#13;
        _transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Returns the total number of Monsters currently in existence.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function totalSupply() public view returns (uint) {&#13;
        return monsters.length - 1;&#13;
    }&#13;
&#13;
    /// @notice Returns the address currently assigned ownership of a given Monster.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function ownerOf(uint256 _tokenId)&#13;
    external&#13;
    view&#13;
    returns (address owner)&#13;
    {&#13;
        owner = monsterIndexToOwner[_tokenId];&#13;
&#13;
        require(owner != address(0));&#13;
    }&#13;
&#13;
    /// @notice Returns a list of all Monster IDs assigned to an address.&#13;
    /// @param _owner The owner whose Monsters we are interested in.&#13;
    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly&#13;
    ///  expensive (it walks the entire Monster array looking for monsters belonging to owner),&#13;
    ///  but it also returns a dynamic array, which is only supported for web3 calls, and&#13;
    ///  not contract-to-contract calls.&#13;
    function tokensOfOwner(address _owner) external view returns (uint256[] ownerTokens) {&#13;
        uint256 tokenCount = balanceOf(_owner);&#13;
&#13;
        if (tokenCount == 0) {&#13;
            // Return an empty array&#13;
            return new uint256[](0);&#13;
        } else {&#13;
            uint256[] memory result = new uint256[](tokenCount);&#13;
            uint256 totalMonsters = totalSupply();&#13;
            uint256 resultIndex = 0;&#13;
&#13;
            // We count on the fact that all monsters have IDs starting at 1 and increasing&#13;
            // sequentially up to the totalMonster count.&#13;
            uint256 monsterId;&#13;
&#13;
            for (monsterId = 1; monsterId &lt;= totalMonsters; monsterId++) {&#13;
                if (monsterIndexToOwner[monsterId] == _owner) {&#13;
                    result[resultIndex] = monsterId;&#13;
                    resultIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            return result;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson &lt;<span class="__cf_email__" data-cfemail="96f7e4f7f5fef8fff2d6f8f9e2f2f9e2b8f8f3e2">[emailÂ protected]</span>&gt;)&#13;
    ///  This method is licenced under the Apache License.&#13;
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol&#13;
    function _memcpy(uint _dest, uint _src, uint _len) private view {&#13;
        // Copy word-length chunks while possible&#13;
        for (; _len &gt;= 32; _len -= 32) {&#13;
            assembly {&#13;
            mstore(_dest, mload(_src))&#13;
            }&#13;
            _dest += 32;&#13;
            _src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint256 mask = 256 ** (32 - _len) - 1;&#13;
        assembly {&#13;
        let srcpart := and(mload(_src), not(mask))&#13;
        let destpart := and(mload(_dest), mask)&#13;
        mstore(_dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson &lt;<span class="__cf_email__" data-cfemail="5b3a293a383335323f1b35342f3f342f75353e2f">[emailÂ protected]</span>&gt;)&#13;
    ///  This method is licenced under the Apache License.&#13;
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol&#13;
    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {&#13;
        var outputString = new string(_stringLength);&#13;
        uint256 outputPtr;&#13;
        uint256 bytesPtr;&#13;
&#13;
        assembly {&#13;
        outputPtr := add(outputString, 32)&#13;
        bytesPtr := _rawBytes&#13;
        }&#13;
&#13;
        _memcpy(outputPtr, bytesPtr, _stringLength);&#13;
&#13;
        return outputString;&#13;
    }&#13;
&#13;
    /// @notice Returns a URI pointing to a metadata package for this token conforming to&#13;
    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)&#13;
    /// @param _tokenId The ID number of the Monster whose metadata should be returned.&#13;
    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {&#13;
        require(erc721Metadata != address(0));&#13;
        bytes32[4] memory buffer;&#13;
        uint256 count;&#13;
        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);&#13;
&#13;
        return _toString(buffer, count);&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
/// @title A facet of MonsterCore that manages Monster siring, gestation, and birth.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev See the MonsterCore contract documentation to understand how the various contract facets are arranged.&#13;
contract MonsterBreeding is MonsterOwnership {&#13;
&#13;
    /// @dev The Pregnant event is fired when two monsters successfully breed and the pregnancy&#13;
    ///  timer begins for the matron.&#13;
    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 cooldownEndBlock);&#13;
&#13;
    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards&#13;
    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by&#13;
    ///  the COO role as the gas price changes.&#13;
    uint256 public autoBirthFee = 8 finney;&#13;
&#13;
    // Keeps track of number of pregnant monsters.&#13;
    uint256 public pregnantMonsters;&#13;
&#13;
    /// @dev The address of the sibling contract that is used to implement the sooper-sekret&#13;
    ///  genetic combination algorithm.&#13;
&#13;
    /// @dev Update the address of the genetic contract, can only be called by the CEO.&#13;
    /// @param _address An address of a GeneScience contract instance to be used from this point forward.&#13;
    function setGeneScienceAddress(address _address) external onlyCEO {&#13;
        GeneScience candidateContract = GeneScience(_address);&#13;
&#13;
        require(candidateContract.isGeneScience());&#13;
&#13;
        // Set the new contract address&#13;
        geneScience = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Checks that a given monster is able to breed. Requires that the&#13;
    ///  current cooldown is finished (for sires) and also checks that there is&#13;
    ///  no pending pregnancy.&#13;
    function _isReadyToBreed(Monster _monster) internal view returns (bool) {&#13;
        // In addition to checking the cooldownEndBlock, we also need to check to see if&#13;
        // the monster has a pending birth; there can be some period of time between the end&#13;
        // of the pregnacy timer and the birth event.&#13;
        return (_monster.siringWithId == 0) &amp;&amp; (_monster.cooldownEndBlock &lt;= uint64(block.number));&#13;
    }&#13;
&#13;
    /// @dev Check if a sire has authorized breeding with this matron. True if both sire&#13;
    ///  and matron have the same owner, or if the sire has given siring permission to&#13;
    ///  the matron's owner (via approveSiring()).&#13;
    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {&#13;
        address matronOwner = monsterIndexToOwner[_matronId];&#13;
        address sireOwner = monsterIndexToOwner[_sireId];&#13;
&#13;
        // Siring is okay if they have same owner, or if the matron's owner was given&#13;
        // permission to breed with this sire.&#13;
        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);&#13;
    }&#13;
&#13;
    /// @dev Set the cooldownEndTime for the given Monster, based on its current cooldownIndex.&#13;
    ///  Also increments the cooldownIndex (unless it has hit the cap).&#13;
    /// @param _monster A reference to the Monster in storage which needs its timer started.&#13;
    function _triggerCooldown(Monster storage _monster) internal {&#13;
        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).&#13;
        _monster.cooldownEndBlock = uint64((cooldowns[_monster.cooldownIndex] / secondsPerBlock) + block.number);&#13;
&#13;
        // Increment the breeding count, clamping it at 13, which is the length of the&#13;
        // cooldowns array. We could check the array size dynamically, but hard-coding&#13;
        // this as a constant saves gas. Yay, Solidity!&#13;
        if (_monster.cooldownIndex &lt; 13) {&#13;
            _monster.cooldownIndex += 1;&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Grants approval to another user to sire with one of your Monsters.&#13;
    /// @param _addr The address that will be able to sire with your Monster. Set to&#13;
    ///  address(0) to clear all siring approvals for this Monster.&#13;
    /// @param _sireId A Monster that you own that _addr will now be able to sire with.&#13;
    /// KERNYS ì¸ë¶ìì ìë¹ ê° í¸ì¶í  ì ìë¤. (meta maskë¡)&#13;
    function approveSiring(address _addr, uint256 _sireId)&#13;
    external&#13;
    whenNotPaused&#13;
    {&#13;
        require(_owns(msg.sender, _sireId));&#13;
        sireAllowedToAddress[_sireId] = _addr;&#13;
    }&#13;
&#13;
    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only&#13;
    ///  be called by the COO address. (This fee is used to offset the gas cost incurred&#13;
    ///  by the autobirth daemon).&#13;
    function setAutoBirthFee(uint256 val) external onlyCOO {&#13;
        autoBirthFee = val;&#13;
    }&#13;
&#13;
    /// @dev Checks to see if a given Monster is pregnant and (if so) if the gestation&#13;
    ///  period has passed.&#13;
    function _isReadyToGiveBirth(Monster _matron) private view returns (bool) {&#13;
        return (_matron.siringWithId != 0) &amp;&amp; (_matron.cooldownEndBlock &lt;= uint64(block.number));&#13;
    }&#13;
&#13;
    /// @notice Checks that a given monster is able to breed (i.e. it is not pregnant or&#13;
    ///  in the middle of a siring cooldown).&#13;
    /// @param _monsterId reference the id of the monster, any user can inquire about it&#13;
    function isReadyToBreed(uint256 _monsterId)&#13;
    public&#13;
    view&#13;
    returns (bool)&#13;
    {&#13;
        require(_monsterId &gt; 0);&#13;
        Monster storage monster = monsters[_monsterId];&#13;
        return _isReadyToBreed(monster);&#13;
    }&#13;
&#13;
    /// @dev Checks whether a monster is currently pregnant.&#13;
    /// @param _monsterId reference the id of the monster, any user can inquire about it&#13;
    function isPregnant(uint256 _monsterId)&#13;
    public&#13;
    view&#13;
    returns (bool)&#13;
    {&#13;
        require(_monsterId &gt; 0);&#13;
        // A monster is pregnant if and only if this field is set&#13;
        return monsters[_monsterId].siringWithId != 0;&#13;
    }&#13;
&#13;
    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT&#13;
    ///  check ownership permissions (that is up to the caller).&#13;
    /// @param _matron A reference to the Monster struct of the potential matron.&#13;
    /// @param _matronId The matron's ID.&#13;
    /// @param _sire A reference to the Monster struct of the potential sire.&#13;
    /// @param _sireId The sire's ID&#13;
    function _isValidMatingPair(&#13;
    Monster storage _matron,&#13;
    uint256 _matronId,&#13;
    Monster storage _sire,&#13;
    uint256 _sireId&#13;
    )&#13;
    private&#13;
    view&#13;
    returns (bool)&#13;
    {&#13;
        // A Monster can't breed with itself!&#13;
        if (_matronId == _sireId) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // Monsters can't breed with their parents.&#13;
        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {&#13;
            return false;&#13;
        }&#13;
        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // We can short circuit the sibling check (below) if either monster is&#13;
        // gen zero (has a matron ID of zero).&#13;
        if (_sire.matronId == 0 || _matron.matronId == 0) {&#13;
            return true;&#13;
        }&#13;
&#13;
        // Monsters can't breed with full or half siblings.&#13;
        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {&#13;
            return false;&#13;
        }&#13;
        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // Everything seems cool! Let's get DTF.&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev Internal check to see if a given sire and matron are a valid mating pair for&#13;
    ///  breeding via auction (i.e. skips ownership and siring approval checks).&#13;
    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)&#13;
    internal&#13;
    view&#13;
    returns (bool)&#13;
    {&#13;
        Monster storage matron = monsters[_matronId];&#13;
        Monster storage sire = monsters[_sireId];&#13;
        return _isValidMatingPair(matron, _matronId, sire, _sireId);&#13;
    }&#13;
&#13;
    /// @notice Checks to see if two monsters can breed together, including checks for&#13;
    ///  ownership and siring approvals. Does NOT check that both monsters are ready for&#13;
    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).&#13;
    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?&#13;
    /// @param _matronId The ID of the proposed matron.&#13;
    /// @param _sireId The ID of the proposed sire.&#13;
    function canBreedWith(uint256 _matronId, uint256 _sireId)&#13;
    external&#13;
    view&#13;
    returns (bool)&#13;
    {&#13;
        require(_matronId &gt; 0);&#13;
        require(_sireId &gt; 0);&#13;
        Monster storage matron = monsters[_matronId];&#13;
        Monster storage sire = monsters[_sireId];&#13;
        return _isValidMatingPair(matron, _matronId, sire, _sireId) &amp;&amp;&#13;
        _isSiringPermitted(_sireId, _matronId);&#13;
    }&#13;
&#13;
    /// @dev Internal utility function to initiate breeding, assumes that all breeding&#13;
    ///  requirements have been checked.&#13;
    function _breedWith(uint256 _matronId, uint256 _sireId) internal {&#13;
        // Grab a reference to the Monsters from storage.&#13;
        Monster storage sire = monsters[_sireId];&#13;
        Monster storage matron = monsters[_matronId];&#13;
&#13;
        // Mark the matron as pregnant, keeping track of who the sire is.&#13;
        matron.siringWithId = uint32(_sireId);&#13;
&#13;
        // Trigger the cooldown for both parents.&#13;
        _triggerCooldown(sire);&#13;
        _triggerCooldown(matron);&#13;
&#13;
        // Clear siring permission for both parents. This may not be strictly necessary&#13;
        // but it's likely to avoid confusion!&#13;
        delete sireAllowedToAddress[_matronId];&#13;
        delete sireAllowedToAddress[_sireId];&#13;
&#13;
        // Every time a monster gets pregnant, counter is incremented.&#13;
        pregnantMonsters++;&#13;
&#13;
        // Emit the pregnancy event.&#13;
        Pregnant(monsterIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock);&#13;
    }&#13;
&#13;
    /// @notice Breed a Monster you own (as matron) with a sire that you own, or for which you&#13;
    ///  have previously been given Siring approval. Will either make your monster pregnant, or will&#13;
    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()&#13;
    /// @param _matronId The ID of the Monster acting as matron (will end up pregnant if successful)&#13;
    /// @param _sireId The ID of the Monster acting as sire (will begin its siring cooldown if successful)&#13;
    function breedWithAuto(uint256 _matronId, uint256 _sireId)&#13;
    external&#13;
    payable&#13;
    whenNotPaused&#13;
    {&#13;
        // Checks for payment.&#13;
        require(msg.value &gt;= autoBirthFee);&#13;
&#13;
        // Caller must own the matron.&#13;
        require(_owns(msg.sender, _matronId));&#13;
&#13;
        // Neither sire nor matron are allowed to be on auction during a normal&#13;
        // breeding operation, but we don't need to check that explicitly.&#13;
        // For matron: The caller of this function can't be the owner of the matron&#13;
        //   because the owner of a Monster on auction is the auction house, and the&#13;
        //   auction house will never call breedWith().&#13;
        // For sire: Similarly, a sire on auction will be owned by the auction house&#13;
        //   and the act of transferring ownership will have cleared any oustanding&#13;
        //   siring approval.&#13;
        // Thus we don't need to spend gas explicitly checking to see if either monster&#13;
        // is on auction.&#13;
&#13;
        // Check that matron and sire are both owned by caller, or that the sire&#13;
        // has given siring permission to caller (i.e. matron's owner).&#13;
        // Will fail for _sireId = 0&#13;
        require(_isSiringPermitted(_sireId, _matronId));&#13;
&#13;
        // Grab a reference to the potential matron&#13;
        Monster storage matron = monsters[_matronId];&#13;
&#13;
        // Make sure matron isn't pregnant, or in the middle of a siring cooldown&#13;
        require(_isReadyToBreed(matron));&#13;
&#13;
        // Grab a reference to the potential sire&#13;
        Monster storage sire = monsters[_sireId];&#13;
&#13;
        // Make sure sire isn't pregnant, or in the middle of a siring cooldown&#13;
        require(_isReadyToBreed(sire));&#13;
&#13;
        // Test that these monsters are a valid mating pair.&#13;
        require(_isValidMatingPair(&#13;
        matron,&#13;
        _matronId,&#13;
        sire,&#13;
        _sireId&#13;
        ));&#13;
&#13;
        // All checks passed, monster gets pregnant!&#13;
        _breedWith(_matronId, _sireId);&#13;
    }&#13;
&#13;
    /// @notice Have a pregnant Monster give birth!&#13;
    /// @param _matronId A Monster ready to give birth.&#13;
    /// @return The Monster ID of the new monster.&#13;
    /// @dev Looks at a given Monster and, if pregnant and if the gestation period has passed,&#13;
    ///  combines the genes of the two parents to create a new monster. The new Monster is assigned&#13;
    ///  to the current owner of the matron. Upon successful completion, both the matron and the&#13;
    ///  new monster will be ready to breed again. Note that anyone can call this function (if they&#13;
    ///  are willing to pay the gas!), but the new monster always goes to the mother's owner.&#13;
    function giveBirth(uint256 _matronId)&#13;
    external&#13;
    whenNotPaused&#13;
    returns (uint256)&#13;
    {&#13;
        // Grab a reference to the matron in storage.&#13;
        Monster storage matron = monsters[_matronId];&#13;
&#13;
        // Check that the matron's owner.&#13;
        require(_owns(msg.sender, _matronId));&#13;
&#13;
        // Check that the matron is a valid monster.&#13;
        require(matron.birthTime != 0);&#13;
&#13;
        // Check that the matron is pregnant, and that its time has come!&#13;
        require(_isReadyToGiveBirth(matron));&#13;
&#13;
        // Grab a reference to the sire in storage.&#13;
        uint256 sireId = matron.siringWithId;&#13;
        Monster storage sire = monsters[sireId];&#13;
&#13;
        // Determine the higher generation number of the two parents&#13;
        uint16 parentGen = matron.generation;&#13;
        if (sire.generation &gt; matron.generation) {&#13;
            parentGen = sire.generation;&#13;
        }&#13;
&#13;
        // Call the sooper-sekret gene mixing operation.&#13;
        // targetBlock&#13;
        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);&#13;
&#13;
        // Make the new monster!&#13;
        address owner = monsterIndexToOwner[_matronId];&#13;
        uint256 monsterId = _createMonster(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);&#13;
&#13;
        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId&#13;
        // set is what marks a matron as being pregnant.)&#13;
        delete matron.siringWithId;&#13;
&#13;
        // Every time a monster gives birth counter is decremented.&#13;
        pregnantMonsters--;&#13;
&#13;
        // Send the balance fee to the person who made birth happen.&#13;
        msg.sender.send(autoBirthFee);&#13;
&#13;
        // return the new monster's ID&#13;
        return monsterId;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title Handles creating auctions for sale and siring of monsters.&#13;
///  This wrapper of ReverseAuction exists only so that users can create&#13;
///  auctions with only one transaction.&#13;
contract MonsterAuction is MonsterBreeding {&#13;
&#13;
    // @notice The auction contract variables are defined in MonsterBase to allow&#13;
    //  us to refer to them in MonsterOwnership to prevent accidental transfers.&#13;
    // `saleAuction` refers to the auction for gen0 and p2p sale of monsters.&#13;
    // `siringAuction` refers to the auction for siring rights of monsters.&#13;
&#13;
    /// @dev Sets the reference to the sale auction.&#13;
    /// @param _address - Address of sale contract.&#13;
    function setSaleAuctionAddress(address _address) external onlyCEO {&#13;
        SaleClockAuction candidateContract = SaleClockAuction(_address);&#13;
&#13;
        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117&#13;
        require(candidateContract.isSaleClockAuction());&#13;
&#13;
        // Set the new contract address&#13;
        saleAuction = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Sets the reference to the siring auction.&#13;
    /// @param _address - Address of siring contract.&#13;
    function setSiringAuctionAddress(address _address) external onlyCEO {&#13;
        SiringClockAuction candidateContract = SiringClockAuction(_address);&#13;
&#13;
        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117&#13;
        require(candidateContract.isSiringClockAuction());&#13;
&#13;
        // Set the new contract address&#13;
        siringAuction = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Put a monster up for auction.&#13;
    ///  Does some ownership trickery to create auctions in one tx.&#13;
    function createSaleAuction(&#13;
    uint256 _monsterId,&#13;
    uint256 _startingPrice,&#13;
    uint256 _endingPrice,&#13;
    uint256 _duration&#13;
    )&#13;
    external&#13;
    whenNotPaused&#13;
    {&#13;
        // Auction contract checks input sizes&#13;
        // If monster is already on any auction, this will throw&#13;
        // because it will be owned by the auction contract.&#13;
        require(_owns(msg.sender, _monsterId));&#13;
        // Ensure the monster is not pregnant to prevent the auction&#13;
        // contract accidentally receiving ownership of the child.&#13;
        // NOTE: the monster IS allowed to be in a cooldown.&#13;
        require(!isPregnant(_monsterId));&#13;
        _approve(_monsterId, saleAuction);&#13;
        // Sale auction throws if inputs are invalid and clears&#13;
        // transfer and sire approval after escrowing the monster.&#13;
        saleAuction.createAuction(&#13;
        _monsterId,&#13;
        _startingPrice,&#13;
        _endingPrice,&#13;
        _duration,&#13;
        msg.sender&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Put a monster up for auction to be sire.&#13;
    ///  Performs checks to ensure the monster can be sired, then&#13;
    ///  delegates to reverse auction.&#13;
    function createSiringAuction(&#13;
    uint256 _monsterId,&#13;
    uint256 _startingPrice,&#13;
    uint256 _endingPrice,&#13;
    uint256 _duration&#13;
    )&#13;
    external&#13;
    whenNotPaused&#13;
    {&#13;
        // Auction contract checks input sizes&#13;
        // If monster is already on any auction, this will throw&#13;
        // because it will be owned by the auction contract.&#13;
        require(_owns(msg.sender, _monsterId));&#13;
        require(isReadyToBreed(_monsterId));&#13;
        _approve(_monsterId, siringAuction);&#13;
        // Siring auction throws if inputs are invalid and clears&#13;
        // transfer and sire approval after escrowing the monster.&#13;
        siringAuction.createAuction(&#13;
        _monsterId,&#13;
        _startingPrice,&#13;
        _endingPrice,&#13;
        _duration,&#13;
        msg.sender&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Completes a siring auction by bidding.&#13;
    ///  Immediately breeds the winning matron with the sire on auction.&#13;
    /// @param _sireId - ID of the sire on auction.&#13;
    /// @param _matronId - ID of the matron owned by the bidder.&#13;
    function bidOnSiringAuction(&#13;
    uint256 _sireId,&#13;
    uint256 _matronId&#13;
    )&#13;
    external&#13;
    payable&#13;
    whenNotPaused&#13;
    {&#13;
        // Auction contract checks input sizes&#13;
        require(_owns(msg.sender, _matronId));&#13;
        require(isReadyToBreed(_matronId));&#13;
        require(_canBreedWithViaAuction(_matronId, _sireId));&#13;
&#13;
        // Define the current price of the auction.&#13;
        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);&#13;
        require(msg.value &gt;= currentPrice + autoBirthFee);&#13;
&#13;
        // Siring auction will throw if the bid fails.&#13;
        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);&#13;
        _breedWith(uint32(_matronId), uint32(_sireId));&#13;
    }&#13;
&#13;
    /// @dev Transfers the balance of the sale auction contract&#13;
    /// to the MonsterCore contract. We use two-step withdrawal to&#13;
    /// prevent two transfer calls in the auction bid function.&#13;
    function withdrawAuctionBalances() external onlyCLevel {&#13;
        saleAuction.withdrawBalance();&#13;
        siringAuction.withdrawBalance();&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title all functions related to creating monsters&#13;
contract MonsterMinting is MonsterAuction {&#13;
&#13;
    // Limits the number of monsters the contract owner can ever create.&#13;
    uint256 public constant PROMO_CREATION_LIMIT = 5000;&#13;
    uint256 public constant GEN0_CREATION_LIMIT = 45000;&#13;
&#13;
    // Constants for gen0 auctions.&#13;
    uint256 public constant GEN0_STARTING_PRICE = 10 finney;&#13;
    uint256 public constant GEN0_AUCTION_DURATION = 1 days;&#13;
&#13;
    // Counts the number of monsters the contract owner has created.&#13;
    uint256 public promoCreatedCount;&#13;
    uint256 public gen0CreatedCount;&#13;
&#13;
    /// @dev we can create promo monsters, up to a limit. Only callable by COO&#13;
    /// @param _genes the encoded genes of the monster to be created, any value is accepted&#13;
    /// @param _owner the future owner of the created monsters. Default to contract COO&#13;
    function createPromoMonster(uint256 _genes, address _owner) external onlyCOO {&#13;
        address monsterOwner = _owner;&#13;
        if (monsterOwner == address(0)) {&#13;
            monsterOwner = cooAddress;&#13;
        }&#13;
        require(promoCreatedCount &lt; PROMO_CREATION_LIMIT);&#13;
&#13;
        promoCreatedCount++;&#13;
        _createMonster(0, 0, 0, _genes, monsterOwner);&#13;
    }&#13;
&#13;
    /// @dev Creates a new gen0 monster with the given genes and&#13;
    ///  creates an auction for it.&#13;
    function createGen0Auction(uint256 _genes) external onlyCOO {&#13;
        require(gen0CreatedCount &lt; GEN0_CREATION_LIMIT);&#13;
&#13;
        uint256 genes = _genes;&#13;
        if(genes == 0)&#13;
        genes = geneScience.randomGenes();&#13;
&#13;
        uint256 monsterId = _createMonster(0, 0, 0, genes, address(this));&#13;
        _approve(monsterId, saleAuction);&#13;
&#13;
        saleAuction.createAuction(&#13;
        monsterId,&#13;
        _computeNextGen0Price(),&#13;
        0,&#13;
        GEN0_AUCTION_DURATION,&#13;
        address(this)&#13;
        );&#13;
&#13;
        gen0CreatedCount++;&#13;
    }&#13;
&#13;
    /// @dev Computes the next gen0 auction starting price, given&#13;
    ///  the average of the past 5 prices + 50%.&#13;
    function _computeNextGen0Price() internal view returns (uint256) {&#13;
        uint256 avePrice = saleAuction.averageGen0SalePrice();&#13;
&#13;
        // Sanity check to ensure we don't overflow arithmetic&#13;
        require(avePrice == uint256(uint128(avePrice)));&#13;
&#13;
        uint256 nextPrice = avePrice + (avePrice / 2);&#13;
&#13;
        // We never auction for less than starting price&#13;
        if (nextPrice &lt; GEN0_STARTING_PRICE) {&#13;
            nextPrice = GEN0_STARTING_PRICE;&#13;
        }&#13;
&#13;
        return nextPrice;&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title CryptoMonsters: Collectible, breedable, and oh-so-adorable monsters on the Ethereum blockchain.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev The main CryptoMonsters contract, keeps track of monsters so they don't wander around and get lost.&#13;
contract MonsterCore is MonsterMinting {&#13;
&#13;
    // This is the main CryptoMonsters contract. In order to keep our code seperated into logical sections,&#13;
    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts&#13;
    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are&#13;
    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping&#13;
    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks&#13;
    // monster ownership. The genetic combination algorithm is kept seperate so we can open-source all of&#13;
    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.&#13;
    // Don't worry, I'm sure someone will reverse engineer it soon enough!&#13;
    //&#13;
    // Secondly, we break the core contract into multiple files using inheritence, one for each major&#13;
    // facet of functionality of CK. This allows us to keep related code bundled together while still&#13;
    // avoiding a single giant file with everything in it. The breakdown is as follows:&#13;
    //&#13;
    //      - MonsterBase: This is where we define the most fundamental code shared throughout the core&#13;
    //             functionality. This includes our main data storage, constants and data types, plus&#13;
    //             internal functions for managing these items.&#13;
    //&#13;
    //      - MonsterAccessControl: This contract manages the various addresses and constraints for operations&#13;
    //             that can be executed only by specific roles. Namely CEO, CFO and COO.&#13;
    //&#13;
    //      - MonsterOwnership: This provides the methods required for basic non-fungible token&#13;
    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).&#13;
    //&#13;
    //      - MonsterBreeding: This file contains the methods necessary to breed monsters together, including&#13;
    //             keeping track of siring offers, and relies on an external genetic combination contract.&#13;
    //&#13;
    //      - MonsterAuctions: Here we have the public methods for auctioning or bidding on monsters or siring&#13;
    //             services. The actual auction functionality is handled in two sibling contracts (one&#13;
    //             for sales and one for siring), while auction creation and bidding is mostly mediated&#13;
    //             through this facet of the core contract.&#13;
    //&#13;
    //      - MonsterMinting: This final facet contains the functionality we use for creating new gen0 monsters.&#13;
    //             We can make up to 5000 "promo" monsters that can be given away (especially important when&#13;
    //             the community is new), and all others can only be created and then immediately put up&#13;
    //             for auction via an algorithmically determined starting price. Regardless of how they&#13;
    //             are created, there is a hard limit of 50k gen0 monsters. After that, it's all up to the&#13;
    //             community to breed, breed, breed!&#13;
&#13;
    // Set in case the core contract is broken and an upgrade is required&#13;
    address public newContractAddress;&#13;
&#13;
    /// @notice Creates the main CryptoMonsters smart contract instance.&#13;
    function MonsterCore() public {&#13;
        // Starts paused.&#13;
        paused = false;&#13;
&#13;
        // the creator of the contract is the initial CEO&#13;
        ceoAddress = msg.sender;&#13;
&#13;
        // the creator of the contract is also the initial COO&#13;
        cooAddress = msg.sender;&#13;
&#13;
        //&#13;
        cfoAddress = msg.sender;&#13;
&#13;
        // start with the mythical monster 0 - so we don't have generation-0 parent issues&#13;
        _createMonster(0, 0, 0, uint256(57896044618658097711785492504343953926634992332820282019728792004021511462807), address(0));&#13;
    }&#13;
&#13;
    /// @dev Used to mark the smart contract as upgraded, in case there is a serious&#13;
    ///  breaking bug. This method does nothing but keep track of the new contract and&#13;
    ///  emit a message indimonstering that the new address is set. It's up to clients of this&#13;
    ///  contract to update to the new contract address in that case. (This contract will&#13;
    ///  be paused indefinitely if such an upgrade takes place.)&#13;
    /// @param _v2Address new address&#13;
    function setNewAddress(address _v2Address) external onlyCEO whenPaused {&#13;
        // See README.md for updgrade plan&#13;
        newContractAddress = _v2Address;&#13;
        ContractUpgrade(_v2Address);&#13;
    }&#13;
&#13;
    /// @notice No tipping!&#13;
    /// @dev Reject all Ether from being sent here, unless it's from one of the&#13;
    ///  two auction contracts. (Hopefully, we can prevent user accidents.)&#13;
    function() external payable {&#13;
        require(&#13;
        msg.sender == address(saleAuction) ||&#13;
        msg.sender == address(siringAuction)&#13;
        );&#13;
    }&#13;
&#13;
    /// @notice Returns all the relevant information about a specific monster.&#13;
    /// @param _id The ID of the monster of interest.&#13;
    function getMonster(uint256 _id)&#13;
    external&#13;
    view&#13;
    returns (&#13;
    bool isGestating,&#13;
    bool isReady,&#13;
    uint256 cooldownIndex,&#13;
    uint256 nextActionAt,&#13;
    uint256 siringWithId,&#13;
    uint256 birthTime,&#13;
    uint256 matronId,&#13;
    uint256 sireId,&#13;
    uint256 generation,&#13;
    uint256 genes&#13;
    ) {&#13;
        Monster storage monster = monsters[_id];&#13;
&#13;
        // if this variable is 0 then it's not gestating&#13;
        isGestating = (monster.siringWithId != 0);&#13;
        isReady = (monster.cooldownEndBlock &lt;= block.number);&#13;
        cooldownIndex = uint256(monster.cooldownIndex);&#13;
        nextActionAt = uint256(monster.cooldownEndBlock);&#13;
        siringWithId = uint256(monster.siringWithId);&#13;
        birthTime = uint256(monster.birthTime);&#13;
        matronId = uint256(monster.matronId);&#13;
        sireId = uint256(monster.sireId);&#13;
        generation = uint256(monster.generation);&#13;
        genes = monster.genes;&#13;
    }&#13;
&#13;
    /// @dev Override unpause so it requires all external contract addresses&#13;
    ///  to be set before contract can be unpaused. Also, we can't have&#13;
    ///  newContractAddress set either, because then the contract was upgraded.&#13;
    /// @notice This is public rather than external so we can call super.unpause&#13;
    ///  without using an expensive CALL.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        require(saleAuction != address(0));&#13;
        require(siringAuction != address(0));&#13;
        require(geneScience != address(0));&#13;
        require(newContractAddress == address(0));&#13;
&#13;
        // Actually unpause the contract.&#13;
        super.unpause();&#13;
    }&#13;
&#13;
    // @dev Allows the CFO to capture the balance available to the contract.&#13;
    function withdrawBalance() external onlyCFO {&#13;
        uint256 balance = this.balance;&#13;
        // Subtract all the currently pregnant monsters we have, plus 1 of margin.&#13;
        uint256 subtractFees = (pregnantMonsters + 1) * autoBirthFee;&#13;
&#13;
        if (balance &gt; subtractFees) {&#13;
            cfoAddress.send(balance - subtractFees);&#13;
        }&#13;
    }&#13;
}
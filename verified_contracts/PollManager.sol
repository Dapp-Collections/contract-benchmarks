pragma solidity ^0.4.23;

interface ApproveAndCallFallBack {
    function receiveApproval(
        address from,
        uint256 _amount,
        address _token,
        bytes _data
    ) external;
}


contract Controlled {
    /// @notice The address of the controller is the only address that can call
    ///  a function with this modifier
    modifier onlyController { 
        require(msg.sender == controller); 
        _; 
    }

    address public controller;

    constructor() internal { 
        controller = msg.sender; 
    }

    /// @notice Changes the controller of the contract
    /// @param _newController The new controller of the contract
    function changeController(address _newController) public onlyController {
        controller = _newController;
    }
}


/*
* Used to proxy function calls to the RLPReader for testing
*/
/*
* @author Hamdi Allam <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3a525b575e53145b56565b57030d7a5d575b535614595557">[emailÂ protected]</a>&#13;
* Please reach our for any questions/concerns&#13;
*/&#13;
&#13;
&#13;
library RLPReader {&#13;
    uint8 constant STRING_SHORT_START = 0x80;&#13;
    uint8 constant STRING_LONG_START  = 0xb8;&#13;
    uint8 constant LIST_SHORT_START   = 0xc0;&#13;
    uint8 constant LIST_LONG_START    = 0xf8;&#13;
&#13;
    uint8 constant WORD_SIZE = 32;&#13;
&#13;
    struct RLPItem {&#13;
        uint len;&#13;
        uint memPtr;&#13;
    }&#13;
&#13;
    /*&#13;
    * @param item RLP encoded bytes&#13;
    */&#13;
    function toRlpItem(bytes memory item) internal pure returns (RLPItem memory) {&#13;
        if (item.length == 0) &#13;
            return RLPItem(0, 0);&#13;
&#13;
        uint memPtr;&#13;
        assembly {&#13;
            memPtr := add(item, 0x20)&#13;
        }&#13;
&#13;
        return RLPItem(item.length, memPtr);&#13;
    }&#13;
&#13;
    /*&#13;
    * @param item RLP encoded list in bytes&#13;
    */&#13;
    function toList(RLPItem memory item) internal pure returns (RLPItem[] memory result) {&#13;
        require(isList(item));&#13;
&#13;
        uint items = numItems(item);&#13;
        result = new RLPItem[](items);&#13;
&#13;
        uint memPtr = item.memPtr + _payloadOffset(item.memPtr);&#13;
        uint dataLen;&#13;
        for (uint i = 0; i &lt; items; i++) {&#13;
            dataLen = _itemLength(memPtr);&#13;
            result[i] = RLPItem(dataLen, memPtr); &#13;
            memPtr = memPtr + dataLen;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
    * Helpers&#13;
    */&#13;
&#13;
    // @return indicator whether encoded payload is a list. negate this function call for isData.&#13;
    function isList(RLPItem memory item) internal pure returns (bool) {&#13;
        uint8 byte0;&#13;
        uint memPtr = item.memPtr;&#13;
        assembly {&#13;
            byte0 := byte(0, mload(memPtr))&#13;
        }&#13;
&#13;
        if (byte0 &lt; LIST_SHORT_START)&#13;
            return false;&#13;
        return true;&#13;
    }&#13;
&#13;
    // @return number of payload items inside an encoded list.&#13;
    function numItems(RLPItem memory item) internal pure returns (uint) {&#13;
        uint count = 0;&#13;
        uint currPtr = item.memPtr + _payloadOffset(item.memPtr);&#13;
        uint endPtr = item.memPtr + item.len;&#13;
        while (currPtr &lt; endPtr) {&#13;
           currPtr = currPtr + _itemLength(currPtr); // skip over an item&#13;
           count++;&#13;
        }&#13;
&#13;
        return count;&#13;
    }&#13;
&#13;
    // @return entire rlp item byte length&#13;
    function _itemLength(uint memPtr) internal pure returns (uint len) {&#13;
        uint byte0;&#13;
        assembly {&#13;
            byte0 := byte(0, mload(memPtr))&#13;
        }&#13;
&#13;
        if (byte0 &lt; STRING_SHORT_START)&#13;
            return 1;&#13;
        &#13;
        else if (byte0 &lt; STRING_LONG_START)&#13;
            return byte0 - STRING_SHORT_START + 1;&#13;
&#13;
        else if (byte0 &lt; LIST_SHORT_START) {&#13;
            assembly {&#13;
                let byteLen := sub(byte0, 0xb7) // # of bytes the actual length is&#13;
                memPtr := add(memPtr, 1) // skip over the first byte&#13;
                &#13;
                /* 32 byte word size */&#13;
                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to get the len&#13;
                len := add(dataLen, add(byteLen, 1))&#13;
            }&#13;
        }&#13;
&#13;
        else if (byte0 &lt; LIST_LONG_START) {&#13;
            return byte0 - LIST_SHORT_START + 1;&#13;
        } &#13;
&#13;
        else {&#13;
            assembly {&#13;
                let byteLen := sub(byte0, 0xf7)&#13;
                memPtr := add(memPtr, 1)&#13;
&#13;
                let dataLen := div(mload(memPtr), exp(256, sub(32, byteLen))) // right shifting to the correct length&#13;
                len := add(dataLen, add(byteLen, 1))&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    // @return number of bytes until the data&#13;
    function _payloadOffset(uint memPtr) internal pure returns (uint) {&#13;
        uint byte0;&#13;
        assembly {&#13;
            byte0 := byte(0, mload(memPtr))&#13;
        }&#13;
&#13;
        if (byte0 &lt; STRING_SHORT_START) &#13;
            return 0;&#13;
        else if (byte0 &lt; STRING_LONG_START || (byte0 &gt;= LIST_SHORT_START &amp;&amp; byte0 &lt; LIST_LONG_START))&#13;
            return 1;&#13;
        else if (byte0 &lt; LIST_SHORT_START)  // being explicit&#13;
            return byte0 - (STRING_LONG_START - 1) + 1;&#13;
        else&#13;
            return byte0 - (LIST_LONG_START - 1) + 1;&#13;
    }&#13;
&#13;
    /** RLPItem conversions into data types **/&#13;
&#13;
    function toBoolean(RLPItem memory item) internal pure returns (bool) {&#13;
        require(item.len == 1, "Invalid RLPItem. Booleans are encoded in 1 byte");&#13;
        uint result;&#13;
        uint memPtr = item.memPtr;&#13;
        assembly {&#13;
            result := byte(0, mload(memPtr))&#13;
        }&#13;
&#13;
        return result == 0 ? false : true;&#13;
    }&#13;
&#13;
    function toAddress(RLPItem memory item) internal pure returns (address) {&#13;
        // 1 byte for the length prefix according to RLP spec&#13;
        require(item.len == 21, "Invalid RLPItem. Addresses are encoded in 20 bytes");&#13;
        &#13;
        uint memPtr = item.memPtr + 1; // skip the length prefix&#13;
        uint addr;&#13;
        assembly {&#13;
            addr := div(mload(memPtr), exp(256, 12)) // right shift 12 bytes. we want the most significant 20 bytes&#13;
        }&#13;
        &#13;
        return address(addr);&#13;
    }&#13;
&#13;
    function toUint(RLPItem memory item) internal pure returns (uint) {&#13;
        uint offset = _payloadOffset(item.memPtr);&#13;
        uint len = item.len - offset;&#13;
        uint memPtr = item.memPtr + offset;&#13;
&#13;
        uint result;&#13;
        assembly {&#13;
            result := div(mload(memPtr), exp(256, sub(32, len))) // shift to the correct location&#13;
        }&#13;
&#13;
        return result;&#13;
    }&#13;
&#13;
    function toBytes(RLPItem memory item) internal pure returns (bytes) {&#13;
        uint offset = _payloadOffset(item.memPtr);&#13;
        uint len = item.len - offset; // data length&#13;
        bytes memory result = new bytes(len);&#13;
&#13;
        uint destPtr;&#13;
        assembly {&#13;
            destPtr := add(0x20, result)&#13;
        }&#13;
&#13;
        copy(item.memPtr + offset, destPtr, len);&#13;
        return result;&#13;
    }&#13;
&#13;
&#13;
    /*&#13;
    * @param src Pointer to source&#13;
    * @param dest Pointer to destination&#13;
    * @param len Amount of memory to copy from the source&#13;
    */&#13;
    function copy(uint src, uint dest, uint len) internal pure {&#13;
        // copy as many word sizes as possible&#13;
        for (; len &gt;= WORD_SIZE; len -= WORD_SIZE) {&#13;
            assembly {&#13;
                mstore(dest, mload(src))&#13;
            }&#13;
&#13;
            src += WORD_SIZE;&#13;
            dest += WORD_SIZE;&#13;
        }&#13;
&#13;
        // left over bytes&#13;
        uint mask = 256 ** (WORD_SIZE - len) - 1;&#13;
        assembly {&#13;
            let srcpart := and(mload(src), not(mask)) // zero out src&#13;
            let destpart := and(mload(dest), mask) // retrieve the bytes&#13;
            mstore(dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
contract RLPHelper {&#13;
    using RLPReader for bytes;&#13;
    using RLPReader for uint;&#13;
    using RLPReader for RLPReader.RLPItem;&#13;
&#13;
    function isList(bytes memory item) public pure returns (bool) {&#13;
        RLPReader.RLPItem memory rlpItem = item.toRlpItem();&#13;
        return rlpItem.isList();&#13;
    }&#13;
&#13;
    function itemLength(bytes memory item) public pure returns (uint) {&#13;
        uint memPtr;&#13;
        assembly {&#13;
            memPtr := add(0x20, item)&#13;
        }&#13;
&#13;
        return memPtr._itemLength();&#13;
    }&#13;
&#13;
    function numItems(bytes memory item) public pure returns (uint) {&#13;
        RLPReader.RLPItem memory rlpItem = item.toRlpItem();&#13;
        return rlpItem.numItems();&#13;
    }&#13;
&#13;
    function toBytes(bytes memory item) public pure returns (bytes) {&#13;
        RLPReader.RLPItem memory rlpItem = item.toRlpItem();&#13;
        return rlpItem.toBytes();&#13;
    }&#13;
&#13;
    function toUint(bytes memory item) public pure returns (uint) {&#13;
        RLPReader.RLPItem memory rlpItem = item.toRlpItem();&#13;
        return rlpItem.toUint();&#13;
    }&#13;
&#13;
    function toAddress(bytes memory item) public pure returns (address) {&#13;
        RLPReader.RLPItem memory rlpItem = item.toRlpItem();&#13;
        return rlpItem.toAddress();&#13;
    }&#13;
&#13;
    function toBoolean(bytes memory item) public pure returns (bool) {&#13;
        RLPReader.RLPItem memory rlpItem = item.toRlpItem();&#13;
        return rlpItem.toBoolean();&#13;
    }&#13;
&#13;
    function bytesToString(bytes memory item) public pure returns (string) {&#13;
        RLPReader.RLPItem memory rlpItem = item.toRlpItem();&#13;
        return string(rlpItem.toBytes());&#13;
    }&#13;
&#13;
    /* custom destructuring */&#13;
    /*function customDestructure(bytes memory item) public pure returns (address, bool, uint) {&#13;
        // first three elements follow the return types in order. Ignore the rest&#13;
        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();&#13;
        return (items[0].toAddress(), items[1].toBoolean(), items[2].toUint());&#13;
    }&#13;
&#13;
    function customNestedDestructure(bytes memory item) public pure returns (address, uint) {&#13;
        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();&#13;
        items = items[0].toList();&#13;
        return (items[0].toAddress(), items[1].toUint());&#13;
    }*/&#13;
&#13;
&#13;
    //======================================&#13;
&#13;
    function pollTitle(bytes memory item) public pure returns (string) {&#13;
        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();&#13;
        return string(items[0].toBytes());&#13;
    }&#13;
&#13;
    function pollBallot(bytes memory item, uint ballotNum) public pure returns (string) {&#13;
        RLPReader.RLPItem[] memory items = item.toRlpItem().toList();&#13;
        items = items[1].toList();&#13;
        return string(items[ballotNum].toBytes());&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
/*&#13;
    Copyright 2016, Jordi Baylina&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 */&#13;
/**&#13;
 * @title MiniMeToken Contract&#13;
 * @author Jordi Baylina&#13;
 * @dev This token contract's goal is to make it easy for anyone to clone this&#13;
 *  token using the token distribution at a given block, this will allow DAO's&#13;
 *  and DApps to upgrade their features in a decentralized manner without&#13;
 *  affecting the original token&#13;
 * @dev It is ERC20 compliant, but still needs to under go further testing.&#13;
 */&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @dev The token controller contract must implement these functions&#13;
 */&#13;
interface TokenController {&#13;
    /**&#13;
     * @notice Called when `_owner` sends ether to the MiniMe Token contract&#13;
     * @param _owner The address that sent the ether to create tokens&#13;
     * @return True if the ether is accepted, false if it throws&#13;
     */&#13;
    function proxyPayment(address _owner) external payable returns(bool);&#13;
&#13;
    /**&#13;
     * @notice Notifies the controller about a token transfer allowing the&#13;
     *  controller to react if desired&#13;
     * @param _from The origin of the transfer&#13;
     * @param _to The destination of the transfer&#13;
     * @param _amount The amount of the transfer&#13;
     * @return False if the controller does not authorize the transfer&#13;
     */&#13;
    function onTransfer(address _from, address _to, uint _amount) external returns(bool);&#13;
&#13;
    /**&#13;
     * @notice Notifies the controller about an approval allowing the&#13;
     *  controller to react if desired&#13;
     * @param _owner The address that calls `approve()`&#13;
     * @param _spender The spender in the `approve()` call&#13;
     * @param _amount The amount in the `approve()` call&#13;
     * @return False if the controller does not authorize the approval&#13;
     */&#13;
    function onApprove(address _owner, address _spender, uint _amount) external&#13;
        returns(bool);&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
// Abstract contract for the full ERC 20 Token standard&#13;
// https://github.com/ethereum/EIPs/issues/20&#13;
&#13;
interface ERC20Token {&#13;
&#13;
    /**&#13;
     * @notice send `_value` token to `_to` from `msg.sender`&#13;
     * @param _to The address of the recipient&#13;
     * @param _value The amount of token to be transferred&#13;
     * @return Whether the transfer was successful or not&#13;
     */&#13;
    function transfer(address _to, uint256 _value) external returns (bool success);&#13;
&#13;
    /**&#13;
     * @notice `msg.sender` approves `_spender` to spend `_value` tokens&#13;
     * @param _spender The address of the account able to transfer the tokens&#13;
     * @param _value The amount of tokens to be approved for transfer&#13;
     * @return Whether the approval was successful or not&#13;
     */&#13;
    function approve(address _spender, uint256 _value) external returns (bool success);&#13;
&#13;
    /**&#13;
     * @notice send `_value` token to `_to` from `_from` on the condition it is approved by `_from`&#13;
     * @param _from The address of the sender&#13;
     * @param _to The address of the recipient&#13;
     * @param _value The amount of token to be transferred&#13;
     * @return Whether the transfer was successful or not&#13;
     */&#13;
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool success);&#13;
&#13;
    /**&#13;
     * @param _owner The address from which the balance will be retrieved&#13;
     * @return The balance&#13;
     */&#13;
    function balanceOf(address _owner) external view returns (uint256 balance);&#13;
&#13;
    /**&#13;
     * @param _owner The address of the account owning tokens&#13;
     * @param _spender The address of the account able to transfer the tokens&#13;
     * @return Amount of remaining tokens allowed to spent&#13;
     */&#13;
    function allowance(address _owner, address _spender) external view returns (uint256 remaining);&#13;
&#13;
    /**&#13;
     * @notice return total supply of tokens&#13;
     */&#13;
    function totalSupply() external view returns (uint256 supply);&#13;
&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
}&#13;
&#13;
&#13;
contract MiniMeTokenInterface is ERC20Token {&#13;
&#13;
    /**&#13;
     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on&#13;
     *  its behalf, and then a function is triggered in the contract that is&#13;
     *  being approved, `_spender`. This allows users to use their tokens to&#13;
     *  interact with contracts in one function call instead of two&#13;
     * @param _spender The address of the contract able to transfer the tokens&#13;
     * @param _amount The amount of tokens to be approved for transfer&#13;
     * @return True if the function call was successful&#13;
     */&#13;
    function approveAndCall(&#13;
        address _spender,&#13;
        uint256 _amount,&#13;
        bytes _extraData&#13;
    ) &#13;
        external &#13;
        returns (bool success);&#13;
&#13;
    /**    &#13;
     * @notice Creates a new clone token with the initial distribution being&#13;
     *  this token at `_snapshotBlock`&#13;
     * @param _cloneTokenName Name of the clone token&#13;
     * @param _cloneDecimalUnits Number of decimals of the smallest unit&#13;
     * @param _cloneTokenSymbol Symbol of the clone token&#13;
     * @param _snapshotBlock Block when the distribution of the parent token is&#13;
     *  copied to set the initial distribution of the new clone token;&#13;
     *  if the block is zero than the actual block, the current block is used&#13;
     * @param _transfersEnabled True if transfers are allowed in the clone&#13;
     * @return The address of the new MiniMeToken Contract&#13;
     */&#13;
    function createCloneToken(&#13;
        string _cloneTokenName,&#13;
        uint8 _cloneDecimalUnits,&#13;
        string _cloneTokenSymbol,&#13;
        uint _snapshotBlock,&#13;
        bool _transfersEnabled&#13;
    ) &#13;
        public&#13;
        returns(address);&#13;
&#13;
    /**    &#13;
     * @notice Generates `_amount` tokens that are assigned to `_owner`&#13;
     * @param _owner The address that will be assigned the new tokens&#13;
     * @param _amount The quantity of tokens generated&#13;
     * @return True if the tokens are generated correctly&#13;
     */&#13;
    function generateTokens(&#13;
        address _owner,&#13;
        uint _amount&#13;
    )&#13;
        public&#13;
        returns (bool);&#13;
&#13;
    /**&#13;
     * @notice Burns `_amount` tokens from `_owner`&#13;
     * @param _owner The address that will lose the tokens&#13;
     * @param _amount The quantity of tokens to burn&#13;
     * @return True if the tokens are burned correctly&#13;
     */&#13;
    function destroyTokens(&#13;
        address _owner,&#13;
        uint _amount&#13;
    ) &#13;
        public&#13;
        returns (bool);&#13;
&#13;
    /**        &#13;
     * @notice Enables token holders to transfer their tokens freely if true&#13;
     * @param _transfersEnabled True if transfers are allowed in the clone&#13;
     */&#13;
    function enableTransfers(bool _transfersEnabled) public;&#13;
&#13;
    /**    &#13;
     * @notice This method can be used by the controller to extract mistakenly&#13;
     *  sent tokens to this contract.&#13;
     * @param _token The address of the token contract that you want to recover&#13;
     *  set to 0 in case you want to extract ether.&#13;
     */&#13;
    function claimTokens(address _token) public;&#13;
&#13;
    /**&#13;
     * @dev Queries the balance of `_owner` at a specific `_blockNumber`&#13;
     * @param _owner The address from which the balance will be retrieved&#13;
     * @param _blockNumber The block number when the balance is queried&#13;
     * @return The balance at `_blockNumber`&#13;
     */&#13;
    function balanceOfAt(&#13;
        address _owner,&#13;
        uint _blockNumber&#13;
    ) &#13;
        public&#13;
        constant&#13;
        returns (uint);&#13;
&#13;
    /**&#13;
     * @notice Total amount of tokens at a specific `_blockNumber`.&#13;
     * @param _blockNumber The block number when the totalSupply is queried&#13;
     * @return The total amount of tokens at `_blockNumber`&#13;
     */&#13;
    function totalSupplyAt(uint _blockNumber) public view returns(uint);&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
////////////////&#13;
// MiniMeTokenFactory&#13;
////////////////&#13;
&#13;
/**&#13;
 * @dev This contract is used to generate clone contracts from a contract.&#13;
 *  In solidity this is the way to create a contract from a contract of the&#13;
 *  same class&#13;
 */&#13;
contract MiniMeTokenFactory {&#13;
&#13;
    /**&#13;
     * @notice Update the DApp by creating a new token with new functionalities&#13;
     *  the msg.sender becomes the controller of this clone token&#13;
     * @param _parentToken Address of the token being cloned&#13;
     * @param _snapshotBlock Block of the parent token that will&#13;
     *  determine the initial distribution of the clone token&#13;
     * @param _tokenName Name of the new token&#13;
     * @param _decimalUnits Number of decimals of the new token&#13;
     * @param _tokenSymbol Token Symbol for the new token&#13;
     * @param _transfersEnabled If true, tokens will be able to be transferred&#13;
     * @return The address of the new token contract&#13;
     */&#13;
    function createCloneToken(&#13;
        address _parentToken,&#13;
        uint _snapshotBlock,&#13;
        string _tokenName,&#13;
        uint8 _decimalUnits,&#13;
        string _tokenSymbol,&#13;
        bool _transfersEnabled&#13;
    ) public returns (MiniMeToken) {&#13;
        MiniMeToken newToken = new MiniMeToken(&#13;
            this,&#13;
            _parentToken,&#13;
            _snapshotBlock,&#13;
            _tokenName,&#13;
            _decimalUnits,&#13;
            _tokenSymbol,&#13;
            _transfersEnabled&#13;
            );&#13;
&#13;
        newToken.changeController(msg.sender);&#13;
        return newToken;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * @dev The actual token contract, the default controller is the msg.sender&#13;
 *  that deploys the contract, so usually this token will be deployed by a&#13;
 *  token controller contract, which Giveth will call a "Campaign"&#13;
 */&#13;
contract MiniMeToken is MiniMeTokenInterface, Controlled {&#13;
&#13;
    string public name;                //The Token's name: e.g. DigixDAO Tokens&#13;
    uint8 public decimals;             //Number of decimals of the smallest unit&#13;
    string public symbol;              //An identifier: e.g. REP&#13;
    string public version = "MMT_0.1"; //An arbitrary versioning scheme&#13;
&#13;
    /**&#13;
     * @dev `Checkpoint` is the structure that attaches a block number to a&#13;
     *  given value, the block number attached is the one that last changed the&#13;
     *  value&#13;
     */&#13;
    struct Checkpoint {&#13;
&#13;
        // `fromBlock` is the block number that the value was generated from&#13;
        uint128 fromBlock;&#13;
&#13;
        // `value` is the amount of tokens at a specific block number&#13;
        uint128 value;&#13;
    }&#13;
&#13;
    // `parentToken` is the Token address that was cloned to produce this token;&#13;
    //  it will be 0x0 for a token that was not cloned&#13;
    MiniMeToken public parentToken;&#13;
&#13;
    // `parentSnapShotBlock` is the block number from the Parent Token that was&#13;
    //  used to determine the initial distribution of the Clone Token&#13;
    uint public parentSnapShotBlock;&#13;
&#13;
    // `creationBlock` is the block number that the Clone Token was created&#13;
    uint public creationBlock;&#13;
&#13;
    // `balances` is the map that tracks the balance of each address, in this&#13;
    //  contract when the balance changes the block number that the change&#13;
    //  occurred is also included in the map &#13;
    mapping (address =&gt; Checkpoint[]) balances;&#13;
&#13;
    // `allowed` tracks any extra transfer rights as in all ERC20 tokens&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
&#13;
    // Tracks the history of the `totalSupply` of the token&#13;
    Checkpoint[] totalSupplyHistory;&#13;
&#13;
    // Flag that determines if the token is transferable or not.&#13;
    bool public transfersEnabled;&#13;
&#13;
    // The factory used to create new clone tokens&#13;
    MiniMeTokenFactory public tokenFactory;&#13;
&#13;
////////////////&#13;
// Constructor&#13;
////////////////&#13;
&#13;
    /** &#13;
     * @notice Constructor to create a MiniMeToken&#13;
     * @param _tokenFactory The address of the MiniMeTokenFactory contract that&#13;
     *  will create the Clone token contracts, the token factory needs to be&#13;
     *  deployed first&#13;
     * @param _parentToken Address of the parent token, set to 0x0 if it is a&#13;
     *  new token&#13;
     * @param _parentSnapShotBlock Block of the parent token that will&#13;
     *  determine the initial distribution of the clone token, set to 0 if it&#13;
     *  is a new token&#13;
     * @param _tokenName Name of the new token&#13;
     * @param _decimalUnits Number of decimals of the new token&#13;
     * @param _tokenSymbol Token Symbol for the new token&#13;
     * @param _transfersEnabled If true, tokens will be able to be transferred&#13;
     */&#13;
    constructor(&#13;
        address _tokenFactory,&#13;
        address _parentToken,&#13;
        uint _parentSnapShotBlock,&#13;
        string _tokenName,&#13;
        uint8 _decimalUnits,&#13;
        string _tokenSymbol,&#13;
        bool _transfersEnabled&#13;
    ) &#13;
        public&#13;
    {&#13;
        require(_tokenFactory != address(0)); //if not set, clone feature will not work properly&#13;
        tokenFactory = MiniMeTokenFactory(_tokenFactory);&#13;
        name = _tokenName;                                 // Set the name&#13;
        decimals = _decimalUnits;                          // Set the decimals&#13;
        symbol = _tokenSymbol;                             // Set the symbol&#13;
        parentToken = MiniMeToken(_parentToken);&#13;
        parentSnapShotBlock = _parentSnapShotBlock;&#13;
        transfersEnabled = _transfersEnabled;&#13;
        creationBlock = block.number;&#13;
    }&#13;
&#13;
&#13;
///////////////////&#13;
// ERC20 Methods&#13;
///////////////////&#13;
&#13;
    /**&#13;
     * @notice Send `_amount` tokens to `_to` from `msg.sender`&#13;
     * @param _to The address of the recipient&#13;
     * @param _amount The amount of tokens to be transferred&#13;
     * @return Whether the transfer was successful or not&#13;
     */&#13;
    function transfer(address _to, uint256 _amount) public returns (bool success) {&#13;
        require(transfersEnabled);&#13;
        return doTransfer(msg.sender, _to, _amount);&#13;
    }&#13;
&#13;
    /**&#13;
     * @notice Send `_amount` tokens to `_to` from `_from` on the condition it&#13;
     *  is approved by `_from`&#13;
     * @param _from The address holding the tokens being transferred&#13;
     * @param _to The address of the recipient&#13;
     * @param _amount The amount of tokens to be transferred&#13;
     * @return True if the transfer was successful&#13;
     */&#13;
    function transferFrom(&#13;
        address _from,&#13;
        address _to,&#13;
        uint256 _amount&#13;
    ) &#13;
        public &#13;
        returns (bool success)&#13;
    {&#13;
&#13;
        // The controller of this contract can move tokens around at will,&#13;
        //  this is important to recognize! Confirm that you trust the&#13;
        //  controller of this contract, which in most situations should be&#13;
        //  another open source smart contract or 0x0&#13;
        if (msg.sender != controller) {&#13;
            require(transfersEnabled);&#13;
&#13;
            // The standard ERC 20 transferFrom functionality&#13;
            if (allowed[_from][msg.sender] &lt; _amount) { &#13;
                return false;&#13;
            }&#13;
            allowed[_from][msg.sender] -= _amount;&#13;
        }&#13;
        return doTransfer(_from, _to, _amount);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev This is the actual transfer function in the token contract, it can&#13;
     *  only be called by other functions in this contract.&#13;
     * @param _from The address holding the tokens being transferred&#13;
     * @param _to The address of the recipient&#13;
     * @param _amount The amount of tokens to be transferred&#13;
     * @return True if the transfer was successful&#13;
     */&#13;
    function doTransfer(&#13;
        address _from,&#13;
        address _to,&#13;
        uint _amount&#13;
    ) &#13;
        internal&#13;
        returns(bool)&#13;
    {&#13;
&#13;
        if (_amount == 0) {&#13;
            return true;&#13;
        }&#13;
&#13;
        require(parentSnapShotBlock &lt; block.number);&#13;
&#13;
        // Do not allow transfer to 0x0 or the token contract itself&#13;
        require((_to != 0) &amp;&amp; (_to != address(this)));&#13;
&#13;
        // If the amount being transfered is more than the balance of the&#13;
        //  account the transfer returns false&#13;
        uint256 previousBalanceFrom = balanceOfAt(_from, block.number);&#13;
        if (previousBalanceFrom &lt; _amount) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // Alerts the token controller of the transfer&#13;
        if (isContract(controller)) {&#13;
            require(TokenController(controller).onTransfer(_from, _to, _amount));&#13;
        }&#13;
&#13;
        // First update the balance array with the new value for the address&#13;
        //  sending the tokens&#13;
        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);&#13;
&#13;
        // Then update the balance array with the new value for the address&#13;
        //  receiving the tokens&#13;
        uint256 previousBalanceTo = balanceOfAt(_to, block.number);&#13;
        require(previousBalanceTo + _amount &gt;= previousBalanceTo); // Check for overflow&#13;
        updateValueAtNow(balances[_to], previousBalanceTo + _amount);&#13;
&#13;
        // An event to make the transfer easy to find on the blockchain&#13;
        emit Transfer(_from, _to, _amount);&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    function doApprove(&#13;
        address _from,&#13;
        address _spender,&#13;
        uint256 _amount&#13;
    )&#13;
        internal &#13;
        returns (bool)&#13;
    {&#13;
        require(transfersEnabled);&#13;
&#13;
        // To change the approve amount you first have to reduce the addresses`&#13;
        //  allowance to zero by calling `approve(_spender,0)` if it is not&#13;
        //  already 0 to mitigate the race condition described here:&#13;
        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
        require((_amount == 0) || (allowed[_from][_spender] == 0));&#13;
&#13;
        // Alerts the token controller of the approve function call&#13;
        if (isContract(controller)) {&#13;
            require(TokenController(controller).onApprove(_from, _spender, _amount));&#13;
        }&#13;
&#13;
        allowed[_from][_spender] = _amount;&#13;
        emit Approval(_from, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * @param _owner The address that's balance is being requested&#13;
     * @return The balance of `_owner` at the current block&#13;
     */&#13;
    function balanceOf(address _owner) external view returns (uint256 balance) {&#13;
        return balanceOfAt(_owner, block.number);&#13;
    }&#13;
&#13;
    /**&#13;
     * @notice `msg.sender` approves `_spender` to spend `_amount` tokens on&#13;
     *  its behalf. This is a modified version of the ERC20 approve function&#13;
     *  to be a little bit safer&#13;
     * @param _spender The address of the account able to transfer the tokens&#13;
     * @param _amount The amount of tokens to be approved for transfer&#13;
     * @return True if the approval was successful&#13;
     */&#13;
    function approve(address _spender, uint256 _amount) external returns (bool success) {&#13;
        doApprove(msg.sender, _spender, _amount);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev This function makes it easy to read the `allowed[]` map&#13;
     * @param _owner The address of the account that owns the token&#13;
     * @param _spender The address of the account able to transfer the tokens&#13;
     * @return Amount of remaining tokens of _owner that _spender is allowed&#13;
     *  to spend&#13;
     */&#13;
    function allowance(&#13;
        address _owner,&#13;
        address _spender&#13;
    ) &#13;
        external&#13;
        view&#13;
        returns (uint256 remaining)&#13;
    {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
    /**&#13;
     * @notice `msg.sender` approves `_spender` to send `_amount` tokens on&#13;
     *  its behalf, and then a function is triggered in the contract that is&#13;
     *  being approved, `_spender`. This allows users to use their tokens to&#13;
     *  interact with contracts in one function call instead of two&#13;
     * @param _spender The address of the contract able to transfer the tokens&#13;
     * @param _amount The amount of tokens to be approved for transfer&#13;
     * @return True if the function call was successful&#13;
     */&#13;
    function approveAndCall(&#13;
        address _spender,&#13;
        uint256 _amount,&#13;
        bytes _extraData&#13;
    ) &#13;
        external &#13;
        returns (bool success)&#13;
    {&#13;
        require(doApprove(msg.sender, _spender, _amount));&#13;
&#13;
        ApproveAndCallFallBack(_spender).receiveApproval(&#13;
            msg.sender,&#13;
            _amount,&#13;
            this,&#13;
            _extraData&#13;
        );&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev This function makes it easy to get the total number of tokens&#13;
     * @return The total number of tokens&#13;
     */&#13;
    function totalSupply() external view returns (uint) {&#13;
        return totalSupplyAt(block.number);&#13;
    }&#13;
&#13;
&#13;
////////////////&#13;
// Query balance and totalSupply in History&#13;
////////////////&#13;
&#13;
    /**&#13;
     * @dev Queries the balance of `_owner` at a specific `_blockNumber`&#13;
     * @param _owner The address from which the balance will be retrieved&#13;
     * @param _blockNumber The block number when the balance is queried&#13;
     * @return The balance at `_blockNumber`&#13;
     */&#13;
    function balanceOfAt(&#13;
        address _owner,&#13;
        uint _blockNumber&#13;
    ) &#13;
        public&#13;
        view&#13;
        returns (uint) &#13;
    {&#13;
&#13;
        // These next few lines are used when the balance of the token is&#13;
        //  requested before a check point was ever created for this token, it&#13;
        //  requires that the `parentToken.balanceOfAt` be queried at the&#13;
        //  genesis block for that token as this contains initial balance of&#13;
        //  this token&#13;
        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock &gt; _blockNumber)) {&#13;
            if (address(parentToken) != 0) {&#13;
                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));&#13;
            } else {&#13;
                // Has no parent&#13;
                return 0;&#13;
            }&#13;
&#13;
        // This will return the expected balance during normal situations&#13;
        } else {&#13;
            return getValueAt(balances[_owner], _blockNumber);&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * @notice Total amount of tokens at a specific `_blockNumber`.&#13;
     * @param _blockNumber The block number when the totalSupply is queried&#13;
     * @return The total amount of tokens at `_blockNumber`&#13;
     */&#13;
    function totalSupplyAt(uint _blockNumber) public view returns(uint) {&#13;
&#13;
        // These next few lines are used when the totalSupply of the token is&#13;
        //  requested before a check point was ever created for this token, it&#13;
        //  requires that the `parentToken.totalSupplyAt` be queried at the&#13;
        //  genesis block for this token as that contains totalSupply of this&#13;
        //  token at this block number.&#13;
        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock &gt; _blockNumber)) {&#13;
            if (address(parentToken) != 0) {&#13;
                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));&#13;
            } else {&#13;
                return 0;&#13;
            }&#13;
&#13;
        // This will return the expected totalSupply during normal situations&#13;
        } else {&#13;
            return getValueAt(totalSupplyHistory, _blockNumber);&#13;
        }&#13;
    }&#13;
&#13;
////////////////&#13;
// Clone Token Method&#13;
////////////////&#13;
&#13;
    /**&#13;
     * @notice Creates a new clone token with the initial distribution being&#13;
     *  this token at `_snapshotBlock`&#13;
     * @param _cloneTokenName Name of the clone token&#13;
     * @param _cloneDecimalUnits Number of decimals of the smallest unit&#13;
     * @param _cloneTokenSymbol Symbol of the clone token&#13;
     * @param _snapshotBlock Block when the distribution of the parent token is&#13;
     *  copied to set the initial distribution of the new clone token;&#13;
     *  if the block is zero than the actual block, the current block is used&#13;
     * @param _transfersEnabled True if transfers are allowed in the clone&#13;
     * @return The address of the new MiniMeToken Contract&#13;
     */&#13;
    function createCloneToken(&#13;
        string _cloneTokenName,&#13;
        uint8 _cloneDecimalUnits,&#13;
        string _cloneTokenSymbol,&#13;
        uint _snapshotBlock,&#13;
        bool _transfersEnabled&#13;
        ) &#13;
            public&#13;
            returns(address)&#13;
        {&#13;
        uint snapshotBlock = _snapshotBlock;&#13;
        if (snapshotBlock == 0) {&#13;
            snapshotBlock = block.number;&#13;
        }&#13;
        MiniMeToken cloneToken = tokenFactory.createCloneToken(&#13;
            this,&#13;
            snapshotBlock,&#13;
            _cloneTokenName,&#13;
            _cloneDecimalUnits,&#13;
            _cloneTokenSymbol,&#13;
            _transfersEnabled&#13;
            );&#13;
&#13;
        cloneToken.changeController(msg.sender);&#13;
&#13;
        // An event to make the token easy to find on the blockchain&#13;
        emit NewCloneToken(address(cloneToken), snapshotBlock);&#13;
        return address(cloneToken);&#13;
    }&#13;
&#13;
////////////////&#13;
// Generate and destroy tokens&#13;
////////////////&#13;
    &#13;
    /**&#13;
     * @notice Generates `_amount` tokens that are assigned to `_owner`&#13;
     * @param _owner The address that will be assigned the new tokens&#13;
     * @param _amount The quantity of tokens generated&#13;
     * @return True if the tokens are generated correctly&#13;
     */&#13;
    function generateTokens(&#13;
        address _owner,&#13;
        uint _amount&#13;
    )&#13;
        public&#13;
        onlyController&#13;
        returns (bool)&#13;
    {&#13;
        uint curTotalSupply = totalSupplyAt(block.number);&#13;
        require(curTotalSupply + _amount &gt;= curTotalSupply); // Check for overflow&#13;
        uint previousBalanceTo = balanceOfAt(_owner, block.number);&#13;
        require(previousBalanceTo + _amount &gt;= previousBalanceTo); // Check for overflow&#13;
        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);&#13;
        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);&#13;
        emit Transfer(0, _owner, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * @notice Burns `_amount` tokens from `_owner`&#13;
     * @param _owner The address that will lose the tokens&#13;
     * @param _amount The quantity of tokens to burn&#13;
     * @return True if the tokens are burned correctly&#13;
     */&#13;
    function destroyTokens(&#13;
        address _owner,&#13;
        uint _amount&#13;
    ) &#13;
        public&#13;
        onlyController&#13;
        returns (bool)&#13;
    {&#13;
        uint curTotalSupply = totalSupplyAt(block.number);&#13;
        require(curTotalSupply &gt;= _amount);&#13;
        uint previousBalanceFrom = balanceOfAt(_owner, block.number);&#13;
        require(previousBalanceFrom &gt;= _amount);&#13;
        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);&#13;
        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);&#13;
        emit Transfer(_owner, 0, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
////////////////&#13;
// Enable tokens transfers&#13;
////////////////&#13;
&#13;
    /**&#13;
     * @notice Enables token holders to transfer their tokens freely if true&#13;
     * @param _transfersEnabled True if transfers are allowed in the clone&#13;
     */&#13;
    function enableTransfers(bool _transfersEnabled) public onlyController {&#13;
        transfersEnabled = _transfersEnabled;&#13;
    }&#13;
&#13;
////////////////&#13;
// Internal helper functions to query and set a value in a snapshot array&#13;
////////////////&#13;
&#13;
    /**&#13;
     * @dev `getValueAt` retrieves the number of tokens at a given block number&#13;
     * @param checkpoints The history of values being queried&#13;
     * @param _block The block number to retrieve the value at&#13;
     * @return The number of tokens being queried&#13;
     */&#13;
    function getValueAt(&#13;
        Checkpoint[] storage checkpoints,&#13;
        uint _block&#13;
    ) &#13;
        view&#13;
        internal&#13;
        returns (uint)&#13;
    {&#13;
        if (checkpoints.length == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        // Shortcut for the actual value&#13;
        if (_block &gt;= checkpoints[checkpoints.length-1].fromBlock) {&#13;
            return checkpoints[checkpoints.length-1].value;&#13;
        }&#13;
        if (_block &lt; checkpoints[0].fromBlock) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        // Binary search of the value in the array&#13;
        uint min = 0;&#13;
        uint max = checkpoints.length-1;&#13;
        while (max &gt; min) {&#13;
            uint mid = (max + min + 1) / 2;&#13;
            if (checkpoints[mid].fromBlock&lt;=_block) {&#13;
                min = mid;&#13;
            } else {&#13;
                max = mid-1;&#13;
            }&#13;
        }&#13;
        return checkpoints[min].value;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev `updateValueAtNow` used to update the `balances` map and the&#13;
     *  `totalSupplyHistory`&#13;
     * @param checkpoints The history of data being updated&#13;
     * @param _value The new number of tokens&#13;
     */&#13;
    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {&#13;
        if (&#13;
            (checkpoints.length == 0) ||&#13;
            (checkpoints[checkpoints.length - 1].fromBlock &lt; block.number)) &#13;
        {&#13;
            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];&#13;
            newCheckPoint.fromBlock = uint128(block.number);&#13;
            newCheckPoint.value = uint128(_value);&#13;
        } else {&#13;
            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];&#13;
            oldCheckPoint.value = uint128(_value);&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Internal function to determine if an address is a contract&#13;
     * @param _addr The address being queried&#13;
     * @return True if `_addr` is a contract&#13;
     */&#13;
    function isContract(address _addr) internal view returns(bool) {&#13;
        uint size;&#13;
        if (_addr == 0) {&#13;
            return false;&#13;
        }    &#13;
        assembly {&#13;
            size := extcodesize(_addr)&#13;
        }&#13;
        return size &gt; 0;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Helper function to return a min betwen the two uints&#13;
     */&#13;
    function min(uint a, uint b) internal returns (uint) {&#13;
        return a &lt; b ? a : b;&#13;
    }&#13;
&#13;
    /**&#13;
     * @notice The fallback function: If the contract's controller has not been&#13;
     *  set to 0, then the `proxyPayment` method is called which relays the&#13;
     *  ether and creates tokens as described in the token controller contract&#13;
     */&#13;
    function () public payable {&#13;
        require(isContract(controller));&#13;
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));&#13;
    }&#13;
&#13;
//////////&#13;
// Safety Methods&#13;
//////////&#13;
&#13;
    /**&#13;
     * @notice This method can be used by the controller to extract mistakenly&#13;
     *  sent tokens to this contract.&#13;
     * @param _token The address of the token contract that you want to recover&#13;
     *  set to 0 in case you want to extract ether.&#13;
     */&#13;
    function claimTokens(address _token) public onlyController {&#13;
        if (_token == 0x0) {&#13;
            controller.transfer(address(this).balance);&#13;
            return;&#13;
        }&#13;
&#13;
        MiniMeToken token = MiniMeToken(_token);&#13;
        uint balance = token.balanceOf(address(this));&#13;
        token.transfer(controller, balance);&#13;
        emit ClaimedTokens(_token, controller, balance);&#13;
    }&#13;
&#13;
////////////////&#13;
// Events&#13;
////////////////&#13;
    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _amount);&#13;
    event NewCloneToken(address indexed _cloneToken, uint snapshotBlock);&#13;
    event Approval(&#13;
        address indexed _owner,&#13;
        address indexed _spender,&#13;
        uint256 _amount&#13;
    );&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
contract PollManager is Controlled {&#13;
&#13;
    struct Poll {&#13;
        uint startBlock;&#13;
        uint endBlock;&#13;
        bool canceled;&#13;
        uint voters;&#13;
        bytes description;&#13;
        uint8 numBallots;&#13;
        mapping(uint8 =&gt; mapping(address =&gt; uint)) ballots;&#13;
        mapping(uint8 =&gt; uint) qvResults;&#13;
        mapping(uint8 =&gt; uint) results;&#13;
        address author;&#13;
    }&#13;
&#13;
    Poll[] _polls;&#13;
&#13;
    MiniMeToken public token;&#13;
&#13;
    RLPHelper public rlpHelper;&#13;
&#13;
    /// @notice Contract constructor&#13;
    /// @param _token Address of the token used for governance&#13;
    constructor(address _token) &#13;
        public {&#13;
        token = MiniMeToken(_token);&#13;
        rlpHelper = new RLPHelper();&#13;
    }&#13;
&#13;
    /// @notice Only allow addresses that have &gt; 0 SNT to perform an operation&#13;
    modifier onlySNTHolder {&#13;
        require(token.balanceOf(msg.sender) &gt; 0, "SNT Balance is required to perform this operation"); &#13;
        _; &#13;
    }&#13;
&#13;
    /// @notice Create a Poll and enable it immediatly&#13;
    /// @param _endBlock Block where the poll ends&#13;
    /// @param _description RLP encoded: [poll_title, [poll_ballots]]&#13;
    /// @param _numBallots Number of ballots&#13;
    function addPoll(&#13;
        uint _endBlock,&#13;
        bytes _description,&#13;
        uint8 _numBallots)&#13;
        public&#13;
        onlySNTHolder&#13;
        returns (uint _idPoll)&#13;
    {&#13;
        _idPoll = addPoll(block.number, _endBlock, _description, _numBallots);&#13;
    }&#13;
&#13;
    /// @notice Create a Poll&#13;
    /// @param _startBlock Block where the poll starts&#13;
    /// @param _endBlock Block where the poll ends&#13;
    /// @param _description RLP encoded: [poll_title, [poll_ballots]]&#13;
    /// @param _numBallots Number of ballots&#13;
    function addPoll(&#13;
        uint _startBlock,&#13;
        uint _endBlock,&#13;
        bytes _description,&#13;
        uint8 _numBallots)&#13;
        public&#13;
        onlySNTHolder&#13;
        returns (uint _idPoll)&#13;
    {&#13;
        require(_endBlock &gt; block.number, "End block must be greater than current block");&#13;
        require(_startBlock &gt;= block.number &amp;&amp; _startBlock &lt; _endBlock, "Start block must not be in the past, and should be less than the end block" );&#13;
        require(_numBallots &lt;= 15, "Only a max of 15 ballots are allowed");&#13;
&#13;
        _idPoll = _polls.length;&#13;
        _polls.length ++;&#13;
&#13;
        Poll storage p = _polls[_idPoll];&#13;
        p.startBlock = _startBlock;&#13;
        p.endBlock = _endBlock;&#13;
        p.voters = 0;&#13;
        p.numBallots = _numBallots;&#13;
        p.description = _description;&#13;
        p.author = msg.sender;&#13;
&#13;
        emit PollCreated(_idPoll); &#13;
    }&#13;
&#13;
    /// @notice Update poll description (title or ballots) as long as it hasn't started&#13;
    /// @param _idPoll Poll to update&#13;
    /// @param _description RLP encoded: [poll_title, [poll_ballots]]&#13;
    /// @param _numBallots Number of ballots&#13;
    function updatePollDescription(&#13;
        uint _idPoll, &#13;
        bytes _description,&#13;
        uint8 _numBallots)&#13;
        public&#13;
    {&#13;
        require(_idPoll &lt; _polls.length, "Invalid _idPoll");&#13;
        require(_numBallots &lt;= 15, "Only a max of 15 ballots are allowed");&#13;
&#13;
        Poll storage p = _polls[_idPoll];&#13;
        require(p.startBlock &gt; block.number, "You cannot modify an active poll");&#13;
        require(p.author == msg.sender || msg.sender == controller, "Only the owner/controller can modify the poll");&#13;
&#13;
        p.numBallots = _numBallots;&#13;
        p.description = _description;&#13;
        p.author = msg.sender;&#13;
    }&#13;
&#13;
    /// @notice Cancel an existing poll&#13;
    /// @dev Can only be done by the controller (which should be a Multisig/DAO) at any time, or by the owner if the poll hasn't started&#13;
    /// @param _idPoll Poll to cancel&#13;
    function cancelPoll(uint _idPoll) &#13;
        public {&#13;
        require(_idPoll &lt; _polls.length, "Invalid _idPoll");&#13;
&#13;
        Poll storage p = _polls[_idPoll];&#13;
        &#13;
        require(!p.canceled, "Poll has been canceled already");&#13;
        require(p.endBlock &gt; block.number, "Only active polls can be canceled");&#13;
&#13;
        if(p.startBlock &lt; block.number){&#13;
            require(msg.sender == controller, "Only the controller can cancel the poll");&#13;
        } else {&#13;
            require(p.author == msg.sender, "Only the owner can cancel the poll");&#13;
        }&#13;
&#13;
        p.canceled = true;&#13;
&#13;
        emit PollCanceled(_idPoll);&#13;
    }&#13;
&#13;
    /// @notice Determine if user can bote for a poll&#13;
    /// @param _idPoll Id of the poll&#13;
    /// @return bool Can vote or not&#13;
    function canVote(uint _idPoll) &#13;
        public &#13;
        view &#13;
        returns(bool)&#13;
    {&#13;
        if(_idPoll &gt;= _polls.length) return false;&#13;
&#13;
        Poll storage p = _polls[_idPoll];&#13;
        uint balance = token.balanceOfAt(msg.sender, p.startBlock);&#13;
        return block.number &gt;= p.startBlock &amp;&amp; block.number &lt; p.endBlock &amp;&amp; !p.canceled &amp;&amp; balance != 0;&#13;
    }&#13;
    &#13;
    /// @notice Calculate square root of a uint (It has some precision loss)&#13;
    /// @param x Number to calculate the square root&#13;
    /// @return Square root of x&#13;
    function sqrt(uint256 x) public pure returns (uint256 y) {&#13;
        uint256 z = (x + 1) / 2;&#13;
        y = x;&#13;
        while (z &lt; y) {&#13;
            y = z;&#13;
            z = (x / z + z) / 2;&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Vote for a poll&#13;
    /// @param _idPoll Poll to vote&#13;
    /// @param _ballots array of (number of ballots the poll has) elements, and their sum must be less or equal to the balance at the block start&#13;
    function vote(uint _idPoll, uint[] _ballots) public {&#13;
        require(_idPoll &lt; _polls.length, "Invalid _idPoll");&#13;
&#13;
        Poll storage p = _polls[_idPoll];&#13;
&#13;
        require(block.number &gt;= p.startBlock &amp;&amp; block.number &lt; p.endBlock &amp;&amp; !p.canceled, "Poll is inactive");&#13;
        require(_ballots.length == p.numBallots, "Number of ballots is incorrect");&#13;
&#13;
        unvote(_idPoll);&#13;
&#13;
        uint amount = token.balanceOfAt(msg.sender, p.startBlock);&#13;
        require(amount != 0, "No SNT balance available at start block of poll");&#13;
&#13;
        p.voters++;&#13;
&#13;
        uint totalBallots = 0;&#13;
        for(uint8 i = 0; i &lt; _ballots.length; i++){&#13;
            totalBallots += _ballots[i];&#13;
&#13;
            p.ballots[i][msg.sender] = _ballots[i];&#13;
&#13;
            if(_ballots[i] != 0){&#13;
                p.qvResults[i] += sqrt(_ballots[i] / 1 ether);&#13;
                p.results[i] += _ballots[i];&#13;
            }&#13;
        }&#13;
&#13;
        require(totalBallots &lt;= amount, "Total ballots must be less than the SNT balance at poll start block");&#13;
&#13;
        emit Vote(_idPoll, msg.sender, _ballots);&#13;
    }&#13;
&#13;
    /// @notice Cancel or reset a vote&#13;
    /// @param _idPoll Poll &#13;
    function unvote(uint _idPoll) public {&#13;
        require(_idPoll &lt; _polls.length, "Invalid _idPoll");&#13;
&#13;
        Poll storage p = _polls[_idPoll];&#13;
        &#13;
        require(block.number &gt;= p.startBlock &amp;&amp; block.number &lt; p.endBlock &amp;&amp; !p.canceled, "Poll is inactive");&#13;
&#13;
        if(p.voters == 0) return;&#13;
&#13;
        p.voters--;&#13;
&#13;
        for(uint8 i = 0; i &lt; p.numBallots; i++){&#13;
            uint ballotAmount = p.ballots[i][msg.sender];&#13;
&#13;
            p.ballots[i][msg.sender] = 0;&#13;
&#13;
            if(ballotAmount != 0){&#13;
                p.qvResults[i] -= sqrt(ballotAmount / 1 ether);&#13;
                p.results[i] -= ballotAmount;&#13;
            }&#13;
        }&#13;
&#13;
        emit Unvote(_idPoll, msg.sender);&#13;
    }&#13;
&#13;
    // Constant Helper Function&#13;
&#13;
    /// @notice Get number of polls&#13;
    /// @return Num of polls&#13;
    function nPolls()&#13;
        public&#13;
        view &#13;
        returns(uint)&#13;
    {&#13;
        return _polls.length;&#13;
    }&#13;
&#13;
    /// @notice Get Poll info&#13;
    /// @param _idPoll Poll &#13;
    function poll(uint _idPoll)&#13;
        public &#13;
        view &#13;
        returns(&#13;
        uint _startBlock,&#13;
        uint _endBlock,&#13;
        bool _canVote,&#13;
        bool _canceled,&#13;
        bytes _description,&#13;
        uint8 _numBallots,&#13;
        bool _finalized,&#13;
        uint _voters,&#13;
        address _author,&#13;
        uint[15] _tokenTotal,&#13;
        uint[15] _quadraticVotes&#13;
    )&#13;
    {&#13;
        require(_idPoll &lt; _polls.length, "Invalid _idPoll");&#13;
&#13;
        Poll storage p = _polls[_idPoll];&#13;
&#13;
        _startBlock = p.startBlock;&#13;
        _endBlock = p.endBlock;&#13;
        _canceled = p.canceled;&#13;
        _canVote = canVote(_idPoll);&#13;
        _description = p.description;&#13;
        _numBallots = p.numBallots;&#13;
        _author = p.author;&#13;
        _finalized = (!p.canceled) &amp;&amp; (block.number &gt;= _endBlock);&#13;
        _voters = p.voters;&#13;
&#13;
        for(uint8 i = 0; i &lt; p.numBallots; i++){&#13;
            _tokenTotal[i] = p.results[i];&#13;
            _quadraticVotes[i] = p.qvResults[i];&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Decode poll title&#13;
    /// @param _idPoll Poll&#13;
    /// @return string with the poll title&#13;
    function pollTitle(uint _idPoll) public view returns (string){&#13;
        require(_idPoll &lt; _polls.length, "Invalid _idPoll");&#13;
        Poll memory p = _polls[_idPoll];&#13;
&#13;
        return rlpHelper.pollTitle(p.description);&#13;
    }&#13;
&#13;
    /// @notice Decode poll ballot&#13;
    /// @param _idPoll Poll&#13;
    /// @param _ballot Index (0-based) of the ballot to decode&#13;
    /// @return string with the ballot text&#13;
    function pollBallot(uint _idPoll, uint _ballot) public view returns (string){&#13;
        require(_idPoll &lt; _polls.length, "Invalid _idPoll");&#13;
        Poll memory p = _polls[_idPoll];&#13;
&#13;
        return rlpHelper.pollBallot(p.description, _ballot);&#13;
    }&#13;
&#13;
    /// @notice Get votes for poll/ballot&#13;
    /// @param _idPoll Poll&#13;
    /// @param _voter Address of the voter&#13;
    function getVote(uint _idPoll, address _voter) &#13;
        public &#13;
        view &#13;
        returns (uint[15] votes){&#13;
        require(_idPoll &lt; _polls.length, "Invalid _idPoll");&#13;
        Poll storage p = _polls[_idPoll];&#13;
        for(uint8 i = 0; i &lt; p.numBallots; i++){&#13;
            votes[i] = p.ballots[i][_voter];&#13;
        }&#13;
        return votes;&#13;
    }&#13;
&#13;
    event Vote(uint indexed idPoll, address indexed _voter, uint[] ballots);&#13;
    event Unvote(uint indexed idPoll, address indexed _voter);&#13;
    event PollCanceled(uint indexed idPoll);&#13;
    event PollCreated(uint indexed idPoll);&#13;
}
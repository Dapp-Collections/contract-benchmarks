/*

  Copyright 2017 Loopring Project Ltd (Loopring Foundation).

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/

pragma solidity 0.5.0;

/*

  Copyright 2017 Loopring Project Ltd (Loopring Foundation).

  Licensed under the Apache License, Version 2.0 (the "License");
  you may not use this file except in compliance with the License.
  You may obtain a copy of the License at

  http://www.apache.org/licenses/LICENSE-2.0

  Unless required by applicable law or agreed to in writing, software
  distributed under the License is distributed on an "AS IS" BASIS,
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  See the License for the specific language governing permissions and
  limitations under the License.
*/



/// @author Brecht Devos - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="11736374727965517d7e7e6163787f763f7e6376">[email protected]</a>&gt;&#13;
/// @title IBurnRateTable - A contract for managing burn rates for tokens&#13;
contract IBurnRateTable {&#13;
&#13;
    struct TokenData {&#13;
        uint    tier;&#13;
        uint    validUntil;&#13;
    }&#13;
&#13;
    mapping(address =&gt; TokenData) public tokens;&#13;
&#13;
    uint public constant YEAR_TO_SECONDS = 31556952;&#13;
&#13;
    // Tiers&#13;
    uint8 public constant TIER_4 = 0;&#13;
    uint8 public constant TIER_3 = 1;&#13;
    uint8 public constant TIER_2 = 2;&#13;
    uint8 public constant TIER_1 = 3;&#13;
&#13;
    uint16 public constant BURN_BASE_PERCENTAGE           =                 100 * 10; // 100%&#13;
&#13;
    // Cost of upgrading the tier level of a token in a percentage of the total LRC supply&#13;
    uint16 public constant TIER_UPGRADE_COST_PERCENTAGE   =                        1; // 0.1%&#13;
&#13;
    // Burn rates&#13;
    // Matching&#13;
    uint16 public constant BURN_MATCHING_TIER1            =                       25; // 2.5%&#13;
    uint16 public constant BURN_MATCHING_TIER2            =                  15 * 10; //  15%&#13;
    uint16 public constant BURN_MATCHING_TIER3            =                  30 * 10; //  30%&#13;
    uint16 public constant BURN_MATCHING_TIER4            =                  50 * 10; //  50%&#13;
    // P2P&#13;
    uint16 public constant BURN_P2P_TIER1                 =                       25; // 2.5%&#13;
    uint16 public constant BURN_P2P_TIER2                 =                  15 * 10; //  15%&#13;
    uint16 public constant BURN_P2P_TIER3                 =                  30 * 10; //  30%&#13;
    uint16 public constant BURN_P2P_TIER4                 =                  50 * 10; //  50%&#13;
&#13;
    event TokenTierUpgraded(&#13;
        address indexed addr,&#13;
        uint            tier&#13;
    );&#13;
&#13;
    /// @dev   Returns the P2P and matching burn rate for the token.&#13;
    /// @param token The token to get the burn rate for.&#13;
    /// @return The burn rate. The P2P burn rate and matching burn rate&#13;
    ///         are packed together in the lowest 4 bytes.&#13;
    ///         (2 bytes P2P, 2 bytes matching)&#13;
    function getBurnRate(&#13;
        address token&#13;
        )&#13;
        external&#13;
        view&#13;
        returns (uint32 burnRate);&#13;
&#13;
    /// @dev   Returns the tier of a token.&#13;
    /// @param token The token to get the token tier for.&#13;
    /// @return The tier of the token&#13;
    function getTokenTier(&#13;
        address token&#13;
        )&#13;
        public&#13;
        view&#13;
        returns (uint);&#13;
&#13;
    /// @dev   Upgrades the tier of a token. Before calling this function,&#13;
    ///        msg.sender needs to approve this contract for the neccessary funds.&#13;
    /// @param token The token to upgrade the tier for.&#13;
    /// @return True if successful, false otherwise.&#13;
    function upgradeTokenTier(&#13;
        address token&#13;
        )&#13;
        external&#13;
        returns (bool);&#13;
&#13;
}&#13;
&#13;
/*&#13;
&#13;
  Copyright 2017 Loopring Project Ltd (Loopring Foundation).&#13;
&#13;
  Licensed under the Apache License, Version 2.0 (the "License");&#13;
  you may not use this file except in compliance with the License.&#13;
  You may obtain a copy of the License at&#13;
&#13;
  http://www.apache.org/licenses/LICENSE-2.0&#13;
&#13;
  Unless required by applicable law or agreed to in writing, software&#13;
  distributed under the License is distributed on an "AS IS" BASIS,&#13;
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
  See the License for the specific language governing permissions and&#13;
  limitations under the License.&#13;
*/&#13;
&#13;
&#13;
&#13;
/// @title ERC20 Token Interface&#13;
/// @dev see https://github.com/ethereum/EIPs/issues/20&#13;
/// @author Daniel Wang - &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e98d8887808c85a9858686999b80878ec7869b8e">[email protected]</a>&gt;&#13;
contract ERC20 {&#13;
    function totalSupply()&#13;
        public&#13;
        view&#13;
        returns (uint256);&#13;
&#13;
    function balanceOf(&#13;
        address who&#13;
        )&#13;
        public&#13;
        view&#13;
        returns (uint256);&#13;
&#13;
    function allowance(&#13;
        address owner,&#13;
        address spender&#13;
        )&#13;
        public&#13;
        view&#13;
        returns (uint256);&#13;
&#13;
    function transfer(&#13;
        address to,&#13;
        uint256 value&#13;
        )&#13;
        public&#13;
        returns (bool);&#13;
&#13;
    function transferFrom(&#13;
        address from,&#13;
        address to,&#13;
        uint256 value&#13;
        )&#13;
        public&#13;
        returns (bool);&#13;
&#13;
    function approve(&#13;
        address spender,&#13;
        uint256 value&#13;
        )&#13;
        public&#13;
        returns (bool);&#13;
}&#13;
&#13;
/*&#13;
&#13;
  Copyright 2017 Loopring Project Ltd (Loopring Foundation).&#13;
&#13;
  Licensed under the Apache License, Version 2.0 (the "License");&#13;
  you may not use this file except in compliance with the License.&#13;
  You may obtain a copy of the License at&#13;
&#13;
  http://www.apache.org/licenses/LICENSE-2.0&#13;
&#13;
  Unless required by applicable law or agreed to in writing, software&#13;
  distributed under the License is distributed on an "AS IS" BASIS,&#13;
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
  See the License for the specific language governing permissions and&#13;
  limitations under the License.&#13;
*/&#13;
&#13;
&#13;
&#13;
/// @title ERC20 safe transfer&#13;
/// @dev see https://github.com/sec-bit/badERC20Fix&#13;
/// @author Brecht Devos - &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="14766671777c6054787b7b64667d7a733a7b6673">[email protected]</a>&gt;&#13;
library ERC20SafeTransfer {&#13;
&#13;
    function safeTransfer(&#13;
        address token,&#13;
        address to,&#13;
        uint256 value)&#13;
        internal&#13;
        returns (bool success)&#13;
    {&#13;
        // A transfer is successful when 'call' is successful and depending on the token:&#13;
        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)&#13;
        // - A single boolean is returned: this boolean needs to be true (non-zero)&#13;
&#13;
        // bytes4(keccak256("transfer(address,uint256)")) = 0xa9059cbb&#13;
        bytes memory callData = abi.encodeWithSelector(&#13;
            bytes4(0xa9059cbb),&#13;
            to,&#13;
            value&#13;
        );&#13;
        (success, ) = token.call(callData);&#13;
        return checkReturnValue(success);&#13;
    }&#13;
&#13;
    function safeTransferFrom(&#13;
        address token,&#13;
        address from,&#13;
        address to,&#13;
        uint256 value)&#13;
        internal&#13;
        returns (bool success)&#13;
    {&#13;
        // A transferFrom is successful when 'call' is successful and depending on the token:&#13;
        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)&#13;
        // - A single boolean is returned: this boolean needs to be true (non-zero)&#13;
&#13;
        // bytes4(keccak256("transferFrom(address,address,uint256)")) = 0x23b872dd&#13;
        bytes memory callData = abi.encodeWithSelector(&#13;
            bytes4(0x23b872dd),&#13;
            from,&#13;
            to,&#13;
            value&#13;
        );&#13;
        (success, ) = token.call(callData);&#13;
        return checkReturnValue(success);&#13;
    }&#13;
&#13;
    function checkReturnValue(&#13;
        bool success&#13;
        )&#13;
        internal&#13;
        pure&#13;
        returns (bool)&#13;
    {&#13;
        // A transfer/transferFrom is successful when 'call' is successful and depending on the token:&#13;
        // - No value is returned: we assume a revert when the transfer failed (i.e. 'call' returns false)&#13;
        // - A single boolean is returned: this boolean needs to be true (non-zero)&#13;
        if (success) {&#13;
            assembly {&#13;
                switch returndatasize()&#13;
                // Non-standard ERC20: nothing is returned so if 'call' was successful we assume the transfer succeeded&#13;
                case 0 {&#13;
                    success := 1&#13;
                }&#13;
                // Standard ERC20: a single boolean value is returned which needs to be true&#13;
                case 32 {&#13;
                    returndatacopy(0, 0, 32)&#13;
                    success := mload(0)&#13;
                }&#13;
                // None of the above: not successful&#13;
                default {&#13;
                    success := 0&#13;
                }&#13;
            }&#13;
        }&#13;
        return success;&#13;
    }&#13;
&#13;
}&#13;
/*&#13;
&#13;
  Copyright 2017 Loopring Project Ltd (Loopring Foundation).&#13;
&#13;
  Licensed under the Apache License, Version 2.0 (the "License");&#13;
  you may not use this file except in compliance with the License.&#13;
  You may obtain a copy of the License at&#13;
&#13;
  http://www.apache.org/licenses/LICENSE-2.0&#13;
&#13;
  Unless required by applicable law or agreed to in writing, software&#13;
  distributed under the License is distributed on an "AS IS" BASIS,&#13;
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
  See the License for the specific language governing permissions and&#13;
  limitations under the License.&#13;
*/&#13;
&#13;
&#13;
&#13;
/// @title Utility Functions for uint&#13;
/// @author Daniel Wang - &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="96f2f7f8fff3fad6faf9f9e6e4fff8f1b8f9e4f1">[email protected]</a>&gt;&#13;
library MathUint {&#13;
&#13;
    function mul(&#13;
        uint a,&#13;
        uint b&#13;
        )&#13;
        internal&#13;
        pure&#13;
        returns (uint c)&#13;
    {&#13;
        c = a * b;&#13;
        require(a == 0 || c / a == b, "INVALID_VALUE");&#13;
    }&#13;
&#13;
    function sub(&#13;
        uint a,&#13;
        uint b&#13;
        )&#13;
        internal&#13;
        pure&#13;
        returns (uint)&#13;
    {&#13;
        require(b &lt;= a, "INVALID_VALUE");&#13;
        return a - b;&#13;
    }&#13;
&#13;
    function add(&#13;
        uint a,&#13;
        uint b&#13;
        )&#13;
        internal&#13;
        pure&#13;
        returns (uint c)&#13;
    {&#13;
        c = a + b;&#13;
        require(c &gt;= a, "INVALID_VALUE");&#13;
    }&#13;
&#13;
    function hasRoundingError(&#13;
        uint value,&#13;
        uint numerator,&#13;
        uint denominator&#13;
        )&#13;
        internal&#13;
        pure&#13;
        returns (bool)&#13;
    {&#13;
        uint multiplied = mul(value, numerator);&#13;
        uint remainder = multiplied % denominator;&#13;
        // Return true if the rounding error is larger than 1%&#13;
        return mul(remainder, 100) &gt; multiplied;&#13;
    }&#13;
}&#13;
&#13;
/*&#13;
&#13;
  Copyright 2017 Loopring Project Ltd (Loopring Foundation).&#13;
&#13;
  Licensed under the Apache License, Version 2.0 (the "License");&#13;
  you may not use this file except in compliance with the License.&#13;
  You may obtain a copy of the License at&#13;
&#13;
  http://www.apache.org/licenses/LICENSE-2.0&#13;
&#13;
  Unless required by applicable law or agreed to in writing, software&#13;
  distributed under the License is distributed on an "AS IS" BASIS,&#13;
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
  See the License for the specific language governing permissions and&#13;
  limitations under the License.&#13;
*/&#13;
&#13;
&#13;
/*&#13;
&#13;
  Copyright 2017 Loopring Project Ltd (Loopring Foundation).&#13;
&#13;
  Licensed under the Apache License, Version 2.0 (the "License");&#13;
  you may not use this file except in compliance with the License.&#13;
  You may obtain a copy of the License at&#13;
&#13;
  http://www.apache.org/licenses/LICENSE-2.0&#13;
&#13;
  Unless required by applicable law or agreed to in writing, software&#13;
  distributed under the License is distributed on an "AS IS" BASIS,&#13;
  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.&#13;
  See the License for the specific language governing permissions and&#13;
  limitations under the License.&#13;
*/&#13;
&#13;
&#13;
&#13;
/// @title Errors&#13;
contract Errors {&#13;
    string constant ZERO_VALUE                 = "ZERO_VALUE";&#13;
    string constant ZERO_ADDRESS               = "ZERO_ADDRESS";&#13;
    string constant INVALID_VALUE              = "INVALID_VALUE";&#13;
    string constant INVALID_ADDRESS            = "INVALID_ADDRESS";&#13;
    string constant INVALID_SIZE               = "INVALID_SIZE";&#13;
    string constant INVALID_SIG                = "INVALID_SIG";&#13;
    string constant INVALID_STATE              = "INVALID_STATE";&#13;
    string constant NOT_FOUND                  = "NOT_FOUND";&#13;
    string constant ALREADY_EXIST              = "ALREADY_EXIST";&#13;
    string constant REENTRY                    = "REENTRY";&#13;
    string constant UNAUTHORIZED               = "UNAUTHORIZED";&#13;
    string constant UNIMPLEMENTED              = "UNIMPLEMENTED";&#13;
    string constant UNSUPPORTED                = "UNSUPPORTED";&#13;
    string constant TRANSFER_FAILURE           = "TRANSFER_FAILURE";&#13;
    string constant WITHDRAWAL_FAILURE         = "WITHDRAWAL_FAILURE";&#13;
    string constant BURN_FAILURE               = "BURN_FAILURE";&#13;
    string constant BURN_RATE_FROZEN           = "BURN_RATE_FROZEN";&#13;
    string constant BURN_RATE_MINIMIZED        = "BURN_RATE_MINIMIZED";&#13;
    string constant UNAUTHORIZED_ONCHAIN_ORDER = "UNAUTHORIZED_ONCHAIN_ORDER";&#13;
    string constant INVALID_CANDIDATE          = "INVALID_CANDIDATE";&#13;
    string constant ALREADY_VOTED              = "ALREADY_VOTED";&#13;
    string constant NOT_OWNER                  = "NOT_OWNER";&#13;
}&#13;
&#13;
&#13;
&#13;
/// @title NoDefaultFunc&#13;
/// @dev Disable default functions.&#13;
contract NoDefaultFunc is Errors {&#13;
    function ()&#13;
        external&#13;
        payable&#13;
    {&#13;
        revert(UNSUPPORTED);&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
/// @author Brecht Devos - &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="15776770767d6155797a7a65677c7b723b7a6772">[email protected]</a>&gt;&#13;
contract BurnRateTable is IBurnRateTable, NoDefaultFunc {&#13;
    using MathUint for uint;&#13;
    using ERC20SafeTransfer for address;&#13;
&#13;
    address public constant lrcAddress = 0xEF68e7C694F40c8202821eDF525dE3782458639f;&#13;
    address public constant wethAddress = 0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2;&#13;
&#13;
    /* constructor( */&#13;
    /*     address _lrcAddress, */&#13;
    /*     address _wethAddress */&#13;
    /*     ) */&#13;
    /*     public */&#13;
    /* { */&#13;
    /*     require(_lrcAddress != address(0x0), ZERO_ADDRESS); */&#13;
    /*     require(_wethAddress != address(0x0), ZERO_ADDRESS); */&#13;
    /*     lrcAddress = _lrcAddress; */&#13;
    /*     wethAddress = _wethAddress; */&#13;
&#13;
    /*     // Set fixed LRC and WETH burn rates */&#13;
    /*     setFixedTokenTier(lrcAddress, TIER_1); */&#13;
    /*     setFixedTokenTier(wethAddress, TIER_3); */&#13;
    /* } */&#13;
&#13;
    function setFixedTokenTier(&#13;
        address token,&#13;
        uint tier&#13;
        )&#13;
        internal&#13;
    {&#13;
        TokenData storage tokenData = tokens[token];&#13;
        tokenData.validUntil = ~uint(0);&#13;
        tokenData.tier = tier;&#13;
    }&#13;
&#13;
    function getBurnRate(&#13;
        address token&#13;
        )&#13;
        external&#13;
        view&#13;
        returns (uint32 burnRate)&#13;
    {&#13;
        uint tier = getTokenTier(token);&#13;
        if (tier == TIER_1) {&#13;
            burnRate = uint32(BURN_P2P_TIER1) * 0x10000 + BURN_MATCHING_TIER1;&#13;
        } else if (tier == TIER_2) {&#13;
            burnRate = uint32(BURN_P2P_TIER2) * 0x10000 + BURN_MATCHING_TIER2;&#13;
        } else if (tier == TIER_3) {&#13;
            burnRate = uint32(BURN_P2P_TIER3) * 0x10000 + BURN_MATCHING_TIER3;&#13;
        } else {&#13;
            burnRate = uint32(BURN_P2P_TIER4) * 0x10000 + BURN_MATCHING_TIER4;&#13;
        }&#13;
    }&#13;
&#13;
    function upgradeTokenTier(&#13;
        address token&#13;
        )&#13;
        external&#13;
        returns (bool)&#13;
    {&#13;
        require(token != address(0x0), ZERO_ADDRESS);&#13;
        require(token != lrcAddress, BURN_RATE_FROZEN);&#13;
        require(token != wethAddress, BURN_RATE_FROZEN);&#13;
&#13;
        uint currentTier = getTokenTier(token);&#13;
&#13;
        // Can't upgrade to a higher level than tier 1&#13;
        require(currentTier != TIER_1, BURN_RATE_MINIMIZED);&#13;
&#13;
        // Burn TIER_UPGRADE_COST_PERCENTAGE of total LRC supply&#13;
        ERC20 LRC = ERC20(lrcAddress);&#13;
        uint totalSupply = LRC.totalSupply() - LRC.balanceOf(address(0x0));&#13;
        uint amount = totalSupply.mul(TIER_UPGRADE_COST_PERCENTAGE) / BURN_BASE_PERCENTAGE;&#13;
        require(&#13;
            lrcAddress.safeTransferFrom(&#13;
                msg.sender,&#13;
                address(0x0),&#13;
                amount&#13;
            ),&#13;
            BURN_FAILURE&#13;
        );&#13;
&#13;
        // Upgrade tier&#13;
        TokenData storage tokenData = tokens[token];&#13;
        tokenData.validUntil = now.add(YEAR_TO_SECONDS);&#13;
        tokenData.tier = currentTier + 1;&#13;
&#13;
        emit TokenTierUpgraded(token, tokenData.tier);&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    function getTokenTier(&#13;
        address token&#13;
        )&#13;
        public&#13;
        view&#13;
        returns (uint tier)&#13;
    {&#13;
        TokenData storage tokenData = tokens[token];&#13;
        // Fall back to lowest tier&#13;
        tier = (now &gt; tokenData.validUntil) ? TIER_4 : tokenData.tier;&#13;
    }&#13;
&#13;
}
pragma solidity ^0.4.24;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <span class="__cf_email__" data-cfemail="791d180f1c39181216141b18571a1614">[emailÂ protected]</span>&#13;
// released under Apache 2.0 licence&#13;
// input  E:\Source\Mozo-NG\smart-contracts\mozo\contracts\MozoXToken.sol&#13;
// flattened :  Tuesday, 06-Nov-18 08:44:30 UTC&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
contract Operationable {&#13;
    /**&#13;
     * @dev Get owner&#13;
     */&#13;
	function getOwner() public view returns(address);&#13;
	&#13;
    /**&#13;
     * @dev Get ERC20 tokens&#13;
     */&#13;
	function getERC20() public view returns(OwnerStandardERC20);&#13;
	/*&#13;
	 * @dev check whether is operation wallet&#13;
	*/&#13;
	function isOperationWallet(address _wallet) public view returns(bool);&#13;
}&#13;
&#13;
contract Owner {&#13;
    /**&#13;
    * @dev Get smart contract's owner&#13;
    * @return The owner of the smart contract&#13;
    */&#13;
    function owner() public view returns (address);&#13;
    &#13;
    //check address is a valid owner (owner or coOwner)&#13;
    function isValidOwner(address _address) public view returns(bool);&#13;
&#13;
}&#13;
&#13;
contract BasicToken is ERC20Basic {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  uint256 totalSupply_;&#13;
&#13;
  /**&#13;
  * @dev total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return totalSupply_;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[msg.sender]);&#13;
&#13;
    // SafeMath.sub will throw if there is not enough balance.&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    emit Transfer(msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender) public view returns (uint256);&#13;
  function transferFrom(address from, address to, uint256 value) public returns (bool);&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
contract OwnerERC20 is ERC20Basic, Owner {&#13;
}&#13;
&#13;
contract ERC20Exchangable is Operationable{&#13;
    //Buy event&#13;
    // _from Bought address&#13;
    // _to Received address&#13;
    // _value Number of tokens&#13;
	event Buy(address indexed _from, address indexed _to, uint _value);&#13;
&#13;
    //Sold event&#13;
    // _operation Operational Wallet&#13;
    // _hash Previous transaction hash of initial blockchain&#13;
    // _from Bought address&#13;
    // _to Received address&#13;
    // _value Number of tokens&#13;
    // _fee Fee&#13;
	event Sold(address indexed _operation, bytes32 _hash, address indexed _from, address indexed _to, uint _value, uint _fee);&#13;
	&#13;
    /**&#13;
     * @notice This method called by ERC20 smart contract&#13;
     * @dev Buy ERC20 tokens in other blockchain&#13;
     * @param _from Bought address&#13;
     * @param _to The address in other blockchain to transfer tokens to.&#13;
     * @param _value Number of tokens&#13;
     */&#13;
	function autoBuyERC20(address _from, address _to, uint _value) public;&#13;
    &#13;
    /**&#13;
     * @dev called by Bridge or operational wallet (multisig or none) when a bought event occurs,it will transfer ERC20 tokens to receiver address&#13;
     * @param _hash Transaction hash in other blockchain&#13;
     * @param _from bought address &#13;
     * @param _to The received address &#13;
     * @param _value Number of tokens&#13;
     */&#13;
    function sold(bytes32 _hash, address _from, address _to, uint _value) public returns(bool);&#13;
&#13;
    /**&#13;
     * @dev called by Bridge when a bought event occurs, it will transfer ERC20 tokens to receiver address&#13;
     * @param _hash Transaction hash in other blockchain&#13;
     * @param _from bought address &#13;
     * @param _to The received address &#13;
     * @param _value Number of tokens&#13;
     */&#13;
    function soldWithFee(bytes32 _hash, address _from, address _to, uint _value) public returns(bool);&#13;
}&#13;
contract OwnerStandardERC20 is ERC20, Owner {&#13;
}&#13;
&#13;
contract StandardToken is ERC20, BasicToken {&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[_from]);&#13;
    require(_value &lt;= allowed[_from][msg.sender]);&#13;
&#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
    emit Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   *&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address _spender, uint256 _value) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = _value;&#13;
    emit Approval(msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(address _owner, address _spender) public view returns (uint256) {&#13;
    return allowed[_owner][_spender];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {&#13;
    uint oldValue = allowed[msg.sender][_spender];&#13;
    if (_subtractedValue &gt; oldValue) {&#13;
      allowed[msg.sender][_spender] = 0;&#13;
    } else {&#13;
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);&#13;
    }&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract MozoXToken is StandardToken, OwnerERC20 {&#13;
    //token name&#13;
    string public constant name = "Mozo Extension Token";&#13;
&#13;
    //token symbol&#13;
    string public constant symbol = "MOZOX";&#13;
&#13;
    //token symbol&#13;
    uint8 public constant decimals = 2;&#13;
&#13;
    //owner of contract&#13;
    address public owner_;&#13;
    ERC20Exchangable public treasury;&#13;
&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == owner_);&#13;
        _;&#13;
    }&#13;
&#13;
&#13;
    /**&#13;
     * @notice Should provide _totalSupply = No. tokens * 100&#13;
    */&#13;
    constructor() public {&#13;
        owner_ = msg.sender;&#13;
        // constructor&#13;
        totalSupply_ = 50000000000000;&#13;
        //assign all tokens to owner&#13;
        balances[msg.sender] = totalSupply_;&#13;
        emit Transfer(0x0, msg.sender, totalSupply_);&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Set treasury smart contract&#13;
     * @param _treasury Address of smart contract&#13;
    */&#13;
    function setTreasury(address _treasury) public onlyOwner {&#13;
        treasury = ERC20Exchangable(_treasury);&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Get smart contract's owner&#13;
    */&#13;
    function owner() public view returns (address) {&#13;
        return owner_;&#13;
    }&#13;
&#13;
    function isValidOwner(address _address) public view returns(bool) {&#13;
        if (_address == owner_) {&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }  &#13;
    &#13;
    /**&#13;
    * @dev batch transferring token&#13;
    * @notice Sender should check whether he has enough tokens to be transferred&#13;
    * @param _recipients List of recipients addresses &#13;
    * @param _values Values to be transferred&#13;
    */&#13;
    function batchTransfer(address[] _recipients, uint[] _values) public {&#13;
        require(_recipients.length == _values.length);&#13;
        uint length = _recipients.length;&#13;
        for (uint i = 0; i &lt; length; i++) {&#13;
            transfer(_recipients[i], _values[i]);&#13;
        }&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev transfer token to Treasury smart contract and exchange to Mozo ERC20 tokens&#13;
     * @param _to The address to transfer to.&#13;
     * @param _value The amount to be transferred.&#13;
    */&#13;
    function soldMozo(address _to, uint _value) public returns(bool) {&#13;
        require(_to != address(0));&#13;
        if(transfer(treasury, _value)) {&#13;
            treasury.autoBuyERC20(msg.sender, _to, _value);&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
}
// Human token smart contract.
// Developed by Phenom.Team <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d6bfb8b0b996a6beb3b8b9bbf8a2b3b7bb">[emailÂ protected]</a>&gt;&#13;
pragma solidity ^0.4.21;&#13;
&#13;
&#13;
/**&#13;
 *   @title SafeMath&#13;
 *   @dev Math operations with safety checks that throw on error&#13;
 */&#13;
&#13;
library SafeMath {&#13;
&#13;
    function mul(uint a, uint b) internal constant returns (uint) {&#13;
        if (a == 0) {&#13;
            return 0;&#13;
        }&#13;
        uint c = a * b;&#13;
        assert(c / a == b);&#13;
        return c;&#13;
    }&#13;
&#13;
    function div(uint a, uint b) internal constant returns(uint) {&#13;
        assert(b &gt; 0);&#13;
        uint c = a / b;&#13;
        assert(a == b * c + a % b);&#13;
        return c;&#13;
    }&#13;
&#13;
    function sub(uint a, uint b) internal constant returns(uint) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
    }&#13;
&#13;
    function add(uint a, uint b) internal constant returns(uint) {&#13;
        uint c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 *   @title ERC20&#13;
 *   @dev Standart ERC20 token interface&#13;
 */&#13;
&#13;
contract ERC20 {&#13;
    uint public totalSupply = 0;&#13;
&#13;
    mapping(address =&gt; uint) balances;&#13;
    mapping(address =&gt; mapping (address =&gt; uint)) allowed;&#13;
&#13;
    function balanceOf(address _owner) constant returns (uint);&#13;
    function transfer(address _to, uint _value) returns (bool);&#13;
    function transferFrom(address _from, address _to, uint _value) returns (bool);&#13;
    function approve(address _spender, uint _value) returns (bool);&#13;
    function allowance(address _owner, address _spender) constant returns (uint);&#13;
&#13;
    event Transfer(address indexed _from, address indexed _to, uint _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint _value);&#13;
&#13;
}&#13;
&#13;
&#13;
/**&#13;
 *   @title HumanToken&#13;
 *   @dev Human token smart-contract&#13;
 */&#13;
contract HumanToken is ERC20 {&#13;
    using SafeMath for uint;&#13;
    string public name = "Human";&#13;
    string public symbol = "Human";&#13;
    uint public decimals = 18;&#13;
    uint public voteCost = 10**18;&#13;
&#13;
    // Owner address&#13;
    address public owner;&#13;
    address public eventManager;&#13;
&#13;
    mapping (address =&gt; bool) isActiveEvent;&#13;
            &#13;
    //events        &#13;
    event EventAdded(address _event);&#13;
    event Contribute(address _event, address _contributor, uint _amount);&#13;
    event Vote(address _event, address _contributor, bool _proposal);&#13;
    &#13;
    // Allows execution by the contract owner only&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    // Allows execution by the event manager only&#13;
    modifier onlyEventManager {&#13;
        require(msg.sender == eventManager);&#13;
        _;&#13;
    }&#13;
&#13;
   // Allows contributing and voting only to human events &#13;
    modifier onlyActive(address _event) {&#13;
        require(isActiveEvent[_event]);&#13;
        _;&#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Contract constructor function sets owner address&#13;
    *   @param _owner        owner address&#13;
    */&#13;
    function HumanToken(address _owner, address _eventManager) public {&#13;
       owner = _owner;&#13;
       eventManager = _eventManager;&#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Function to add a new event from TheHuman team&#13;
    *   @param _event       a new event address&#13;
    */   &#13;
    function  addEvent(address _event) external onlyEventManager {&#13;
        require (!isActiveEvent[_event]);&#13;
        isActiveEvent[_event] = true;&#13;
        EventAdded(_event);&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to change vote cost, by default vote cost equals 1 Human token&#13;
    *   @param _voteCost     a new vote cost&#13;
    */&#13;
    function setVoteCost(uint _voteCost) external onlyEventManager {&#13;
        voteCost = _voteCost;&#13;
    }&#13;
    &#13;
   /**&#13;
    *   @dev Function to donate for event&#13;
    *   @param _event     address of event&#13;
    *   @param _amount    donation amount    &#13;
    */&#13;
    function donate(address _event, uint _amount) public onlyActive(_event) {&#13;
        require (transfer(_event, _amount));&#13;
        require (HumanEvent(_event).contribute(msg.sender, _amount));&#13;
        Contribute(_event, msg.sender, _amount);&#13;
        &#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function voting for the success of the event&#13;
    *   @param _event     address of event&#13;
    *   @param _proposal  true - event completed successfully, false - otherwise&#13;
    */&#13;
    function vote(address _event, bool _proposal) public onlyActive(_event) {&#13;
        require(transfer(_event, voteCost));&#13;
        require(HumanEvent(_event).vote(msg.sender, _proposal));&#13;
        Vote(_event, msg.sender, _proposal);&#13;
    }&#13;
    &#13;
    &#13;
&#13;
&#13;
   /**&#13;
    *   @dev Function to mint tokens&#13;
    *   @param _holder       beneficiary address the tokens will be issued to&#13;
    *   @param _value        number of tokens to issue&#13;
    */&#13;
    function mintTokens(address _holder, uint _value) external onlyOwner {&#13;
       require(_value &gt; 0);&#13;
       balances[_holder] = balances[_holder].add(_value);&#13;
       totalSupply = totalSupply.add(_value);&#13;
       Transfer(0x0, _holder, _value);&#13;
    }&#13;
&#13;
  &#13;
   /**&#13;
    *   @dev Get balance of tokens holder&#13;
    *   @param _holder        holder's address&#13;
    *   @return               balance of investor&#13;
    */&#13;
    function balanceOf(address _holder) constant returns (uint) {&#13;
         return balances[_holder];&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Send coins&#13;
    *   throws on any error rather then return a false flag to minimize&#13;
    *   user errors&#13;
    *   @param _to           target address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transfer(address _to, uint _amount) public returns (bool) {&#13;
        balances[msg.sender] = balances[msg.sender].sub(_amount);&#13;
        balances[_to] = balances[_to].add(_amount);&#13;
        Transfer(msg.sender, _to, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev An account/contract attempts to get the coins&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   @param _from         source address&#13;
    *   @param _to           target address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {&#13;
        balances[_from] = balances[_from].sub(_amount);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);&#13;
        balances[_to] = balances[_to].add(_amount);&#13;
        Transfer(_from, _to, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Allows another account/contract to spend some tokens on its behalf&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   also, to minimize the risk of the approve/transferFrom attack vector&#13;
    *   approve has to be called twice in 2 separate transactions - once to&#13;
    *   change the allowance to 0 and secondly to change it to the new allowance&#13;
    *   value&#13;
    *&#13;
    *   @param _spender      approved address&#13;
    *   @param _amount       allowance amount&#13;
    *&#13;
    *   @return true if the approval was successful&#13;
    */&#13;
    function approve(address _spender, uint _amount) public returns (bool) {&#13;
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));&#13;
        allowed[msg.sender][_spender] = _amount;&#13;
        Approval(msg.sender, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
    *&#13;
    *   @param _owner        the address which owns the funds&#13;
    *   @param _spender      the address which will spend the funds&#13;
    *&#13;
    *   @return              the amount of tokens still avaible for the spender&#13;
    */&#13;
    function allowance(address _owner, address _spender) constant returns (uint) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    /** &#13;
    *   @dev Allows owner to transfer out any accidentally sent ERC20 tokens&#13;
    *   @param tokenAddress  token address&#13;
    *   @param tokens        transfer amount&#13;
    */&#13;
    function transferAnyTokens(address tokenAddress, uint tokens) &#13;
        public&#13;
        onlyOwner &#13;
        returns (bool success) {&#13;
        return ERC20(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
}&#13;
&#13;
 contract HumanEvent {&#13;
    using SafeMath for uint;    &#13;
    uint public totalRaised;&#13;
    uint public softCap;&#13;
    uint public positiveVotes;&#13;
    uint public negativeVotes;&#13;
&#13;
    address public alternative;&#13;
    address public owner;&#13;
    HumanToken public human;&#13;
&#13;
    mapping (address =&gt; uint) public contributions;&#13;
    mapping (address =&gt; bool) public voted;&#13;
    mapping (address =&gt; bool) public claimed;&#13;
    &#13;
&#13;
&#13;
    // Allows execution by the contract owner only&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    // Allows execution by the contract owner only&#13;
    modifier onlyHuman {&#13;
        require(msg.sender == address(human));&#13;
        _;&#13;
    }&#13;
&#13;
&#13;
    // Possible Event statuses&#13;
    enum StatusEvent {&#13;
        Created,&#13;
        Fundraising,&#13;
        Failed,&#13;
        Evaluating,&#13;
        Voting,&#13;
        Finished&#13;
    }&#13;
    StatusEvent public statusEvent = StatusEvent.Created;&#13;
&#13;
    &#13;
    function HumanEvent(&#13;
        address _owner, &#13;
        uint _softCap,&#13;
        address _alternative,&#13;
        address _human&#13;
    ) public {&#13;
        owner = _owner;&#13;
        softCap = _softCap;&#13;
        alternative = _alternative;&#13;
        human = HumanToken(_human);&#13;
    }&#13;
&#13;
    function startFundraising() public onlyOwner {&#13;
        require(statusEvent == StatusEvent.Created);&#13;
        statusEvent = StatusEvent.Fundraising;&#13;
        &#13;
    }&#13;
    &#13;
&#13;
    function startEvaluating() public onlyOwner {&#13;
        require(statusEvent == StatusEvent.Fundraising);&#13;
        &#13;
        if (totalRaised &gt;= softCap) {&#13;
            statusEvent = StatusEvent.Evaluating;&#13;
        } else {&#13;
            statusEvent = StatusEvent.Failed;&#13;
        }&#13;
    }&#13;
&#13;
    function startVoting() public onlyOwner {&#13;
        require(statusEvent == StatusEvent.Evaluating);&#13;
        statusEvent = StatusEvent.Voting;&#13;
    }&#13;
&#13;
    function finish() public onlyOwner {&#13;
        require(statusEvent == StatusEvent.Voting);&#13;
        if (positiveVotes &gt;= negativeVotes) {&#13;
            statusEvent = StatusEvent.Finished;&#13;
        } else {&#13;
            statusEvent = StatusEvent.Failed;&#13;
        }&#13;
    }&#13;
    &#13;
    &#13;
    function claim() public {&#13;
        require(!claimed[msg.sender]);        &#13;
        claimed[msg.sender] = true;&#13;
        uint contribution;&#13;
&#13;
        if (statusEvent == StatusEvent.Failed) {&#13;
            contribution = contribution.add(contributions[msg.sender]);&#13;
            contributions[msg.sender] = 0;&#13;
        }&#13;
&#13;
        if(voted[msg.sender] &amp;&amp; statusEvent != StatusEvent.Voting) {&#13;
            uint _voteCost = human.voteCost();&#13;
            contribution = contribution.add(_voteCost);&#13;
        }&#13;
        require(contribution &gt; 0);&#13;
        require(human.transfer(msg.sender, contribution));&#13;
    }&#13;
&#13;
    &#13;
    function vote(address _voter, bool _proposal) external onlyHuman returns (bool) {&#13;
        require(!voted[_voter] &amp;&amp; statusEvent == StatusEvent.Voting);&#13;
        voted[_voter] = true;&#13;
        &#13;
        if (_proposal) {&#13;
            positiveVotes++;&#13;
        } else {&#13;
            negativeVotes++;&#13;
        }&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    function contribute(address _contributor, uint _amount) external onlyHuman returns(bool) {&#13;
        require (statusEvent == StatusEvent.Fundraising);&#13;
        contributions[_contributor] =  contributions[_contributor].add(_amount);&#13;
        totalRaised = totalRaised.add(_amount);&#13;
        return true;&#13;
    }&#13;
    &#13;
    function  withdraw() external onlyOwner {&#13;
        require (statusEvent == StatusEvent.Finished);&#13;
        require (human.transfer(alternative, totalRaised));&#13;
    }&#13;
&#13;
}
pragma solidity ^0.4.18;
// @notice TOKEN CONTRACT
// @dev ERC-20 with ERC223 protection Token Standard Compliant
// @author Geoffrey Tipton at AEN
// creditTo Ethereum Commonwealth founder. <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1f7b7a677e6d7e715f7a6b777a6d7a6a727c737e6c6c767c31706d78">[emailÂ protected]</a> for the 223 Standard&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// 'AEN' token contract&#13;
//&#13;
// Deployed by : &#13;
// Symbol      : AEN&#13;
// Name        : AEN Coin&#13;
// Total supply: 4,000,000,000&#13;
// Decimals    : 8&#13;
//&#13;
// (c) AENCOIN. The MIT Licence.&#13;
// ----------------------------------------------------------------------------&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// Safe maths&#13;
library SafeMath {&#13;
    function add(uint a, uint b) internal pure returns (uint c) {&#13;
        c = a + b; require(c &gt;= a); }&#13;
    function sub(uint a, uint b) internal pure returns (uint c) {&#13;
        require(b &lt;= a); c = a - b;  }&#13;
    function mul(uint a, uint b) internal pure returns (uint c) {&#13;
        c = a * b; require(a == 0 || c / a == b); }&#13;
    function div(uint a, uint b) internal pure returns (uint c) {&#13;
        require(b &gt; 0); c = a / b; }&#13;
}&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// ERC Token Standard #20 Interface&#13;
// https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md&#13;
// ----------------------------------------------------------------------------&#13;
contract ERC20Interface {&#13;
    function totalSupply() public constant returns (uint);&#13;
    function balanceOf(address tokenOwner) public constant returns (uint balance);&#13;
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining);&#13;
    function transfer(address to, uint tokens) public returns (bool success);&#13;
    function approve(address spender, uint tokens) public returns (bool success);&#13;
    function transferFrom(address from, address to, uint tokens) public returns (bool success);&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint tokens);&#13;
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);&#13;
}&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// Contract function to receive approval and execute function in one call&#13;
//&#13;
// Borrowed from MiniMeToken&#13;
// ----------------------------------------------------------------------------&#13;
contract ApproveAndCallFallBack {&#13;
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;&#13;
}&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// Owned contract&#13;
// ----------------------------------------------------------------------------&#13;
contract Owned {&#13;
    address public owner;&#13;
    address public newOwner;&#13;
&#13;
    event OwnershipTransferred(address indexed _from, address indexed _to);&#13;
&#13;
    constructor() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    function transferOwnership(address _newOwner) public onlyOwner {&#13;
        newOwner = _newOwner;&#13;
    }&#13;
    function acceptOwnership() public {&#13;
        require(msg.sender == newOwner);&#13;
        emit OwnershipTransferred(owner, newOwner);&#13;
        owner = newOwner;&#13;
        newOwner = address(0);&#13;
    }&#13;
}&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// ERC20 Token, with the addition of symbol, name and decimals and an&#13;
// initial fixed supply&#13;
contract AENToken is ERC20Interface, Owned {&#13;
    using SafeMath for uint;&#13;
&#13;
    string public symbol;&#13;
    string public  name;&#13;
    uint8 public decimals;&#13;
    uint public _totalSupply;&#13;
&#13;
    mapping(address =&gt; uint) balances;&#13;
    mapping(address =&gt; mapping(address =&gt; uint)) allowed;&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Constructor&#13;
    constructor() public {&#13;
        symbol = "AEN";&#13;
        name = "AEN.";&#13;
        decimals = 8;&#13;
        _totalSupply = 4000000000 * 10**uint(decimals);&#13;
        balances[owner] = _totalSupply;&#13;
        emit Transfer(address(0), owner, _totalSupply);&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Total supply&#13;
    function totalSupply() public constant returns (uint) {&#13;
        return _totalSupply  - balances[address(0)];&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Get the token balance for account `tokenOwner`&#13;
    function balanceOf(address tokenOwner) public constant returns (uint balance) {&#13;
        return balances[tokenOwner];&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Transfer the balance from token owner's account to `to` account&#13;
    // - Owner's account must have sufficient balance to transfer&#13;
    // - 0 value transfers are allowed&#13;
    function transfer(address to, uint tokens) public returns (bool success) {&#13;
        balances[msg.sender] = balances[msg.sender].sub(tokens);&#13;
        balances[to] = balances[to].add(tokens);&#13;
        emit Transfer(msg.sender, to, tokens);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Token owner can approve for `spender` to transferFrom(...) `tokens`&#13;
    // from the token owner's account&#13;
    function approve(address spender, uint tokens) public returns (bool success) {&#13;
        allowed[msg.sender][spender] = tokens;&#13;
        emit Approval(msg.sender, spender, tokens);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Transfer `tokens` from the `from` account to the `to` account&#13;
    function transferFrom(address from, address to, uint tokens) public returns (bool success) {&#13;
        balances[from] = balances[from].sub(tokens);&#13;
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);&#13;
        balances[to] = balances[to].add(tokens);&#13;
        emit Transfer(from, to, tokens);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Returns the amount of tokens approved by the owner that can be&#13;
    // transferred to the spender's account&#13;
    function allowance(address tokenOwner, address spender) public constant returns (uint remaining) {&#13;
        return allowed[tokenOwner][spender];&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Token owner can approve for `spender` to transferFrom(...) `tokens`&#13;
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {&#13;
        allowed[msg.sender][spender] = tokens;&#13;
        emit Approval(msg.sender, spender, tokens);&#13;
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Don't accept ETH&#13;
    function () public payable {&#13;
        revert();&#13;
    }&#13;
&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can transfer out any accidentally sent ERC20 tokens&#13;
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {&#13;
        return ERC20Interface(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
}
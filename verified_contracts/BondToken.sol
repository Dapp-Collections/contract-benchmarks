// Bond Film Platform Token smart contract.
// Developed by Phenom.Team <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="741d1a121b34041c111a1b195a00111519">[emailÂ protected]</a>&gt;&#13;
pragma solidity ^0.4.18;&#13;
&#13;
/**&#13;
 *   @title SafeMath&#13;
 *   @dev Math operations with safety checks that throw on error&#13;
 */&#13;
&#13;
library SafeMath {&#13;
&#13;
  function mul(uint a, uint b) internal constant returns (uint) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint a, uint b) internal constant returns(uint) {&#13;
    assert(b &gt; 0);&#13;
    uint c = a / b;&#13;
    assert(a == b * c + a % b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint a, uint b) internal constant returns(uint) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint a, uint b) internal constant returns(uint) {&#13;
    uint c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 *   @title ERC20&#13;
 *   @dev Standart ERC20 token interface&#13;
 */&#13;
&#13;
contract ERC20 {&#13;
    uint public totalSupply = 0;&#13;
&#13;
    mapping(address =&gt; uint) balances;&#13;
    mapping(address =&gt; mapping (address =&gt; uint)) allowed;&#13;
&#13;
    function balanceOf(address _owner) constant returns (uint);&#13;
    function transfer(address _to, uint _value) returns (bool);&#13;
    function transferFrom(address _from, address _to, uint _value) returns (bool);&#13;
    function approve(address _spender, uint _value) returns (bool);&#13;
    function allowance(address _owner, address _spender) constant returns (uint);&#13;
&#13;
    event Transfer(address indexed _from, address indexed _to, uint _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint _value);&#13;
&#13;
}&#13;
&#13;
/**&#13;
 *   @title BondToken&#13;
 *   @dev Bond Film Platform token contract&#13;
 */&#13;
contract BondToken is ERC20 {&#13;
    using SafeMath for uint;&#13;
    string public name = "Bond Film Platform";&#13;
    string public symbol = "BFP";&#13;
    uint public decimals = 18;&#13;
&#13;
    // Ico contract address&#13;
    address public owner;&#13;
    address public controller;&#13;
    address public airDropManager;&#13;
    &#13;
    event LogBuyForInvestor(address indexed investor, uint value, string txHash);&#13;
    event Burn(address indexed from, uint value);&#13;
    event Mint(address indexed to, uint value);&#13;
    &#13;
    // Tokens transfer ability status&#13;
    bool public tokensAreFrozen = true;&#13;
&#13;
    // Allows execution by the owner only&#13;
    modifier onlyOwner { &#13;
        require(msg.sender == owner); &#13;
        _; &#13;
    }&#13;
&#13;
    // Allows execution by the controller only&#13;
    modifier onlyController { &#13;
        require(msg.sender == controller); &#13;
        _; &#13;
    }&#13;
&#13;
    // Allows execution by the air drop manager only&#13;
    modifier onlyAirDropManager { &#13;
        require(msg.sender == airDropManager); &#13;
        _; &#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Contract constructor function sets Ico address&#13;
    *   @param _owner        owner address&#13;
    *   @param _controller   controller address&#13;
    *   @param _airDropManager  air drop manager address&#13;
    */&#13;
    function BondToken(address _owner, address _controller, address _airDropManager) public {&#13;
       owner = _owner;&#13;
       controller = _controller;&#13;
       airDropManager = _airDropManager; &#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to mint tokens&#13;
    *   @param _holder       beneficiary address the tokens will be issued to&#13;
    *   @param _value        number of tokens to issue&#13;
    */&#13;
    function mint(address _holder, uint _value) &#13;
        private&#13;
        returns (bool) {&#13;
        require(_value &gt; 0);&#13;
        balances[_holder] = balances[_holder].add(_value);&#13;
        totalSupply = totalSupply.add(_value);&#13;
        Transfer(address(0), _holder, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Function for handle token issues&#13;
    *   @param _holder       beneficiary address the tokens will be issued to&#13;
    *   @param _value        number of tokens to issue&#13;
    */&#13;
    function mintTokens(&#13;
        address _holder, &#13;
        uint _value) &#13;
        external &#13;
        onlyOwner {&#13;
        require(mint(_holder, _value));&#13;
        Mint(_holder, _value);&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to issues tokens for investors&#13;
    *   @param _holder     address the tokens will be issued to&#13;
    *   @param _value        number of BFP tokens&#13;
    *   @param _txHash       transaction hash of investor's payment&#13;
    */&#13;
    function buyForInvestor(&#13;
        address _holder, &#13;
        uint _value, &#13;
        string _txHash&#13;
    ) &#13;
        external &#13;
        onlyController {&#13;
        require(mint(_holder, _value));&#13;
        LogBuyForInvestor(_holder, _value, _txHash);&#13;
    }&#13;
&#13;
&#13;
&#13;
    /**&#13;
     * @dev Function to batch mint tokens&#13;
     * @param _to An array of addresses that will receive the minted tokens.&#13;
     * @param _amount An array with the amounts of tokens each address will get minted.&#13;
     * @return A boolean that indicates whether the operation was successful.&#13;
     */&#13;
    function batchDrop(&#13;
        address[] _to, &#13;
        uint[] _amount) &#13;
        external&#13;
        onlyAirDropManager {&#13;
        require(_to.length == _amount.length);&#13;
        for (uint i = 0; i &lt; _to.length; i++) {&#13;
            require(_to[i] != address(0));&#13;
            require(mint(_to[i], _amount[i]));&#13;
        }&#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Function to enable token transfers&#13;
    */&#13;
    function unfreeze() external onlyOwner {&#13;
       tokensAreFrozen = false;&#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Function to enable token transfers&#13;
    */&#13;
    function freeze() external onlyOwner {&#13;
       tokensAreFrozen = true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Burn Tokens&#13;
    *   @param _holder       token holder address which the tokens will be burnt&#13;
    *   @param _value        number of tokens to burn&#13;
    */&#13;
    function burnTokens(address _holder, uint _value) external onlyOwner {&#13;
        require(balances[_holder] &gt; 0);&#13;
        totalSupply = totalSupply.sub(_value);&#13;
        balances[_holder] = balances[_holder].sub(_value);&#13;
        Burn(_holder, _value);&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Get balance of tokens holder&#13;
    *   @param _holder        holder's address&#13;
    *   @return               balance of investor&#13;
    */&#13;
    function balanceOf(address _holder) constant returns (uint) {&#13;
         return balances[_holder];&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Send coins&#13;
    *   throws on any error rather then return a false flag to minimize&#13;
    *   user errors&#13;
    *   @param _to           target address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transfer(address _to, uint _amount) public returns (bool) {&#13;
        require(!tokensAreFrozen);&#13;
        balances[msg.sender] = balances[msg.sender].sub(_amount);&#13;
        balances[_to] = balances[_to].add(_amount);&#13;
        Transfer(msg.sender, _to, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev An account/contract attempts to get the coins&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   @param _from         source address&#13;
    *   @param _to           target address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {&#13;
        require(!tokensAreFrozen);&#13;
        balances[_from] = balances[_from].sub(_amount);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);&#13;
        balances[_to] = balances[_to].add(_amount);&#13;
        Transfer(_from, _to, _amount);&#13;
        return true;&#13;
     }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Allows another account/contract to spend some tokens on its behalf&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   also, to minimize the risk of the approve/transferFrom attack vector&#13;
    *   approve has to be called twice in 2 separate transactions - once to&#13;
    *   change the allowance to 0 and secondly to change it to the new allowance&#13;
    *   value&#13;
    *&#13;
    *   @param _spender      approved address&#13;
    *   @param _amount       allowance amount&#13;
    *&#13;
    *   @return true if the approval was successful&#13;
    */&#13;
    function approve(address _spender, uint _amount) public returns (bool) {&#13;
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));&#13;
        allowed[msg.sender][_spender] = _amount;&#13;
        Approval(msg.sender, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
    *&#13;
    *   @param _owner        the address which owns the funds&#13;
    *   @param _spender      the address which will spend the funds&#13;
    *&#13;
    *   @return              the amount of tokens still avaible for the spender&#13;
    */&#13;
    function allowance(address _owner, address _spender) constant returns (uint) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
        /** &#13;
    *   @dev Allows owner to transfer out any accidentally sent ERC20 tokens&#13;
    *&#13;
    *   @param tokenAddress  token address&#13;
    *   @param tokens        transfer amount&#13;
    *&#13;
    *&#13;
    */&#13;
    function transferAnyTokens(address tokenAddress, uint tokens) &#13;
        public&#13;
        onlyOwner &#13;
        returns (bool success) {&#13;
        return ERC20(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
}
pragma solidity ^0.4.11;


/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) onlyOwner {
    if (newOwner != address(0)) {
      owner = newOwner;
    }
  }

}



/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="076362736247667f6e686a7d6269296468">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
    // Required methods&#13;
    function totalSupply() public view returns (uint256 total);&#13;
    function balanceOf(address _owner) public view returns (uint256 balance);&#13;
    function ownerOf(uint256 _tokenId) external view returns (address owner);&#13;
    function approve(address _to, uint256 _tokenId) external;&#13;
    function transfer(address _to, uint256 _tokenId) external;&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
    &#13;
    // Optional methods used by ServiceStation contract&#13;
    function tuneLambo(uint256 _newattributes, uint256 _tokenId) external;&#13;
    function getLamboAttributes(uint256 _id) external view returns (uint256 attributes);&#13;
    function getLamboModel(uint256 _tokenId) external view returns (uint64 _model);&#13;
    // Events&#13;
    event Transfer(address from, address to, uint256 tokenId);&#13;
    event Approval(address owner, address approved, uint256 tokenId);&#13;
&#13;
    // Optional&#13;
    // function name() public view returns (string name);&#13;
    // function symbol() public view returns (string symbol);&#13;
    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);&#13;
    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);&#13;
&#13;
    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool);&#13;
}&#13;
&#13;
&#13;
&#13;
/// @title A facet of EtherLamboCore that manages special access privileges.&#13;
/// @author Axiom Zen (https://www.axiomzen.co) adapted by Kenny Bania&#13;
/// @dev ...&#13;
contract EtherLambosAccessControl {&#13;
    // This facet controls access control for Etherlambos. There are four roles managed here:&#13;
    //&#13;
    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart&#13;
    //         contracts. It is also the only role that can unpause the smart contract. It is initially&#13;
    //         set to the address that created the smart contract in the EtherLamboCore constructor.&#13;
    //&#13;
    //     - The CFO: The CFO can withdraw funds from EtherLamboCore and its auction contracts.&#13;
    //&#13;
    //     - The COO: The COO can release new models for sale.&#13;
    //&#13;
    // It should be noted that these roles are distinct without overlap in their access abilities, the&#13;
    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any&#13;
    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This&#13;
    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of&#13;
    // convenience. The less we use an address, the less likely it is that we somehow compromise the&#13;
    // account.&#13;
&#13;
    /// @dev Emited when contract is upgraded - See README.md for updgrade plan&#13;
    event ContractUpgrade(address newContract);&#13;
&#13;
    // The addresses of the accounts (or contracts) that can execute actions within each roles.&#13;
    address public ceoAddress;&#13;
    address public cfoAddress;&#13;
    address public cooAddress;&#13;
&#13;
    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked&#13;
    bool public paused = false;&#13;
&#13;
    /// @dev Access modifier for CEO-only functionality&#13;
    modifier onlyCEO() {&#13;
        require(msg.sender == ceoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access modifier for CFO-only functionality&#13;
    modifier onlyCFO() {&#13;
        require(msg.sender == cfoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access modifier for COO-only functionality&#13;
    modifier onlyCOO() {&#13;
        require(msg.sender == cooAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyCLevel() {&#13;
        require(&#13;
            msg.sender == cooAddress ||&#13;
            msg.sender == ceoAddress ||&#13;
            msg.sender == cfoAddress&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.&#13;
    /// @param _newCEO The address of the new CEO&#13;
    function setCEO(address _newCEO) external onlyCEO {&#13;
        require(_newCEO != address(0));&#13;
&#13;
        ceoAddress = _newCEO;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.&#13;
    /// @param _newCFO The address of the new CFO&#13;
    function setCFO(address _newCFO) external onlyCEO {&#13;
        require(_newCFO != address(0));&#13;
&#13;
        cfoAddress = _newCFO;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.&#13;
    /// @param _newCOO The address of the new COO&#13;
    function setCOO(address _newCOO) external onlyCEO {&#13;
        require(_newCOO != address(0));&#13;
&#13;
        cooAddress = _newCOO;&#13;
    }&#13;
&#13;
    /*** Pausable functionality adapted from OpenZeppelin ***/&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS NOT paused&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS paused&#13;
    modifier whenPaused {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Called by any "C-level" role to pause the contract. Used only when&#13;
    ///  a bug or exploit is detected and we need to limit damage.&#13;
    function pause() external onlyCLevel whenNotPaused {&#13;
        paused = true;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the CEO, since&#13;
    ///  one reason we may pause the contract is when CFO or COO accounts are&#13;
    ///  compromised.&#13;
    /// @notice This is public rather than external so it can be called by&#13;
    ///  derived contracts.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        // can't unpause if contract was upgraded&#13;
        paused = false;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
/// @title Base contract for EtherLambos. Holds all common structs, events and base variables.&#13;
/// @author Axiom Zen (https://www.axiomzen.co) adapted by Kenny Bania&#13;
/// @dev ...&#13;
contract EtherLambosBase is EtherLambosAccessControl {&#13;
    /*** EVENTS ***/&#13;
&#13;
    /// @dev The Build event is fired whenever a new car model is build by the COO&#13;
    event Build(address owner, uint256 lamboId, uint256 attributes);&#13;
&#13;
    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a car&#13;
    ///  ownership is assigned, including builds.&#13;
    event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
    event Tune(uint256 _newattributes, uint256 _tokenId);&#13;
    &#13;
    /*** DATA TYPES ***/&#13;
&#13;
    /// @dev The main EtherLambos struct. Every car in EtherLambos is represented by a copy&#13;
    ///  of this structure, so great care was taken to ensure that it fits neatly into&#13;
    ///  exactly two 256-bit words. Note that the order of the members in this structure&#13;
    ///  is important because of the byte-packing rules used by Ethereum.&#13;
    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html&#13;
    struct Lambo {&#13;
        // sports-car attributes like max speed, weight etc. are stored here.&#13;
        // These attributes can be changed due to tuning/upgrades&#13;
        uint256 attributes;&#13;
&#13;
        // The timestamp from the block when this car came was constructed.&#13;
        uint64 buildTime;&#13;
        &#13;
        // the Lambo model identifier&#13;
        uint64 model;&#13;
&#13;
    }&#13;
&#13;
&#13;
    // An approximation of currently how many seconds are in between blocks.&#13;
    uint256 public secondsPerBlock = 15;&#13;
&#13;
    /*** STORAGE ***/&#13;
&#13;
    /// @dev An array containing the Lambo struct for all Lambos in existence. The ID&#13;
    ///  of each car is actually an index into this array. Note that 0 is invalid index.&#13;
    Lambo[] lambos;&#13;
&#13;
    /// @dev A mapping from car IDs to the address that owns them. All cars have&#13;
    ///  some valid owner address.&#13;
    mapping (uint256 =&gt; address) public lamboIndexToOwner;&#13;
&#13;
    // @dev A mapping from owner address to count of tokens that address owns.&#13;
    //  Used internally inside balanceOf() to resolve ownership count.&#13;
    mapping (address =&gt; uint256) ownershipTokenCount;&#13;
&#13;
    /// @dev A mapping from LamboIDs to an address that has been approved to call&#13;
    ///  transferFrom(). Each Lambo can only have one approved address for transfer&#13;
    ///  at any time. A zero value means no approval is outstanding.&#13;
    mapping (uint256 =&gt; address) public lamboIndexToApproved;&#13;
&#13;
    /// @dev The address of the MarketPlace contract that handles sales of Lambos. This&#13;
    ///  same contract handles both peer-to-peer sales as well as new model sales. &#13;
    MarketPlace public marketPlace;&#13;
    ServiceStation public serviceStation;&#13;
    /// @dev Assigns ownership of a specific Lambo to an address.&#13;
    function _transfer(address _from, address _to, uint256 _tokenId) internal {&#13;
        // Since the number of lambos is capped to 2^32 we can't overflow this&#13;
        ownershipTokenCount[_to]++;&#13;
        // transfer ownership&#13;
        lamboIndexToOwner[_tokenId] = _to;&#13;
        // When creating new lambos _from is 0x0, but we can't account that address.&#13;
        if (_from != address(0)) {&#13;
            ownershipTokenCount[_from]--;&#13;
            // clear any previously approved ownership exchange&#13;
            delete lamboIndexToApproved[_tokenId];&#13;
        }&#13;
        // Emit the transfer event.&#13;
        Transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev An internal method that creates a new lambo and stores it. This&#13;
    ///  method doesn't do any checking and should only be called when the&#13;
    ///  input data is known to be valid. Will generate both a Build event&#13;
    ///  and a Transfer event.&#13;
    /// @param _attributes The lambo's attributes.&#13;
    /// @param _owner The inital owner of this car, must be non-zero&#13;
    function _createLambo(&#13;
        uint256 _attributes,&#13;
        address _owner,&#13;
        uint64  _model&#13;
    )&#13;
        internal&#13;
        returns (uint)&#13;
    {&#13;
&#13;
        &#13;
        Lambo memory _lambo = Lambo({&#13;
            attributes: _attributes,&#13;
            buildTime: uint64(now),&#13;
            model:_model&#13;
        });&#13;
        uint256 newLamboId = lambos.push(_lambo) - 1;&#13;
&#13;
        // It's probably never going to happen, 4 billion cars is A LOT, but&#13;
        // let's just be 100% sure we never let this happen.&#13;
        require(newLamboId == uint256(uint32(newLamboId)));&#13;
&#13;
        // emit the build event&#13;
        Build(&#13;
            _owner,&#13;
            newLamboId,&#13;
            _lambo.attributes&#13;
        );&#13;
&#13;
        // This will assign ownership, and also emit the Transfer event as&#13;
        // per ERC721 draft&#13;
        _transfer(0, _owner, newLamboId);&#13;
&#13;
        return newLamboId;&#13;
    }&#13;
     /// @dev An internal method that tunes an existing lambo. This&#13;
    ///  method doesn't do any checking and should only be called when the&#13;
    ///  input data is known to be valid. Will generate a Tune event&#13;
    /// @param _newattributes The lambo's new attributes.&#13;
    /// @param _tokenId The car to be tuned.&#13;
    function _tuneLambo(&#13;
        uint256 _newattributes,&#13;
        uint256 _tokenId&#13;
    )&#13;
        internal&#13;
    {&#13;
        lambos[_tokenId].attributes=_newattributes;&#13;
     &#13;
        // emit the tune event&#13;
        Tune(&#13;
            _tokenId,&#13;
            _newattributes&#13;
        );&#13;
&#13;
    }&#13;
    // Any C-level can fix how many seconds per blocks are currently observed.&#13;
    function setSecondsPerBlock(uint256 secs) external onlyCLevel {&#13;
        //require(secs &lt; cooldowns[0]);&#13;
        secondsPerBlock = secs;&#13;
    }&#13;
}&#13;
&#13;
/// @title The external contract that is responsible for generating metadata for the cars,&#13;
///  it has one function that will return the data as bytes.&#13;
contract ERC721Metadata {&#13;
    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.&#13;
    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {&#13;
        if (_tokenId == 1) {&#13;
            buffer[0] = "Hello World! :D";&#13;
            count = 15;&#13;
        } else if (_tokenId == 2) {&#13;
            buffer[0] = "I would definitely choose a medi";&#13;
            buffer[1] = "um length string.";&#13;
            count = 49;&#13;
        } else if (_tokenId == 3) {&#13;
            buffer[0] = "Lorem ipsum dolor sit amet, mi e";&#13;
            buffer[1] = "st accumsan dapibus augue lorem,";&#13;
            buffer[2] = " tristique vestibulum id, libero";&#13;
            buffer[3] = " suscipit varius sapien aliquam.";&#13;
            count = 128;&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
/// @title The facet of the EtherLambosCore contract that manages ownership, ERC-721 (draft) compliant.&#13;
/// @author Axiom Zen (https://www.axiomzen.co) adapted by Cryptoknights&#13;
/// @dev Ref: https://github.com/ethereum/EIPs/issues/721&#13;
&#13;
contract EtherLambosOwnership is EtherLambosBase, ERC721 {&#13;
&#13;
    /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
    string public constant name = "EtherLambos";&#13;
    string public constant symbol = "EL";&#13;
&#13;
    // The contract that will return lambo metadata&#13;
    ERC721Metadata public erc721Metadata;&#13;
&#13;
    bytes4 constant InterfaceSignature_ERC165 =&#13;
        bytes4(keccak256('supportsInterface(bytes4)'));&#13;
&#13;
    bytes4 constant InterfaceSignature_ERC721 =&#13;
        bytes4(keccak256('name()')) ^&#13;
        bytes4(keccak256('symbol()')) ^&#13;
        bytes4(keccak256('totalSupply()')) ^&#13;
        bytes4(keccak256('balanceOf(address)')) ^&#13;
        bytes4(keccak256('ownerOf(uint256)')) ^&#13;
        bytes4(keccak256('approve(address,uint256)')) ^&#13;
        bytes4(keccak256('transfer(address,uint256)')) ^&#13;
        bytes4(keccak256('transferFrom(address,address,uint256)')) ^&#13;
        bytes4(keccak256('tokensOfOwner(address)')) ^&#13;
        bytes4(keccak256('tokenMetadata(uint256,string)'));&#13;
&#13;
    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).&#13;
    ///  Returns true for any standardized interfaces implemented by this contract. We implement&#13;
    ///  ERC-165 (obviously!) and ERC-721.&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool)&#13;
    {&#13;
        // DEBUG ONLY&#13;
        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) &amp;&amp; (InterfaceSignature_ERC721 == 0x9a20483d));&#13;
&#13;
        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));&#13;
    }&#13;
&#13;
    /// @dev Set the address of the sibling contract that tracks metadata.&#13;
    ///  CEO only.&#13;
    function setMetadataAddress(address _contractAddress) public onlyCEO {&#13;
        erc721Metadata = ERC721Metadata(_contractAddress);&#13;
    }&#13;
&#13;
    // Internal utility functions: These functions all assume that their input arguments&#13;
    // are valid. We leave it to public methods to sanitize their inputs and follow&#13;
    // the required logic.&#13;
&#13;
    /// @dev Checks if a given address is the current owner of a particular Lambo.&#13;
    /// @param _claimant the address we are validating against.&#13;
    /// @param _tokenId kitten id, only valid when &gt; 0&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return lamboIndexToOwner[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Checks if a given address currently has transferApproval for a particular Lambo.&#13;
    /// @param _claimant the address we are confirming Lambo is approved for.&#13;
    /// @param _tokenId lambo id, only valid when &gt; 0&#13;
    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return lamboIndexToApproved[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous&#13;
    ///  approval. Setting _approved to address(0) clears all transfer approval.&#13;
    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because&#13;
    ///  _approve() and transferFrom() are used together for putting Lambos on sale, and&#13;
    ///  there is no value in spamming the log with Approval events in that case.&#13;
    function _approve(uint256 _tokenId, address _approved) internal {&#13;
        lamboIndexToApproved[_tokenId] = _approved;&#13;
    }&#13;
&#13;
    /// @notice Returns the number of Lambos owned by a specific address.&#13;
    /// @param _owner The owner address to check.&#13;
    /// @dev Required for ERC-721 compliance&#13;
    function balanceOf(address _owner) public view returns (uint256 count) {&#13;
        return ownershipTokenCount[_owner];&#13;
    }&#13;
&#13;
    /// @notice Transfers a Lambo to another address. If transferring to a smart&#13;
    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or&#13;
    ///  EtherLambos specifically) or your Lambo may be lost forever. Seriously.&#13;
    /// @param _to The address of the recipient, can be a user or contract.&#13;
    /// @param _tokenId The ID of the Lambo to transfer.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function transfer(&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any lambos.&#13;
        require(_to != address(this));&#13;
        // Disallow transfers to the auction contracts to prevent accidental&#13;
        // misuse. Marketplace contracts should only take ownership of Lambos&#13;
        // through the allow + transferFrom flow.&#13;
        require(_to != address(marketPlace));&#13;
&#13;
        // You can only send your own car.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Reassign ownership, clear pending approvals, emit Transfer event.&#13;
        _transfer(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Grant another address the right to transfer a specific Lambo via&#13;
    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.&#13;
    /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
    ///  clear all approvals.&#13;
    /// @param _tokenId The ID of the Lambo that can be transferred if this call succeeds.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function approve(&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Only an owner can grant transfer approval.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Register the approval (replacing any previous approval).&#13;
        _approve(_tokenId, _to);&#13;
&#13;
        // Emit approval event.&#13;
        Approval(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Transfer a Lambo owned by another address, for which the calling address&#13;
    ///  has previously been granted transfer approval by the owner.&#13;
    /// @param _from The address that owns the Lambo to be transfered.&#13;
    /// @param _to The address that should take ownership of the Lambo. Can be any address,&#13;
    ///  including the caller.&#13;
    /// @param _tokenId The ID of the Lambo to be transferred.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function transferFrom(&#13;
        address _from,&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any lambos.&#13;
        require(_to != address(this));&#13;
        // Check for approval and valid ownership&#13;
        require(_approvedFor(msg.sender, _tokenId));&#13;
        require(_owns(_from, _tokenId));&#13;
&#13;
        // Reassign ownership (also clears pending approvals and emits Transfer event).&#13;
        _transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Returns the total number of Lambos currently in existence.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function totalSupply() public view returns (uint) {&#13;
        return lambos.length - 1;&#13;
    }&#13;
&#13;
    /// @notice Returns the address currently assigned ownership of a given Lambo.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function ownerOf(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns (address owner)&#13;
    {&#13;
        owner = lamboIndexToOwner[_tokenId];&#13;
&#13;
        require(owner != address(0));&#13;
    }&#13;
&#13;
    /// @notice Returns a list of all Lambo IDs assigned to an address.&#13;
    /// @param _owner The owner whose Lambo we are interested in.&#13;
    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly&#13;
    ///  expensive (it walks the entire Lambo array looking for cars belonging to owner),&#13;
    ///  but it also returns a dynamic array, which is only supported for web3 calls, and&#13;
    ///  not contract-to-contract calls.&#13;
    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {&#13;
        uint256 tokenCount = balanceOf(_owner);&#13;
&#13;
        if (tokenCount == 0) {&#13;
            // Return an empty array&#13;
            return new uint256[](0);&#13;
        } else {&#13;
            uint256[] memory result = new uint256[](tokenCount);&#13;
            uint256 totalCars = totalSupply();&#13;
            uint256 resultIndex = 0;&#13;
&#13;
            // We count on the fact that all cars have IDs starting at 1 and increasing&#13;
            // sequentially up to the totalCat count.&#13;
            uint256 carId;&#13;
&#13;
            for (carId = 1; carId &lt;= totalCars; carId++) {&#13;
                if (lamboIndexToOwner[carId] == _owner) {&#13;
                    result[resultIndex] = carId;&#13;
                    resultIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            return result;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a3c2d1c2c0cbcdcac7e3cdccd7c7ccd78dcdc6d7">[emailÂ protected]</a>&gt;)&#13;
    ///  This method is licenced under the Apache License.&#13;
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol&#13;
    function _memcpy(uint _dest, uint _src, uint _len) private view {&#13;
        // Copy word-length chunks while possible&#13;
        for(; _len &gt;= 32; _len -= 32) {&#13;
            assembly {&#13;
                mstore(_dest, mload(_src))&#13;
            }&#13;
            _dest += 32;&#13;
            _src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint256 mask = 256 ** (32 - _len) - 1;&#13;
        assembly {&#13;
            let srcpart := and(mload(_src), not(mask))&#13;
            let destpart := and(mload(_dest), mask)&#13;
            mstore(_dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="35544754565d5b5c51755b5a41515a411b5b5041">[emailÂ protected]</a>&gt;)&#13;
    ///  This method is licenced under the Apache License.&#13;
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol&#13;
    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {&#13;
        var outputString = new string(_stringLength);&#13;
        uint256 outputPtr;&#13;
        uint256 bytesPtr;&#13;
&#13;
        assembly {&#13;
            outputPtr := add(outputString, 32)&#13;
            bytesPtr := _rawBytes&#13;
        }&#13;
&#13;
        _memcpy(outputPtr, bytesPtr, _stringLength);&#13;
&#13;
        return outputString;&#13;
    }&#13;
&#13;
    /// @notice Returns a URI pointing to a metadata package for this token conforming to&#13;
    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)&#13;
    /// @param _tokenId The ID number of the Lambos whose metadata should be returned.&#13;
    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {&#13;
        require(erc721Metadata != address(0));&#13;
        bytes32[4] memory buffer;&#13;
        uint256 count;&#13;
        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);&#13;
&#13;
        return _toString(buffer, count);&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title MarketPlace core&#13;
/// @dev Contains models, variables, and internal methods for the marketplace.&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract MarketPlaceBase is Ownable {&#13;
&#13;
    // Represents an sale on an NFT&#13;
    struct Sale {&#13;
        // Current owner of NFT&#13;
        address seller;&#13;
        // Price (in wei) &#13;
        uint128 price;&#13;
        // Time when sale started&#13;
        // NOTE: 0 if this sale has been concluded&#13;
        uint64 startedAt;&#13;
    }&#13;
    &#13;
    struct Affiliates {&#13;
        address affiliate_address;&#13;
        uint64 commission;&#13;
        uint64 pricecut;&#13;
    }&#13;
    &#13;
    //Affiliates[] affiliates;&#13;
    // Reference to contract tracking NFT ownership&#13;
    ERC721 public nonFungibleContract;&#13;
&#13;
    // Cut owner takes on each sale, measured in basis points (1/100 of a percent).&#13;
    // Values 0-10,000 map to 0%-100%&#13;
    uint256 public ownerCut;&#13;
&#13;
    //map the Affiliate Code to the Affiliate&#13;
    mapping (uint256 =&gt; Affiliates) codeToAffiliate;&#13;
&#13;
    // Map from token ID to their corresponding sale.&#13;
    mapping (uint256 =&gt; Sale) tokenIdToSale;&#13;
&#13;
    event SaleCreated(uint256 tokenId, uint256 price);&#13;
    event SaleSuccessful(uint256 tokenId, uint256 price, address buyer);&#13;
    event SaleCancelled(uint256 tokenId);&#13;
&#13;
    /// @dev Returns true if the claimant owns the token.&#13;
    /// @param _claimant - Address claiming to own the token.&#13;
    /// @param _tokenId - ID of token whose ownership to verify.&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);&#13;
    }&#13;
&#13;
    /// @dev Escrows the NFT, assigning ownership to this contract.&#13;
    /// Throws if the escrow fails.&#13;
    /// @param _owner - Current owner address of token to escrow.&#13;
    /// @param _tokenId - ID of token whose approval to verify.&#13;
    function _escrow(address _owner, uint256 _tokenId) internal {&#13;
        // it will throw if transfer fails&#13;
        nonFungibleContract.transferFrom(_owner, this, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Transfers an NFT owned by this contract to another address.&#13;
    /// Returns true if the transfer succeeds.&#13;
    /// @param _receiver - Address to transfer NFT to.&#13;
    /// @param _tokenId - ID of token to transfer.&#13;
    function _transfer(address _receiver, uint256 _tokenId) internal {&#13;
        // it will throw if transfer fails&#13;
        nonFungibleContract.transfer(_receiver, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Adds an sale to the list of open sales. Also fires the&#13;
    ///  SaleCreated event.&#13;
    /// @param _tokenId The ID of the token to be put on sale.&#13;
    /// @param _sale Sale to add.&#13;
    function _addSale(uint256 _tokenId, Sale _sale) internal {&#13;
        &#13;
&#13;
        tokenIdToSale[_tokenId] = _sale;&#13;
&#13;
        SaleCreated(&#13;
            uint256(_tokenId),&#13;
            uint256(_sale.price)&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Cancels a sale unconditionally.&#13;
    function _cancelSale(uint256 _tokenId, address _seller) internal {&#13;
        _removeSale(_tokenId);&#13;
        _transfer(_seller, _tokenId);&#13;
        SaleCancelled(_tokenId);&#13;
    }&#13;
&#13;
    /// @dev Computes the price and transfers winnings.&#13;
    /// Does NOT transfer ownership of token.&#13;
    function _bid(uint256 _tokenId, uint256 _bidAmount)&#13;
        internal&#13;
        returns (uint256)&#13;
    {&#13;
        // Get a reference to the sale struct&#13;
        Sale storage sale = tokenIdToSale[_tokenId];&#13;
&#13;
        // Explicitly check that this sale is currently live.&#13;
        // (Because of how Ethereum mappings work, we can't just count&#13;
        // on the lookup above failing. An invalid _tokenId will just&#13;
        // return a sale object that is all zeros.)&#13;
        require(_isOnSale(sale));&#13;
&#13;
        // Check that the bid is greater than or equal to the current price&#13;
        uint256 price = sale.price;&#13;
        require(_bidAmount &gt;= price);&#13;
&#13;
        // Grab a reference to the seller before the sale struct&#13;
        // gets deleted.&#13;
        address seller = sale.seller;&#13;
&#13;
        // The bid is good! Remove the sale before sending the fees&#13;
        // to the sender so we can't have a reentrancy attack.&#13;
        _removeSale(_tokenId);&#13;
&#13;
        // Transfer proceeds to seller (if there are any!)&#13;
        if (price &gt; 0) {&#13;
            // Calculate the Marketplace's cut.&#13;
            // (NOTE: _computeCut() is guaranteed to return a&#13;
            // value &lt;= price, so this subtraction can't go negative.)&#13;
            uint256 marketplaceCut = _computeCut(price);&#13;
            uint256 sellerProceeds = price - marketplaceCut;&#13;
&#13;
            // NOTE: Doing a transfer() in the middle of a complex&#13;
            // method like this is generally discouraged because of&#13;
            // reentrancy attacks and DoS attacks if the seller is&#13;
            // a contract with an invalid fallback function. We explicitly&#13;
            // guard against reentrancy attacks by removing the auction&#13;
            // before calling transfer(), and the only thing the seller&#13;
            // can DoS is the sale of their own asset! (And if it's an&#13;
            // accident, they can call cancelAuction(). )&#13;
            seller.transfer(sellerProceeds);&#13;
        }&#13;
&#13;
        // Calculate any excess funds included with the bid. If the excess&#13;
        // is anything worth worrying about, transfer it back to bidder.&#13;
        // NOTE: We checked above that the bid amount is greater than or&#13;
        // equal to the price so this cannot underflow.&#13;
        uint256 bidExcess = _bidAmount - price;&#13;
&#13;
        // Return the funds. Similar to the previous transfer, this is&#13;
        // not susceptible to a re-entry attack because the auction is&#13;
        // removed before any transfers occur.&#13;
        msg.sender.transfer(bidExcess);&#13;
&#13;
        // Tell the world!&#13;
        SaleSuccessful(_tokenId, price, msg.sender);&#13;
&#13;
        return price;&#13;
    }&#13;
&#13;
    /// @dev Removes a sale from the list of open sales.&#13;
    /// @param _tokenId - ID of NFT on sale.&#13;
    function _removeSale(uint256 _tokenId) internal {&#13;
        delete tokenIdToSale[_tokenId];&#13;
    }&#13;
&#13;
    /// @dev Returns true if the NFT is on sale.&#13;
    /// @param _sale - Sale to check.&#13;
    function _isOnSale(Sale storage _sale) internal view returns (bool) {&#13;
        return (_sale.startedAt &gt; 0);&#13;
    }&#13;
&#13;
&#13;
    /// @dev Computes owner's cut of a sale.&#13;
    /// @param _price - Sale price of NFT.&#13;
    function _computeCut(uint256 _price) internal view returns (uint256) {&#13;
        // NOTE: We don't use SafeMath (or similar) in this function because&#13;
        //  all of our entry functions carefully cap the maximum values for&#13;
        //  currency (at 128-bits), and ownerCut &lt;= 10000 (see the require()&#13;
        //  statement in the Marketplace constructor). The result of this&#13;
        //  function is always guaranteed to be &lt;= _price.&#13;
        return _price * ownerCut / 10000;&#13;
    }&#13;
    function _computeAffiliateCut(uint256 _price,Affiliates affiliate) internal view returns (uint256) {&#13;
        // NOTE: We don't use SafeMath (or similar) in this function because&#13;
        //  all of our entry functions carefully cap the maximum values for&#13;
        //  currency (at 128-bits), and ownerCut &lt;= 10000 (see the require()&#13;
        //  statement in the Marketplace constructor). The result of this&#13;
        //  function is always guaranteed to be &lt;= _price.&#13;
        return _price * affiliate.commission / 10000;&#13;
    }&#13;
    /// @dev Adds an affiliate to the list.&#13;
    /// @param _code The referall code of the affiliate.&#13;
    /// @param _affiliate Affiliate to add.&#13;
    function _addAffiliate(uint256 _code, Affiliates _affiliate) internal {&#13;
        codeToAffiliate[_code] = _affiliate;&#13;
   &#13;
    }&#13;
    &#13;
    /// @dev Removes a affiliate from the list.&#13;
    /// @param _code - The referall code of the affiliate.&#13;
    function _removeAffiliate(uint256 _code) internal {&#13;
        delete codeToAffiliate[_code];&#13;
    }&#13;
    &#13;
    &#13;
    //_bidReferral(_tokenId, msg.value);&#13;
    /// @dev Computes the price and transfers winnings.&#13;
    /// Does NOT transfer ownership of token.&#13;
    function _bidReferral(uint256 _tokenId, uint256 _bidAmount,Affiliates _affiliate)&#13;
        internal&#13;
        returns (uint256)&#13;
    {&#13;
        &#13;
        // Get a reference to the sale struct&#13;
        Sale storage sale = tokenIdToSale[_tokenId];&#13;
&#13;
        //Only Owner of Contract can sell referrals&#13;
        require(sale.seller==owner);&#13;
&#13;
        // Explicitly check that this sale is currently live.&#13;
        // (Because of how Ethereum mappings work, we can't just count&#13;
        // on the lookup above failing. An invalid _tokenId will just&#13;
        // return a sale object that is all zeros.)&#13;
        require(_isOnSale(sale));&#13;
        // Check that the bid is greater than or equal to the current price&#13;
        &#13;
        uint256 price = sale.price;&#13;
        &#13;
        //deduce the affiliate pricecut&#13;
        price=price * _affiliate.pricecut / 10000;  &#13;
        require(_bidAmount &gt;= price);&#13;
&#13;
        // Grab a reference to the seller before the sale struct&#13;
        // gets deleted.&#13;
        address seller = sale.seller;&#13;
        address affiliate_address = _affiliate.affiliate_address;&#13;
        &#13;
        // The bid is good! Remove the sale before sending the fees&#13;
        // to the sender so we can't have a reentrancy attack.&#13;
        _removeSale(_tokenId);&#13;
&#13;
        // Transfer proceeds to seller (if there are any!)&#13;
        if (price &gt; 0) {&#13;
            // Calculate the Marketplace's cut.&#13;
            // (NOTE: _computeCut() is guaranteed to return a&#13;
            // value &lt;= price, so this subtraction can't go negative.)&#13;
            uint256 affiliateCut = _computeAffiliateCut(price,_affiliate);&#13;
            uint256 sellerProceeds = price - affiliateCut;&#13;
&#13;
            // NOTE: Doing a transfer() in the middle of a complex&#13;
            // method like this is generally discouraged because of&#13;
            // reentrancy attacks and DoS attacks if the seller is&#13;
            // a contract with an invalid fallback function. We explicitly&#13;
            // guard against reentrancy attacks by removing the auction&#13;
            // before calling transfer(), and the only thing the seller&#13;
            // can DoS is the sale of their own asset! (And if it's an&#13;
            // accident, they can call cancelAuction(). )&#13;
            seller.transfer(sellerProceeds);&#13;
            affiliate_address.transfer(affiliateCut);&#13;
        }&#13;
&#13;
        // Calculate any excess funds included with the bid. If the excess&#13;
        // is anything worth worrying about, transfer it back to bidder.&#13;
        // NOTE: We checked above that the bid amount is greater than or&#13;
        // equal to the price so this cannot underflow.&#13;
        uint256 bidExcess = _bidAmount - price;&#13;
&#13;
        // Return the funds. Similar to the previous transfer, this is&#13;
        // not susceptible to a re-entry attack because the auction is&#13;
        // removed before any transfers occur.&#13;
        msg.sender.transfer(bidExcess);&#13;
&#13;
        // Tell the world!&#13;
        SaleSuccessful(_tokenId, price, msg.sender);&#13;
&#13;
        return price;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is Ownable {&#13;
  event Pause();&#13;
  event Unpause();&#13;
&#13;
  bool public paused = false;&#13;
&#13;
&#13;
  /**&#13;
   * @dev modifier to allow actions only when the contract IS paused&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev modifier to allow actions only when the contract IS NOT paused&#13;
   */&#13;
  modifier whenPaused {&#13;
    require(paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to pause, triggers stopped state&#13;
   */&#13;
  function pause() onlyOwner whenNotPaused returns (bool) {&#13;
    paused = true;&#13;
    Pause();&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to unpause, returns to normal state&#13;
   */&#13;
  function unpause() onlyOwner whenPaused returns (bool) {&#13;
    paused = false;&#13;
    Unpause();&#13;
    return true;&#13;
  }&#13;
}&#13;
&#13;
/// @title MarketPlace for non-fungible tokens.&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract MarketPlace is Pausable, MarketPlaceBase {&#13;
&#13;
	// @dev Sanity check that allows us to ensure that we are pointing to the&#13;
    //  right auction in our setSaleMarketplaceAddress() call.&#13;
    bool public isMarketplace = true;&#13;
	&#13;
    /// @dev The ERC-165 interface signature for ERC-721.&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/165&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/721&#13;
    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);&#13;
&#13;
    /// @dev Constructor creates a reference to the NFT ownership contract&#13;
    ///  and verifies the owner cut is in the valid range.&#13;
    /// @param _nftAddress - address of a deployed contract implementing&#13;
    ///  the Nonfungible Interface.&#13;
    /// @param _cut - percent cut the owner takes on each sale, must be&#13;
    ///  between 0-10,000.&#13;
    function MarketPlace(address _nftAddress, uint256 _cut) public {&#13;
        require(_cut &lt;= 10000);&#13;
        ownerCut = _cut;&#13;
&#13;
        ERC721 candidateContract = ERC721(_nftAddress);&#13;
        //require(candidateContract.supportsInterface(InterfaceSignature_ERC721));&#13;
        nonFungibleContract = candidateContract;&#13;
    }&#13;
    function setNFTAddress(address _nftAddress, uint256 _cut) external onlyOwner {&#13;
        require(_cut &lt;= 10000);&#13;
        ownerCut = _cut;&#13;
        ERC721 candidateContract = ERC721(_nftAddress);&#13;
        //require(candidateContract.supportsInterface(InterfaceSignature_ERC721));&#13;
        nonFungibleContract = candidateContract;&#13;
    }&#13;
    /// @dev Remove all Ether from the contract, which is the owner's cuts&#13;
    ///  as well as any Ether sent directly to the contract address.&#13;
    ///  Always transfers to the NFT contract, but can be called either by&#13;
    ///  the owner or the NFT contract.&#13;
    function withdrawBalance() external {&#13;
        address nftAddress = address(nonFungibleContract);&#13;
&#13;
        require(&#13;
            msg.sender == owner ||&#13;
            msg.sender == nftAddress&#13;
        );&#13;
        // We are using this boolean method to make sure that even if one fails it will still work&#13;
        bool res = nftAddress.send(this.balance);&#13;
    }&#13;
&#13;
    /// @dev Creates and begins a new sale.&#13;
    /// @param _tokenId - ID of token to sale, sender must be owner.&#13;
    /// @param _price - Price of item (in wei)&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createSale(&#13;
        uint256 _tokenId,&#13;
        uint256 _price,&#13;
        address _seller&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_price == uint256(uint128(_price)));&#13;
        &#13;
        //require(_owns(msg.sender, _tokenId));&#13;
        //_escrow(msg.sender, _tokenId);&#13;
        &#13;
        require(msg.sender == address(nonFungibleContract));&#13;
        _escrow(_seller, _tokenId);&#13;
        &#13;
        Sale memory sale = Sale(&#13;
            _seller,&#13;
            uint128(_price),&#13;
            uint64(now)&#13;
        );&#13;
        _addSale(_tokenId, sale);&#13;
    }&#13;
&#13;
&#13;
    &#13;
&#13;
    /// @dev Bids on a sale, completing the sale and transferring&#13;
    ///  ownership of the NFT if enough Ether is supplied.&#13;
    /// @param _tokenId - ID of token to bid on.&#13;
    function bid(uint256 _tokenId)&#13;
        external&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        // _bid will throw if the bid or funds transfer fails&#13;
       _bid(_tokenId, msg.value); &#13;
       _transfer(msg.sender, _tokenId);&#13;
      &#13;
    }&#13;
&#13;
    /// @dev Bids on a sale, completing the sale and transferring&#13;
    ///  ownership of the NFT if enough Ether is supplied.&#13;
    /// @param _tokenId - ID of token to bid on.&#13;
    function bidReferral(uint256 _tokenId,uint256 _code)&#13;
        external&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        // _bid will throw if the bid or funds transfer fails&#13;
        Affiliates storage affiliate = codeToAffiliate[_code];&#13;
        &#13;
        require(affiliate.affiliate_address!=0&amp;&amp;_code&gt;0);&#13;
        _bidReferral(_tokenId, msg.value,affiliate);&#13;
        _transfer(msg.sender, _tokenId);&#13;
&#13;
       &#13;
    }&#13;
    &#13;
    /// @dev Cancels an sale that hasn't been won yet.&#13;
    ///  Returns the NFT to original owner.&#13;
    /// @notice This is a state-modifying function that can&#13;
    ///  be called while the contract is paused.&#13;
    /// @param _tokenId - ID of token on sale&#13;
    function cancelSale(uint256 _tokenId)&#13;
        external&#13;
    {&#13;
        Sale storage sale = tokenIdToSale[_tokenId];&#13;
        require(_isOnSale(sale));&#13;
        address seller = sale.seller;&#13;
        require(msg.sender == seller);&#13;
        _cancelSale(_tokenId, seller);&#13;
    }&#13;
&#13;
    /// @dev Cancels a sale when the contract is paused.&#13;
    ///  Only the owner may do this, and NFTs are returned to&#13;
    ///  the seller. This should only be used in emergencies.&#13;
    /// @param _tokenId - ID of the NFT on sale to cancel.&#13;
    function cancelSaleWhenPaused(uint256 _tokenId)&#13;
        whenPaused&#13;
        onlyOwner&#13;
        external&#13;
    {&#13;
        Sale storage sale = tokenIdToSale[_tokenId];&#13;
        require(_isOnSale(sale));&#13;
        _cancelSale(_tokenId, sale.seller);&#13;
    }&#13;
&#13;
    /// @dev Returns sale info for an NFT on sale.&#13;
    /// @param _tokenId - ID of NFT on sale.&#13;
    function getSale(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns&#13;
    (&#13;
        address seller,&#13;
        uint256 price,&#13;
        uint256 startedAt&#13;
    ) {&#13;
        Sale storage sale = tokenIdToSale[_tokenId];&#13;
        require(_isOnSale(sale));&#13;
        return (&#13;
            sale.seller,&#13;
            sale.price,&#13;
            sale.startedAt&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Returns the current price of a sale.&#13;
    /// @param _tokenId - ID of the token price we are checking.&#13;
    function getCurrentPrice(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns (uint256)&#13;
    {&#13;
        Sale storage sale = tokenIdToSale[_tokenId];&#13;
        require(_isOnSale(sale));&#13;
        return sale.price;&#13;
    }&#13;
&#13;
&#13;
    /// @dev Creates and begins a new sale.&#13;
    /// @param _code - ID of token to sale, sender must be owner.&#13;
    /// @param _commission - percentage of commission for affiliate&#13;
    /// @param _pricecut - percentage of sell price cut for buyer&#13;
    /// @param _affiliate_address - affiliate address &#13;
    function createAffiliate(&#13;
        uint256 _code,&#13;
        uint64  _commission,&#13;
        uint64  _pricecut,&#13;
        address _affiliate_address&#13;
    )&#13;
        external&#13;
        onlyOwner&#13;
    {&#13;
&#13;
        Affiliates memory affiliate = Affiliates(&#13;
            address(_affiliate_address),&#13;
            uint64(_commission),&#13;
            uint64(_pricecut)&#13;
        );&#13;
        _addAffiliate(_code, affiliate);&#13;
    }&#13;
    &#13;
    /// @dev Returns affiliate info for an affiliate code.&#13;
    /// @param _code - code for an affiliate.&#13;
    function getAffiliate(uint256 _code)&#13;
        external&#13;
        view&#13;
        onlyOwner&#13;
        returns&#13;
    (&#13;
         address affiliate_address,&#13;
         uint64 commission,&#13;
         uint64 pricecut&#13;
    ) {&#13;
        Affiliates storage affiliate = codeToAffiliate[_code];&#13;
        &#13;
        return (&#13;
            affiliate.affiliate_address,&#13;
            affiliate.commission,&#13;
            affiliate.pricecut&#13;
        );&#13;
    }&#13;
     /// @dev Removes affiliate.&#13;
    ///  Only the owner may do this&#13;
    /// @param _code - code for an affiliate.&#13;
    function removeAffiliate(uint256 _code)&#13;
        onlyOwner&#13;
        external&#13;
    {&#13;
        _removeAffiliate(_code); &#13;
        &#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title ServiceStationBase core&#13;
/// @dev Contains models, variables, and internal methods for the ServiceStation.&#13;
contract ServiceStationBase {&#13;
&#13;
    // Reference to contract tracking NFT ownership&#13;
    ERC721 public nonFungibleContract;&#13;
&#13;
    struct Tune{&#13;
        uint256 startChange;&#13;
        uint256 rangeChange;&#13;
        uint256 attChange;&#13;
        bool plusMinus;&#13;
        bool replace;&#13;
        uint128 price;&#13;
        bool active;&#13;
        uint64 model;&#13;
    }&#13;
    Tune[] options;&#13;
    &#13;
   &#13;
    &#13;
    /// @dev Returns true if the claimant owns the token.&#13;
    /// @param _claimant - Address claiming to own the token.&#13;
    /// @param _tokenId - ID of token whose ownership to verify.&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);&#13;
    }&#13;
  &#13;
    /// @dev Calls the NFT Contract with the tuned attributes &#13;
    function _tune(uint256 _newattributes, uint256 _tokenId) internal {&#13;
    nonFungibleContract.tuneLambo(_newattributes, _tokenId);&#13;
    }&#13;
    &#13;
    function _changeAttributes(uint256 _tokenId,uint256 _optionIndex) internal {&#13;
    &#13;
    //Get model from token&#13;
    uint64 model = nonFungibleContract.getLamboModel(_tokenId);&#13;
    //throw if tune option is not made for model&#13;
    require(options[_optionIndex].model==model);&#13;
    &#13;
    //Get original attributes&#13;
    uint256 attributes = nonFungibleContract.getLamboAttributes(_tokenId);&#13;
    uint256 part=0;&#13;
    &#13;
    //Dissect for options&#13;
    part=(attributes/(10 ** options[_optionIndex].startChange)) % (10 ** options[_optionIndex].rangeChange);&#13;
    //part=1544;&#13;
    //Change attributes &amp; verify&#13;
    //Should attChange be added,subtracted or replaced?&#13;
    if(options[_optionIndex].replace == false)&#13;
        {&#13;
            &#13;
            //change should be added&#13;
            if(options[_optionIndex].plusMinus == false)&#13;
            {&#13;
                //e.g. if range = 4 then value can not be higher then 9999 - overflow check&#13;
                require((part+options[_optionIndex].attChange)&lt;(10**options[_optionIndex].rangeChange));&#13;
                //add to attributes&#13;
                attributes=attributes+options[_optionIndex].attChange*(10 ** options[_optionIndex].startChange);&#13;
            }&#13;
            else{&#13;
                //do some subtraction&#13;
                //e.g. value must be greater then 0&#13;
                require(part&gt;options[_optionIndex].attChange);&#13;
                //substract from attributes &#13;
                attributes-=options[_optionIndex].attChange*(10 ** options[_optionIndex].startChange);&#13;
            }&#13;
        }&#13;
    else&#13;
        {&#13;
            //do some replacing&#13;
            attributes=attributes-part*(10 ** options[_optionIndex].startChange);&#13;
            attributes+=options[_optionIndex].attChange*(10 ** options[_optionIndex].startChange);&#13;
        }&#13;
    &#13;
  &#13;
   &#13;
    //Tune Lambo in NFT contract&#13;
    _tune(uint256(attributes), _tokenId);&#13;
       &#13;
        &#13;
    }&#13;
    &#13;
    &#13;
}&#13;
&#13;
&#13;
/// @title ServiceStation for non-fungible tokens.&#13;
contract ServiceStation is Pausable, ServiceStationBase {&#13;
&#13;
	// @dev Sanity check that allows us to ensure that we are pointing to the right call.&#13;
    bool public isServicestation = true;&#13;
	&#13;
    /// @dev The ERC-165 interface signature for ERC-721.&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/165&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/721&#13;
    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);&#13;
&#13;
    uint256 public optionCount;&#13;
    mapping (uint64 =&gt; uint256) public modelIndexToOptionCount;&#13;
    /// @dev Constructor creates a reference to the NFT ownership contract&#13;
    ///  and verifies the owner cut is in the valid range.&#13;
    /// @param _nftAddress - address of a deployed contract implementing&#13;
    ///  the Nonfungible Interface.&#13;
    function ServiceStation(address _nftAddress) public {&#13;
&#13;
        ERC721 candidateContract = ERC721(_nftAddress);&#13;
        //require(candidateContract.supportsInterface(InterfaceSignature_ERC721));&#13;
        nonFungibleContract = candidateContract;&#13;
        _newTuneOption(0,0,0,false,false,0,0);&#13;
        &#13;
    }&#13;
    function setNFTAddress(address _nftAddress) external onlyOwner {&#13;
        &#13;
        ERC721 candidateContract = ERC721(_nftAddress);&#13;
        //require(candidateContract.supportsInterface(InterfaceSignature_ERC721));&#13;
        nonFungibleContract = candidateContract;&#13;
    }&#13;
    &#13;
    function newTuneOption(&#13;
        uint32 _startChange,&#13;
        uint32 _rangeChange,&#13;
        uint256 _attChange,&#13;
        bool _plusMinus,&#13;
        bool _replace,&#13;
        uint128 _price,&#13;
        uint64 _model&#13;
        )&#13;
        external&#13;
        {&#13;
           //Only allow owner to add new options&#13;
           require(msg.sender == owner ); &#13;
           optionCount++;&#13;
           modelIndexToOptionCount[_model]++;&#13;
           _newTuneOption(_startChange,_rangeChange,_attChange,_plusMinus, _replace,_price,_model);&#13;
       &#13;
        }&#13;
    function changeTuneOption(&#13;
        uint32 _startChange,&#13;
        uint32 _rangeChange,&#13;
        uint256 _attChange,&#13;
        bool _plusMinus,&#13;
        bool _replace,&#13;
        uint128 _price,&#13;
        bool _isactive,&#13;
        uint64 _model,&#13;
        uint256 _optionIndex&#13;
        )&#13;
        external&#13;
        {&#13;
           //Only allow owner to add new options&#13;
           require(msg.sender == owner ); &#13;
           &#13;
           &#13;
           _changeTuneOption(_startChange,_rangeChange,_attChange,_plusMinus, _replace,_price,_isactive,_model,_optionIndex);&#13;
       &#13;
        }&#13;
        &#13;
    function _newTuneOption( uint32 _startChange,&#13;
        uint32 _rangeChange,&#13;
        uint256 _attChange,&#13;
        bool _plusMinus,&#13;
        bool _replace,&#13;
        uint128 _price,&#13;
        uint64 _model&#13;
        ) &#13;
        internal&#13;
        {&#13;
        &#13;
           Tune memory _option = Tune({&#13;
            startChange: _startChange,&#13;
            rangeChange: _rangeChange,&#13;
            attChange: _attChange,&#13;
            plusMinus: _plusMinus,&#13;
            replace: _replace,&#13;
            price: _price,&#13;
            active: true,&#13;
            model: _model&#13;
            });&#13;
        &#13;
        options.push(_option);&#13;
    }&#13;
    &#13;
    function _changeTuneOption( uint32 _startChange,&#13;
        uint32 _rangeChange,&#13;
        uint256 _attChange,&#13;
        bool _plusMinus,&#13;
        bool _replace,&#13;
        uint128 _price,&#13;
        bool _isactive,&#13;
        uint64 _model,&#13;
        uint256 _optionIndex&#13;
        ) &#13;
        internal&#13;
        {&#13;
        &#13;
           Tune memory _option = Tune({&#13;
            startChange: _startChange,&#13;
            rangeChange: _rangeChange,&#13;
            attChange: _attChange,&#13;
            plusMinus: _plusMinus,&#13;
            replace: _replace,&#13;
            price: _price,&#13;
            active: _isactive,&#13;
            model: _model&#13;
            });&#13;
        &#13;
        options[_optionIndex]=_option;&#13;
    }&#13;
    &#13;
    function disableTuneOption(uint256 index) external&#13;
    {&#13;
        require(msg.sender == owner ); &#13;
        options[index].active=false;&#13;
    }&#13;
    &#13;
    function enableTuneOption(uint256 index) external&#13;
    {&#13;
        require(msg.sender == owner ); &#13;
        options[index].active=true;&#13;
    }&#13;
    function getOption(uint256 _index) &#13;
    external view&#13;
    returns (&#13;
        uint256 _startChange,&#13;
        uint256 _rangeChange,&#13;
        uint256 _attChange,&#13;
        bool _plusMinus,&#13;
        uint128 _price,&#13;
        bool active,&#13;
        uint64 model&#13;
    ) &#13;
    {&#13;
      &#13;
        //require(options[_index].active);&#13;
        return (&#13;
            options[_index].startChange,&#13;
            options[_index].rangeChange,&#13;
            options[_index].attChange,&#13;
            options[_index].plusMinus,&#13;
            options[_index].price,&#13;
            options[_index].active,&#13;
            options[_index].model&#13;
        );  &#13;
    }&#13;
    &#13;
    function getOptionCount() external view returns (uint256 _optionCount)&#13;
        {&#13;
        return optionCount;    &#13;
        }&#13;
    &#13;
    function tuneLambo(uint256 _tokenId,uint256 _optionIndex) external payable&#13;
    {&#13;
       //Caller needs to own Lambo&#13;
       require(_owns(msg.sender, _tokenId)); &#13;
       //Tuning Option needs to be enabled&#13;
       require(options[_optionIndex].active);&#13;
       //Enough money for tuning to spend?&#13;
       require(msg.value&gt;=options[_optionIndex].price);&#13;
       &#13;
       _changeAttributes(_tokenId,_optionIndex);&#13;
    }&#13;
    /// @dev Remove all Ether from the contract, which is the owner's cuts&#13;
    ///  as well as any Ether sent directly to the contract address.&#13;
    ///  Always transfers to the NFT contract, but can be called either by&#13;
    ///  the owner or the NFT contract.&#13;
    function withdrawBalance() external {&#13;
        address nftAddress = address(nonFungibleContract);&#13;
&#13;
        require(&#13;
            msg.sender == owner ||&#13;
            msg.sender == nftAddress&#13;
        );&#13;
        // We are using this boolean method to make sure that even if one fails it will still work&#13;
        bool res = owner.send(this.balance);&#13;
    }&#13;
&#13;
    function getOptionsForModel(uint64 _model) external view returns(uint256[] _optionsModel) {&#13;
        //uint256 tokenCount = balanceOf(_owner);&#13;
&#13;
        //if (tokenCount == 0) {&#13;
            // Return an empty array&#13;
        //    return new uint256[](0);&#13;
        //} else {&#13;
            uint256[] memory result = new uint256[](modelIndexToOptionCount[_model]);&#13;
            //uint256 totalCars = totalSupply();&#13;
            uint256 resultIndex = 0;&#13;
&#13;
            // We count on the fact that all cars have IDs starting at 0 and increasing&#13;
            // sequentially up to the optionCount count.&#13;
            uint256 optionId;&#13;
&#13;
            for (optionId = 1; optionId &lt;= optionCount; optionId++) {&#13;
                if (options[optionId].model == _model &amp;&amp; options[optionId].active == true) {&#13;
                    result[resultIndex] = optionId;&#13;
                    resultIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            return result;&#13;
       // }&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
////No SiringClockAuction needed for Lambos&#13;
////No separate modification for SaleContract needed&#13;
&#13;
/// @title Handles creating sales for sale of lambos.&#13;
///  This wrapper of ReverseSale exists only so that users can create&#13;
///  sales with only one transaction.&#13;
contract EtherLambosSale is EtherLambosOwnership {&#13;
&#13;
    // @notice The sale contract variables are defined in EtherLambosBase to allow&#13;
    //  us to refer to them in EtherLambosOwnership to prevent accidental transfers.&#13;
    // `saleMarketplace` refers to the auction for p2p sale of cars.&#13;
   &#13;
&#13;
    /// @dev Sets the reference to the sale auction.&#13;
    /// @param _address - Address of sale contract.&#13;
    function setMarketplaceAddress(address _address) external onlyCEO {&#13;
        MarketPlace candidateContract = MarketPlace(_address);&#13;
&#13;
        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117&#13;
        require(candidateContract.isMarketplace());&#13;
&#13;
        // Set the new contract address&#13;
        marketPlace = candidateContract;&#13;
    }&#13;
&#13;
&#13;
    /// @dev Put a lambo up for sale.&#13;
    ///  Does some ownership trickery to create auctions in one tx.&#13;
    function createLamboSale(&#13;
        uint256 _carId,&#13;
        uint256 _price&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Sale contract checks input sizes&#13;
        // If lambo is already on any sale, this will throw&#13;
        // because it will be owned by the sale contract.&#13;
        require(_owns(msg.sender, _carId));&#13;
        &#13;
        _approve(_carId, marketPlace);&#13;
        // Sale throws if inputs are invalid and clears&#13;
        // transfer after escrowing the lambo.&#13;
        marketPlace.createSale(&#13;
            _carId,&#13;
            _price,&#13;
            msg.sender&#13;
        );&#13;
    }&#13;
    &#13;
    &#13;
    function bulkCreateLamboSale(&#13;
        uint256 _price,&#13;
        uint256 _tokenIdStart,&#13;
        uint256 _tokenCount&#13;
    )&#13;
        external&#13;
        onlyCOO&#13;
    {&#13;
        // Sale contract checks input sizes&#13;
        // If lambo is already on any sale, this will throw&#13;
        // because it will be owned by the sale contract.&#13;
        for(uint256 i=0;i&lt;_tokenCount;i++)&#13;
            {&#13;
            require(_owns(msg.sender, _tokenIdStart+i));&#13;
        &#13;
            _approve(_tokenIdStart+i, marketPlace);&#13;
            // Sale throws if inputs are invalid and clears&#13;
            // transfer after escrowing the lambo.&#13;
            marketPlace.createSale(&#13;
                _tokenIdStart+i,&#13;
                _price,&#13;
             msg.sender&#13;
            );&#13;
        }&#13;
    }&#13;
    /// @dev Transfers the balance of the marketPlace contract&#13;
    /// to the EtherLambosCore contract. We use two-step withdrawal to&#13;
    /// prevent two transfer calls in the auction bid function.&#13;
    function withdrawSaleBalances() external onlyCLevel {&#13;
        marketPlace.withdrawBalance();&#13;
        &#13;
    }&#13;
}&#13;
&#13;
/// @title all functions related to creating lambos&#13;
contract EtherLambosBuilding is EtherLambosSale {&#13;
&#13;
    // Limits the number of cars the contract owner can ever create.&#13;
    //uint256 public constant PROMO_CREATION_LIMIT = 5000;&#13;
    //uint256 public constant GEN0_CREATION_LIMIT = 45000;&#13;
&#13;
&#13;
    // Counts the number of cars the contract owner has created.&#13;
    uint256 public lambosBuildCount;&#13;
&#13;
&#13;
    /// @dev we can build lambos. Only callable by COO&#13;
    /// @param _attributes the encoded attributes of the lambo to be created, any value is accepted&#13;
    /// @param _owner the future owner of the created lambo. Default to contract COO&#13;
    /// @param _model the model of the created lambo. &#13;
    function createLambo(uint256 _attributes, address _owner, uint64 _model) external onlyCOO {&#13;
        address lamboOwner = _owner;&#13;
        if (lamboOwner == address(0)) {&#13;
             lamboOwner = cooAddress;&#13;
        }&#13;
        //require(promoCreatedCount &lt; PROMO_CREATION_LIMIT);&#13;
&#13;
        lambosBuildCount++;&#13;
        _createLambo(_attributes, lamboOwner, _model);&#13;
    }&#13;
&#13;
    function bulkCreateLambo(uint256 _attributes, address _owner, uint64 _model,uint256 count, uint256 startNo) external onlyCOO {&#13;
        address lamboOwner = _owner;&#13;
        uint256 att=_attributes;&#13;
        if (lamboOwner == address(0)) {&#13;
             lamboOwner = cooAddress;&#13;
        }&#13;
        &#13;
        //do some replacing&#13;
            //_attributes=_attributes-part*(10 ** 66);&#13;
        &#13;
        &#13;
        //require(promoCreatedCount &lt; PROMO_CREATION_LIMIT);&#13;
        for(uint256 i=0;i&lt;count;i++)&#13;
            {&#13;
            lambosBuildCount++;&#13;
            att=_attributes+(startNo+i)*(10 ** 66);&#13;
            _createLambo(att, lamboOwner, _model);&#13;
            }&#13;
    }&#13;
}&#13;
&#13;
/// @title all functions related to tuning lambos&#13;
contract EtherLambosTuning is EtherLambosBuilding {&#13;
&#13;
    // Counts the number of tunings have been done.&#13;
    uint256 public lambosTuneCount;&#13;
&#13;
    function setServicestationAddress(address _address) external onlyCEO {&#13;
        ServiceStation candidateContract = ServiceStation(_address);&#13;
&#13;
        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117&#13;
        require(candidateContract.isServicestation());&#13;
&#13;
        // Set the new contract address&#13;
        serviceStation = candidateContract;&#13;
    }&#13;
    /// @dev we can tune lambos. Only callable by ServiceStation contract&#13;
    /// @param _newattributes the new encoded attributes of the lambo to be updated&#13;
    /// @param _tokenId the lambo to be tuned.&#13;
    function tuneLambo(uint256 _newattributes, uint256 _tokenId) external {&#13;
        &#13;
        //Tuning can only be done by the ServiceStation Contract. &#13;
        require(&#13;
            msg.sender == address(serviceStation)&#13;
        );&#13;
        &#13;
        &#13;
        lambosTuneCount++;&#13;
        _tuneLambo(_newattributes, _tokenId);&#13;
    }&#13;
    function withdrawTuneBalances() external onlyCLevel {&#13;
        serviceStation.withdrawBalance();&#13;
        &#13;
    }&#13;
&#13;
}&#13;
&#13;
/// @title EtherLambos: Collectible, tuneable, and super stylish lambos on the Ethereum blockchain.&#13;
/// @author Cryptoknights code adapted from Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev The main EtherLambos contract, keeps track of lambos.&#13;
contract EtherLambosCore is EtherLambosTuning {&#13;
&#13;
    // This is the main EtherLambos contract. In order to keep our code seperated into logical sections,&#13;
    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts&#13;
    // that handle sales. The sales are&#13;
    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping&#13;
    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks&#13;
    // lambo ownership. &#13;
    //&#13;
    // Secondly, we break the core contract into multiple files using inheritence, one for each major&#13;
    // facet of functionality of EtherLambos. This allows us to keep related code bundled together while still&#13;
    // avoiding a single giant file with everything in it. The breakdown is as follows:&#13;
    //&#13;
    //      - EtherLambosBase: This is where we define the most fundamental code shared throughout the core&#13;
    //             functionality. This includes our main data storage, constants and data types, plus&#13;
    //             internal functions for managing these items.&#13;
    //&#13;
    //      - EtherLambosAccessControl: This contract manages the various addresses and constraints for operations&#13;
    //             that can be executed only by specific roles. Namely CEO, CFO and COO.&#13;
    //&#13;
    //      - EtherLambosOwnership: This provides the methods required for basic non-fungible token&#13;
    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).&#13;
    //&#13;
    //      - EtherLambosSale: Here we have the public methods for sales. &#13;
    //&#13;
    //      - EtherLambosBuilding: This final facet contains the functionality we use for creating new cars.&#13;
    //             &#13;
&#13;
    // Set in case the core contract is broken and an upgrade is required&#13;
    address public newContractAddress;&#13;
&#13;
    /// @notice Creates the main EtherLambos smart contract instance.&#13;
    function EtherLambosCore() public {&#13;
        // Starts paused.&#13;
        paused = true;&#13;
&#13;
        // the creator of the contract is the initial CEO&#13;
        ceoAddress = msg.sender;&#13;
&#13;
        // the creator of the contract is also the initial COO&#13;
        cooAddress = msg.sender;&#13;
&#13;
        // start with the car 0 &#13;
        _createLambo(uint256(-1), address(0),0);&#13;
    }&#13;
&#13;
    /// @dev Used to mark the smart contract as upgraded, in case there is a serious&#13;
    ///  breaking bug. This method does nothing but keep track of the new contract and&#13;
    ///  emit a message indicating that the new address is set. It's up to clients of this&#13;
    ///  contract to update to the new contract address in that case. (This contract will&#13;
    ///  be paused indefinitely if such an upgrade takes place.)&#13;
    /// @param _v2Address new address&#13;
    function setNewAddress(address _v2Address) external onlyCEO whenPaused {&#13;
        // See README.md for updgrade plan&#13;
        newContractAddress = _v2Address;&#13;
        ContractUpgrade(_v2Address);&#13;
    }&#13;
&#13;
    /// @notice No tipping!&#13;
    /// @dev Reject all Ether from being sent here, unless it's from the marketPlace contract.&#13;
    /// (Hopefully, we can prevent user accidents.)&#13;
    function() external payable {&#13;
        require(&#13;
            msg.sender == address(marketPlace)&#13;
        );&#13;
    }&#13;
&#13;
    /// @notice Returns all the relevant information about a specific lambo.&#13;
    /// @param _id The ID of the lambo of interest.&#13;
    function getLambo(uint256 _id)&#13;
        external&#13;
        view&#13;
        returns (&#13;
        uint256 buildTime,&#13;
        uint256 attributes&#13;
    ) {&#13;
        Lambo storage kit = lambos[_id];&#13;
&#13;
        buildTime = uint256(kit.buildTime);&#13;
        attributes = kit.attributes;&#13;
    }&#13;
    /// @notice Returns all the relevant information about a specific lambo.&#13;
    /// @param _id The ID of the lambo of interest.&#13;
    function getLamboAttributes(uint256 _id)&#13;
        external&#13;
        view&#13;
        returns (&#13;
        uint256 attributes&#13;
    ) {&#13;
        Lambo storage kit = lambos[_id];&#13;
        attributes = kit.attributes;&#13;
        return attributes;&#13;
    }&#13;
    &#13;
    /// @notice Returns all the relevant information about a specific lambo.&#13;
    /// @param _id The ID of the lambo of interest.&#13;
    function getLamboModel(uint256 _id)&#13;
        external&#13;
        view&#13;
        returns (&#13;
        uint64 model&#13;
    ) {&#13;
        Lambo storage kit = lambos[_id];&#13;
        model = kit.model;&#13;
        return model;&#13;
    }&#13;
    /// @dev Override unpause so it requires all external contract addresses&#13;
    ///  to be set before contract can be unpaused. Also, we can't have&#13;
    ///  newContractAddress set either, because then the contract was upgraded.&#13;
    /// @notice This is public rather than external so we can call super.unpause&#13;
    ///  without using an expensive CALL.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        require(marketPlace != address(0));&#13;
        require(serviceStation != address(0));&#13;
        require(newContractAddress == address(0));&#13;
&#13;
        // Actually unpause the contract.&#13;
        super.unpause();&#13;
    }&#13;
&#13;
    // @dev Allows the CFO to capture the balance available to the contract.&#13;
    function withdrawBalance() external onlyCFO {&#13;
        uint256 balance = this.balance;&#13;
        cfoAddress.send(balance);&#13;
     &#13;
    }&#13;
}
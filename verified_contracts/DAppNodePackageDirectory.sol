//File: contracts/Owned.sol
pragma solidity ^0.4.19;


/// @title Owned
/// @author Adrià Massanet <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="137277617a7253707c7776707c7d67766b673d7a7c">[email protected]</a>&gt;&#13;
/// @notice The Owned contract has an owner address, and provides basic &#13;
///  authorization control functions, this simplifies &amp; the implementation of&#13;
///  user permissions; this contract has three work flows for a change in&#13;
///  ownership, the first requires the new owner to validate that they have the&#13;
///  ability to accept ownership, the second allows the ownership to be&#13;
///  directly transfered without requiring acceptance, and the third allows for&#13;
///  the ownership to be removed to allow for decentralization &#13;
contract Owned {&#13;
&#13;
    address public owner;&#13;
    address public newOwnerCandidate;&#13;
&#13;
    event OwnershipRequested(address indexed by, address indexed to);&#13;
    event OwnershipTransferred(address indexed from, address indexed to);&#13;
    event OwnershipRemoved();&#13;
&#13;
    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract&#13;
    function Owned() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev `owner` is the only address that can call a function with this&#13;
    /// modifier&#13;
    modifier onlyOwner() {&#13;
        require (msg.sender == owner);&#13;
        _;&#13;
    }&#13;
    &#13;
    /// @dev In this 1st option for ownership transfer `proposeOwnership()` must&#13;
    ///  be called first by the current `owner` then `acceptOwnership()` must be&#13;
    ///  called by the `newOwnerCandidate`&#13;
    /// @notice `onlyOwner` Proposes to transfer control of the contract to a&#13;
    ///  new owner&#13;
    /// @param _newOwnerCandidate The address being proposed as the new owner&#13;
    function proposeOwnership(address _newOwnerCandidate) public onlyOwner {&#13;
        newOwnerCandidate = _newOwnerCandidate;&#13;
        OwnershipRequested(msg.sender, newOwnerCandidate);&#13;
    }&#13;
&#13;
    /// @notice Can only be called by the `newOwnerCandidate`, accepts the&#13;
    ///  transfer of ownership&#13;
    function acceptOwnership() public {&#13;
        require(msg.sender == newOwnerCandidate);&#13;
&#13;
        address oldOwner = owner;&#13;
        owner = newOwnerCandidate;&#13;
        newOwnerCandidate = 0x0;&#13;
&#13;
        OwnershipTransferred(oldOwner, owner);&#13;
    }&#13;
&#13;
    /// @dev In this 2nd option for ownership transfer `changeOwnership()` can&#13;
    ///  be called and it will immediately assign ownership to the `newOwner`&#13;
    /// @notice `owner` can step down and assign some other address to this role&#13;
    /// @param _newOwner The address of the new owner&#13;
    function changeOwnership(address _newOwner) public onlyOwner {&#13;
        require(_newOwner != 0x0);&#13;
&#13;
        address oldOwner = owner;&#13;
        owner = _newOwner;&#13;
        newOwnerCandidate = 0x0;&#13;
&#13;
        OwnershipTransferred(oldOwner, owner);&#13;
    }&#13;
&#13;
    /// @dev In this 3rd option for ownership transfer `removeOwnership()` can&#13;
    ///  be called and it will immediately assign ownership to the 0x0 address;&#13;
    ///  it requires a 0xdece be input as a parameter to prevent accidental use&#13;
    /// @notice Decentralizes the contract, this operation cannot be undone &#13;
    /// @param _dac `0xdac` has to be entered for this function to work&#13;
    function removeOwnership(address _dac) public onlyOwner {&#13;
        require(_dac == 0xdac);&#13;
        owner = 0x0;&#13;
        newOwnerCandidate = 0x0;&#13;
        OwnershipRemoved();     &#13;
    }&#13;
} &#13;
//File: contracts/ERC20.sol&#13;
pragma solidity ^0.4.19;&#13;
&#13;
&#13;
/**&#13;
 * @title ERC20&#13;
 * @dev A standard interface for tokens.&#13;
 * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md&#13;
 */&#13;
contract ERC20 {&#13;
  &#13;
    /// @dev Returns the total token supply&#13;
    function totalSupply() public constant returns (uint256 supply);&#13;
&#13;
    /// @dev Returns the account balance of the account with address _owner&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance);&#13;
&#13;
    /// @dev Transfers _value number of tokens to address _to&#13;
    function transfer(address _to, uint256 _value) public returns (bool success);&#13;
&#13;
    /// @dev Transfers _value number of tokens from address _from to address _to&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);&#13;
&#13;
    /// @dev Allows _spender to withdraw from the msg.sender's account up to the _value amount&#13;
    function approve(address _spender, uint256 _value) public returns (bool success);&#13;
&#13;
    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner&#13;
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);&#13;
&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
&#13;
}&#13;
//File: contracts/Escapable.sol&#13;
pragma solidity ^0.4.19;&#13;
/*&#13;
    Copyright 2016, Jordi Baylina&#13;
    Contributor: Adrià Massanet &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bcddd8ced5ddfcdfd3d8d9dfd3d2c8d9c4c892d5d3">[email protected]</a>&gt;&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @dev `Escapable` is a base level contract built off of the `Owned`&#13;
///  contract; it creates an escape hatch function that can be called in an&#13;
///  emergency that will allow designated addresses to send any ether or tokens&#13;
///  held in the contract to an `escapeHatchDestination` as long as they were&#13;
///  not blacklisted&#13;
contract Escapable is Owned {&#13;
    address public escapeHatchCaller;&#13;
    address public escapeHatchDestination;&#13;
    mapping (address=&gt;bool) private escapeBlacklist; // Token contract addresses&#13;
&#13;
    /// @notice The Constructor assigns the `escapeHatchDestination` and the&#13;
    ///  `escapeHatchCaller`&#13;
    /// @param _escapeHatchCaller The address of a trusted account or contract&#13;
    ///  to call `escapeHatch()` to send the ether in this contract to the&#13;
    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`&#13;
    ///  cannot move funds out of `escapeHatchDestination`&#13;
    /// @param _escapeHatchDestination The address of a safe location (usu a&#13;
    ///  Multisig) to send the ether held in this contract; if a neutral address&#13;
    ///  is required, the WHG Multisig is an option:&#13;
    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 &#13;
    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) public {&#13;
        escapeHatchCaller = _escapeHatchCaller;&#13;
        escapeHatchDestination = _escapeHatchDestination;&#13;
    }&#13;
&#13;
    /// @dev The addresses preassigned as `escapeHatchCaller` or `owner`&#13;
    ///  are the only addresses that can call a function with this modifier&#13;
    modifier onlyEscapeHatchCallerOrOwner {&#13;
        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Creates the blacklist of tokens that are not able to be taken&#13;
    ///  out of the contract; can only be done at the deployment, and the logic&#13;
    ///  to add to the blacklist will be in the constructor of a child contract&#13;
    /// @param _token the token contract address that is to be blacklisted &#13;
    function blacklistEscapeToken(address _token) internal {&#13;
        escapeBlacklist[_token] = true;&#13;
        EscapeHatchBlackistedToken(_token);&#13;
    }&#13;
&#13;
    /// @notice Checks to see if `_token` is in the blacklist of tokens&#13;
    /// @param _token the token address being queried&#13;
    /// @return False if `_token` is in the blacklist and can't be taken out of&#13;
    ///  the contract via the `escapeHatch()`&#13;
    function isTokenEscapable(address _token) view public returns (bool) {&#13;
        return !escapeBlacklist[_token];&#13;
    }&#13;
&#13;
    /// @notice The `escapeHatch()` should only be called as a last resort if a&#13;
    /// security issue is uncovered or something unexpected happened&#13;
    /// @param _token to transfer, use 0x0 for ether&#13;
    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   &#13;
        require(escapeBlacklist[_token]==false);&#13;
&#13;
        uint256 balance;&#13;
&#13;
        /// @dev Logic for ether&#13;
        if (_token == 0x0) {&#13;
            balance = this.balance;&#13;
            escapeHatchDestination.transfer(balance);&#13;
            EscapeHatchCalled(_token, balance);&#13;
            return;&#13;
        }&#13;
        /// @dev Logic for tokens&#13;
        ERC20 token = ERC20(_token);&#13;
        balance = token.balanceOf(this);&#13;
        require(token.transfer(escapeHatchDestination, balance));&#13;
        EscapeHatchCalled(_token, balance);&#13;
    }&#13;
&#13;
    /// @notice Changes the address assigned to call `escapeHatch()`&#13;
    /// @param _newEscapeHatchCaller The address of a trusted account or&#13;
    ///  contract to call `escapeHatch()` to send the value in this contract to&#13;
    ///  the `escapeHatchDestination`; it would be ideal that `escapeHatchCaller`&#13;
    ///  cannot move funds out of `escapeHatchDestination`&#13;
    function changeHatchEscapeCaller(address _newEscapeHatchCaller) public onlyEscapeHatchCallerOrOwner {&#13;
        escapeHatchCaller = _newEscapeHatchCaller;&#13;
    }&#13;
&#13;
    event EscapeHatchBlackistedToken(address token);&#13;
    event EscapeHatchCalled(address token, uint amount);&#13;
}&#13;
//File: contracts/DAppNodePackageDirectory.sol&#13;
pragma solidity ^0.4.19;&#13;
&#13;
/*&#13;
    Copyright 2018, Eduardo Antuña&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
*/&#13;
&#13;
/// @title DAppNodePackageDirectory Contract&#13;
/// @author Eduardo Antuña&#13;
/// @dev The goal of this smartcontrat is to keep a list of available packages &#13;
///  to install in the DAppNode&#13;
&#13;
&#13;
&#13;
&#13;
contract DAppNodePackageDirectory is Owned,Escapable {&#13;
&#13;
    enum DAppNodePackageStatus {Preparing, Develop, Active, Deprecated, Deleted}&#13;
&#13;
    struct DAppNodePackage {&#13;
        string name;&#13;
        address repo;&#13;
        DAppNodePackageStatus status;&#13;
    }&#13;
&#13;
    DAppNodePackage[] DAppNodePackages;&#13;
&#13;
    event PackageAdded(uint indexed idPackage, string name, address repo);&#13;
    event PackageUpdated(uint indexed idPackage, string name, address repo);&#13;
    event StatusChanged(uint idPackage, DAppNodePackageStatus newStatus);&#13;
&#13;
    /// @notice The Constructor assigns the `escapeHatchDestination` and the&#13;
    ///  `escapeHatchCaller`&#13;
    /// @param _escapeHatchCaller The address of a trusted account or contract&#13;
    ///  to call `escapeHatch()` to send the ether in this contract to the&#13;
    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller`&#13;
    ///  cannot move funds out of `escapeHatchDestination`&#13;
    /// @param _escapeHatchDestination The address of a safe location (usu a&#13;
    ///  Multisig) to send the ether held in this contract; if a neutral address&#13;
    ///  is required, the WHG Multisig is an option:&#13;
    ///  0x8Ff920020c8AD673661c8117f2855C384758C572 &#13;
    function DAppNodePackageDirectory(&#13;
        address _escapeHatchCaller,&#13;
        address _escapeHatchDestination&#13;
    ) &#13;
        Escapable(_escapeHatchCaller, _escapeHatchDestination)&#13;
        public&#13;
    {&#13;
    }&#13;
&#13;
    /// @notice Add a new DAppNode package&#13;
    /// @param name the ENS name of the package&#13;
    /// @param repo the AragonPackageManager address of the repo.&#13;
    /// @return the idPackage of the new package&#13;
    function addPackage (&#13;
        string name,&#13;
        address repo&#13;
    ) onlyOwner public returns(uint idPackage) {&#13;
        idPackage = DAppNodePackages.length++;&#13;
        DAppNodePackage storage c = DAppNodePackages[idPackage];&#13;
        c.name = name;&#13;
        c.repo = repo;&#13;
        // An event to notify that a new package has been added&#13;
        PackageAdded(idPackage,name,repo);&#13;
    }&#13;
&#13;
    /// @notice Update a DAppNode package&#13;
    /// @param idPackage the id of the package to be changed&#13;
    /// @param name the new ENS name of the package&#13;
    /// @param repo the new AragonPackageManager address of the repo.&#13;
    function updatePackage (&#13;
        uint idPackage,&#13;
        string name,&#13;
        address repo&#13;
    ) onlyOwner public {&#13;
        require(idPackage &lt; DAppNodePackages.length);&#13;
        DAppNodePackage storage c = DAppNodePackages[idPackage];&#13;
        c.name = name;&#13;
        c.repo = repo;&#13;
        // An event to notify that a package has been updated&#13;
        PackageUpdated(idPackage,name,repo);&#13;
    }&#13;
&#13;
    /// @notice Change the status of a DAppNode package&#13;
    /// @param idPackage the id of the package to be changed&#13;
    /// @param newStatus the new status of the package&#13;
    function changeStatus(&#13;
        uint idPackage,&#13;
        DAppNodePackageStatus newStatus&#13;
    ) onlyOwner public {&#13;
        require(idPackage &lt; DAppNodePackages.length);&#13;
        DAppNodePackage storage c = DAppNodePackages[idPackage];&#13;
        c.status = newStatus;&#13;
        // An event to notify that the status of a packet has been updated&#13;
        StatusChanged(idPackage, newStatus);&#13;
    }&#13;
&#13;
    /// @notice Returns the information of a DAppNode package&#13;
    /// @param idPackage the id of the package to be changed&#13;
    /// @return name the new name of the package&#13;
    /// @return repo the AragonPackageManager address of the repo.&#13;
    /// @return status the status of the package&#13;
    function getPackage(uint idPackage) constant public returns (&#13;
        string name,&#13;
        address repo,&#13;
        DAppNodePackageStatus status&#13;
    ) {&#13;
        require(idPackage &lt; DAppNodePackages.length);&#13;
        DAppNodePackage storage c = DAppNodePackages[idPackage];&#13;
        name = c.name;&#13;
        repo = c.repo;&#13;
        status = c.status;&#13;
    }&#13;
&#13;
    /// @notice its goal is to return the total number of DAppNode packages&#13;
    /// @return the total number of DAppNode packages&#13;
    function numberOfDAppNodePackages() view public returns (uint) {&#13;
        return DAppNodePackages.length;&#13;
    }&#13;
}
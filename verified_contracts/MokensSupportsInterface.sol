pragma solidity 0.4.24;
pragma experimental "v0.5.0";
/******************************************************************************\
* Author: Nick Mudge, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3e50575d557e5351555b504d105751">[emailÂ protected]</a>&#13;
* Mokens&#13;
* Copyright (c) 2018&#13;
*&#13;
* Implements ERC165 Standard Interface Detection&#13;
/******************************************************************************/&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//Storage contracts&#13;
////////////&#13;
//Some delegate contracts are listed with storage contracts they inherit.&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//Mokens&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage0 {&#13;
    // funcId =&gt; delegate contract&#13;
    mapping(bytes4 =&gt; address) internal delegates;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenUpdates&#13;
//MokenOwner&#13;
//QueryMokenDelegates&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage1 is Storage0 {&#13;
    address internal contractOwner;&#13;
    bytes[] internal funcSignatures;&#13;
    // signature =&gt; index+1&#13;
    mapping(bytes =&gt; uint256) internal funcSignatureToIndex;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokensSupportsInterfaces&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage2 is Storage1 {&#13;
    mapping(bytes4 =&gt; bool) internal supportedInterfaces;&#13;
}&#13;
&#13;
contract MokensSupportsInterface is Storage2 {&#13;
&#13;
    function addSupportedInterfaces(bytes4[] _interfaceIds) external {&#13;
        require(msg.sender == contractOwner, "Must own Mokens contract.");&#13;
        for(uint256 i = 0; i &lt; _interfaceIds.length; i++) {&#13;
            supportedInterfaces[_interfaceIds[i]] = true;&#13;
        }&#13;
    }&#13;
&#13;
    function removeSupportedInterfaces(bytes4[] _interfaceIds) external {&#13;
        require(msg.sender == contractOwner, "Must own Mokens contract.");&#13;
        for(uint256 i = 0; i &lt; _interfaceIds.length; i++) {&#13;
            supportedInterfaces[_interfaceIds[i]] = false;&#13;
        }&#13;
    }&#13;
&#13;
    function supportsInterface(bytes4 _interfaceId) external view returns (bool) {&#13;
        return supportedInterfaces[_interfaceId];&#13;
    }&#13;
}
pragma solidity ^0.4.15;

/**
 *
 * @author  <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1e7d76777d717d6c776e6a715e6e6c716a7170737f7772307d7173">[emailÂ protected]</a>&gt;&#13;
 *&#13;
 * RDFDM - Riverdimes Fiat Donation Manager&#13;
 * Version 20171027a&#13;
 *&#13;
 * Overview:&#13;
 * four basic round-up operations are supported:&#13;
 *&#13;
 * A) fiatCollected: Record Fiat Donation (collection)&#13;
 *    inputs:        charity (C), fiat amount ($XX.XX),&#13;
 *    summary:       creates a log of a fiat donation to a specified charity, C.&#13;
 *    message:       $XX.XX collected FBO Charity C, internal document #ABC&#13;
 *    - add $XX.XX to chariy's fiatBalanceIn, fiatCollected&#13;
 *&#13;
 * B) fiatToEth:     Fiat Converted to ETH&#13;
 *    inputs:        charity (C), fiat amount ($XX.XX), ETH amount (Z), document reference (ABC)&#13;
 *    summary:       deduct $XX.XX from charity C's fiatBalanceIn; credit charity C's ethBalanceIn. this operation is invoked&#13;
 *                   when fiat donations are converted to ETH. it includes a deposit of Z ETH.&#13;
 *    message(s):    On behalf of Charity C, $XX.XX used to purchase Z ETH&#13;
 *    - $XX.XX deducted from charity C's fiatBalanceIn&#13;
 *    - skims 4% of Z for RD Token holders, and 16% for operational overhead&#13;
 *    - credits charity C with 80% of Z ETH (ethBalance)&#13;
 *&#13;
 * C) ethToFiat:     ETH Converted to Fiat&#13;
 *    inputs:        charity (C), ETH amount (Z), fiat amount ($XX.XX), document reference (ABC)&#13;
 *    summary:       withdraw ETH from and convert to fiat&#13;
 *    message(s):    Z ETH converted to $XX.XX FBO Charity C&#13;
 *    - deducts Z ETH from charity C's ethBalance&#13;
 *    - adds $XX.XX to charity C's fiatBalanceOut&#13;
 *&#13;
 * D) fiatDelivered: Record Fiat Delivery to Specified Charity&#13;
 *    inputs:        charity (C), fiat amount ($XX.XX), document reference (ABC)&#13;
 *    summary:       creates a log of a fiat delivery to a specified charity, C:&#13;
 *    message:       $XX.XX delivered to Charity C, internal document #ABC&#13;
 *    - deducts the dollar amount, $XX.XX from charity's fiatBalanceOut&#13;
 *    - add $XX.XX to charity's totalDelivered&#13;
 *&#13;
 * one basic operation, unrelayed to round-up&#13;
 *&#13;
 * A) ethDonation:        Direct ETH Donation to Charity&#13;
 *    inputs:             charity (C), ETH amount (Z), document reference (ABC)&#13;
 *    summary:            ETH donation to a specified charity, crediting charity's ethBalance. ETH in transaction.&#13;
 *    messages:           Z ETH donated to Charity C, internal document #ABC&#13;
 *    - add Z ETH to chariy's ethDonated&#13;
 *    - skims 0.5% of Z for RD Token holders, and 1.5% for operational overhead&#13;
 *    - credits charity C with 98% of Z ETH (ethBalance)&#13;
 *&#13;
 * in addition there are shortcut operations (related to round-up):&#13;
 *&#13;
 * A) fiatCollectedToEth: Record Fiat Donation (collection) and convert to ETH&#13;
 *    inputs:             charity (C), fiat amount ($XX.XX), ETH amount (Z), document reference (ABC)&#13;
 *    summary:            creates a log of a fiat donation to a specified charity, C; fiat donation is immediately converted to&#13;
 *                        ETH, crediting charity C's ethBalance. the transaction includes a deposit of Z ETH.&#13;
 *    messages:           $XX.XX collected FBO Charity C, internal document #ABC&#13;
 *                        On behalf of Charity C, $XX.XX used to purchase Z ETH&#13;
 *    - add $XX.XX to chariy's fiatCollected&#13;
 *    - skims 4% of Z for RD Token holders, and 16% for operational overhead&#13;
 *    - credits charity C with 80% of Z ETH (ethBalance)&#13;
 *&#13;
 * B) ethToFiatDelivered: Record ETH Conversion to Fiat; and Fiat Delivery to Specified Charity&#13;
 *    inputs:             charity (C), ETH amount (Z), fiat amount ($XX.XX), document reference (ABC)&#13;
 *    summary:            withdraw ETH from charity C's ethBalance and convert to fiat; log fiat delivery of $XX.XX.&#13;
 *    messages:           Z ETH converted to $XX.XX FBO Charity C&#13;
 *                        $XX.XX delivered to Charity C, internal document #ABC&#13;
 *    - deducts Z ETH from charity C's ethBalance&#13;
 *    - add $XX.XX to charity's totalDelivered&#13;
 *&#13;
 */&#13;
&#13;
//import './SafeMath.sol';&#13;
//contract RDFDM is SafeMath&#13;
contract RDFDM {&#13;
&#13;
  //events relating to donation operations&#13;
  //&#13;
  event FiatCollectedEvent(uint indexed charity, uint usd, uint ref);&#13;
  event FiatToEthEvent(uint indexed charity, uint usd, uint eth);&#13;
  event EthToFiatEvent(uint indexed charity, uint eth, uint usd);&#13;
  event FiatDeliveredEvent(uint indexed charity, uint usd, uint ref);&#13;
  event EthDonationEvent(uint indexed charity, uint eth);&#13;
&#13;
  //events relating to adding and deleting charities&#13;
  //&#13;
  event CharityAddedEvent(uint indexed charity, string name, uint8 currency);&#13;
&#13;
  //currencies&#13;
  //&#13;
  uint constant  CURRENCY_USD  = 0x01;&#13;
  uint constant  CURRENCY_EURO = 0x02;&#13;
  uint constant  CURRENCY_NIS  = 0x03;&#13;
  uint constant  CURRENCY_YUAN = 0x04;&#13;
&#13;
&#13;
  struct Charity {&#13;
    uint fiatBalanceIn;          // funds in external acct, collected fbo charity&#13;
    uint fiatBalanceOut;         // funds in external acct, pending delivery to charity&#13;
    uint fiatCollected;          // total collected since dawn of creation&#13;
    uint fiatDelivered;          // total delivered since dawn of creation&#13;
    uint ethDonated;             // total eth donated since dawn of creation&#13;
    uint ethCredited;            // total eth credited to this charity since dawn of creation&#13;
    uint ethBalance;             // current eth balance of this charity&#13;
    uint fiatToEthPriceAccEth;   // keep track of fiat to eth conversion price: total eth&#13;
    uint fiatToEthPriceAccFiat;  // keep track of fiat to eth conversion price: total fiat&#13;
    uint ethToFiatPriceAccEth;   // kkep track of eth to fiat conversion price: total eth&#13;
    uint ethToFiatPriceAccFiat;  // kkep track of eth to fiat conversion price: total fiat&#13;
    uint8 currency;              // fiat amounts are in smallest denomination of currency&#13;
    string name;                 // eg. "Salvation Army"&#13;
  }&#13;
&#13;
  uint public charityCount;&#13;
  address public owner;&#13;
  address public manager;&#13;
  address public operator;       //operations fees sent to this address&#13;
  address public token;          //token-holder fees sent to this address&#13;
  mapping (uint =&gt; Charity) public charities;&#13;
  bool public isLocked;&#13;
&#13;
  modifier ownerOnly {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  modifier managerOnly {&#13;
    require(msg.sender == owner || msg.sender == manager);&#13;
    _;&#13;
  }&#13;
&#13;
  modifier unlockedOnly {&#13;
    require(!isLocked);&#13;
    _;&#13;
  }&#13;
&#13;
&#13;
  //&#13;
  //constructor&#13;
  //&#13;
  function RDFDM() {&#13;
    owner = msg.sender;&#13;
    manager = msg.sender;&#13;
  }&#13;
  function lock() public ownerOnly {&#13;
    isLocked = true;&#13;
  }&#13;
  function setOperator(address _operator) public ownerOnly { operator = _operator; }&#13;
  function setManager(address _manager) public managerOnly { manager = _manager; }&#13;
  function deleteManager() public managerOnly { manager = owner; }&#13;
&#13;
&#13;
  function addCharity(string _name, uint8 _currency) public managerOnly {&#13;
    charities[charityCount].name = _name;&#13;
    charities[charityCount].currency = _currency;&#13;
    CharityAddedEvent(charityCount, _name, _currency);&#13;
    ++charityCount;&#13;
  }&#13;
&#13;
&#13;
&#13;
  //======== basic operations&#13;
&#13;
  function fiatCollected(uint _charity, uint _fiat, uint _ref) public managerOnly {&#13;
    require(_charity &lt; charityCount);&#13;
    charities[charityCount].fiatBalanceIn += _fiat;&#13;
    charities[charityCount].fiatCollected += _fiat;&#13;
    FiatCollectedEvent(_charity, _fiat, _ref);&#13;
  }&#13;
&#13;
  function fiatToEth(uint _charity, uint _fiat) public managerOnly payable {&#13;
    require(_charity &lt; charityCount);&#13;
    //keep track of fiat to eth conversion price&#13;
    charities[charityCount].fiatToEthPriceAccFiat += _fiat;&#13;
    charities[charityCount].fiatToEthPriceAccEth += msg.value;&#13;
    charities[charityCount].fiatBalanceIn -= _fiat;&#13;
    uint _tokenCut = (msg.value * 4) / 100;&#13;
    uint _operatorCut = (msg.value * 16) / 100;&#13;
    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;&#13;
    operator.transfer(_operatorCut);&#13;
    token.transfer(_tokenCut);&#13;
    charities[charityCount].ethBalance += _charityCredit;&#13;
    charities[charityCount].ethCredited += _charityCredit;&#13;
    FiatToEthEvent(_charity, _fiat, msg.value);&#13;
  }&#13;
&#13;
  function ethToFiat(uint _charity, uint _eth, uint _fiat) public managerOnly {&#13;
    require(_charity &lt; charityCount);&#13;
    require(charities[_charity].ethBalance &gt;= _eth);&#13;
    //keep track of fiat to eth conversion price&#13;
    charities[charityCount].ethToFiatPriceAccFiat += _fiat;&#13;
    charities[charityCount].ethToFiatPriceAccEth += _eth;&#13;
    charities[charityCount].ethBalance -= _eth;&#13;
    charities[charityCount].fiatBalanceOut += _fiat;&#13;
    //withdraw funds to the caller&#13;
    msg.sender.transfer(_eth);&#13;
    EthToFiatEvent(_charity, _eth, _fiat);&#13;
  }&#13;
&#13;
  function fiatDelivered(uint _charity, uint _fiat, uint _ref) public managerOnly {&#13;
    require(_charity &lt; charityCount);&#13;
    require(charities[_charity].fiatBalanceOut &gt;= _fiat);&#13;
    charities[_charity].fiatBalanceOut -= _fiat;&#13;
    charities[charityCount].fiatDelivered += _fiat;&#13;
    FiatDeliveredEvent(_charity, _fiat, _ref);&#13;
  }&#13;
&#13;
  //======== unrelated to round-up&#13;
  function ethDonation(uint _charity) public payable {&#13;
    require(_charity &lt; charityCount);&#13;
    uint _tokenCut = (msg.value * 1) / 200;&#13;
    uint _operatorCut = (msg.value * 3) / 200;&#13;
    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;&#13;
    operator.transfer(_operatorCut);&#13;
    token.transfer(_tokenCut);&#13;
    charities[charityCount].ethDonated += _charityCredit;&#13;
    charities[charityCount].ethBalance += _charityCredit;&#13;
    charities[charityCount].ethCredited += _charityCredit;&#13;
    EthDonationEvent(_charity, msg.value);&#13;
  }&#13;
&#13;
&#13;
  //======== combo operations&#13;
  function fiatCollectedToEth(uint _charity, uint _fiat, uint _ref) public managerOnly payable {&#13;
    require(token != 0);&#13;
    require(_charity &lt; charityCount);&#13;
    charities[charityCount].fiatCollected += _fiat;&#13;
    //charities[charityCount].fiatBalanceIn does not change, since we immediately convert to eth&#13;
    //keep track of fiat to eth conversion price&#13;
    charities[charityCount].fiatToEthPriceAccFiat += _fiat;&#13;
    charities[charityCount].fiatToEthPriceAccEth += msg.value;&#13;
    uint _tokenCut = (msg.value * 4) / 100;&#13;
    uint _operatorCut = (msg.value * 16) / 100;&#13;
    uint _charityCredit = (msg.value - _operatorCut) - _tokenCut;&#13;
    operator.transfer(_operatorCut);&#13;
    token.transfer(_tokenCut);&#13;
    charities[charityCount].ethBalance += _charityCredit;&#13;
    charities[charityCount].ethCredited += _charityCredit;&#13;
    FiatCollectedEvent(_charity, _fiat, _ref);&#13;
    FiatToEthEvent(_charity, _fiat, msg.value);&#13;
  }&#13;
&#13;
  function ethToFiatDelivered(uint _charity, uint _eth, uint _fiat, uint _ref) public managerOnly {&#13;
    require(_charity &lt; charityCount);&#13;
    require(charities[_charity].ethBalance &gt;= _eth);&#13;
    //keep track of fiat to eth conversion price&#13;
    charities[charityCount].ethToFiatPriceAccFiat += _fiat;&#13;
    charities[charityCount].ethToFiatPriceAccEth += _eth;&#13;
    charities[charityCount].ethBalance -= _eth;&#13;
    //charities[charityCount].fiatBalanceOut does not change, since we immediately deliver&#13;
    //withdraw funds to the caller&#13;
    msg.sender.transfer(_eth);&#13;
    EthToFiatEvent(_charity, _eth, _fiat);&#13;
    charities[charityCount].fiatDelivered += _fiat;&#13;
    FiatDeliveredEvent(_charity, _fiat, _ref);&#13;
  }&#13;
&#13;
&#13;
  //note: contant fcn does not need safe math&#13;
  function quickAuditEthCredited(uint _charity) public constant returns (uint _fiatCollected,&#13;
                                                              uint _fiatToEthNotProcessed,&#13;
                                                              uint _fiatToEthProcessed,&#13;
                                                              uint _fiatToEthPricePerEth,&#13;
                                                              uint _fiatToEthCreditedFinney,&#13;
                                                              uint _fiatToEthAfterFeesFinney,&#13;
                                                              uint _ethDonatedFinney,&#13;
                                                              uint _ethDonatedAfterFeesFinney,&#13;
                                                              uint _totalEthCreditedFinney,&#13;
                                                               int _quickDiscrepancy) {&#13;
    require(_charity &lt; charityCount);&#13;
    _fiatCollected = charities[charityCount].fiatCollected;                                                //eg. $450 = 45000&#13;
    _fiatToEthNotProcessed = charities[charityCount].fiatBalanceIn;                                        //eg.            0&#13;
    _fiatToEthProcessed = _fiatCollected - _fiatToEthNotProcessed;                                         //eg.        45000&#13;
    if (charities[charityCount].fiatToEthPriceAccEth == 0) {&#13;
      _fiatToEthPricePerEth = 0;&#13;
      _fiatToEthCreditedFinney = 0;&#13;
    } else {&#13;
      _fiatToEthPricePerEth = (charities[charityCount].fiatToEthPriceAccFiat * (1 ether)) /                //eg. 45000 * 10^18 = 45 * 10^21&#13;
                               charities[charityCount].fiatToEthPriceAccEth;                               //eg 1.5 ETH        = 15 * 10^17&#13;
                                                                                                           //               --------------------&#13;
                                                                                                           //                     3 * 10^4 (30000 cents per ether)&#13;
      _fiatToEthCreditedFinney = _fiatToEthProcessed * (1 ether / 1 finney) / _fiatToEthPricePerEth;       //eg. 45000 * 1000 / 30000 = 1500 (finney)&#13;
      _fiatToEthAfterFeesFinney = _fiatToEthCreditedFinney * 8 / 10;                                       //eg. 1500 * 8 / 10 = 1200 (finney)&#13;
    }&#13;
    _ethDonatedFinney = charities[charityCount].ethDonated / (1 finney);                                   //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)&#13;
    _ethDonatedAfterFeesFinney = _ethDonatedFinney * 98 / 100;                                             //eg. 1000 * 98/100 = 980 (finney)&#13;
    _totalEthCreditedFinney = _fiatToEthAfterFeesFinney + _ethDonatedAfterFeesFinney;                      //eg 1200 + 980 = 2180 (finney)&#13;
    uint256 tecf = charities[charityCount].ethCredited * (1 ether / 1 finney);&#13;
    _quickDiscrepancy = int256(_totalEthCreditedFinney) - int256(tecf);&#13;
  }&#13;
&#13;
&#13;
  //note: contant fcn does not need safe math&#13;
  function quickAuditFiatDelivered(uint _charity) public constant returns (&#13;
                                                              uint _totalEthCreditedFinney,&#13;
                                                              uint _ethNotProcessedFinney,&#13;
                                                              uint _processedEthCreditedFinney,&#13;
                                                              uint _ethToFiatPricePerEth,&#13;
                                                              uint _ethToFiatCreditedFiat,&#13;
                                                              uint _ethToFiatNotProcessed,&#13;
                                                              uint _ethToFiatProcessed,&#13;
                                                              uint _fiatDelivered,&#13;
                                                               int _quickDiscrepancy) {&#13;
    require(_charity &lt; charityCount);&#13;
    _totalEthCreditedFinney = charities[charityCount].ethCredited * (1 ether / 1 finney);&#13;
    _ethNotProcessedFinney = charities[charityCount].ethBalance / (1 finney);                              //eg. 1 ETH = 1 * 10^18 / 10^15 = 1000 (finney)&#13;
    _processedEthCreditedFinney = _totalEthCreditedFinney - _ethNotProcessedFinney;                        //eg 1180 finney&#13;
    if (charities[charityCount].ethToFiatPriceAccEth == 0) {&#13;
      _ethToFiatPricePerEth = 0;&#13;
      _ethToFiatCreditedFiat = 0;&#13;
    } else {&#13;
      _ethToFiatPricePerEth = (charities[charityCount].ethToFiatPriceAccFiat * (1 ether)) /                //eg. 29400 * 10^18 = 2940000 * 10^16&#13;
                               charities[charityCount].ethToFiatPriceAccEth;                               //eg 0.980 ETH      =      98 * 10^16&#13;
                                                                                                           //               --------------------&#13;
                                                                                                           //                      30000 (30000 cents per ether)&#13;
      _ethToFiatCreditedFiat = _processedEthCreditedFinney * _ethToFiatPricePerEth / (1 ether / 1 finney); //eg. 1180 * 30000 / 1000 = 35400&#13;
    }&#13;
    _ethToFiatNotProcessed = charities[_charity].fiatBalanceOut;&#13;
    _ethToFiatProcessed = _ethToFiatCreditedFiat - _ethToFiatNotProcessed;&#13;
    _fiatDelivered = charities[charityCount].fiatDelivered;&#13;
    _quickDiscrepancy = int256(_ethToFiatProcessed) - int256(_fiatDelivered);&#13;
  }&#13;
&#13;
&#13;
  //&#13;
  // default payable function.&#13;
  //&#13;
  function () payable {&#13;
    revert();&#13;
  }&#13;
&#13;
  //for debug&#13;
  //only available before the contract is locked&#13;
  function haraKiri() ownerOnly unlockedOnly {&#13;
    selfdestruct(owner);&#13;
  }&#13;
&#13;
}
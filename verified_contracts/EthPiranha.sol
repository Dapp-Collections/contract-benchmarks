pragma solidity ^0.4.21;

contract Ownable {

  address public contractOwner;

  function Ownable() public {
    contractOwner = msg.sender;
  }

  modifier onlyContractOwner() {
    require(msg.sender == contractOwner);
    _;
  }

  function transferContractOwnership(address _newOwner) public onlyContractOwner {
    require(_newOwner != address(0));
    contractOwner = _newOwner;
  }
  
  function contractWithdraw() public onlyContractOwner {
      contractOwner.transfer(this.balance);
  }  

}

/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="0d696879684d6c75646260776863236e62">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
  // Required methods&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function balanceOf(address _owner) public view returns (uint256 balance);&#13;
  function implementsERC721() public pure returns (bool);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address addr);&#13;
  function takeOwnership(uint256 _tokenId) public;&#13;
  function totalSupply() public view returns (uint256 total);&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function transfer(address _to, uint256 _tokenId) public;&#13;
&#13;
  event Transfer(address indexed from, address indexed to, uint256 tokenId);&#13;
  event Approval(address indexed owner, address indexed approved, uint256 tokenId);&#13;
&#13;
  // Optional&#13;
  // function name() public view returns (string name);&#13;
  // function symbol() public view returns (string symbol);&#13;
  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);&#13;
  // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);&#13;
  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);&#13;
}&#13;
&#13;
contract EthPiranha is ERC721, Ownable {&#13;
&#13;
  event PiranhaCreated(uint256 tokenId, string name, address owner);&#13;
  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);&#13;
  event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
  string public constant NAME = "Piranha";&#13;
  string public constant SYMBOL = "PiranhaToken";&#13;
&#13;
  mapping (uint256 =&gt; address) private piranhaIdToOwner;&#13;
&#13;
  mapping (address =&gt; uint256) private ownershipTokenCount;&#13;
&#13;
  mapping (uint256 =&gt; address) private piranhaIdToApproved;&#13;
  &#13;
   /*** DATATYPES ***/&#13;
  struct Piranha {&#13;
    string name;&#13;
	uint8 size;&#13;
	uint256 gen;&#13;
	uint8 unique;&#13;
	uint256 growthStartTime;&#13;
	uint256 sellPrice;&#13;
	uint8 hungry;&#13;
  }&#13;
&#13;
  Piranha[] public piranhas;&#13;
&#13;
  function approve(address _to, uint256 _tokenId) public { //ERC721&#13;
    // Caller must own token.&#13;
    require(_owns(msg.sender, _tokenId));&#13;
    piranhaIdToApproved[_tokenId] = _to;&#13;
    Approval(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) { //ERC721&#13;
    return ownershipTokenCount[_owner];&#13;
  }&#13;
&#13;
  function createPiranhaTokens() public onlyContractOwner {&#13;
     for (uint8 i=0; i&lt;15; i++) {&#13;
		_createPiranha("EthPiranha", msg.sender, 20 finney, 160, 1, 0);&#13;
	}&#13;
  }&#13;
&#13;
  function implementsERC721() public pure returns (bool) {&#13;
    return true;&#13;
  }&#13;
&#13;
  function name() public pure returns (string) { //ERC721&#13;
    return NAME;&#13;
  }&#13;
&#13;
  function symbol() public pure returns (string) { //ERC721&#13;
    return SYMBOL;&#13;
  }  &#13;
&#13;
  function ownerOf(uint256 _tokenId) public view returns (address owner) { //ERC721&#13;
    owner = piranhaIdToOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
  }&#13;
&#13;
  function buy(uint256 _tokenId) public payable {&#13;
    address oldOwner = piranhaIdToOwner[_tokenId];&#13;
    address newOwner = msg.sender;&#13;
&#13;
	Piranha storage piranha = piranhas[_tokenId];&#13;
&#13;
    uint256 sellingPrice = piranha.sellPrice;&#13;
&#13;
    require(oldOwner != newOwner);&#13;
    require(_addressNotNull(newOwner));&#13;
    require(msg.value &gt;= sellingPrice &amp;&amp; sellingPrice &gt; 0);&#13;
&#13;
    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 97), 100)); //97% to previous owner, 3% dev tax&#13;
&#13;
    // Stop selling&#13;
    piranha.sellPrice=0;&#13;
	piranha.hungry=0;&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
&#13;
    // Pay previous tokenOwner if owner is not contract&#13;
    if (oldOwner != address(this)) {&#13;
      oldOwner.transfer(payment); //&#13;
    }&#13;
&#13;
    TokenSold(_tokenId, sellingPrice, 0, oldOwner, newOwner, piranhas[_tokenId].name);&#13;
	&#13;
    if (msg.value &gt; sellingPrice) { //if excess pay&#13;
	    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);&#13;
		msg.sender.transfer(purchaseExcess);&#13;
	}&#13;
  }&#13;
  &#13;
  function changePiranhaName(uint256 _tokenId, string _name) public payable {&#13;
	require (piranhaIdToOwner[_tokenId] == msg.sender &amp;&amp; msg.value == 0.001 ether);&#13;
	require(bytes(_name).length &lt;= 15);&#13;
	&#13;
	Piranha storage piranha = piranhas[_tokenId];&#13;
	piranha.name = _name;&#13;
  }&#13;
  &#13;
  function startSelling(uint256 _tokenId, uint256 _price) public {&#13;
	require (piranhaIdToOwner[_tokenId] == msg.sender);&#13;
	&#13;
	Piranha storage piranha = piranhas[_tokenId];&#13;
	piranha.sellPrice = _price;&#13;
  }  &#13;
&#13;
  function stopSelling(uint256 _tokenId) public {&#13;
	require (piranhaIdToOwner[_tokenId] == msg.sender);&#13;
&#13;
	Piranha storage piranha = piranhas[_tokenId];&#13;
	require (piranha.sellPrice &gt; 0);&#13;
	&#13;
	piranha.sellPrice = 0;&#13;
  }  &#13;
  &#13;
  function hungry(uint256 _tokenId) public {&#13;
	require (piranhaIdToOwner[_tokenId] == msg.sender);&#13;
&#13;
	Piranha storage piranha = piranhas[_tokenId];&#13;
	require (piranha.hungry == 0);&#13;
	&#13;
	uint8 piranhaSize=uint8(piranha.size+(now-piranha.growthStartTime)/900);&#13;
&#13;
	require (piranhaSize &lt; 240);&#13;
	&#13;
	piranha.hungry = 1;&#13;
  }   &#13;
&#13;
  function notHungry(uint256 _tokenId) public {&#13;
	require (piranhaIdToOwner[_tokenId] == msg.sender);&#13;
&#13;
	Piranha storage piranha = piranhas[_tokenId];&#13;
	require (piranha.hungry == 1);&#13;
	&#13;
	piranha.hungry = 0;&#13;
  }   &#13;
&#13;
  function bite(uint256 _tokenId, uint256 _victimTokenId) public payable {&#13;
	require (piranhaIdToOwner[_tokenId] == msg.sender);&#13;
	require (msg.value == 1 finney);&#13;
	&#13;
	Piranha storage piranha = piranhas[_tokenId];&#13;
	Piranha storage victimPiranha = piranhas[_victimTokenId];&#13;
	require (piranha.hungry == 1 &amp;&amp; victimPiranha.hungry == 1);&#13;
&#13;
	uint8 vitimPiranhaSize=uint8(victimPiranha.size+(now-victimPiranha.growthStartTime)/900);&#13;
	&#13;
	require (vitimPiranhaSize&gt;40); // don't bite a small&#13;
&#13;
	uint8 piranhaSize=uint8(piranha.size+(now-piranha.growthStartTime)/900)+10;&#13;
	&#13;
	if (piranhaSize&gt;240) { &#13;
	    piranha.size = 240; //maximum&#13;
		piranha.hungry = 0;&#13;
	} else {&#13;
	    piranha.size = piranhaSize;&#13;
	}&#13;
     &#13;
	//decrease victim size &#13;
	if (vitimPiranhaSize&gt;=50) {&#13;
	    vitimPiranhaSize-=10;&#13;
	    victimPiranha.size = vitimPiranhaSize;&#13;
	}&#13;
    else {&#13;
		victimPiranha.size=40;&#13;
	}&#13;
	&#13;
	piranha.growthStartTime=now;&#13;
	victimPiranha.growthStartTime=now;&#13;
	&#13;
  }    &#13;
  &#13;
  function breeding(uint256 _maleTokenId, uint256 _femaleTokenId) public payable {&#13;
  &#13;
    require (piranhaIdToOwner[_maleTokenId] ==  msg.sender &amp;&amp; piranhaIdToOwner[_femaleTokenId] == msg.sender);&#13;
	require (msg.value == 0.01 ether);&#13;
&#13;
	Piranha storage piranhaMale = piranhas[_maleTokenId];&#13;
	Piranha storage piranhaFemale = piranhas[_femaleTokenId];&#13;
	&#13;
	uint8 maleSize=uint8(piranhaMale.size+(now-piranhaMale.growthStartTime)/900);&#13;
	if (maleSize&gt;240)&#13;
	   piranhaMale.size=240;&#13;
	else &#13;
	   piranhaMale.size=maleSize;&#13;
&#13;
	uint8 femaleSize=uint8(piranhaFemale.size+(now-piranhaFemale.growthStartTime)/900);&#13;
	if (femaleSize&gt;240)&#13;
	   piranhaFemale.size=240;&#13;
	else &#13;
	   piranhaFemale.size=femaleSize;&#13;
	   &#13;
	require (piranhaMale.size &gt; 150 &amp;&amp; piranhaFemale.size &gt; 150);&#13;
	&#13;
	uint8 newbornSize = uint8(SafeMath.div(SafeMath.add(piranhaMale.size, piranhaMale.size),4));&#13;
	&#13;
	uint256 maxGen=piranhaFemale.gen;&#13;
	uint256 minGen=piranhaMale.gen;&#13;
	&#13;
	if (piranhaMale.gen &gt; piranhaFemale.gen) {&#13;
		maxGen=piranhaMale.gen;&#13;
		minGen=piranhaFemale.gen;&#13;
	} &#13;
	&#13;
	uint256 randNum = uint256(block.blockhash(block.number-1));&#13;
	uint256 newbornGen;&#13;
	uint8 newbornUnique = uint8(randNum%100+1); //chance to get rare piranha&#13;
	&#13;
	if (randNum%(10+maxGen) == 1) { // new generation, difficult depends on maxgen&#13;
		newbornGen = SafeMath.add(maxGen,1);&#13;
	} else if (maxGen == minGen) {&#13;
		newbornGen = maxGen;&#13;
	} else {&#13;
		newbornGen = SafeMath.add(randNum%(maxGen-minGen+1),minGen);&#13;
	}&#13;
	&#13;
	// 5% chance to get rare piranhas for each gen&#13;
	if (newbornUnique &gt; 5) &#13;
		newbornUnique = 0;&#13;
		&#13;
     //initiate new size, cancel selling&#13;
	 piranhaMale.size = uint8(SafeMath.div(piranhaMale.size,2));		&#13;
     piranhaFemale.size = uint8(SafeMath.div(piranhaFemale.size,2));	&#13;
&#13;
	 piranhaMale.growthStartTime = now;	 &#13;
	 piranhaFemale.growthStartTime = now;	 &#13;
&#13;
	 piranhaMale.sellPrice = 0;	 &#13;
	 piranhaFemale.sellPrice = 0;	 &#13;
		&#13;
	_createPiranha("EthPiranha", msg.sender, 0, newbornSize, newbornGen, newbornUnique);&#13;
  &#13;
  }&#13;
  &#13;
  function takeOwnership(uint256 _tokenId) public { //ERC721&#13;
    address newOwner = msg.sender;&#13;
    address oldOwner = piranhaIdToOwner[_tokenId];&#13;
&#13;
    require(_addressNotNull(newOwner));&#13;
    require(_approved(newOwner, _tokenId));&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
  }&#13;
&#13;
  function allPiranhasInfo(uint256 _startPiranhaId) public view returns (address[] owners, uint8[] sizes, uint8[] hungry, uint256[] prices) { //for web site view&#13;
	&#13;
	uint256 totalPiranhas = totalSupply();&#13;
	Piranha storage piranha;&#13;
	&#13;
    if (totalPiranhas == 0 || _startPiranhaId &gt;= totalPiranhas) {&#13;
        // Return an empty array&#13;
      return (new address[](0), new uint8[](0), new uint8[](0), new uint256[](0));&#13;
    }&#13;
&#13;
	&#13;
	uint256 indexTo;&#13;
	if (totalPiranhas &gt; _startPiranhaId+1000)&#13;
		indexTo = _startPiranhaId + 1000;&#13;
	else 	&#13;
		indexTo = totalPiranhas;&#13;
		&#13;
    uint256 totalResultPiranhas = indexTo - _startPiranhaId;		&#13;
		&#13;
	address[] memory owners_res = new address[](totalResultPiranhas);&#13;
	uint8[] memory size_res = new uint8[](totalResultPiranhas);&#13;
	uint8[] memory hungry_res = new uint8[](totalResultPiranhas);&#13;
	uint256[] memory prices_res = new uint256[](totalResultPiranhas);&#13;
	&#13;
	for (uint256 piranhaId = _startPiranhaId; piranhaId &lt; indexTo; piranhaId++) {&#13;
	  piranha = piranhas[piranhaId];&#13;
	  &#13;
	  owners_res[piranhaId - _startPiranhaId] = piranhaIdToOwner[piranhaId];&#13;
	  hungry_res[piranhaId - _startPiranhaId] = piranha.hungry;&#13;
	  size_res[piranhaId - _startPiranhaId] = uint8(piranha.size+(now-piranha.growthStartTime)/900);&#13;
	  prices_res[piranhaId - _startPiranhaId] = piranha.sellPrice;&#13;
	}&#13;
	&#13;
	return (owners_res, size_res, hungry_res, prices_res);&#13;
  }&#13;
  &#13;
  function totalSupply() public view returns (uint256 total) { //ERC721&#13;
    return piranhas.length;&#13;
  }&#13;
&#13;
  function transfer(address _to, uint256 _tokenId) public { //ERC721&#13;
    require(_owns(msg.sender, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
	_transfer(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public { //ERC721&#13;
    require(_owns(_from, _tokenId));&#13;
    require(_approved(_to, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(_from, _to, _tokenId);&#13;
  }&#13;
&#13;
&#13;
  /* PRIVATE FUNCTIONS */&#13;
  function _addressNotNull(address _to) private pure returns (bool) {&#13;
    return _to != address(0);&#13;
  }&#13;
&#13;
  function _approved(address _to, uint256 _tokenId) private view returns (bool) {&#13;
    return piranhaIdToApproved[_tokenId] == _to;&#13;
  }&#13;
&#13;
  function _createPiranha(string _name, address _owner, uint256 _price, uint8 _size, uint256 _gen, uint8 _unique) private {&#13;
    Piranha memory _piranha = Piranha({&#13;
      name: _name,&#13;
	  size: _size,&#13;
	  gen: _gen,&#13;
	  unique: _unique,	  &#13;
	  growthStartTime: now,&#13;
	  sellPrice: _price,&#13;
	  hungry: 0&#13;
    });&#13;
    uint256 newPiranhaId = piranhas.push(_piranha) - 1;&#13;
&#13;
    require(newPiranhaId == uint256(uint32(newPiranhaId))); //check maximum limit of tokens&#13;
&#13;
    PiranhaCreated(newPiranhaId, _name, _owner);&#13;
&#13;
    _transfer(address(0), _owner, newPiranhaId);&#13;
  }&#13;
&#13;
  function _owns(address _checkedAddr, uint256 _tokenId) private view returns (bool) {&#13;
    return _checkedAddr == piranhaIdToOwner[_tokenId];&#13;
  }&#13;
&#13;
  function _transfer(address _from, address _to, uint256 _tokenId) private {&#13;
    ownershipTokenCount[_to]++;&#13;
    piranhaIdToOwner[_tokenId] = _to;&#13;
&#13;
    // When creating new piranhas _from is 0x0, but we can't account that address.&#13;
    if (_from != address(0)) {&#13;
      ownershipTokenCount[_from]--;&#13;
      // clear any previously approved ownership exchange&#13;
      delete piranhaIdToApproved[_tokenId];&#13;
    }&#13;
&#13;
    // Emit the transfer event.&#13;
    Transfer(_from, _to, _tokenId);&#13;
  }&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}
pragma solidity ^ 0.4.19;

/**
 * @title SafeMath
 * @dev Math operations with safety checks that throw on error
 */
library SafeMath {

    /**
     * @dev Multiplies two numbers, throws on overflow.
     */
    function mul(uint256 a, uint256 b) internal pure returns(uint256) {
        if (a == 0) {
            return 0;
        }
        uint256 c = a * b;
        assert(c / a == b);
        return c;
    }

    /**
     * @dev Integer division of two numbers, truncating the quotient.
     */
    function div(uint256 a, uint256 b) internal pure returns(uint256) {
        // assert(b > 0); // Solidity automatically throws when dividing by 0
        uint256 c = a / b;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold
        return c;
    }

    /**
     * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).
     */
    function sub(uint256 a, uint256 b) internal pure returns(uint256) {
        assert(b <= a);
        return a - b;
    }

    /**
     * @dev Adds two numbers, throws on overflow.
     */
    function add(uint256 a, uint256 b) internal pure returns(uint256) {
        uint256 c = a + b;
        assert(c >= a);
        return c;
    }
}

/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<span class="__cf_email__" data-cfemail="751110011035140d1c1a180f101b5b161a">[emailÂ protected]</span>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);&#13;
    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);&#13;
&#13;
    // Required methods for ERC-721 Compatibility.&#13;
    function approve(address _to, uint256 _tokenId) external;&#13;
&#13;
    function transfer(address _to, uint256 _tokenId) external;&#13;
&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
&#13;
    function ownerOf(uint256 _tokenId) external view returns(address _owner);&#13;
&#13;
    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns(bool);&#13;
&#13;
    function totalSupply() public view returns(uint256 total);&#13;
&#13;
    function balanceOf(address _owner) public view returns(uint256 _balance);&#13;
}&#13;
&#13;
contract AnimecardAccessControl {&#13;
    /// @dev Event is fired when contract is forked.&#13;
    event ContractFork(address newContract);&#13;
&#13;
    /// - CEO: The CEO can reassign other roles, change the addresses of dependent smart contracts,&#13;
    /// and pause/unpause the AnimecardCore contract.&#13;
    /// - CFO: The CFO can withdraw funds from its auction and sale contracts.&#13;
    /// - Manager: The Animator can create regular and promo AnimeCards.&#13;
    address public ceoAddress;&#13;
    address public cfoAddress;&#13;
    address public animatorAddress;&#13;
&#13;
    /// @dev Keeps track whether the contract is paused. When that is true, most actions are blocked.&#13;
    bool public paused = false;&#13;
&#13;
    /// @dev Access-modifier for CEO-only functionality.&#13;
    modifier onlyCEO() {&#13;
        require(msg.sender == ceoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access-modifier for CFO-only functionality.&#13;
    modifier onlyCFO() {&#13;
        require(msg.sender == cfoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access-modifier for Animator-only functionality.&#13;
    modifier onlyAnimator() {&#13;
        require(msg.sender == animatorAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access-modifier for C-level-only functionality.&#13;
    modifier onlyCLevel() {&#13;
        require(&#13;
            msg.sender == animatorAddress ||&#13;
            msg.sender == ceoAddress ||&#13;
            msg.sender == cfoAddress&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// Assigns a new address to the CEO role. Only available to the current CEO.&#13;
    /// @param _newCEO The address of the new CEO&#13;
    function setCEO(address _newCEO) external onlyCEO {&#13;
        require(_newCEO != address(0));&#13;
&#13;
        ceoAddress = _newCEO;&#13;
    }&#13;
&#13;
    /// Assigns a new address to act as the CFO. Only available to the current CEO.&#13;
    /// @param _newCFO The address of the new CFO&#13;
    function setCFO(address _newCFO) external onlyCEO {&#13;
        require(_newCFO != address(0));&#13;
&#13;
        cfoAddress = _newCFO;&#13;
    }&#13;
&#13;
    /// Assigns a new address to the Animator role. Only available to the current CEO.&#13;
    /// @param _newAnimator The address of the new Animator&#13;
    function setAnimator(address _newAnimator) external onlyCEO {&#13;
        require(_newAnimator != address(0));&#13;
&#13;
        animatorAddress = _newAnimator;&#13;
    }&#13;
&#13;
    /*** Pausable functionality adapted from OpenZeppelin ***/&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS NOT paused&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS paused&#13;
    modifier whenPaused {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Called by any "C-level" role to pause the contract. Used only when&#13;
    ///  a bug or exploit is detected and we need to limit damage.&#13;
    function pause() external onlyCLevel whenNotPaused {&#13;
        paused = true;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the CEO, since&#13;
    ///  one reason we may pause the contract is when CFO or COO accounts are&#13;
    ///  compromised.&#13;
    /// @notice This is public rather than external so it can be called by&#13;
    ///  derived contracts.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        // can't unpause if contract was upgraded&#13;
        paused = false;&#13;
    }&#13;
&#13;
    /*** Destructible functionality adapted from OpenZeppelin ***/&#13;
    /**&#13;
     * @dev Transfers the current balance to the owner and terminates the contract.&#13;
     */&#13;
    function destroy() onlyCEO public {&#13;
        selfdestruct(ceoAddress);&#13;
    }&#13;
&#13;
    function destroyAndSend(address _recipient) onlyCEO public {&#13;
        selfdestruct(_recipient);&#13;
    }&#13;
}&#13;
&#13;
contract AnimecardBase is AnimecardAccessControl {&#13;
    using SafeMath&#13;
    for uint256;&#13;
&#13;
    /*** DATA TYPES ***/&#13;
&#13;
    /// The main anime card struct&#13;
    struct Animecard {&#13;
        /// Name of the character&#13;
        string characterName;&#13;
        /// Name of designer &amp; studio that created the character&#13;
        string studioName;&#13;
&#13;
        /// AWS S3-CDN URL for character image&#13;
        string characterImageUrl;&#13;
        /// IPFS hash of character details&#13;
        string characterImageHash;&#13;
        /// The timestamp from the block when this anime card was created&#13;
        uint64 creationTime;&#13;
    }&#13;
&#13;
&#13;
    /*** EVENTS ***/&#13;
    /// The Birth event is fired whenever a new anime card comes into existence.&#13;
    event Birth(address owner, uint256 tokenId, string cardName, string studio);&#13;
    /// Transfer event as defined in current draft of ERC721. Fired every time animecard&#13;
    /// ownership is assigned, including births.&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);&#13;
    /// The TokenSold event is fired whenever a token is sold.&#13;
    event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 price, address prevOwner, address owner, string cardName);&#13;
&#13;
    /*** STORAGE ***/&#13;
    /// An array containing all AnimeCards in existence. The id of each animecard&#13;
    /// is an index in this array.&#13;
    Animecard[] animecards;&#13;
&#13;
    /// @dev A mapping from anime card ids to the address that owns them.&#13;
    mapping(uint256 =&gt; address) public animecardToOwner;&#13;
&#13;
    /// @dev A mapping from owner address to count of anime cards that address owns.&#13;
    /// Used internally inside balanceOf() to resolve ownership count.&#13;
    mapping(address =&gt; uint256) public ownerAnimecardCount;&#13;
&#13;
    /// @dev A mapping from anime card ids to an address that has been approved to call&#13;
    ///  transferFrom(). Each anime card can only have 1 approved address for transfer&#13;
    ///  at any time. A 0 value means no approval is outstanding.&#13;
    mapping(uint256 =&gt; address) public animecardToApproved;&#13;
&#13;
    // @dev A mapping from anime card ids to their price.&#13;
    mapping(uint256 =&gt; uint256) public animecardToPrice;&#13;
&#13;
    // @dev Previous sale price of anime card&#13;
    mapping(uint256 =&gt; uint256) public animecardPrevPrice;&#13;
&#13;
    /// @dev Assigns ownership of a specific anime card to an address.&#13;
    function _transfer(address _from, address _to, uint256 _tokenId) internal {&#13;
        // Transfer ownership and update owner anime card counts.&#13;
        // ownerAnimecardCount[_to] = ownerAnimecardCount[_to].add(1);&#13;
        ownerAnimecardCount[_to]++;&#13;
        animecardToOwner[_tokenId] = _to;&#13;
        // When creating new tokens _from is 0x0, but we can't account that address.&#13;
        if (_from != address(0)) {&#13;
            // ownerAnimecardCount[_from] = ownerAnimecardCount[_from].sub(1);&#13;
            ownerAnimecardCount[_from]--;&#13;
            // clear any previously approved ownership exchange&#13;
            delete animecardToApproved[_tokenId];&#13;
        }&#13;
        // Fire the transfer event.&#13;
        Transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev An internal method that creates a new anime card and stores it.&#13;
    /// @param _characterName The name of the character&#13;
    /// @param _studioName The studio that created this character&#13;
    /// @param _characterImageUrl AWS S3-CDN URL for character image&#13;
    /// @param _characterImageHash IPFS hash for character image&#13;
    /// @param _price of animecard character&#13;
    /// @param _owner The initial owner of this anime card&#13;
    function _createAnimecard(&#13;
        string _characterName,&#13;
        string _studioName,&#13;
        string _characterImageUrl,&#13;
        string _characterImageHash,&#13;
        uint256 _price,&#13;
        address _owner&#13;
    )&#13;
    internal&#13;
    returns(uint) {&#13;
&#13;
        Animecard memory _animecard = Animecard({&#13;
            characterName: _characterName,&#13;
            studioName: _studioName,&#13;
            characterImageUrl: _characterImageUrl,&#13;
            characterImageHash: _characterImageHash,&#13;
            creationTime: uint64(now)&#13;
        });&#13;
        uint256 newAnimecardId = animecards.push(_animecard);&#13;
        newAnimecardId = newAnimecardId.sub(1);&#13;
&#13;
        // Fire the birth event.&#13;
        Birth(&#13;
            _owner,&#13;
            newAnimecardId,&#13;
            _animecard.characterName,&#13;
            _animecard.studioName&#13;
        );&#13;
&#13;
        // Set the price for the animecard.&#13;
        animecardToPrice[newAnimecardId] = _price;&#13;
&#13;
        // This will assign ownership, and also fire the Transfer event as per ERC-721 draft.&#13;
        _transfer(0, _owner, newAnimecardId);&#13;
&#13;
        return newAnimecardId;&#13;
&#13;
    }&#13;
}&#13;
&#13;
contract AnimecardPricing is AnimecardBase {&#13;
&#13;
    /*** CONSTANTS ***/&#13;
    // Pricing steps.&#13;
    uint256 private constant first_step_limit = 0.05 ether;&#13;
    uint256 private constant second_step_limit = 0.5 ether;&#13;
    uint256 private constant third_step_limit = 2.0 ether;&#13;
    uint256 private constant fourth_step_limit = 5.0 ether;&#13;
&#13;
&#13;
    // Cut for studio &amp; platform for each sale transaction&#13;
    uint256 public platformFee = 50; // 50%&#13;
&#13;
    /// @dev Set Studio Fee. Can only be called by the Animator address. &#13;
    function setPlatformFee(uint256 _val) external onlyAnimator {&#13;
        platformFee = _val;&#13;
    }&#13;
&#13;
    /// @dev Computes next price of token given the current sale price.&#13;
    function computeNextPrice(uint256 _salePrice)&#13;
    internal&#13;
    pure&#13;
    returns(uint256) {&#13;
        if (_salePrice &lt; first_step_limit) {&#13;
            return SafeMath.div(SafeMath.mul(_salePrice, 200), 100);&#13;
        } else if (_salePrice &lt; second_step_limit) {&#13;
            return SafeMath.div(SafeMath.mul(_salePrice, 135), 100);&#13;
        } else if (_salePrice &lt; third_step_limit) {&#13;
            return SafeMath.div(SafeMath.mul(_salePrice, 125), 100);&#13;
        } else if (_salePrice &lt; fourth_step_limit) {&#13;
            return SafeMath.div(SafeMath.mul(_salePrice, 120), 100);&#13;
        } else {&#13;
            return SafeMath.div(SafeMath.mul(_salePrice, 115), 100);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Computes the payment for the token, which is the sale price of the token&#13;
    /// minus the house's cut.&#13;
    function computePayment(&#13;
        uint256 _tokenId,&#13;
        uint256 _salePrice)&#13;
    internal&#13;
    view&#13;
    returns(uint256) {&#13;
        uint256 prevSalePrice = animecardPrevPrice[_tokenId];&#13;
&#13;
        uint256 profit = _salePrice - prevSalePrice;&#13;
&#13;
        uint256 ownerCut = SafeMath.sub(100, platformFee);&#13;
        uint256 ownerProfitShare = SafeMath.div(SafeMath.mul(profit, ownerCut), 100);&#13;
&#13;
        return prevSalePrice + ownerProfitShare;&#13;
    }&#13;
}&#13;
&#13;
contract AnimecardOwnership is AnimecardPricing, ERC721 {&#13;
    /// Name of the collection of NFTs managed by this contract, as defined in ERC721.&#13;
    string public constant NAME = "CryptoAnime";&#13;
    /// Symbol referencing the entire collection of NFTs managed in this contract, as&#13;
    /// defined in ERC721.&#13;
    string public constant SYMBOL = "ANM";&#13;
&#13;
    bytes4 public constant INTERFACE_SIGNATURE_ERC165 =&#13;
        bytes4(keccak256("supportsInterface(bytes4)"));&#13;
&#13;
    bytes4 public constant INTERFACE_SIGNATURE_ERC721 =&#13;
        bytes4(keccak256("name()")) ^&#13;
        bytes4(keccak256("symbol()")) ^&#13;
        bytes4(keccak256("totalSupply()")) ^&#13;
        bytes4(keccak256("balanceOf(address)")) ^&#13;
        bytes4(keccak256("ownerOf(uint256)")) ^&#13;
        bytes4(keccak256("approve(address,uint256)")) ^&#13;
        bytes4(keccak256("transfer(address,uint256)")) ^&#13;
        bytes4(keccak256("transferFrom(address,address,uint256)")) ^&#13;
        bytes4(keccak256("tokensOfOwner(address)")) ^&#13;
        bytes4(keccak256("tokenMetadata(uint256,string)"));&#13;
&#13;
    /*** EVENTS ***/&#13;
    /// Approval event as defined in the current draft of ERC721. Fired every time&#13;
    /// animecard approved owners is updated. When Transfer event is emitted, this &#13;
    /// also indicates that approved address is reset to none.&#13;
    event Approval(address indexed _owner, address indexed _approved, uint256 _tokenId);&#13;
&#13;
    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).&#13;
    ///  Returns true for any standardized interfaces implemented by this contract. We implement&#13;
    ///  ERC-165 (obviously!) and ERC-721.&#13;
    function supportsInterface(bytes4 _interfaceID)&#13;
    external&#13;
    view&#13;
    returns(bool) {&#13;
        return ((_interfaceID == INTERFACE_SIGNATURE_ERC165) || (_interfaceID == INTERFACE_SIGNATURE_ERC721));&#13;
    }&#13;
&#13;
    // @notice Optional for ERC-20 compliance.&#13;
    function name() external pure returns(string) {&#13;
        return NAME;&#13;
    }&#13;
&#13;
    // @notice Optional for ERC-20 compliance.&#13;
    function symbol() external pure returns(string) {&#13;
        return SYMBOL;&#13;
    }&#13;
&#13;
    /// @dev Returns the total number of Animecards currently in existence.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function totalSupply() public view returns(uint) {&#13;
        return animecards.length;&#13;
    }&#13;
&#13;
    /// @dev Returns the number of Animecards owned by a specific address.&#13;
    /// @param _owner The owner address to check.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function balanceOf(address _owner)&#13;
    public&#13;
    view&#13;
    returns(uint256 count) {&#13;
        return ownerAnimecardCount[_owner];&#13;
    }&#13;
&#13;
    /// @dev Returns the address currently assigned ownership of a given Animecard.&#13;
    /// @notice Required for ERC-721 compliance.&#13;
    function ownerOf(uint256 _tokenId)&#13;
    external&#13;
    view&#13;
    returns(address _owner) {&#13;
        _owner = animecardToOwner[_tokenId];&#13;
        require(_owner != address(0));&#13;
    }&#13;
&#13;
    /// @dev Grant another address the right to transfer a specific Anime card via&#13;
    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.&#13;
    /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
    ///  clear all approvals.&#13;
    /// @param _tokenId The ID of the Animecard that can be transferred if this call succeeds.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function approve(address _to, uint256 _tokenId)&#13;
    external&#13;
    whenNotPaused {&#13;
        // Only an owner can grant transfer approval.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Register the approval (replacing any previous approval).&#13;
        _approve(_tokenId, _to);&#13;
&#13;
        // Fire approval event upon successful approval.&#13;
        Approval(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Transfers a Animecard to another address. If transferring to a smart&#13;
    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 or else your&#13;
    /// Animecard may be lost forever.&#13;
    /// @param _to The address of the recipient, can be a user or contract.&#13;
    /// @param _tokenId The ID of the Animecard to transfer.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function transfer(address _to, uint256 _tokenId)&#13;
    external&#13;
    whenNotPaused {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any animecard (except very briefly&#13;
        // after a Anime card is created).&#13;
        require(_to != address(this));&#13;
&#13;
        // You can only transfer your own Animecard.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
        // TODO - Disallow transfer to self&#13;
&#13;
        // Reassign ownership, clear pending approvals, fire Transfer event.&#13;
        _transfer(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Transfer a Animecard owned by another address, for which the calling address&#13;
    ///  has previously been granted transfer approval by the owner.&#13;
    /// @param _from The address that owns the Animecard to be transfered.&#13;
    /// @param _to The address that should take ownership of the Animecard. Can be any&#13;
    /// address, including the caller.&#13;
    /// @param _tokenId The ID of the Animecard to be transferred.&#13;
    /// @notice Required for ERC-20 and ERC-721 compliance.&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId)&#13;
    external&#13;
    whenNotPaused {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any animecard (except very briefly&#13;
        // after an animecard is created).&#13;
        require(_to != address(this));&#13;
&#13;
        // Check for approval and valid ownership&#13;
        require(_approvedFor(msg.sender, _tokenId));&#13;
        require(_owns(_from, _tokenId));&#13;
&#13;
        // Reassign ownership (also clears pending approvals and fires Transfer event).&#13;
        _transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Returns a list of all Animecard IDs assigned to an address.&#13;
    /// @param _owner The owner whose Animecards we are interested in.&#13;
    ///  This method MUST NEVER be called by smart contract code. First, it is fairly&#13;
    ///  expensive (it walks the entire Animecard array looking for Animecard belonging&#13;
    /// to owner), but it also returns a dynamic array, which is only supported for web3&#13;
    /// calls, and not contract-to-contract calls. Thus, this method is external rather&#13;
    /// than public.&#13;
    function tokensOfOwner(address _owner)&#13;
    external&#13;
    view&#13;
    returns(uint256[] ownerTokens) {&#13;
        uint256 tokenCount = balanceOf(_owner);&#13;
&#13;
        if (tokenCount == 0) {&#13;
            // Returns an empty array&#13;
            return new uint256[](0);&#13;
        } else {&#13;
            uint256[] memory result = new uint256[](tokenCount);&#13;
            uint256 totalAnimecards = totalSupply();&#13;
            uint256 resultIndex = 0;&#13;
&#13;
            uint256 animecardId;&#13;
            for (animecardId = 0; animecardId &lt;= totalAnimecards; animecardId++) {&#13;
                if (animecardToOwner[animecardId] == _owner) {&#13;
                    result[resultIndex] = animecardId;&#13;
                    resultIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            return result;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Checks if a given address is the current owner of a particular Animecard.&#13;
    /// @param _claimant the address we are validating against.&#13;
    /// @param _tokenId Animecard id, only valid when &gt; 0&#13;
    function _owns(address _claimant, uint256 _tokenId)&#13;
    internal&#13;
    view&#13;
    returns(bool) {&#13;
        return animecardToOwner[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous&#13;
    /// approval. Setting _approved to address(0) clears all transfer approval.&#13;
    /// NOTE: _approve() does NOT send the Approval event. This is intentional because&#13;
    /// _approve() and transferFrom() are used together for putting Animecards on sale and,&#13;
    /// there is no value in spamming the log with Approval events in that case.&#13;
    function _approve(uint256 _tokenId, address _approved) internal {&#13;
        animecardToApproved[_tokenId] = _approved;&#13;
    }&#13;
&#13;
    /// @dev Checks if a given address currently has transferApproval for a particular &#13;
    /// Animecard.&#13;
    /// @param _claimant the address we are confirming Animecard is approved for.&#13;
    /// @param _tokenId Animecard id, only valid when &gt; 0&#13;
    function _approvedFor(address _claimant, uint256 _tokenId)&#13;
    internal&#13;
    view&#13;
    returns(bool) {&#13;
        return animecardToApproved[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// Safety check on _to address to prevent against an unexpected 0x0 default.&#13;
    function _addressNotNull(address _to) internal pure returns(bool) {&#13;
        return _to != address(0);&#13;
    }&#13;
&#13;
}&#13;
&#13;
contract AnimecardSale is AnimecardOwnership {&#13;
&#13;
    // Allows someone to send ether and obtain the token&#13;
    function purchase(uint256 _tokenId)&#13;
    public&#13;
    payable&#13;
    whenNotPaused {&#13;
        address newOwner = msg.sender;&#13;
        address oldOwner = animecardToOwner[_tokenId];&#13;
        uint256 salePrice = animecardToPrice[_tokenId];&#13;
&#13;
        // Require that the owner of the token is not sending to self.&#13;
        require(oldOwner != newOwner);&#13;
&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_addressNotNull(newOwner));&#13;
&#13;
        // Check that sent amount is greater than or equal to the sale price&#13;
        require(msg.value &gt;= salePrice);&#13;
&#13;
        uint256 payment = uint256(computePayment(_tokenId, salePrice));&#13;
        uint256 purchaseExcess = SafeMath.sub(msg.value, salePrice);&#13;
&#13;
        // Set next listing price.&#13;
        animecardPrevPrice[_tokenId] = animecardToPrice[_tokenId];&#13;
        animecardToPrice[_tokenId] = computeNextPrice(salePrice);&#13;
&#13;
        // Transfer the Animecard to the buyer.&#13;
        _transfer(oldOwner, newOwner, _tokenId);&#13;
&#13;
        // Pay seller of the Animecard if they are not this contract.&#13;
        if (oldOwner != address(this)) {&#13;
            oldOwner.transfer(payment);&#13;
        }&#13;
&#13;
        TokenSold(_tokenId, salePrice, animecardToPrice[_tokenId], oldOwner, newOwner, animecards[_tokenId].characterName);&#13;
&#13;
        // Reimburse the buyer of any excess paid.&#13;
        msg.sender.transfer(purchaseExcess);&#13;
    }&#13;
&#13;
    function priceOf(uint256 _tokenId)&#13;
    public&#13;
    view&#13;
    returns(uint256 price) {&#13;
        return animecardToPrice[_tokenId];&#13;
    }&#13;
&#13;
&#13;
}&#13;
&#13;
contract AnimecardMinting is AnimecardSale {&#13;
    /*** CONSTANTS ***/&#13;
    /// @dev Starting price of a regular Animecard.&#13;
    // uint128 private constant STARTING_PRICE = 0.01 ether;&#13;
&#13;
    /// @dev Creates a new Animecard&#13;
    function createAnimecard(&#13;
        string _characterName,&#13;
        string _studioName,&#13;
        string _characterImageUrl,&#13;
        string _characterImageHash,&#13;
        uint256 _price&#13;
    )&#13;
    public&#13;
    onlyAnimator&#13;
    returns(uint) {&#13;
        uint256 animecardId = _createAnimecard(&#13;
            _characterName, _studioName,&#13;
            _characterImageUrl, _characterImageHash,&#13;
            _price, address(this)&#13;
        );&#13;
&#13;
        return animecardId;&#13;
    }&#13;
}&#13;
&#13;
// Cryptoanime: Anime collectibles on blockchain&#13;
contract AnimecardCore is AnimecardMinting {&#13;
    // contract AnimecardCore is AnimecardMinting {&#13;
    // Set in case the core contract is broken and a fork is required&#13;
    address public newContractAddress;&#13;
&#13;
    function AnimecardCore() public {&#13;
        // Starts paused.&#13;
        paused = true;&#13;
&#13;
        // The creator of the contract is the initial CEO&#13;
        ceoAddress = msg.sender;&#13;
&#13;
        // The creator of the contract is also the initial Animator&#13;
        animatorAddress = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev Used to mark the smart contract as upgraded, in case there is a serious&#13;
    ///  breaking bug. This method does nothing but keep track of the new contract and&#13;
    ///  emit a message indicating that the new address is set. It's up to clients of this&#13;
    ///  contract to update to the new contract address in that case. (This contract will&#13;
    ///  be paused indefinitely if such an upgrade takes place.)&#13;
    /// @param _v2Address new address&#13;
    function setNewAddress(address _v2Address)&#13;
    external&#13;
    onlyCEO&#13;
    whenPaused {&#13;
        newContractAddress = _v2Address;&#13;
        ContractFork(_v2Address);&#13;
    }&#13;
&#13;
    /// @dev Withdraw all Ether from the contract. This includes both the studio fee&#13;
    /// and blockpunk fee on every animecard sold and any Ether sent directly to&#13;
    /// contract address.&#13;
    /// Only the CFO can withdraw the balance or specify the address to send&#13;
    /// the balance to.&#13;
    function withdrawBalance(address _to) external onlyCFO {&#13;
        // We are using this boolean method to make sure that even if one fails it will still work&#13;
        if (_to == address(0)) {&#13;
            cfoAddress.transfer(this.balance);&#13;
        } else {&#13;
            _to.transfer(this.balance);&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Returns all the relevant information about a specific animecard.&#13;
    /// @param _tokenId The tokenId of the animecard of interest.&#13;
    function getAnimecard(uint256 _tokenId)&#13;
    external&#13;
    view&#13;
    returns(&#13;
        string characterName,&#13;
        string studioName,&#13;
        string characterImageUrl,&#13;
        string characterImageHash,&#13;
        uint256 sellingPrice,&#13;
        address owner) {&#13;
        Animecard storage animecard = animecards[_tokenId];&#13;
        characterName = animecard.characterName;&#13;
        studioName = animecard.studioName;&#13;
        characterImageUrl = animecard.characterImageUrl;&#13;
        characterImageHash = animecard.characterImageHash;&#13;
        sellingPrice = animecardToPrice[_tokenId];&#13;
        owner = animecardToOwner[_tokenId];&#13;
    }&#13;
&#13;
&#13;
    /// @dev Override unpause so it requires all external contract addresses&#13;
    ///  to be set before contract can be unpaused. Also, we can't have&#13;
    ///  newContractAddress set either, because then the contract was upgraded.&#13;
    /// @notice This is public rather than external so we can call super.unpause&#13;
    ///  without using an expensive call.&#13;
    function unpause()&#13;
    public&#13;
    onlyCEO&#13;
    whenPaused {&#13;
        require(newContractAddress == address(0));&#13;
&#13;
        // Actually unpause the contract.&#13;
        super.unpause();&#13;
    }&#13;
&#13;
    /// @notice Direct donations&#13;
    function () external payable {}&#13;
}
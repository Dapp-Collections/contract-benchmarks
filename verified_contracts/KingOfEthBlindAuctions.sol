// File: contracts/GodMode.sol

/****************************************************
 *
 * Copyright 2018 BurzNest LLC. All rights reserved.
 *
 * The contents of this file are provided for review
 * and educational purposes ONLY. You MAY NOT use,
 * copy, distribute, or modify this software without
 * explicit written permission from BurzNest LLC.
 *
 ****************************************************/

pragma solidity ^0.4.24;

/// @title God Mode
/// @author Anthony Burzillo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c4a6b1b6be84a6b1b6beaaa1b7b0eaa7aba9">[email protected]</a>&gt;&#13;
/// @dev This contract provides a basic interface for God&#13;
///  in a contract as well as the ability for God to pause&#13;
///  the contract&#13;
contract GodMode {&#13;
    /// @dev Is the contract paused?&#13;
    bool public isPaused;&#13;
&#13;
    /// @dev God's address&#13;
    address public god;&#13;
&#13;
    /// @dev Only God can run this function&#13;
    modifier onlyGod()&#13;
    {&#13;
        require(god == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This function can only be run while the contract&#13;
    ///  is not paused&#13;
    modifier notPaused()&#13;
    {&#13;
        require(!isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This event is fired when the contract is paused&#13;
    event GodPaused();&#13;
&#13;
    /// @dev This event is fired when the contract is unpaused&#13;
    event GodUnpaused();&#13;
&#13;
    constructor() public&#13;
    {&#13;
        // Make the creator of the contract God&#13;
        god = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev God can change the address of God&#13;
    /// @param _newGod The new address for God&#13;
    function godChangeGod(address _newGod) public onlyGod&#13;
    {&#13;
        god = _newGod;&#13;
    }&#13;
&#13;
    /// @dev God can pause the game&#13;
    function godPause() public onlyGod&#13;
    {&#13;
        isPaused = true;&#13;
&#13;
        emit GodPaused();&#13;
    }&#13;
&#13;
    /// @dev God can unpause the game&#13;
    function godUnpause() public onlyGod&#13;
    {&#13;
        isPaused = false;&#13;
&#13;
        emit GodUnpaused();&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthAbstractInterface.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
/// @title King of Eth Abstract Interface&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d8baadaaa298baadaaa2b6bdabacf6bbb7b5">[email protected]</a>&gt;&#13;
/// @dev Abstract interface contract for titles and taxes&#13;
contract KingOfEthAbstractInterface {&#13;
    /// @dev The address of the current King&#13;
    address public king;&#13;
&#13;
    /// @dev The address of the current Wayfarer&#13;
    address public wayfarer;&#13;
&#13;
    /// @dev Anyone can pay taxes&#13;
    function payTaxes() public payable;&#13;
}&#13;
&#13;
// File: contracts/KingOfEthAuctionsAbstractInterface.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
/// @title King of Eth: Auctions Abstract Interface&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="167463646c567463646c787365623875797b">[email protected]</a>&gt;&#13;
/// @dev Abstract interface contract for auctions of houses&#13;
contract KingOfEthAuctionsAbstractInterface {&#13;
    /// @dev Determines if there is an auction at a particular location&#13;
    /// @param _x The x coordinate of the auction&#13;
    /// @param _y The y coordinate of the auction&#13;
    /// @return true if there is an existing auction&#13;
    function existingAuction(uint _x, uint _y) public view returns(bool);&#13;
}&#13;
&#13;
// File: contracts/KingOfEthBlindAuctionsReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth: Blind Auctions Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6a081f18102a081f1810040f191e44090507">[email protected]</a>&gt;&#13;
/// @dev This contract provides a reference to the blind auctions contract&#13;
contract KingOfEthBlindAuctionsReferencer is GodMode {&#13;
    /// @dev The address of the blind auctions contract&#13;
    address public blindAuctionsContract;&#13;
&#13;
    /// @dev Only the blind auctions contract can run this&#13;
    modifier onlyBlindAuctionsContract()&#13;
    {&#13;
        require(blindAuctionsContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can set a new blind auctions contract&#13;
    /// @param _blindAuctionsContract the address of the blind auctions&#13;
    ///  contract&#13;
    function godSetBlindAuctionsContract(address _blindAuctionsContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        blindAuctionsContract = _blindAuctionsContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthOpenAuctionsReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth: Open Auctions Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e68493949ca68493949c88839592c885898b">[email protected]</a>&gt;&#13;
/// @dev This contract provides a reference to the open auctions contract&#13;
contract KingOfEthOpenAuctionsReferencer is GodMode {&#13;
    /// @dev The address of the auctions contract&#13;
    address public openAuctionsContract;&#13;
&#13;
    /// @dev Only the open auctions contract can run this&#13;
    modifier onlyOpenAuctionsContract()&#13;
    {&#13;
        require(openAuctionsContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can set a new auctions contract&#13;
    function godSetOpenAuctionsContract(address _openAuctionsContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        openAuctionsContract = _openAuctionsContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthAuctionsReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
&#13;
/// @title King of Eth: Auctions Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e08295929aa08295929a8e859394ce838f8d">[email protected]</a>&gt;&#13;
/// @dev This contract provides a reference to the auctions contracts&#13;
contract KingOfEthAuctionsReferencer is&#13;
      KingOfEthBlindAuctionsReferencer&#13;
    , KingOfEthOpenAuctionsReferencer&#13;
{&#13;
    /// @dev Only an auctions contract can run this&#13;
    modifier onlyAuctionsContract()&#13;
    {&#13;
        require(blindAuctionsContract == msg.sender&#13;
             || openAuctionsContract == msg.sender);&#13;
        _;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5f3d2a2d251f3d2a2d25313a2c2b713c3032">[email protected]</a>&gt;&#13;
/// @dev Functionality to allow contracts to reference the king contract&#13;
contract KingOfEthReferencer is GodMode {&#13;
    /// @dev The address of the king contract&#13;
    address public kingOfEthContract;&#13;
&#13;
    /// @dev Only the king contract can run this&#13;
    modifier onlyKingOfEthContract()&#13;
    {&#13;
        require(kingOfEthContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can change the king contract&#13;
    /// @param _kingOfEthContract The new address&#13;
    function godSetKingOfEthContract(address _kingOfEthContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        kingOfEthContract = _kingOfEthContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthBoard.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title King of Eth: Board&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d2b0a7a0a892b0a7a0a8bcb7a1a6fcb1bdbf">[email protected]</a>&gt;&#13;
/// @dev Contract for board&#13;
contract KingOfEthBoard is&#13;
      GodMode&#13;
    , KingOfEthAuctionsReferencer&#13;
    , KingOfEthReferencer&#13;
{&#13;
    /// @dev x coordinate of the top left corner of the boundary&#13;
    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;&#13;
&#13;
    /// @dev y coordinate of the top left corner of the boundary&#13;
    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;&#13;
&#13;
    /// @dev x coordinate of the bottom right corner of the boundary&#13;
    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;&#13;
&#13;
    /// @dev y coordinate of the bottom right corner of the boundary&#13;
    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;&#13;
&#13;
    /// @dev Number used to divide the total number of house locations&#13;
    /// after any expansion to yield the number of auctions that  will be&#13;
    /// available to start for the expansion's duration&#13;
    uint public constant auctionsAvailableDivisor = 10;&#13;
&#13;
    /// @dev Amount of time the King must wait between increasing the board&#13;
    uint public constant kingTimeBetweenIncrease = 2 weeks;&#13;
&#13;
    /// @dev Amount of time the Wayfarer must wait between increasing the board&#13;
    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;&#13;
&#13;
    /// @dev Amount of time that anyone but the King or Wayfarer must wait&#13;
    ///  before increasing the board&#13;
    uint public constant plebTimeBetweenIncrease = 4 weeks;&#13;
&#13;
    /// @dev The last time the board was increased in size&#13;
    uint public lastIncreaseTime;&#13;
&#13;
    /// @dev The direction of the next increase&#13;
    uint8 public nextIncreaseDirection;&#13;
&#13;
    /// @dev The number of auctions that players may choose to start&#13;
    ///  for this expansion&#13;
    uint public auctionsRemaining;&#13;
&#13;
    constructor() public&#13;
    {&#13;
        // Game is paused as God must start it&#13;
        isPaused = true;&#13;
&#13;
        // Set the auctions remaining&#13;
        setAuctionsAvailableForBounds();&#13;
    }&#13;
&#13;
    /// @dev Fired when the board is increased in size&#13;
    event BoardSizeIncreased(&#13;
          address initiator&#13;
        , uint newBoundX1&#13;
        , uint newBoundY1&#13;
        , uint newBoundX2&#13;
        , uint newBoundY2&#13;
        , uint lastIncreaseTime&#13;
        , uint nextIncreaseDirection&#13;
        , uint auctionsRemaining&#13;
    );&#13;
&#13;
    /// @dev Only the King can run this&#13;
    modifier onlyKing()&#13;
    {&#13;
        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Only the Wayfarer can run this&#13;
    modifier onlyWayfarer()&#13;
    {&#13;
        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Set the total auctions available&#13;
    function setAuctionsAvailableForBounds() private&#13;
    {&#13;
        uint boundDiffX = boundX2 - boundX1;&#13;
        uint boundDiffY = boundY2 - boundY1;&#13;
&#13;
        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;&#13;
    }&#13;
&#13;
    /// @dev Increase the board's size making sure to keep steady at&#13;
    ///  the maximum outer bounds&#13;
    function increaseBoard() private&#13;
    {&#13;
        // The length of increase&#13;
        uint _increaseLength;&#13;
&#13;
        // If this increase direction is right&#13;
        if(0 == nextIncreaseDirection)&#13;
        {&#13;
            _increaseLength = boundX2 - boundX1;&#13;
            uint _updatedX2 = boundX2 + _increaseLength;&#13;
&#13;
            // Stay within bounds&#13;
            if(_updatedX2 &lt;= boundX2 || _updatedX2 &lt;= _increaseLength)&#13;
            {&#13;
                boundX2 = ~uint(0);&#13;
            }&#13;
            else&#13;
            {&#13;
                boundX2 = _updatedX2;&#13;
            }&#13;
        }&#13;
        // If this increase direction is down&#13;
        else if(1 == nextIncreaseDirection)&#13;
        {&#13;
            _increaseLength = boundY2 - boundY1;&#13;
            uint _updatedY2 = boundY2 + _increaseLength;&#13;
&#13;
            // Stay within bounds&#13;
            if(_updatedY2 &lt;= boundY2 || _updatedY2 &lt;= _increaseLength)&#13;
            {&#13;
                boundY2 = ~uint(0);&#13;
            }&#13;
            else&#13;
            {&#13;
                boundY2 = _updatedY2;&#13;
            }&#13;
        }&#13;
        // If this increase direction is left&#13;
        else if(2 == nextIncreaseDirection)&#13;
        {&#13;
            _increaseLength = boundX2 - boundX1;&#13;
&#13;
            // Stay within bounds&#13;
            if(boundX1 &lt;= _increaseLength)&#13;
            {&#13;
                boundX1 = 0;&#13;
            }&#13;
            else&#13;
            {&#13;
                boundX1 -= _increaseLength;&#13;
            }&#13;
        }&#13;
        // If this increase direction is up&#13;
        else if(3 == nextIncreaseDirection)&#13;
        {&#13;
            _increaseLength = boundY2 - boundY1;&#13;
&#13;
            // Stay within bounds&#13;
            if(boundY1 &lt;= _increaseLength)&#13;
            {&#13;
                boundY1 = 0;&#13;
            }&#13;
            else&#13;
            {&#13;
                boundY1 -= _increaseLength;&#13;
            }&#13;
        }&#13;
&#13;
        // The last increase time is now&#13;
        lastIncreaseTime = now;&#13;
&#13;
        // Set the next increase direction&#13;
        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;&#13;
&#13;
        // Reset the auctions available&#13;
        setAuctionsAvailableForBounds();&#13;
&#13;
        emit BoardSizeIncreased(&#13;
              msg.sender&#13;
            , boundX1&#13;
            , boundY1&#13;
            , boundX2&#13;
            , boundY2&#13;
            , now&#13;
            , nextIncreaseDirection&#13;
            , auctionsRemaining&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev God can start the game&#13;
    function godStartGame() public onlyGod&#13;
    {&#13;
        // Reset increase times&#13;
        lastIncreaseTime = now;&#13;
&#13;
        // Unpause the game&#13;
        godUnpause();&#13;
    }&#13;
&#13;
    /// @dev The auctions contracts can decrement the number&#13;
    ///  of auctions that are available to be started&#13;
    function auctionsDecrementAuctionsRemaining()&#13;
        public&#13;
        onlyAuctionsContract&#13;
    {&#13;
        auctionsRemaining -= 1;&#13;
    }&#13;
&#13;
    /// @dev The auctions contracts can increment the number&#13;
    ///  of auctions that are available to be started when&#13;
    ///  an auction ends wihout a winner&#13;
    function auctionsIncrementAuctionsRemaining()&#13;
        public&#13;
        onlyAuctionsContract&#13;
    {&#13;
        auctionsRemaining += 1;&#13;
    }&#13;
&#13;
    /// @dev The King can increase the board much faster than the plebs&#13;
    function kingIncreaseBoard()&#13;
        public&#13;
        onlyKing&#13;
    {&#13;
        // Require enough time has passed since the last increase&#13;
        require(lastIncreaseTime + kingTimeBetweenIncrease &lt; now);&#13;
&#13;
        increaseBoard();&#13;
    }&#13;
&#13;
    /// @dev The Wayfarer can increase the board faster than the plebs&#13;
    function wayfarerIncreaseBoard()&#13;
        public&#13;
        onlyWayfarer&#13;
    {&#13;
        // Require enough time has passed since the last increase&#13;
        require(lastIncreaseTime + wayfarerTimeBetweenIncrease &lt; now);&#13;
&#13;
        increaseBoard();&#13;
    }&#13;
&#13;
    /// @dev Any old pleb can increase the board&#13;
    function plebIncreaseBoard() public&#13;
    {&#13;
        // Require enough time has passed since the last increase&#13;
        require(lastIncreaseTime + plebTimeBetweenIncrease &lt; now);&#13;
&#13;
        increaseBoard();&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthBoardReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth: Board Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="442631363e042631363e2a2137306a272b29">[email protected]</a>&gt;&#13;
/// @dev Functionality to allow contracts to reference the board contract&#13;
contract KingOfEthBoardReferencer is GodMode {&#13;
    /// @dev The address of the board contract&#13;
    address public boardContract;&#13;
&#13;
    /// @dev Only the board contract can run this&#13;
    modifier onlyBoardContract()&#13;
    {&#13;
        require(boardContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can change the board contract&#13;
    /// @param _boardContract The new address&#13;
    function godSetBoardContract(address _boardContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        boardContract = _boardContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthHousesAbstractInterface.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
/// @title King of Eth: Houses Abstract Interface&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="187a6d6a62587a6d6a62767d6b6c367b7775">[email protected]</a>&gt;&#13;
/// @dev Abstract interface contract for houses&#13;
contract KingOfEthHousesAbstractInterface {&#13;
    /// @dev Get the owner of the house at some location&#13;
    /// @param _x The x coordinate of the house&#13;
    /// @param _y The y coordinate of the house&#13;
    /// @return The address of the owner&#13;
    function ownerOf(uint _x, uint _y) public view returns(address);&#13;
&#13;
    /// @dev Get the level of the house at some location&#13;
    /// @param _x The x coordinate of the house&#13;
    /// @param _y The y coordinate of the house&#13;
    /// @return The level of the house&#13;
    function level(uint _x, uint _y) public view returns(uint8);&#13;
&#13;
    /// @dev The auctions contracts can set the owner of a house after an auction&#13;
    /// @param _x The x coordinate of the house&#13;
    /// @param _y The y coordinate of the house&#13;
    /// @param _owner The new owner of the house&#13;
    function auctionsSetOwner(uint _x, uint _y, address _owner) public;&#13;
&#13;
    /// @dev The house realty contract can transfer house ownership&#13;
    /// @param _x The x coordinate of the house&#13;
    /// @param _y The y coordinate of the house&#13;
    /// @param _from The previous owner of house&#13;
    /// @param _to The new owner of house&#13;
    function houseRealtyTransferOwnership(&#13;
          uint _x&#13;
        , uint _y&#13;
        , address _from&#13;
        , address _to&#13;
    ) public;&#13;
}&#13;
&#13;
// File: contracts/KingOfEthHousesReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth: Houses Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b6d4c3c4ccf6d4c3c4ccd8d3c5c298d5d9db">[email protected]</a>&gt;&#13;
/// @dev Provides functionality to reference the houses contract&#13;
contract KingOfEthHousesReferencer is GodMode {&#13;
    /// @dev The houses contract's address&#13;
    address public housesContract;&#13;
&#13;
    /// @dev Only the houses contract can run this function&#13;
    modifier onlyHousesContract()&#13;
    {&#13;
        require(housesContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can set the realty contract&#13;
    /// @param _housesContract The new address&#13;
    function godSetHousesContract(address _housesContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        housesContract = _housesContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthBlindAuctions.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title King of Eth: Blind Auctions&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3f5d4a4d457f5d4a4d45515a4c4b115c5052">[email protected]</a>&gt;&#13;
/// @dev This contracts provides the functionality for blind&#13;
///  for houses auctions&#13;
contract KingOfEthBlindAuctions is&#13;
      GodMode&#13;
    , KingOfEthReferencer&#13;
    , KingOfEthBoardReferencer&#13;
    , KingOfEthHousesReferencer&#13;
    , KingOfEthOpenAuctionsReferencer&#13;
{&#13;
    /// @dev A blinded bid&#13;
    struct Bid {&#13;
        /// @dev The hash value of the blinded bid&#13;
        bytes32 blindedBid;&#13;
&#13;
        /// @dev The deposit that was made with the bid&#13;
        uint deposit;&#13;
    }&#13;
&#13;
    /// @dev Information about a particular auction&#13;
    struct AuctionInfo {&#13;
        /// @dev The auction's x coordinate&#13;
        uint x;&#13;
&#13;
        /// @dev The auction's y coordinate&#13;
        uint y;&#13;
&#13;
        /// @dev The auctions's starting time&#13;
        uint startTime;&#13;
&#13;
        /// @dev The blinded bids that each address made on the auction&#13;
        mapping (address =&gt; Bid[]) bids;&#13;
&#13;
        /// @dev The total amount of unrevealed deposits for the auction&#13;
        uint unrevealedAmount;&#13;
&#13;
        /// @dev The address of placer of the top revealed bid&#13;
        address topBidder;&#13;
&#13;
        /// @dev The value of the top revealed bid&#13;
        uint topBid;&#13;
&#13;
        /// @dev Has the auction been closed?&#13;
        bool closed;&#13;
    }&#13;
&#13;
    /// @dev The span of time that players may bid on an auction&#13;
    uint public constant bidSpan = 10 minutes;&#13;
&#13;
    /// @dev The span of time that players may reveal bids (after&#13;
    ///  the bid span)&#13;
    uint public constant revealSpan = 10 minutes;&#13;
&#13;
    /// @dev The id that will be used for the next auction.&#13;
    ///  Note this is set to one so that checking a house without&#13;
    ///  an auction id does not resolve to an auction.&#13;
    ///  The contract will have to be replaced if all the ids are&#13;
    ///  used.&#13;
    uint public nextAuctionId = 1;&#13;
&#13;
    /// @dev A mapping from an x, y coordinate to the id of a corresponding auction&#13;
    mapping (uint =&gt; mapping (uint =&gt; uint)) auctionIds;&#13;
&#13;
    /// @dev A mapping from the id of an auction to the info about the auction&#13;
    mapping (uint =&gt; AuctionInfo) auctionInfo;&#13;
&#13;
    /// @param _kingOfEthContract The address for the king contract&#13;
    /// @param _boardContract The address for the board contract&#13;
    constructor(&#13;
          address _kingOfEthContract&#13;
        , address _boardContract&#13;
    )&#13;
        public&#13;
    {&#13;
        kingOfEthContract = _kingOfEthContract;&#13;
        boardContract     = _boardContract;&#13;
&#13;
        // Auctions are not allowed before God has begun the game&#13;
        isPaused = true;&#13;
    }&#13;
&#13;
    /// @dev Fired when a new auction is started&#13;
    event BlindAuctionStarted(&#13;
          uint id&#13;
        , uint x&#13;
        , uint y&#13;
        , address starter&#13;
        , uint startTime&#13;
    );&#13;
&#13;
    /// @dev Fired when a player places a new bid&#13;
    event BlindBidPlaced(&#13;
          uint id&#13;
        , address bidder&#13;
        , uint maxAmount&#13;
    );&#13;
&#13;
    /// @dev Fired when a player reveals some bids&#13;
    event BlindBidsRevealed(&#13;
          uint id&#13;
        , address revealer&#13;
        , uint topBid&#13;
    );&#13;
&#13;
    /// @dev Fired when a player closes an auction&#13;
    event BlindAuctionClosed(&#13;
          uint id&#13;
        , uint x&#13;
        , uint y&#13;
        , address newOwner&#13;
        , uint amount&#13;
    );&#13;
&#13;
    /// @dev Create the hash of a blinded bid using keccak256&#13;
    /// @param _bid The true bid amount&#13;
    /// @param _isFake Is the bid fake?&#13;
    /// @param _secret The secret seed&#13;
    function blindedBid(uint _bid, bool _isFake, bytes32 _secret)&#13;
        public&#13;
        pure&#13;
        returns(bytes32)&#13;
    {&#13;
        return keccak256(abi.encodePacked(_bid, _isFake, _secret));&#13;
    }&#13;
&#13;
    /// @dev Determines if there is an auction at a particular location&#13;
    /// @param _x The x coordinate of the auction&#13;
    /// @param _y The y coordinate of the auction&#13;
    /// @return true if there is an existing auction&#13;
    function existingAuction(uint _x, uint _y) public view returns(bool)&#13;
    {&#13;
        return 0 != auctionInfo[auctionIds[_x][_y]].startTime;&#13;
    }&#13;
&#13;
    /// @dev Create an auction at a particular location&#13;
    /// @param _x The x coordinate of the auction&#13;
    /// @param _y The y coordinate of the auction&#13;
    function createAuction(uint _x, uint _y) public notPaused&#13;
    {&#13;
        // Require that there is not already a started auction&#13;
        // at that location&#13;
        require(0 == auctionInfo[auctionIds[_x][_y]].startTime);&#13;
&#13;
        // Require that there is not currently an open auction at&#13;
        // the location&#13;
        require(!KingOfEthAuctionsAbstractInterface(openAuctionsContract).existingAuction(_x, _y));&#13;
&#13;
        KingOfEthBoard _board = KingOfEthBoard(boardContract);&#13;
&#13;
        // Require that there is at least one available auction remaining&#13;
        require(0 &lt; _board.auctionsRemaining());&#13;
&#13;
        // Require that the auction is within the current bounds of the board&#13;
        require(_board.boundX1() &lt; _x);&#13;
        require(_board.boundY1() &lt; _y);&#13;
        require(_board.boundX2() &gt; _x);&#13;
        require(_board.boundY2() &gt; _y);&#13;
&#13;
        // Require that nobody current owns the house&#13;
        require(0x0 == KingOfEthHousesAbstractInterface(housesContract).ownerOf(_x, _y));&#13;
&#13;
        // Use up an available auction&#13;
        _board.auctionsDecrementAuctionsRemaining();&#13;
&#13;
        // Claim the next auction id&#13;
        uint _id = nextAuctionId++;&#13;
&#13;
        // Record the id of the auction&#13;
        auctionIds[_x][_y] = _id;&#13;
&#13;
        AuctionInfo storage _auctionInfo = auctionInfo[_id];&#13;
&#13;
        // Setup the starting data for the auction&#13;
        _auctionInfo.x         = _x;&#13;
        _auctionInfo.y         = _y;&#13;
        _auctionInfo.startTime = now;&#13;
&#13;
        emit BlindAuctionStarted(&#13;
              _id&#13;
            , _x&#13;
            , _y&#13;
            , msg.sender&#13;
            , now&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Place a bid on an auction. This function accepts the&#13;
    ///  deposit as msg.value&#13;
    /// @param _id The id of the auction to bid on&#13;
    /// @param _blindedBid The hash of the blinded bid&#13;
    function placeBid(uint _id, bytes32 _blindedBid)&#13;
        public&#13;
        payable&#13;
        notPaused&#13;
    {&#13;
        // Retrieve the info about the auction&#13;
        AuctionInfo storage _auctionInfo = auctionInfo[_id];&#13;
&#13;
        // Require that an auction exists&#13;
        require(0 != _auctionInfo.startTime);&#13;
&#13;
        // Require that it is still during the bid span&#13;
        require(_auctionInfo.startTime + bidSpan &gt; now);&#13;
&#13;
        // Add the amount deposited to the unrevealed amount&#13;
        // for the auction&#13;
        _auctionInfo.unrevealedAmount += msg.value;&#13;
&#13;
        // Add the bid to the auctions bids for that player&#13;
        _auctionInfo.bids[msg.sender].push(Bid(&#13;
              _blindedBid&#13;
            , msg.value&#13;
        ));&#13;
&#13;
        emit BlindBidPlaced(_id, msg.sender, msg.value);&#13;
    }&#13;
&#13;
    /// @dev Reveal all of a player's bids&#13;
    /// @param _id The id of the auction that the bids were placed on&#13;
    /// @param _values The true values of the bids of each blinded bid&#13;
    /// @param _isFakes Whether each individual blinded bid was fake&#13;
    /// @param _secrets The secret seeds of each blinded bid&#13;
    function revealBids(&#13;
          uint _id&#13;
        , uint[] _values&#13;
        , bool[] _isFakes&#13;
        , bytes32[] _secrets&#13;
    )&#13;
        public&#13;
        notPaused&#13;
    {&#13;
        // Lookup the information about the auction&#13;
        AuctionInfo storage _auctionInfo = auctionInfo[_id];&#13;
&#13;
        uint _biddersBidCount = _auctionInfo.bids[msg.sender].length;&#13;
&#13;
        // Require that the user has submitted reveals for all of his bids&#13;
        require(_biddersBidCount == _values.length);&#13;
        require(_biddersBidCount == _isFakes.length);&#13;
        require(_biddersBidCount == _secrets.length);&#13;
&#13;
        // Require that it's after the bid span&#13;
        require(_auctionInfo.startTime + bidSpan &lt; now);&#13;
&#13;
        // Require it's before the end of the reveal span&#13;
        require(_auctionInfo.startTime + bidSpan + revealSpan &gt; now);&#13;
&#13;
        // The refund the player will receive&#13;
        uint _refund;&#13;
&#13;
        // The maximum bid made by the player&#13;
        uint _maxBid;&#13;
&#13;
        // For each of the user's bids...&#13;
        for(uint _i = 0; _i &lt; _biddersBidCount; ++_i)&#13;
        {&#13;
            Bid storage _bid = _auctionInfo.bids[msg.sender][_i];&#13;
            uint _value      = _values[_i];&#13;
&#13;
            // If the blinded bid's hash does not equal the one the user&#13;
            // submitted then the revealed values are incorrect incorrect&#13;
            // and skipped. Note that the  user will not receive a refund&#13;
            // for this individual reveal in this case&#13;
            if(_bid.blindedBid != keccak256(abi.encodePacked(_value, _isFakes[_i], _secrets[_i])))&#13;
            {&#13;
                continue;&#13;
            }&#13;
&#13;
            // Add the successfully revealed bid deposit to the refund&#13;
            _refund += _bid.deposit;&#13;
&#13;
            // If the bid was not fake, and it is greater than the current&#13;
            // maximum bid, then it is the player's new maximum bid&#13;
            if(!_isFakes[_i] &amp;&amp; _bid.deposit &gt;= _value &amp;&amp; _maxBid &lt; _value)&#13;
            {&#13;
                _maxBid = _value;&#13;
            }&#13;
&#13;
            // Ensure that the succesfully revealed bid cannot be re-revealed&#13;
            _bid.blindedBid = bytes32(0);&#13;
        }&#13;
&#13;
        // Reduce the unrevealed amount for the auction by the refund amount&#13;
        _auctionInfo.unrevealedAmount -= _refund;&#13;
&#13;
        // If the maximum bid is not 0&#13;
        if(0 != _maxBid)&#13;
        {&#13;
            // If the top bid is currently 0, i.e. this is the first&#13;
            // player to reveal non-zero bids&#13;
            if(0 == _auctionInfo.topBid)&#13;
            {&#13;
                // Don't refund the player their max bid yet&#13;
                _refund -= _maxBid;&#13;
&#13;
                // The player is the current winner&#13;
                _auctionInfo.topBidder = msg.sender;&#13;
                _auctionInfo.topBid    = _maxBid;&#13;
            }&#13;
            // If the user has made a higher bid than the current winner&#13;
            else if(_auctionInfo.topBid &lt; _maxBid)&#13;
            {&#13;
                // Refund the previous winner their bid&#13;
                _auctionInfo.topBidder.transfer(_auctionInfo.topBid);&#13;
&#13;
                // Don't refund the player their max bid yet&#13;
                _refund -= _maxBid;&#13;
&#13;
                // The player is the current winner&#13;
                _auctionInfo.topBidder = msg.sender;&#13;
                _auctionInfo.topBid    = _maxBid;&#13;
            }&#13;
        }&#13;
&#13;
        // Send the player his refund&#13;
        msg.sender.transfer(_refund);&#13;
&#13;
        emit BlindBidsRevealed(_id, msg.sender, _maxBid);&#13;
    }&#13;
&#13;
    /// @dev Close the auction and claim its unrevealed&#13;
    ///  amount as taxes&#13;
    /// @param _id The id of the auction to be closed&#13;
    function closeAuction(uint _id) public notPaused&#13;
    {&#13;
        // Lookup the auction's info&#13;
        AuctionInfo storage _auctionInfo = auctionInfo[_id];&#13;
&#13;
        // Require that an auction exists&#13;
        require(0 != _auctionInfo.startTime);&#13;
&#13;
        // Require that the auction hasn't already been closed&#13;
        require(!_auctionInfo.closed);&#13;
&#13;
        // Require that it is after the reveal span&#13;
        require(_auctionInfo.startTime + bidSpan + revealSpan &lt; now);&#13;
&#13;
        // Set the auction to closed&#13;
        _auctionInfo.closed = true;&#13;
&#13;
        // If nobody won the auction&#13;
        if(0x0 == _auctionInfo.topBidder)&#13;
        {&#13;
            // Mark that there is no current auction for this location&#13;
            _auctionInfo.startTime = 0;&#13;
&#13;
            // Allow another auction to be created&#13;
            KingOfEthBoard(boardContract).auctionsIncrementAuctionsRemaining();&#13;
&#13;
            // Pay the unrevelealed amount as taxes&#13;
            KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(_auctionInfo.unrevealedAmount)();&#13;
        }&#13;
        // If a player won the auction&#13;
        else&#13;
        {&#13;
            // Set the auction's winner as the owner of the house&#13;
            KingOfEthHousesAbstractInterface(housesContract).auctionsSetOwner(&#13;
                  _auctionInfo.x&#13;
                , _auctionInfo.y&#13;
                , _auctionInfo.topBidder&#13;
            );&#13;
&#13;
            // The amount payed in taxes is the unrevealed amount plus&#13;
            // the winning bid&#13;
            uint _amount = _auctionInfo.unrevealedAmount + _auctionInfo.topBid;&#13;
&#13;
            // Pay the taxes&#13;
            KingOfEthAbstractInterface(kingOfEthContract).payTaxes.value(_amount)();&#13;
        }&#13;
&#13;
        emit BlindAuctionClosed(&#13;
              _id&#13;
            , _auctionInfo.x&#13;
            , _auctionInfo.y&#13;
            , _auctionInfo.topBidder&#13;
            , _auctionInfo.topBid&#13;
        );&#13;
    }&#13;
}
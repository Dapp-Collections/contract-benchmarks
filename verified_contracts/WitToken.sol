pragma solidity 0.4.24;
  
//@title WitToken
//@author(<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="305c455f4945515e4102030370575d51595c1e535f5d">[email protected]</a>) &#13;
//@dev 该合约参考自openzeppelin的erc20实现&#13;
//1.使用openzeppelin的SafeMath库防止运算溢出&#13;
//2.使用openzeppelin的Ownable,Roles,RBAC来做权限控制,自定义了ceo,coo,cro等角色  &#13;
//3.ERC20扩展了ERC20Basic，实现了授权转移&#13;
//4.BasicToken,StandardToken,PausableToken均是erc20的具体实现&#13;
//5.BlackListToken加入黑名单方法&#13;
//6.TwoPhaseToken可以发行和赎回资产,并采用经办复核的二阶段提交&#13;
//7.UpgradedStandardToken参考自TetherUSD合约,可以在另一个合约升级erc20的方法&#13;
//8.可以设置交易的手续费率&#13;
&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
   constructor() public {&#13;
      owner = msg.sender;&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, newOwner);&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
  /**&#13;
 * @title Roles&#13;
 * @author Francisco Giordano (@frangio)&#13;
 * @dev Library for managing addresses assigned to a Role.&#13;
 *      See RBAC.sol for example usage.&#13;
 */&#13;
library Roles {&#13;
  struct Role {&#13;
    mapping (address =&gt; bool) bearer;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev give an address access to this role&#13;
   */&#13;
  function add(Role storage role, address addr) internal {&#13;
    role.bearer[addr] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove an address' access to this role&#13;
   */&#13;
  function remove(Role storage role, address addr) internal {&#13;
    role.bearer[addr] = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev check if an address has this role&#13;
   * // reverts&#13;
   */&#13;
  function check(Role storage role, address addr) view internal {&#13;
    require(has(role, addr));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev check if an address has this role&#13;
   * @return bool&#13;
   */&#13;
  function has(Role storage role, address addr) view internal returns (bool) {&#13;
    return role.bearer[addr];&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title RBAC (Role-Based Access Control)&#13;
 * @author Matt Condon (@Shrugs)&#13;
 * @dev Stores and provides setters and getters for roles and addresses.&#13;
 *      Supports unlimited numbers of roles and addresses.&#13;
 *      See //contracts/mocks/RBACMock.sol for an example of usage.&#13;
 * This RBAC method uses strings to key roles. It may be beneficial&#13;
 *  for you to write your own implementation of this interface using Enums or similar.&#13;
 * It's also recommended that you define constants in the contract, like ROLE_ADMIN below,&#13;
 *  to avoid typos.&#13;
 */&#13;
contract RBAC is Ownable {&#13;
  using Roles for Roles.Role;&#13;
&#13;
  mapping (string =&gt; Roles.Role) private roles;&#13;
&#13;
  event RoleAdded(address addr, string roleName);&#13;
  event RoleRemoved(address addr, string roleName);&#13;
&#13;
  /**&#13;
   * A constant role name for indicating admins.&#13;
   */&#13;
  string public constant ROLE_CEO = "ceo";&#13;
  string public constant ROLE_COO = "coo";//运营&#13;
  string public constant ROLE_CRO = "cro";//风控&#13;
  string public constant ROLE_MANAGER = "manager";//经办员&#13;
  string public constant ROLE_REVIEWER = "reviewer";//审核员&#13;
  &#13;
  /**&#13;
   * @dev constructor. Sets msg.sender as ceo by default&#13;
   */&#13;
  constructor() public{&#13;
    addRole(msg.sender, ROLE_CEO);&#13;
  }&#13;
  &#13;
  /**&#13;
   * @dev reverts if addr does not have role&#13;
   * @param addr address&#13;
   * @param roleName the name of the role&#13;
   * // reverts&#13;
   */&#13;
  function checkRole(address addr, string roleName) view internal {&#13;
    roles[roleName].check(addr);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev determine if addr has role&#13;
   * @param addr address&#13;
   * @param roleName the name of the role&#13;
   * @return bool&#13;
   */&#13;
  function hasRole(address addr, string roleName) view public returns (bool) {&#13;
    return roles[roleName].has(addr);&#13;
  }&#13;
&#13;
  function ownerAddCeo(address addr) onlyOwner public {&#13;
    addRole(addr, ROLE_CEO);&#13;
  }&#13;
  &#13;
  function ownerRemoveCeo(address addr) onlyOwner public{&#13;
    removeRole(addr, ROLE_CEO);&#13;
  }&#13;
&#13;
  function ceoAddCoo(address addr) onlyCEO public {&#13;
    addRole(addr, ROLE_COO);&#13;
  }&#13;
  &#13;
  function ceoRemoveCoo(address addr) onlyCEO public{&#13;
    removeRole(addr, ROLE_COO);&#13;
  }&#13;
  &#13;
  function cooAddManager(address addr) onlyCOO public {&#13;
    addRole(addr, ROLE_MANAGER);&#13;
  }&#13;
  &#13;
  function cooRemoveManager(address addr) onlyCOO public {&#13;
    removeRole(addr, ROLE_MANAGER);&#13;
  }&#13;
  &#13;
  function cooAddReviewer(address addr) onlyCOO public {&#13;
    addRole(addr, ROLE_REVIEWER);&#13;
  }&#13;
  &#13;
  function cooRemoveReviewer(address addr) onlyCOO public {&#13;
    removeRole(addr, ROLE_REVIEWER);&#13;
  }&#13;
  &#13;
  function cooAddCro(address addr) onlyCOO public {&#13;
    addRole(addr, ROLE_CRO);&#13;
  }&#13;
  &#13;
  function cooRemoveCro(address addr) onlyCOO public {&#13;
    removeRole(addr, ROLE_CRO);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev add a role to an address&#13;
   * @param addr address&#13;
   * @param roleName the name of the role&#13;
   */&#13;
  function addRole(address addr, string roleName) internal {&#13;
    roles[roleName].add(addr);&#13;
    emit RoleAdded(addr, roleName);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove a role from an address&#13;
   * @param addr address&#13;
   * @param roleName the name of the role&#13;
   */&#13;
  function removeRole(address addr, string roleName) internal {&#13;
    roles[roleName].remove(addr);&#13;
    emit RoleRemoved(addr, roleName);&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @dev modifier to scope access to ceo&#13;
   * // reverts&#13;
   */&#13;
  modifier onlyCEO() {&#13;
    checkRole(msg.sender, ROLE_CEO);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev modifier to scope access to coo&#13;
   * // reverts&#13;
   */&#13;
  modifier onlyCOO() {&#13;
    checkRole(msg.sender, ROLE_COO);&#13;
    _;&#13;
  }&#13;
  &#13;
  /**&#13;
   * @dev modifier to scope access to cro&#13;
   * // reverts&#13;
   */&#13;
  modifier onlyCRO() {&#13;
    checkRole(msg.sender, ROLE_CRO);&#13;
    _;&#13;
  }&#13;
  &#13;
  /**&#13;
   * @dev modifier to scope access to manager&#13;
   * // reverts&#13;
   */&#13;
  modifier onlyMANAGER() {&#13;
    checkRole(msg.sender, ROLE_MANAGER);&#13;
    _;&#13;
  }&#13;
  &#13;
  /**&#13;
   * @dev modifier to scope access to reviewer&#13;
   * // reverts&#13;
   */&#13;
  modifier onlyREVIEWER() {&#13;
    checkRole(msg.sender, ROLE_REVIEWER);&#13;
    _;&#13;
  }&#13;
&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
/**&#13;
 * &#13;
 * @title ERC20Basic&#13;
 * @dev Simpler version of ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/179&#13;
 */&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender) public view returns (uint256);&#13;
  function transferFrom(address from, address to, uint256 value) public returns (bool);&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Basic token&#13;
 * @dev Basic version of StandardToken, with no allowances.&#13;
 */&#13;
contract BasicToken is ERC20Basic, RBAC {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  uint256 totalSupply_;&#13;
  &#13;
  uint256 public basisPointsRate;//手续费率 &#13;
  uint256 public maximumFee;//最大手续费 &#13;
  address public assetOwner;//收取的手续费和增发的资产都到这个地址上, 赎回资产时会从这个地址销毁资产 &#13;
&#13;
  /**&#13;
  * @dev total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return totalSupply_;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[msg.sender]);&#13;
&#13;
    uint256 fee = (_value.mul(basisPointsRate)).div(10000);&#13;
    if (fee &gt; maximumFee) {&#13;
        fee = maximumFee;&#13;
    }&#13;
    uint256 sendAmount = _value.sub(fee);&#13;
    &#13;
    // SafeMath.sub will throw if there is not enough balance.&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(sendAmount);&#13;
    if (fee &gt; 0) {&#13;
        balances[assetOwner] = balances[assetOwner].add(fee);&#13;
        emit Transfer(msg.sender, assetOwner, fee);&#13;
    }&#13;
    &#13;
    emit Transfer(msg.sender, _to, sendAmount);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title Standard ERC20 token&#13;
 *&#13;
 * @dev Implementation of the basic standard token.&#13;
 * @dev https://github.com/ethereum/EIPs/issues/20&#13;
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol&#13;
 */&#13;
contract StandardToken is ERC20, BasicToken  {&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[_from]);&#13;
    require(_value &lt;= allowed[_from][msg.sender]);&#13;
&#13;
    uint256 fee = (_value.mul(basisPointsRate)).div(10000);&#13;
        if (fee &gt; maximumFee) {&#13;
            fee = maximumFee;&#13;
        }&#13;
    uint256 sendAmount = _value.sub(fee);&#13;
    &#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(sendAmount);&#13;
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
    if (fee &gt; 0) {&#13;
            balances[assetOwner] = balances[assetOwner].add(fee);&#13;
            emit Transfer(_from, assetOwner, fee);&#13;
        }&#13;
    emit Transfer(_from, _to, sendAmount);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   *&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address _spender, uint256 _value) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = _value;&#13;
    emit Approval(msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(address _owner, address _spender) public view returns (uint256) {&#13;
    return allowed[_owner][_spender];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {&#13;
    uint oldValue = allowed[msg.sender][_spender];&#13;
    if (_subtractedValue &gt; oldValue) {&#13;
      allowed[msg.sender][_spender] = 0;&#13;
    } else {&#13;
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);&#13;
    }&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is RBAC {&#13;
  event Pause();&#13;
  event Unpause();&#13;
&#13;
  bool public paused = false;&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is not paused.&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is paused.&#13;
   */&#13;
  modifier whenPaused() {&#13;
    require(paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the ceo to pause, triggers stopped state&#13;
   */&#13;
  function pause() onlyCEO whenNotPaused public {&#13;
    paused = true;&#13;
    emit Pause();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the ceo to unpause, returns to normal state&#13;
   */&#13;
  function unpause() onlyCEO whenPaused public {&#13;
    paused = false;&#13;
    emit Unpause();&#13;
  }&#13;
}&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Pausable token&#13;
 * @dev StandardToken modified with pausable transfers.&#13;
 **/&#13;
contract PausableToken is StandardToken, Pausable {&#13;
&#13;
  function transfer(address _to, uint256 _value) public whenNotPaused returns (bool) {&#13;
    return super.transfer(_to, _value);&#13;
  }&#13;
&#13;
  function transferFrom(address _from, address _to, uint256 _value) public whenNotPaused returns (bool) {&#13;
    return super.transferFrom(_from, _to, _value);&#13;
  }&#13;
&#13;
  function approve(address _spender, uint256 _value) public whenNotPaused returns (bool) {&#13;
    return super.approve(_spender, _value);&#13;
  }&#13;
&#13;
  function increaseApproval(address _spender, uint _addedValue) public whenNotPaused returns (bool success) {&#13;
    return super.increaseApproval(_spender, _addedValue);&#13;
  }&#13;
&#13;
  function decreaseApproval(address _spender, uint _subtractedValue) public whenNotPaused returns (bool success) {&#13;
    return super.decreaseApproval(_spender, _subtractedValue);&#13;
  }&#13;
}&#13;
&#13;
&#13;
contract BlackListToken is PausableToken  {&#13;
&#13;
  &#13;
    function getBlackListStatus(address _maker) external view returns (bool) {&#13;
        return isBlackListed[_maker];&#13;
    }&#13;
&#13;
    mapping (address =&gt; bool) public isBlackListed;&#13;
    &#13;
    function addBlackList (address _evilUser) public onlyCRO {&#13;
        isBlackListed[_evilUser] = true;&#13;
        emit AddedBlackList(_evilUser);&#13;
    }&#13;
&#13;
    function removeBlackList (address _clearedUser) public onlyCRO {&#13;
        isBlackListed[_clearedUser] = false;&#13;
        emit RemovedBlackList(_clearedUser);&#13;
    }&#13;
&#13;
    function destroyBlackFunds (address _blackListedUser) public onlyCEO {&#13;
        require(isBlackListed[_blackListedUser]);&#13;
        uint dirtyFunds = balanceOf(_blackListedUser);&#13;
        balances[_blackListedUser] = 0;&#13;
        totalSupply_ = totalSupply_.sub(dirtyFunds);&#13;
        emit DestroyedBlackFunds(_blackListedUser, dirtyFunds);&#13;
    }&#13;
&#13;
    event DestroyedBlackFunds(address _blackListedUser, uint _balance);&#13;
&#13;
    event AddedBlackList(address _user);&#13;
&#13;
    event RemovedBlackList(address _user);&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/**&#13;
* 增发和赎回token由经办人和复核人配合完成&#13;
* 1.由经办人角色先执行submitIssue或submitRedeem;&#13;
* 2.复核人角色再来执行comfirmIsses或comfirmRedeem;&#13;
* 3.两者提交的参数一致，则增发和赎回才能成功&#13;
* 4.经办人提交数据后，复核人执行成功后，需要经办人再次提交才能再次执行&#13;
**/&#13;
contract TwoPhaseToken is BlackListToken{&#13;
    &#13;
    //保存经办人提交的参数&#13;
    struct MethodParam {&#13;
        string method; //方法名&#13;
        uint value;  //增发或者赎回的数量&#13;
        bool state;  //true表示经办人有提交数据,复核人执行成功后变为false&#13;
    }&#13;
    &#13;
    mapping (string =&gt; MethodParam) params;&#13;
    &#13;
    //方法名常量 &#13;
    string public constant ISSUE_METHOD = "issue";&#13;
    string public constant REDEEM_METHOD = "redeem";&#13;
    &#13;
    &#13;
    //经办人提交增发数量&#13;
    function submitIssue(uint _value) public onlyMANAGER {&#13;
        params[ISSUE_METHOD] = MethodParam(ISSUE_METHOD, _value, true);&#13;
        emit SubmitIsses(msg.sender,_value);&#13;
    }&#13;
    &#13;
    //复核人第二次确认增发数量并执行&#13;
    function comfirmIsses(uint _value) public onlyREVIEWER {&#13;
       &#13;
        require(params[ISSUE_METHOD].value == _value);&#13;
        require(params[ISSUE_METHOD].state == true);&#13;
        &#13;
        balances[assetOwner]=balances[assetOwner].add(_value);&#13;
        totalSupply_ = totalSupply_.add(_value);&#13;
        params[ISSUE_METHOD].state=false; &#13;
        emit ComfirmIsses(msg.sender,_value);&#13;
    }&#13;
    &#13;
    //经办人提交赎回数量&#13;
    function submitRedeem(uint _value) public onlyMANAGER {&#13;
        params[REDEEM_METHOD] = MethodParam(REDEEM_METHOD, _value, true);&#13;
         emit SubmitRedeem(msg.sender,_value);&#13;
    }&#13;
    &#13;
    //复核人第二次确认赎回数量并执行&#13;
    function comfirmRedeem(uint _value) public onlyREVIEWER {&#13;
       &#13;
       require(params[REDEEM_METHOD].value == _value);&#13;
       require(params[REDEEM_METHOD].state == true);&#13;
       &#13;
       balances[assetOwner]=balances[assetOwner].sub(_value);&#13;
       totalSupply_ = totalSupply_.sub(_value);&#13;
       params[REDEEM_METHOD].state=false;&#13;
       emit ComfirmIsses(msg.sender,_value);&#13;
    }&#13;
    &#13;
    //根据方法名，查看经办人提交的参数&#13;
    function getMethodValue(string _method) public view returns(uint){&#13;
        return params[_method].value;&#13;
    }&#13;
    &#13;
    //根据方法名，查看经办人是否有提交数据&#13;
    function getMethodState(string _method) public view returns(bool) {&#13;
      return params[_method].state;&#13;
    }&#13;
   &#13;
     event SubmitRedeem(address submit, uint _value);&#13;
     event ComfirmRedeem(address comfirm, uint _value);&#13;
     event SubmitIsses(address submit, uint _value);&#13;
     event ComfirmIsses(address comfirm, uint _value);&#13;
&#13;
    &#13;
}&#13;
&#13;
&#13;
&#13;
contract UpgradedStandardToken {&#13;
    // those methods are called by the legacy contract&#13;
    function totalSupplyByLegacy() public view returns (uint256);&#13;
    function balanceOfByLegacy(address who) public view returns (uint256);&#13;
    function transferByLegacy(address origSender, address to, uint256 value) public returns (bool);&#13;
    function allowanceByLegacy(address owner, address spender) public view returns (uint256);&#13;
    function transferFromByLegacy(address origSender, address from, address to, uint256 value) public returns (bool);&#13;
    function approveByLegacy(address origSender, address spender, uint256 value) public returns (bool);&#13;
    function increaseApprovalByLegacy(address origSender, address spender, uint addedValue) public returns (bool);&#13;
    function decreaseApprovalByLegacy(address origSende, address spender, uint subtractedValue) public returns (bool);&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
contract WitToken is TwoPhaseToken {&#13;
    string  public  constant name = "Wealth in Tokens";&#13;
    string  public  constant symbol = "WIT";&#13;
    uint8   public  constant decimals = 18;&#13;
    address public upgradedAddress;&#13;
    bool public deprecated;&#13;
&#13;
    modifier validDestination( address to ) {&#13;
        require(to != address(0x0));&#13;
        require(to != address(this));&#13;
        _;&#13;
    }&#13;
&#13;
    constructor ( uint _totalTokenAmount ) public {&#13;
        basisPointsRate = 0;&#13;
        maximumFee = 0;&#13;
        totalSupply_ = _totalTokenAmount;&#13;
        balances[msg.sender] = _totalTokenAmount;&#13;
        deprecated = false;&#13;
        assetOwner = msg.sender;&#13;
        emit Transfer(address(0x0), msg.sender, _totalTokenAmount);&#13;
    }&#13;
    &#13;
    &#13;
    &#13;
     // Forward ERC20 methods to upgraded contract if this one is deprecated&#13;
     function totalSupply() public view returns (uint256) {&#13;
         if (deprecated) {&#13;
            return UpgradedStandardToken(upgradedAddress).totalSupplyByLegacy();&#13;
        } else {&#13;
            return totalSupply_;&#13;
        }&#13;
    }&#13;
    &#13;
    // Forward ERC20 methods to upgraded contract if this one is deprecated&#13;
    function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
         if (deprecated) {&#13;
            return UpgradedStandardToken(upgradedAddress).balanceOfByLegacy( _owner);&#13;
        } else {&#13;
           return super.balanceOf(_owner);&#13;
        }&#13;
    }&#13;
&#13;
    &#13;
    // Forward ERC20 methods to upgraded contract if this one is deprecated&#13;
    function transfer(address _to, uint _value) public validDestination(_to) returns (bool) {&#13;
        require(!isBlackListed[msg.sender]);&#13;
        if (deprecated) {&#13;
            return UpgradedStandardToken(upgradedAddress).transferByLegacy(msg.sender, _to, _value);&#13;
        } else {&#13;
            return super.transfer(_to, _value);&#13;
        }&#13;
        &#13;
    }&#13;
&#13;
&#13;
    // Forward ERC20 methods to upgraded contract if this one is deprecated&#13;
    function allowance(address _owner, address _spender) public view returns (uint256) {&#13;
        if (deprecated) {&#13;
            return UpgradedStandardToken(upgradedAddress).allowanceByLegacy(_owner, _spender);&#13;
        } else {&#13;
           return super.allowance(_owner, _spender);&#13;
        }&#13;
        &#13;
    }&#13;
&#13;
&#13;
    // Forward ERC20 methods to upgraded contract if this one is deprecated&#13;
    function transferFrom(address _from, address _to, uint _value) public validDestination(_to) returns (bool) {&#13;
        require(!isBlackListed[_from]);&#13;
        if (deprecated) {&#13;
            return UpgradedStandardToken(upgradedAddress).transferFromByLegacy(msg.sender, _from, _to, _value);&#13;
        } else {&#13;
            return super.transferFrom(_from, _to, _value);&#13;
        }&#13;
       &#13;
    }&#13;
    &#13;
    &#13;
     // Forward ERC20 methods to upgraded contract if this one is deprecated&#13;
     function approve(address _spender, uint256 _value) public returns (bool) {&#13;
          if (deprecated) {&#13;
            return UpgradedStandardToken(upgradedAddress).approveByLegacy(msg.sender, _spender, _value);&#13;
        } else {&#13;
            return super.approve(_spender, _value);&#13;
        } &#13;
    }&#13;
    &#13;
    &#13;
    // Forward ERC20 methods to upgraded contract if this one is deprecated&#13;
    function increaseApproval(address _spender, uint _value) public returns (bool) {&#13;
         if (deprecated) {&#13;
            return UpgradedStandardToken(upgradedAddress).increaseApprovalByLegacy(msg.sender, _spender, _value);&#13;
        } else {&#13;
            return super.increaseApproval(_spender, _value);&#13;
        } &#13;
    }&#13;
&#13;
&#13;
    // Forward ERC20 methods to upgraded contract if this one is deprecated&#13;
    function decreaseApproval(address _spender, uint _value) public returns (bool) {&#13;
        if (deprecated) {&#13;
            return UpgradedStandardToken(upgradedAddress).decreaseApprovalByLegacy(msg.sender, _spender, _value);&#13;
        } else {&#13;
            return super.decreaseApproval(_spender, _value);&#13;
        } &#13;
   }&#13;
   &#13;
   &#13;
    // deprecate current contract in favour of a new one&#13;
    function deprecate(address _upgradedAddress) public onlyCEO whenPaused {&#13;
        deprecated = true;&#13;
        upgradedAddress = _upgradedAddress;&#13;
        emit Deprecate(_upgradedAddress);&#13;
    }&#13;
    &#13;
    // Called when contract is deprecated&#13;
    event Deprecate(address newAddress);&#13;
    &#13;
    &#13;
   /**&#13;
   * @dev Set up transaction fees&#13;
   * @param newBasisPoints  A few ten-thousandth (设置手续费率为万分之几)&#13;
   * @param newMaxFee Maximum fee (设置最大手续费,不需要添加decimals)&#13;
   */&#13;
    function setFeeParams(uint newBasisPoints, uint newMaxFee) public onlyCEO {&#13;
       &#13;
        basisPointsRate = newBasisPoints;&#13;
        maximumFee = newMaxFee.mul(uint(10)**decimals);&#13;
        emit FeeParams(basisPointsRate, maximumFee);&#13;
    }&#13;
    &#13;
&#13;
    function transferAssetOwner(address newAssetOwner) public onlyCEO {&#13;
      require(newAssetOwner != address(0));&#13;
      assetOwner = newAssetOwner;&#13;
      emit TransferAssetOwner(assetOwner, newAssetOwner);&#13;
    }&#13;
    &#13;
    event TransferAssetOwner(address assetOwner, address newAssetOwner);&#13;
    &#13;
     // Called if contract ever adds fees&#13;
    event FeeParams(uint feeBasisPoints, uint maxFee);&#13;
    &#13;
    &#13;
    &#13;
&#13;
}
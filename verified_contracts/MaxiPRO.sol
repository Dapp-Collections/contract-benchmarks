/*
The MaxiPRO Contract.

The MaxiPRO Contract is free software: you can redistribute it and/or
modify.
@author Ivan Fedorov 
twitter https://twitter.com/maxipro_pro
bitcointalk https://bitcointalk.org/index.php?topic=4336550
telegram https://t.me/Maxipro_pro
medium https://medium.com/@maxipro_pro
contact e-mail: <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e28b8c848da28f839a8b92908dcc92908d">[emailÂ protected]</a>&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
 pragma solidity ^0.4.16; &#13;
    contract owned {&#13;
        address public owner;&#13;
&#13;
        function owned() {&#13;
            owner = msg.sender;&#13;
        }&#13;
&#13;
        modifier onlyOwner {&#13;
            require(msg.sender == owner);&#13;
            _;&#13;
        }&#13;
&#13;
        function transferOwnership(address newOwner) onlyOwner {&#13;
            owner = newOwner;&#13;
        }&#13;
    }&#13;
		&#13;
	contract Crowdsale is owned {&#13;
    &#13;
    uint256 public totalSupply;&#13;
    mapping (address =&gt; uint256) public balanceOf;&#13;
	  mapping (address =&gt; bool) public frozenAccount;&#13;
      event Transfer(address indexed from, address indexed to, uint256 value);&#13;
&#13;
    function Crowdsale() payable owned() {&#13;
        totalSupply = 1000000000;&#13;
        balanceOf[this] = 400000000; // public sale&#13;
		balanceOf[0x552e7F467CAF7FaBCEcaFdF3e986d093F85c5762] = 300000000; // team&#13;
		balanceOf[0x8Caa69e596CCE4A5EbaE0Efe44765573EDCa70CE] = 200000000; // for development and support of investment instrument&#13;
		balanceOf[0x4d989F62Dc0133d82Dbe8378a9d6542F3b0ABee5] = 8750000; // closed sale &#13;
		balanceOf[0xA81A580813c3b187a8A2B6b67c555b10C73614fa] = 2500000; // closed sale &#13;
		balanceOf[0x08c68BB69532EaaAF5d62B3732A2b7b7ABd74394] = 10000000; // closed sale &#13;
		balanceOf[0x829ac84591641639A7b8C7150b7CF3e753778cd8] = 6250000; // closed sale &#13;
		balanceOf[0xae8b76e01EBcd0e2E8b190922F08639D42abc0c9] = 3250000; // closed sale &#13;
		balanceOf[0x78C2bd83Fd47ea35C6B4750AeFEc1a7CF1a2Ad0a] = 2000000; // closed sale &#13;
		balanceOf[0x24e7d49CBF4108473dBC1c7A4ADF0De28CaF4148] = 4125000; // closed sale &#13;
		balanceOf[0x322D5BA67bdc48ECC675546C302DB6B5d7a0C610] = 5250000; // closed sale &#13;
		balanceOf[0x2e43daE28DF4ef8952096721eE22602344638979] = 8750000; // closed sale &#13;
		balanceOf[0x3C36A7F610C777641fcD2f12B0D82917575AB7dd] = 3750000; // closed sale &#13;
		balanceOf[0xDCE1d58c47b28dfe22F6B334E5517a49bF7B229a] = 7500000; // closed sale &#13;
		balanceOf[0x36Cbb77588E5a59124e530dEc08a3C5433cCD820] = 6750000; // closed sale &#13;
		balanceOf[0x3887FCB4BC96E66076B213963FbE277Ed808345A] = 12500000; // closed sale &#13;
		balanceOf[0x6658E430bBD2b97c421A8BBA13361cC83D48609C] = 6250000; // closed sale &#13;
		balanceOf[0xb137178106ade0506393d2041BDf90AF542F35ED] = 2500000; // closed sale &#13;
		balanceOf[0x8F551F0B6144235cB89F000BA87fDd3A6B425F2E] = 7500000; // closed sale &#13;
		balanceOf[0xfC1F805de2C30af99B72B02B60ED9877660C5194] = 2375000; // closed sale &#13;
	&#13;
    }&#13;
&#13;
    function () payable {&#13;
        require(balanceOf[this] &gt; 0);&#13;
        uint256 tokens = 200000 * msg.value / 1000000000000000000;&#13;
        if (tokens &gt; balanceOf[this]) {&#13;
            tokens = balanceOf[this];&#13;
            uint valueWei = tokens * 1000000000000000000 / 200000;&#13;
            msg.sender.transfer(msg.value - valueWei);&#13;
        }&#13;
        require(balanceOf[msg.sender] + tokens &gt; balanceOf[msg.sender]); &#13;
        require(tokens &gt; 0);&#13;
        balanceOf[msg.sender] += tokens;&#13;
        balanceOf[this] -= tokens;&#13;
        Transfer(this, msg.sender, tokens);&#13;
    }&#13;
}&#13;
contract Token is Crowdsale {&#13;
    &#13;
   &#13;
    string  public name        = 'MaxiPRO';&#13;
    string  public symbol      = "MPR";&#13;
    uint8   public decimals    = 0;&#13;
&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) public allowed;&#13;
&#13;
    event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
    event Burned(address indexed owner, uint256 value);&#13;
&#13;
    function Token() payable Crowdsale() {}&#13;
&#13;
    function transfer(address _to, uint256 _value) public {&#13;
        require(balanceOf[msg.sender] &gt;= _value);&#13;
        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);&#13;
        balanceOf[msg.sender] -= _value;&#13;
        balanceOf[_to] += _value;&#13;
        Transfer(msg.sender, _to, _value);&#13;
		require(!frozenAccount[msg.sender]);&#13;
		&#13;
    }&#13;
    &#13;
    function transferFrom(address _from, address _to, uint256 _value) public {&#13;
        require(balanceOf[_from] &gt;= _value);&#13;
        require(balanceOf[_to] + _value &gt;= balanceOf[_to]);&#13;
        require(allowed[_from][msg.sender] &gt;= _value);&#13;
        balanceOf[_from] -= _value;&#13;
        balanceOf[_to] += _value;&#13;
        allowed[_from][msg.sender] -= _value;&#13;
        Transfer(_from, _to, _value);&#13;
    }&#13;
&#13;
    function approve(address _spender, uint256 _value) public {&#13;
        allowed[msg.sender][_spender] = _value;&#13;
        Approval(msg.sender, _spender, _value);&#13;
    }&#13;
&#13;
    function allowance(address _owner, address _spender) public constant&#13;
        returns (uint256 remaining) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
    &#13;
    function burn(uint256 _value) public {&#13;
        require(balanceOf[msg.sender] &gt;= _value);&#13;
        balanceOf[msg.sender] -= _value;&#13;
        totalSupply -= _value;&#13;
        Burned(msg.sender, _value);&#13;
    }&#13;
}&#13;
contract MaxiPRO is Token {&#13;
    &#13;
    &#13;
    function withdraw() public onlyOwner {&#13;
        owner.transfer(this.balance);&#13;
    }&#13;
     function killMe() public onlyOwner {&#13;
        require(totalSupply == 0);&#13;
        selfdestruct(owner);&#13;
    }&#13;
}
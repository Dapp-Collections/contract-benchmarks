pragma solidity ^0.4.13;
// -------------------------------------------------
// 0.4.13+commit.0fb4cb1a
// [Assistive Reality ARX ERC20 client presold packages 25,50,100 ETH]
// [https://aronline.io/icoinfo]
// [Adapted from Ethereum standard crowdsale contract]
// [Contact <span class="__cf_email__" data-cfemail="5e2d2a3f38381e3f2c31303237303b703731">[emailÂ protected]</span> for any queries]&#13;
// [Join us in changing the world]&#13;
// [aronline.io]&#13;
// -------------------------------------------------&#13;
// ERC Token Standard #20 Interface&#13;
// https://github.com/ethereum/EIPs/issues/20&#13;
// -------------------------------------------------&#13;
// Security reviews completed 26/09/17 [passed OK]&#13;
// Functional reviews completed 26/09/17 [passed OK]&#13;
// Final code revision and regression test cycle complete 26/09/17 [passed]&#13;
// https://github.com/assistivereality/ico/blob/master/3.2packagesaletestsARXmainnet.txt&#13;
// -------------------------------------------------&#13;
// 3 packages offered in this contract:&#13;
// 25 ETH  = 8500 ARX per 1 ETH&#13;
// 50 ETH  = 10500 ARX per 1 ETH&#13;
// 100 ETH = 12500 ARX per 1 ETH&#13;
// -------------------------------------------------&#13;
&#13;
contract owned {&#13;
    address public owner;&#13;
&#13;
    function owned() {&#13;
        owner = msg.sender;&#13;
    }&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
    function transferOwnership(address newOwner) onlyOwner {&#13;
        owner = newOwner;&#13;
    }&#13;
}&#13;
&#13;
contract safeMath {&#13;
  function safeMul(uint256 a, uint256 b) internal returns (uint256) {&#13;
    uint256 c = a * b;&#13;
    safeAssert(a == 0 || c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function safeDiv(uint256 a, uint256 b) internal returns (uint256) {&#13;
    safeAssert(b &gt; 0);&#13;
    uint256 c = a / b;&#13;
    safeAssert(a == b * c + a % b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function safeSub(uint256 a, uint256 b) internal returns (uint256) {&#13;
    safeAssert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function safeAdd(uint256 a, uint256 b) internal returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    safeAssert(c&gt;=a &amp;&amp; c&gt;=b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function safeAssert(bool assertion) internal {&#13;
    if (!assertion) revert();&#13;
  }&#13;
}&#13;
&#13;
contract ERC20Interface is owned, safeMath {&#13;
  function balanceOf(address _owner) constant returns (uint256 balance);&#13;
  function transfer(address _to, uint256 _value) returns (bool success);&#13;
  function transferFrom(address _from, address _to, uint256 _value) returns (bool success);&#13;
  function approve(address _spender, uint256 _value) returns (bool success);&#13;
  function increaseApproval (address _spender, uint _addedValue) returns (bool success);&#13;
  function decreaseApproval (address _spender, uint _subtractedValue) returns (bool success);&#13;
  function allowance(address _owner, address _spender) constant returns (uint256 remaining);&#13;
  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);&#13;
  event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
}&#13;
&#13;
contract ARXPackageSale is owned, safeMath {&#13;
  // owner/admin &amp; token reward&#13;
  address        public admin                       = owner;      // admin address&#13;
  ERC20Interface public tokenReward;                              // address of the token used as reward&#13;
&#13;
  // deployment variables for static supply sale&#13;
  uint256 public initialARXSupplyInWei;                           // initial ARX to be sent to this packagesale contract (requires 6.25M ARX, sending 6.5M ARX)&#13;
  uint256 public CurrentARXSupplyInWei;                           // tracking to see how many to return&#13;
  uint256 public EthCapInWei;                                     // maximum amount to raise in Eth&#13;
  uint256 public tokensPerEthPrice;                               // floating price based on package size purchased&#13;
&#13;
  // multi-sig addresses and price variable&#13;
  address public beneficiaryMultisig;                             // beneficiaryMultiSig (founder group) live is 0x00F959866E977698D14a36eB332686304a4d6AbA&#13;
  address public foundationMultisig;                              // foundationMultiSig (Assistive Reality foundation) live is&#13;
&#13;
  // uint256 values for min,max,caps,tracking&#13;
  uint256 public amountRaisedInWei;                               // amount raised in Wei&#13;
&#13;
  // loop control, ICO startup and limiters&#13;
  string  public CurrentStatus                     = "";          // current packagesale status&#13;
  uint256 public fundingStartBlock;                               // packagesale start block#&#13;
  uint256 public fundingEndBlock;                                 // packagesale end block#&#13;
&#13;
  bool    public ispackagesaleSetup                = false;       // boolean for packagesale setup&#13;
  bool    public ispackagesaleClosed               = false;       // packagesale completion boolean&#13;
&#13;
  event Buy(address indexed _sender, uint256 _eth, uint256 _ARX);&#13;
  event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
  mapping (address =&gt; uint256) balances;&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
&#13;
  // default function, map admin&#13;
  function ARXPackageSale() onlyOwner {&#13;
    admin = msg.sender;&#13;
    CurrentStatus = "packagesale deployed to chain";&#13;
  }&#13;
&#13;
  // total number of tokens initially simplified from wei&#13;
  function initialARXtokenSupply() constant returns (uint256 initialARXtokenSupplyCount) {&#13;
      initialARXtokenSupplyCount = safeDiv(initialARXSupplyInWei,1 ether);&#13;
  }&#13;
&#13;
  // current number of tokens simplified from wei&#13;
  function currentARXtokenSupply() constant returns (uint256 currentARXtokenSupplyCount) {&#13;
      currentARXtokenSupplyCount = safeDiv(CurrentARXSupplyInWei,1 ether);&#13;
  }&#13;
&#13;
  // setup the packagesale parameters&#13;
  function Setuppackagesale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) onlyOwner returns (bytes32 response) {&#13;
      if ((msg.sender == admin)&#13;
      &amp;&amp; (!(ispackagesaleSetup))&#13;
      &amp;&amp; (!(beneficiaryMultisig &gt; 0))){&#13;
          // init addresses&#13;
          tokenReward                             = ERC20Interface(0xb0D926c1BC3d78064F3e1075D5bD9A24F35Ae6C5);   // mainnet is 0x7D5Edcd23dAa3fB94317D32aE253eE1Af08Ba14d //testnet = 0x75508c2B1e46ea29B7cCf0308d4Cb6f6af6211e0&#13;
          beneficiaryMultisig                     = 0x5Ed4706A93b8a3239f97F7d2025cE1f9eaDcD9A4;                   // mainnet ARX foundation cold storage wallet&#13;
          foundationMultisig                      = 0x5Ed4706A93b8a3239f97F7d2025cE1f9eaDcD9A4;                   // mainnet ARX foundation cold storage wallet&#13;
          tokensPerEthPrice                       = 8500;                                                         // 8500 ARX per Eth default flat (this is altered in BuyTokens function based on amount sent for package deals)&#13;
&#13;
          // funding targets&#13;
          initialARXSupplyInWei                   = 6500000000000000000000000;                                    //   6,500,000 + 18 decimals = 6500000000000000000000000 //testnet 650k tokens = 65000000000000000000000&#13;
          CurrentARXSupplyInWei                   = initialARXSupplyInWei;&#13;
          EthCapInWei                             = 500000000000000000000;                                        //   500000000000000000000 =  500 Eth (max cap) - packages won't sell beyond this amount //testnet 5Eth 5000000000000000000&#13;
          amountRaisedInWei                       = 0;&#13;
&#13;
          // update values&#13;
          fundingStartBlock                       = _fundingStartBlock;&#13;
          fundingEndBlock                         = _fundingEndBlock;&#13;
&#13;
          // configure packagesale&#13;
          ispackagesaleSetup                      = true;&#13;
          ispackagesaleClosed                     = false;&#13;
          CurrentStatus                           = "packagesale is activated";&#13;
&#13;
          return "packagesale is setup";&#13;
      } else if (msg.sender != admin) {&#13;
          return "not authorized";&#13;
      } else  {&#13;
          return "campaign cannot be changed";&#13;
      }&#13;
    }&#13;
&#13;
    // default payable function when sending ether to this contract&#13;
    function () payable {&#13;
      require(msg.data.length == 0);&#13;
      BuyARXtokens();&#13;
    }&#13;
&#13;
    function BuyARXtokens() payable {&#13;
      // 0. conditions (length, packagesale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)&#13;
      require(!(msg.value == 0)&#13;
      &amp;&amp; (ispackagesaleSetup)&#13;
      &amp;&amp; (block.number &gt;= fundingStartBlock)&#13;
      &amp;&amp; (block.number &lt;= fundingEndBlock)&#13;
      &amp;&amp; (amountRaisedInWei &lt; EthCapInWei));&#13;
&#13;
      // 1. vars&#13;
      uint256 rewardTransferAmount    = 0;&#13;
&#13;
      // 2. effects&#13;
      if (msg.value==25000000000000000000) { // 25 ETH (18 decimals) = 8500 ARX per 1 ETH&#13;
        tokensPerEthPrice=8500;&#13;
      } else if (msg.value==50000000000000000000) { // 50 ETH (18 decimals) = 10500 ARX per 1 ETH&#13;
        tokensPerEthPrice=10500;&#13;
      } else if (msg.value==100000000000000000000) { // 100 ETH (18 decimals) = 12500 ARX per 1 ETH&#13;
        tokensPerEthPrice=12500;&#13;
      } else {&#13;
        revert();&#13;
      }&#13;
&#13;
      amountRaisedInWei               = safeAdd(amountRaisedInWei,msg.value);&#13;
      rewardTransferAmount            = safeMul(msg.value,tokensPerEthPrice);&#13;
      CurrentARXSupplyInWei           = safeSub(CurrentARXSupplyInWei,rewardTransferAmount);&#13;
&#13;
      // 3. interaction&#13;
      tokenReward.transfer(msg.sender, rewardTransferAmount);&#13;
&#13;
      // 4. events&#13;
      Transfer(this, msg.sender, msg.value);&#13;
      Buy(msg.sender, msg.value, rewardTransferAmount);&#13;
    }&#13;
&#13;
    function beneficiaryMultiSigWithdraw(uint256 _amount) onlyOwner {&#13;
      beneficiaryMultisig.transfer(_amount);&#13;
    }&#13;
&#13;
    function updateStatus() onlyOwner {&#13;
      require((block.number &gt;= fundingEndBlock) || (amountRaisedInWei &gt;= EthCapInWei));&#13;
      CurrentStatus = "packagesale is closed";&#13;
    }&#13;
&#13;
    function withdrawRemainingTokens(uint256 _amountToPull) onlyOwner {&#13;
      require(block.number &gt;= fundingEndBlock);&#13;
      tokenReward.transfer(msg.sender, _amountToPull);&#13;
    }&#13;
}
pragma solidity 0.4.24;
pragma experimental "v0.5.0";
/******************************************************************************\
* Author: Nick Mudge, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="36585f555d765b595d535845185f59">[emailÂ protected]</a>&#13;
* Mokens&#13;
* Copyright (c) 2018&#13;
*&#13;
* Implements ERC998ERC20TopDown.&#13;
/******************************************************************************/&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//Storage contracts&#13;
////////////&#13;
//Some delegate contracts are listed with storage contracts they inherit.&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//Mokens&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage0 {&#13;
    // funcId =&gt; delegate contract&#13;
    mapping(bytes4 =&gt; address) internal delegates;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenUpdates&#13;
//MokenOwner&#13;
//QueryMokenDelegates&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage1 is Storage0 {&#13;
    address internal contractOwner;&#13;
    bytes[] internal funcSignatures;&#13;
    // signature =&gt; index+1&#13;
    mapping(bytes =&gt; uint256) internal funcSignatureToIndex;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokensSupportsInterfaces&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage2 is Storage1 {&#13;
    mapping(bytes4 =&gt; bool) internal supportedInterfaces;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenRootOwnerOf&#13;
//MokenERC721Metadata&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage3 is Storage2 {&#13;
    struct Moken {&#13;
        string name;&#13;
        uint256 data;&#13;
        uint256 parentTokenId;&#13;
    }&#13;
    //tokenId =&gt; moken&#13;
    mapping(uint256 =&gt; Moken) internal mokens;&#13;
    uint256 internal mokensLength;&#13;
    // child address =&gt; child tokenId =&gt; tokenId+1&#13;
    mapping(address =&gt; mapping(uint256 =&gt; uint256)) internal childTokenOwner;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC721Enumerable&#13;
//MokenLinkHash&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage4 is Storage3 {&#13;
    // root token owner address =&gt; (tokenId =&gt; approved address)&#13;
    mapping(address =&gt; mapping(uint256 =&gt; address)) internal rootOwnerAndTokenIdToApprovedAddress;&#13;
    // token owner =&gt; (operator address =&gt; bool)&#13;
    mapping(address =&gt; mapping(address =&gt; bool)) internal tokenOwnerToOperators;&#13;
    // Mapping from owner to list of owned token IDs&#13;
    mapping(address =&gt; uint32[]) internal ownedTokens;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC998ERC721TopDown&#13;
//MokenERC998ERC721TopDownBatch&#13;
//MokenERC721&#13;
//MokenERC721Batch&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage5 is Storage4 {&#13;
    // tokenId =&gt; (child address =&gt; array of child tokens)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256[])) internal childTokens;&#13;
    // tokenId =&gt; (child address =&gt; (child token =&gt; child index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; mapping(uint256 =&gt; uint256))) internal childTokenIndex;&#13;
    // tokenId =&gt; (child address =&gt; contract index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) internal childContractIndex;&#13;
    // tokenId =&gt; child contract&#13;
    mapping(uint256 =&gt; address[]) internal childContracts;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC998ERC20TopDown&#13;
//MokenStateChange&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage6 is Storage5 {&#13;
    // tokenId =&gt; token contract&#13;
    mapping(uint256 =&gt; address[]) internal erc20Contracts;&#13;
    // tokenId =&gt; (token contract =&gt; token contract index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) erc20ContractIndex;&#13;
    // tokenId =&gt; (token contract =&gt; balance)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) internal erc20Balances;&#13;
}&#13;
&#13;
contract RootOwnerOfHelper is Storage3 {&#13;
&#13;
    bytes32 constant ERC998_MAGIC_VALUE = 0xcd740db5;&#13;
&#13;
    // Use Cases handled:&#13;
    // Case 1: Token owner is this contract and token&#13;
    // Case 2: Token owner is this contract and top-down composable.&#13;
    // Case 3: Token owner is top-down composable&#13;
    // Case 4: Token owner is an unknown contract&#13;
    // Case 5: Token owner is a user&#13;
    // Case 6: Token owner is a bottom-up composable&#13;
    // Case 7: Token owner is ERC721 token owned by top-down token&#13;
    // Case 8: Token owner is ERC721 token owned by unknown contract&#13;
    // Case 9: Token owner is ERC721 token owned by user&#13;
    function rootOwnerOf_(uint256 _tokenId) internal view returns (bytes32 rootOwner) {&#13;
        address rootOwnerAddress = address(mokens[_tokenId].data);&#13;
        require(rootOwnerAddress != address(0), "tokenId not found.");&#13;
        uint256 parentTokenId;&#13;
        bool isParent;&#13;
&#13;
        while (rootOwnerAddress == address(this)) {&#13;
            parentTokenId = mokens[_tokenId].parentTokenId;&#13;
            isParent = parentTokenId &gt; 0;&#13;
            if (isParent) {&#13;
                // Case 1: Token owner is this contract and token&#13;
                _tokenId = parentTokenId - 1;&#13;
            }&#13;
            else {&#13;
                // Case 2: Token owner is this contract and top-down composable.&#13;
                _tokenId = childTokenOwner[rootOwnerAddress][_tokenId] - 1;&#13;
            }&#13;
            rootOwnerAddress = address(mokens[_tokenId].data);&#13;
        }&#13;
&#13;
        parentTokenId = mokens[_tokenId].parentTokenId;&#13;
        isParent = parentTokenId &gt; 0;&#13;
        if (isParent) {&#13;
            parentTokenId--;&#13;
        }&#13;
&#13;
        bytes memory calldata;&#13;
        bool callSuccess;&#13;
&#13;
        if (isParent == false) {&#13;
&#13;
            // success if this token is owned by a top-down token&#13;
            // 0xed81cdda == rootOwnerOfChild(address,uint256)&#13;
            calldata = abi.encodeWithSelector(0xed81cdda, address(this), _tokenId);&#13;
            assembly {&#13;
                callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                if callSuccess {&#13;
                    rootOwner := mload(calldata)&#13;
                }&#13;
            }&#13;
            if (callSuccess == true &amp;&amp; rootOwner &gt;&gt; 224 == ERC998_MAGIC_VALUE) {&#13;
                // Case 3: Token owner is top-down composable&#13;
                return rootOwner;&#13;
            }&#13;
            else {&#13;
                // Case 4: Token owner is an unknown contract&#13;
                // Or&#13;
                // Case 5: Token owner is a user&#13;
                return ERC998_MAGIC_VALUE &lt;&lt; 224 | bytes32(rootOwnerAddress);&#13;
            }&#13;
        }&#13;
        else {&#13;
&#13;
            // 0x43a61a8e == rootOwnerOf(uint256)&#13;
            calldata = abi.encodeWithSelector(0x43a61a8e, parentTokenId);&#13;
            assembly {&#13;
                callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                if callSuccess {&#13;
                    rootOwner := mload(calldata)&#13;
                }&#13;
            }&#13;
            if (callSuccess == true &amp;&amp; rootOwner &gt;&gt; 224 == ERC998_MAGIC_VALUE) {&#13;
                // Case 6: Token owner is a bottom-up composable&#13;
                // Or&#13;
                // Case 2: Token owner is top-down composable&#13;
                return rootOwner;&#13;
            }&#13;
            else {&#13;
                // token owner is ERC721&#13;
                address childContract = rootOwnerAddress;&#13;
                //0x6352211e == "ownerOf(uint256)"&#13;
                calldata = abi.encodeWithSelector(0x6352211e, parentTokenId);&#13;
                assembly {&#13;
                    callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                    if callSuccess {&#13;
                        rootOwnerAddress := mload(calldata)&#13;
                    }&#13;
                }&#13;
                require(callSuccess, "Call to ownerOf failed");&#13;
&#13;
                // 0xed81cdda == rootOwnerOfChild(address,uint256)&#13;
                calldata = abi.encodeWithSelector(0xed81cdda, childContract, parentTokenId);&#13;
                assembly {&#13;
                    callSuccess := staticcall(gas, rootOwnerAddress, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                    if callSuccess {&#13;
                        rootOwner := mload(calldata)&#13;
                    }&#13;
                }&#13;
                if (callSuccess == true &amp;&amp; rootOwner &gt;&gt; 224 == ERC998_MAGIC_VALUE) {&#13;
                    // Case 7: Token owner is ERC721 token owned by top-down token&#13;
                    return rootOwner;&#13;
                }&#13;
                else {&#13;
                    // Case 8: Token owner is ERC721 token owned by unknown contract&#13;
                    // Or&#13;
                    // Case 9: Token owner is ERC721 token owned by user&#13;
                    return ERC998_MAGIC_VALUE &lt;&lt; 224 | bytes32(rootOwnerAddress);&#13;
                }&#13;
            }&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
interface ERC20AndERC223 {&#13;
    function transferFrom(address _from, address _to, uint _value) external returns (bool success);&#13;
    function transfer(address _to, uint _value) external returns (bool success);&#13;
    function transfer(address _to, uint _value, bytes data) external returns (bool success);&#13;
}&#13;
&#13;
contract MokenERC998ERC20TopDown is Storage6, RootOwnerOfHelper {&#13;
&#13;
    event ReceivedERC20(address indexed from, uint256 indexed tokenId, address indexed erc20Contract, uint256 value);&#13;
    event TransferERC20(uint256 indexed tokenId, address indexed to, address indexed erc20Contract, uint256 value);&#13;
&#13;
    function removeERC20(uint256 _tokenId, address _erc20Contract, uint256 _value) internal {&#13;
        if (_value == 0) {&#13;
            return;&#13;
        }&#13;
        uint256 erc20Balance = erc20Balances[_tokenId][_erc20Contract];&#13;
        require(erc20Balance &gt;= _value, "Not enough token available to transfer.");&#13;
        uint256 newERC20Balance = erc20Balance - _value;&#13;
        erc20Balances[_tokenId][_erc20Contract] = newERC20Balance;&#13;
        if (newERC20Balance == 0) {&#13;
            uint256 lastContractIndex = erc20Contracts[_tokenId].length - 1;&#13;
            address lastContract = erc20Contracts[_tokenId][lastContractIndex];&#13;
            if (_erc20Contract != lastContract) {&#13;
                uint256 contractIndex = erc20ContractIndex[_tokenId][_erc20Contract];&#13;
                erc20Contracts[_tokenId][contractIndex] = lastContract;&#13;
                erc20ContractIndex[_tokenId][lastContract] = contractIndex;&#13;
            }&#13;
            erc20Contracts[_tokenId].length--;&#13;
            delete erc20ContractIndex[_tokenId][_erc20Contract];&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    function isContract(address addr) internal view returns (bool) {&#13;
        uint256 size;&#13;
        assembly {size := extcodesize(addr)}&#13;
        return size &gt; 0;&#13;
    }&#13;
&#13;
    function transferERC20(uint256 _tokenId, address _to, address _erc20Contract, uint256 _value) external {&#13;
        address rootOwner = address(rootOwnerOf_(_tokenId));&#13;
        require(rootOwner == msg.sender || tokenOwnerToOperators[rootOwner][msg.sender] ||&#13;
        rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId] == msg.sender, "msg.sender not rootOwner/operator/approved.");&#13;
        require(_to != address(0), "_to cannot be 0 address");&#13;
        removeERC20(_tokenId, _erc20Contract, _value);&#13;
        require(ERC20AndERC223(_erc20Contract).transfer(_to, _value), "ERC20 transfer failed.");&#13;
        emit TransferERC20(_tokenId, _to, _erc20Contract, _value);&#13;
    }&#13;
&#13;
    // implementation of ERC 223&#13;
    function transferERC223(uint256 _tokenId, address _to, address _erc223Contract, uint256 _value, bytes _data) external {&#13;
        address rootOwner = address(rootOwnerOf_(_tokenId));&#13;
        require(rootOwner == msg.sender || tokenOwnerToOperators[rootOwner][msg.sender] ||&#13;
        rootOwnerAndTokenIdToApprovedAddress[rootOwner][_tokenId] == msg.sender, "msg.sender not rootOwner/operator/approved.");&#13;
        require(_to != address(0), "_to cannot be 0 address");&#13;
        removeERC20(_tokenId, _erc223Contract, _value);&#13;
        require(ERC20AndERC223(_erc223Contract).transfer(_to, _value, _data), "ERC223 transfer failed.");&#13;
        emit TransferERC20(_tokenId, _to, _erc223Contract, _value);&#13;
    }&#13;
&#13;
    // this contract has to be approved first by _erc20Contract&#13;
    function getERC20(address _from, uint256 _tokenId, address _erc20Contract, uint256 _value) public {&#13;
        bool allowed = _from == msg.sender;&#13;
        if (!allowed) {&#13;
            uint256 remaining;&#13;
            // 0xdd62ed3e == allowance(address,address)&#13;
            bytes memory calldata = abi.encodeWithSelector(0xdd62ed3e, _from, msg.sender);&#13;
            bool callSuccess;&#13;
            assembly {&#13;
                callSuccess := staticcall(gas, _erc20Contract, add(calldata, 0x20), mload(calldata), calldata, 0x20)&#13;
                if callSuccess {&#13;
                    remaining := mload(calldata)&#13;
                }&#13;
            }&#13;
            require(callSuccess, "call to allowance failed");&#13;
            require(remaining &gt;= _value, "Value greater than remaining");&#13;
            allowed = true;&#13;
        }&#13;
        require(allowed, "msg.sender not _from and has no allowance.");&#13;
        erc20Received(_from, _tokenId, _erc20Contract, _value);&#13;
        require(ERC20AndERC223(_erc20Contract).transferFrom(_from, this, _value), "ERC20 transfer failed.");&#13;
    }&#13;
&#13;
    function erc20Received(address _from, uint256 _tokenId, address _erc20Contract, uint256 _value) internal {&#13;
        require(address(mokens[_tokenId].data) != address(0), "_tokenId does not exist.");&#13;
        if (_value == 0) {&#13;
            return;&#13;
        }&#13;
        uint256 erc20Balance = erc20Balances[_tokenId][_erc20Contract];&#13;
        if (erc20Balance == 0) {&#13;
            erc20ContractIndex[_tokenId][_erc20Contract] = erc20Contracts[_tokenId].length;&#13;
            erc20Contracts[_tokenId].push(_erc20Contract);&#13;
        }&#13;
        erc20Balances[_tokenId][_erc20Contract] += _value;&#13;
        emit ReceivedERC20(_from, _tokenId, _erc20Contract, _value);&#13;
    }&#13;
&#13;
    // used by ERC 223&#13;
    function tokenFallback(address _from, uint256 _value, bytes _data) external {&#13;
        require(_data.length &gt; 0, "_data must contain the uint256 tokenId to transfer the token to.");&#13;
        require(isContract(msg.sender), "msg.sender is not a contract");&#13;
        // convert up to 32 bytes of_data to uint256, owner nft tokenId passed as uint in bytes&#13;
        uint256 tokenId;&#13;
        assembly {&#13;
            tokenId := calldataload(132)&#13;
        }&#13;
        if (_data.length &lt; 32) {&#13;
            tokenId = tokenId &gt;&gt; 256 - _data.length * 8;&#13;
        }&#13;
        //END TODO&#13;
        erc20Received(_from, tokenId, msg.sender, _value);&#13;
    }&#13;
&#13;
    function balanceOfERC20(uint256 _tokenId, address _erc20Contract) external view returns (uint256) {&#13;
        return erc20Balances[_tokenId][_erc20Contract];&#13;
    }&#13;
&#13;
    function erc20ContractByIndex(uint256 _tokenId, uint256 _index) external view returns (address) {&#13;
        require(_index &lt; erc20Contracts[_tokenId].length, "Contract address does not exist for this token and index.");&#13;
        return erc20Contracts[_tokenId][_index];&#13;
    }&#13;
&#13;
    function totalERC20Contracts(uint256 _tokenId) external view returns (uint256) {&#13;
        return erc20Contracts[_tokenId].length;&#13;
    }&#13;
}
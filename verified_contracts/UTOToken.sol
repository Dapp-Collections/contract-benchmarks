pragma solidity ^0.4.18;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <span class="__cf_email__" data-cfemail="33575245567352585c5e51521d505c5e">[emailÂ protected]</span>&#13;
// released under Apache 2.0 licence&#13;
library SafeMath {&#13;
    function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        if (a == 0) {&#13;
            return 0;&#13;
        }&#13;
        uint256 c = a * b;&#13;
        assert(c / a == b);&#13;
        return c;&#13;
    }&#13;
&#13;
    function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
        uint256 c = a / b;&#13;
        assert(a == b * c);&#13;
        return c;&#13;
    }&#13;
&#13;
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        uint256 c = a - b;&#13;
        assert(b &lt;= a);&#13;
        assert(a == c + b);&#13;
        return c;&#13;
    }&#13;
&#13;
    function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        uint256 c = a + b;&#13;
        assert(c &gt;= a);&#13;
        assert(a == c - b);&#13;
        return c;&#13;
    }&#13;
}&#13;
interface tokenRecipient { function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData) external; }&#13;
&#13;
contract UTOToken {&#13;
    // Public variables of the token&#13;
    string public name="UTour";&#13;
    string public symbol="UTO";&#13;
    uint8 public decimals = 18;&#13;
    // 18 decimals is the strongly suggested default, avoid changing it&#13;
    uint256 public totalSupply=3 * 10 ** 26;&#13;
&#13;
    // This creates an array with all balances&#13;
    mapping (address =&gt; uint256) public balanceOf;&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) public allowance;&#13;
&#13;
    // This generates a public event on the blockchain that will notify clients&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
    // This notifies clients about the amount burnt&#13;
    event Burn(address indexed from, uint256 value);&#13;
&#13;
    /**&#13;
     * Constructor function&#13;
     *&#13;
     * Initializes contract with initial supply tokens to the creator of the contract&#13;
     */&#13;
    // function UTOToken() public {&#13;
    constructor () public {&#13;
        balanceOf[msg.sender] = totalSupply;                // Give the creator all initial tokens&#13;
    }&#13;
&#13;
    /**&#13;
     * Internal transfer, only can be called by this contract&#13;
     */&#13;
    function _transfer(address _from, address _to, uint _value) internal {&#13;
       // Prevent transfer to 0x0 address. Use burn() instead&#13;
        require(_to != 0x0);&#13;
        // Subtract from the sender&#13;
        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);&#13;
        // Add the same to the recipient&#13;
        balanceOf[_to] = SafeMath.add(balanceOf[_to], _value);&#13;
        emit Transfer(_from, _to, _value);&#13;
    }&#13;
&#13;
    /**&#13;
     * Transfer tokens&#13;
     *&#13;
     * Send `_value` tokens to `_to` from your account&#13;
     *&#13;
     * @param _to The address of the recipient&#13;
     * @param _value the amount to send&#13;
     */&#13;
    function transfer(address _to, uint256 _value) public returns (bool success) {&#13;
        _transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Transfer tokens from other address&#13;
     *&#13;
     * Send `_value` tokens to `_to` on behalf of `_from`&#13;
     *&#13;
     * @param _from The address of the sender&#13;
     * @param _to The address of the recipient&#13;
     * @param _value the amount to send&#13;
     */&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {   &#13;
        // Check allowance&#13;
        allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);&#13;
        _transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Set allowance for other address&#13;
     *&#13;
     * Allows `_spender` to spend no more than `_value` tokens on your behalf&#13;
     *&#13;
     * @param _spender The address authorized to spend&#13;
     * @param _value the max amount they can spend&#13;
     */&#13;
    function approve(address _spender, uint256 _value) public returns (bool success) {&#13;
        allowance[msg.sender][_spender] = _value;&#13;
        emit Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Set allowance for other address and notify&#13;
     *&#13;
     * Allows `_spender` to spend no more than `_value` tokens on your behalf, and then ping the contract about it&#13;
     *&#13;
     * @param _spender The address authorized to spend&#13;
     * @param _value the max amount they can spend&#13;
     * @param _extraData some extra information to send to the approved contract&#13;
     */&#13;
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) public returns (bool success) {&#13;
        tokenRecipient spender = tokenRecipient(_spender);&#13;
        if (approve(_spender, _value)) {&#13;
            spender.receiveApproval(msg.sender, _value, this, _extraData);&#13;
            return true;&#13;
        }&#13;
    }&#13;
&#13;
    function increaseApproval (address _spender, uint _addedValue) public returns (bool success) {&#13;
        allowance[msg.sender][_spender] = SafeMath.add(allowance[msg.sender][_spender], _addedValue);&#13;
        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);&#13;
        return true;&#13;
    } &#13;
&#13;
    function decreaseApproval (address _spender, uint _subtractedValue) public returns (bool success) {&#13;
        uint oldValue = allowance[msg.sender][_spender];&#13;
        if (_subtractedValue &gt; oldValue) {&#13;
            allowance[msg.sender][_spender] = 0;&#13;
        } else {&#13;
            allowance[msg.sender][_spender] = SafeMath.sub(oldValue, _subtractedValue);&#13;
        }&#13;
        emit Approval(msg.sender, _spender, allowance[msg.sender][_spender]);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Destroy tokens&#13;
     *&#13;
     * Remove `_value` tokens from the system irreversibly&#13;
     *&#13;
     * @param _value the amount of money to burn&#13;
     */&#13;
    function burn(uint256 _value) public returns (bool success) { &#13;
        // Subtract from the sender &#13;
        balanceOf[msg.sender] = SafeMath.sub(balanceOf[msg.sender], _value); &#13;
        // Updates totalSupply         &#13;
        totalSupply = SafeMath.sub(totalSupply, _value);                    &#13;
        emit Burn(msg.sender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Destroy tokens from other account&#13;
     *&#13;
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.&#13;
     *&#13;
     * @param _from the address of the sender&#13;
     * @param _value the amount of money to burn&#13;
     */&#13;
    function burnFrom(address _from, uint256 _value) public returns (bool success) {  &#13;
        // Subtract from the targeted balance&#13;
        balanceOf[_from] = SafeMath.sub(balanceOf[_from], _value);  &#13;
        // Subtract from the sender's allowance&#13;
        allowance[_from][msg.sender] = SafeMath.sub(allowance[_from][msg.sender], _value);&#13;
        // Update totalSupply         &#13;
        totalSupply = SafeMath.sub(totalSupply, _value);                           &#13;
        emit Burn(_from, _value);&#13;
        return true;&#13;
    }&#13;
}
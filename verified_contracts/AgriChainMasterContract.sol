pragma solidity ^0.4.18; 
//v.1609rev1801 Ezlab 2016-2018 all-rights reseved <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="73000603031c01073316091f12115d1a07">[emailÂ protected]</a>&#13;
//special purpose contract for  further info use case  https://agrichain.it/d/v1801&#13;
&#13;
//common base contract&#13;
contract BaseAgriChainContract {&#13;
    address creator; &#13;
    bool public isSealed;&#13;
    function BaseAgriChainContract() public    {  creator = msg.sender; EventCreated(this,creator); }&#13;
    modifier onlyIfNotSealed() //semantic when sealed is not possible to change sensible data&#13;
    {&#13;
        if (isSealed)&#13;
            throw;&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyBy(address _account) //semantic only _account can operate&#13;
    {&#13;
        if (msg.sender != _account)&#13;
            throw;&#13;
        _;&#13;
    }&#13;
    &#13;
    function kill() onlyBy(creator)   { suicide(creator); }     &#13;
    function setCreator(address _creator)  onlyBy(creator)  { creator = _creator;     }&#13;
    function setSealed()  onlyBy(creator)  { isSealed = true;  EventSealed(this);   } //seal down contract not reversible&#13;
&#13;
    event EventCreated(address self,address creator);&#13;
    event EventSealed(address self); //invoked when contract is sealed&#13;
    event EventChanged(address self,string property); // generic property change&#13;
    event EventChangedInt32(address self,string property,int32 value); //Int32 property change&#13;
    event EventChangedString(address self,string property,string value); //string property Change&#13;
    event EventChangedAddress(address self,string property,address value); //address property Changed&#13;
    &#13;
  &#13;
}&#13;
&#13;
&#13;
//ChainedContract&#13;
contract AgriChainContract   is BaseAgriChainContract    &#13;
{     string public AgriChainType;&#13;
      address public  AgriChainNextData;&#13;
      address public  AgriChainPrevData;&#13;
      address public  AgriChainRootData;&#13;
    &#13;
    function   AgriChainDataContract() public&#13;
    {&#13;
        AgriChainNextData=address(this);&#13;
        AgriChainPrevData=address(this);&#13;
        AgriChainRootData=address(this);&#13;
    }&#13;
    &#13;
     &#13;
      &#13;
      &#13;
      &#13;
    function setChain(string _Type,address _Next,address _Prev, address _Root)  onlyBy(creator)  &#13;
    {&#13;
         AgriChainType=_Type;&#13;
         AgriChainNextData=_Next;&#13;
         AgriChainPrevData=_Prev;&#13;
         AgriChainRootData=_Root;&#13;
         EventChanged(this,'Chain');&#13;
    }&#13;
    &#13;
     function setChainNext(address _Next)  onlyBy(creator)  &#13;
    {&#13;
         AgriChainNextData=_Next;&#13;
         EventChangedAddress(this,'ChainNext',_Next);&#13;
    }&#13;
   &#13;
&#13;
    function setChainPrev(address _Prev)  onlyBy(creator)  &#13;
    {&#13;
         AgriChainPrevData=_Prev;&#13;
         EventChangedAddress(this,'ChainNext',_Prev);&#13;
    }&#13;
    &#13;
   &#13;
   function setChainRoot(address _Root)  onlyBy(creator)  &#13;
    {&#13;
         AgriChainRootData=_Root;&#13;
         EventChangedAddress(this,'ChainRoot',_Root);&#13;
    }&#13;
    &#13;
     function setChainType(string _Type)  onlyBy(creator)  &#13;
    {&#13;
         AgriChainType=_Type;&#13;
         EventChangedString(this,'ChainType',_Type);&#13;
    }&#13;
      &#13;
}&#13;
&#13;
&#13;
// Master activities &#13;
contract AgriChainMasterContract   is AgriChainContract    &#13;
{  &#13;
    address public  AgriChainContext;  //Context Data Chain&#13;
    address public  AgriChainCultivation;  //Cultivation Data Chain&#13;
    address public  AgriChainProduction;   //Production Data Chain&#13;
    address public  AgriChainDistribution; //Distribution Data Chain&#13;
    address public  AgriChainDocuments; //Distribution Data Chain&#13;
&#13;
    function   AgriChainMasterContract() public&#13;
    { &#13;
       AgriChainContext=address(this);&#13;
       AgriChainCultivation=address(this);&#13;
       AgriChainProduction=address(this);&#13;
       AgriChainDistribution=address(this);&#13;
       &#13;
    }&#13;
    function setAgriChainProduction(address _AgriChain)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
         AgriChainProduction = _AgriChain;&#13;
         EventChangedAddress(this,'AgriChainProduction',_AgriChain);&#13;
    }&#13;
    function setAgriChainCultivation(address _AgriChain)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
         AgriChainCultivation = _AgriChain;&#13;
         EventChangedAddress(this,'AgriChainCultivation',_AgriChain);&#13;
    }&#13;
    function setAgriChainDistribution(address _AgriChain)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
         AgriChainDistribution = _AgriChain;&#13;
         EventChangedAddress(this,'AgriChainDistribution',_AgriChain);&#13;
    }&#13;
    &#13;
    function setAgriChainDocuments(address _AgriChain)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
         AgriChainDocuments = _AgriChain;&#13;
         EventChangedAddress(this,'AgriChainDocuments',_AgriChain);&#13;
    }&#13;
    function setAgriChainContext(address _AgriChain)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
         AgriChainContext = _AgriChain;&#13;
         EventChangedAddress(this,'AgriChainContext',_AgriChain);&#13;
    }&#13;
    &#13;
}&#13;
&#13;
&#13;
&#13;
// legacy production contract &#13;
contract AgriChainProductionContract   is BaseAgriChainContract    &#13;
{  &#13;
    string  public  Organization;      //Production Organization&#13;
    string  public  Product ;          //Product&#13;
    string  public  Description ;      //Description&#13;
    address public  AgriChainData;     //ProductionData&#13;
    string  public  AgriChainSeal;     //SecuritySeal&#13;
    string  public  Notes ;&#13;
    &#13;
    function   AgriChainProductionContract() public&#13;
    { &#13;
       AgriChainData=address(this);&#13;
    }&#13;
    &#13;
    function setOrganization(string _Organization)  onlyBy(creator)  onlyIfNotSealed()&#13;
    {&#13;
          Organization = _Organization;&#13;
          EventChangedString(this,'Organization',_Organization);&#13;
&#13;
    }&#13;
    &#13;
    function setProduct(string _Product)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
          Product = _Product;&#13;
          EventChangedString(this,'Product',_Product);&#13;
        &#13;
    }&#13;
    &#13;
    function setDescription(string _Description)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
          Description = _Description;&#13;
          EventChangedString(this,'Description',_Description);&#13;
    }&#13;
    function setAgriChainData(address _AgriChainData)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
         AgriChainData = _AgriChainData;&#13;
         EventChangedAddress(this,'AgriChainData',_AgriChainData);&#13;
    }&#13;
    &#13;
    &#13;
    function setAgriChainSeal(string _AgriChainSeal)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
         AgriChainSeal = _AgriChainSeal;&#13;
         EventChangedString(this,'AgriChainSeal',_AgriChainSeal);&#13;
    }&#13;
    &#13;
    &#13;
     &#13;
    function setNotes(string _Notes)  onlyBy(creator)&#13;
    {&#13;
         Notes =  _Notes;&#13;
         EventChanged(this,'Notes');&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
//LoggedData&#13;
contract AgriChainDataContract   is AgriChainContract    &#13;
{  &#13;
      string public AgriChainLabel;&#13;
      string public AgriChainLabelInt;&#13;
      string public AgriChainDescription;&#13;
      string public AgriChainDescriptionInt;&#13;
      &#13;
    &#13;
    //main language data  &#13;
    function setData(string _Label,string _Description)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
         &#13;
          AgriChainLabel=_Label;&#13;
          AgriChainDescription=_Description;&#13;
          EventChanged(this,'Data');&#13;
    }&#13;
   &#13;
    //International language data&#13;
    function setDataInt(string _LabelInt,string _DescriptionInt)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
          &#13;
          AgriChainLabelInt=_LabelInt;&#13;
          AgriChainDescriptionInt=_DescriptionInt;&#13;
          EventChanged(this,'DataInt');&#13;
    }&#13;
   &#13;
      &#13;
}&#13;
&#13;
//External DocumentData&#13;
//the extenal document is hashed  and chained as described by this contract&#13;
contract AgriChainDocumentContract   is AgriChainDataContract    &#13;
{  &#13;
     &#13;
    string  public  Emitter;      //Organization&#13;
&#13;
    string  public  Name;         //Name&#13;
    string  public  NameInt;         //Name International&#13;
&#13;
    string  public  FileName;     //FileName&#13;
    string  public  FileHash;     //FileHash&#13;
    string  public  FileData;     //FileData&#13;
   &#13;
    string  public  FileNameInt;  //FileName International&#13;
    string  public  FileHashInt;  //FileHash International&#13;
    string  public  FileDataInt;  //FileData International&#13;
&#13;
    string  public  Notes ;&#13;
    address public  CurrentRevision; &#13;
    &#13;
    function   AgriChainDocumentContract() public&#13;
    {&#13;
        CurrentRevision=address(this);&#13;
    }&#13;
    &#13;
    function setDocumentData(string _Emitter,string _Name, string _FileName,string _FileHash,string _FileData)  onlyBy(creator) onlyIfNotSealed()&#13;
    {&#13;
          Emitter=_Emitter;&#13;
          Name=_Name;&#13;
          FileName=_FileName;&#13;
          FileHash=_FileHash;&#13;
          FileData=_FileData;          &#13;
          EventChanged(this,'setDocumentData');&#13;
       &#13;
    } &#13;
    &#13;
    function setCurrentRevision(address _Revision)  onlyBy(creator)  &#13;
    {&#13;
          CurrentRevision = _Revision;&#13;
          EventChangedAddress(this,'CurrentRevision',_Revision);&#13;
        &#13;
    } &#13;
     &#13;
     &#13;
    function setNotes(string _Notes)  onlyBy(creator)&#13;
    {&#13;
         Notes =  _Notes;&#13;
         &#13;
    }&#13;
}&#13;
&#13;
&#13;
//Production Quntity counter contract&#13;
//the spedified production si accounted by this contract&#13;
contract AgriChainProductionLotContract   is AgriChainDataContract    &#13;
{  &#13;
    &#13;
     int32  public QuantityInitial;&#13;
     int32  public QuantityAvailable;&#13;
     string public QuantityUnit;&#13;
    &#13;
    function InitQuantity(int32 _Initial,string _Unit)  onlyBy(creator)  onlyIfNotSealed()&#13;
    {&#13;
          QuantityInitial = _Initial;&#13;
          QuantityAvailable = _Initial;&#13;
          QuantityUnit = _Unit;&#13;
          EventChangedInt32(this,'QuantityInitial',_Initial);&#13;
&#13;
    }&#13;
  &#13;
    function UseQuantity(int32 _Use)  onlyBy(creator)  &#13;
    {&#13;
          QuantityAvailable = QuantityAvailable-_Use;&#13;
          EventChangedInt32(this,'QuantityAvailable',QuantityAvailable);&#13;
&#13;
    }&#13;
  &#13;
}
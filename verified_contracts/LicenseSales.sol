pragma solidity 0.4.24;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="ddb9bcabb89dbcb6b2b0bfbcf3beb2b0">[emailÂ protected]</a>&#13;
// released under Apache 2.0 licence&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  function Ownable() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    OwnershipTransferred(owner, newOwner);&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
contract BasicToken is ERC20Basic {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  uint256 totalSupply_;&#13;
&#13;
  /**&#13;
  * @dev total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return totalSupply_;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[msg.sender]);&#13;
&#13;
    // SafeMath.sub will throw if there is not enough balance.&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    Transfer(msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract Pausable is Ownable {&#13;
  event Pause();&#13;
  event Unpause();&#13;
&#13;
  bool public paused = false;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is not paused.&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is paused.&#13;
   */&#13;
  modifier whenPaused() {&#13;
    require(paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to pause, triggers stopped state&#13;
   */&#13;
  function pause() onlyOwner whenNotPaused public {&#13;
    paused = true;&#13;
    Pause();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to unpause, returns to normal state&#13;
   */&#13;
  function unpause() onlyOwner whenPaused public {&#13;
    paused = false;&#13;
    Unpause();&#13;
  }&#13;
}&#13;
&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender) public view returns (uint256);&#13;
  function transferFrom(address from, address to, uint256 value) public returns (bool);&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
contract StandardToken is ERC20, BasicToken {&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[_from]);&#13;
    require(_value &lt;= allowed[_from][msg.sender]);&#13;
&#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
    Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   *&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address _spender, uint256 _value) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = _value;&#13;
    Approval(msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(address _owner, address _spender) public view returns (uint256) {&#13;
    return allowed[_owner][_spender];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseApproval(address _spender, uint _addedValue) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);&#13;
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   *&#13;
   * approve should be called when allowed[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseApproval(address _spender, uint _subtractedValue) public returns (bool) {&#13;
    uint oldValue = allowed[msg.sender][_spender];&#13;
    if (_subtractedValue &gt; oldValue) {&#13;
      allowed[msg.sender][_spender] = 0;&#13;
    } else {&#13;
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);&#13;
    }&#13;
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract DeconetToken is StandardToken, Ownable, Pausable {&#13;
    // token naming etc&#13;
    string public constant symbol = "DCO";&#13;
    string public constant name = "Deconet Token";&#13;
    uint8 public constant decimals = 18;&#13;
&#13;
    // contract version&#13;
    uint public constant version = 4;&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Constructor&#13;
    // ------------------------------------------------------------------------&#13;
    constructor() public {&#13;
        // 1 billion tokens (1,000,000,000)&#13;
        totalSupply_ = 1000000000 * 10**uint(decimals);&#13;
&#13;
        // transfer initial supply to msg.sender who is also contract owner&#13;
        balances[msg.sender] = totalSupply_;&#13;
        Transfer(address(0), msg.sender, totalSupply_);&#13;
&#13;
        // pause contract until we're ready to allow transfers&#13;
        paused = true;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)&#13;
    // ------------------------------------------------------------------------&#13;
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {&#13;
        return ERC20(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Modifier to make a function callable only when called by the contract owner&#13;
    // or if the contract is not paused.&#13;
    // ------------------------------------------------------------------------&#13;
    modifier whenOwnerOrNotPaused() {&#13;
        require(msg.sender == owner || !paused);&#13;
        _;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier&#13;
    // ------------------------------------------------------------------------&#13;
    function transfer(address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {&#13;
        return super.transfer(_to, _value);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier&#13;
    // ------------------------------------------------------------------------&#13;
    function transferFrom(address _from, address _to, uint256 _value) public whenOwnerOrNotPaused returns (bool) {&#13;
        return super.transferFrom(_from, _to, _value);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier&#13;
    // ------------------------------------------------------------------------&#13;
    function approve(address _spender, uint256 _value) public whenOwnerOrNotPaused returns (bool) {&#13;
        return super.approve(_spender, _value);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier&#13;
    // ------------------------------------------------------------------------&#13;
    function increaseApproval(address _spender, uint _addedValue) public whenOwnerOrNotPaused returns (bool success) {&#13;
        return super.increaseApproval(_spender, _addedValue);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // overloaded openzepplin method to add whenOwnerOrNotPaused modifier&#13;
    // ------------------------------------------------------------------------&#13;
    function decreaseApproval(address _spender, uint _subtractedValue) public whenOwnerOrNotPaused returns (bool success) {&#13;
        return super.decreaseApproval(_spender, _subtractedValue);&#13;
    }&#13;
}&#13;
&#13;
contract Relay is Ownable {&#13;
    address public licenseSalesContractAddress;&#13;
    address public registryContractAddress;&#13;
    address public apiRegistryContractAddress;&#13;
    address public apiCallsContractAddress;&#13;
    uint public version;&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Constructor, establishes ownership because contract is owned&#13;
    // ------------------------------------------------------------------------&#13;
    constructor() public {&#13;
        version = 4;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)&#13;
    // ------------------------------------------------------------------------&#13;
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {&#13;
        return ERC20(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Sets the license sales contract address&#13;
    // ------------------------------------------------------------------------&#13;
    function setLicenseSalesContractAddress(address newAddress) public onlyOwner {&#13;
        require(newAddress != address(0));&#13;
        licenseSalesContractAddress = newAddress;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Sets the registry contract address&#13;
    // ------------------------------------------------------------------------&#13;
    function setRegistryContractAddress(address newAddress) public onlyOwner {&#13;
        require(newAddress != address(0));&#13;
        registryContractAddress = newAddress;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Sets the api registry contract address&#13;
    // ------------------------------------------------------------------------&#13;
    function setApiRegistryContractAddress(address newAddress) public onlyOwner {&#13;
        require(newAddress != address(0));&#13;
        apiRegistryContractAddress = newAddress;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Sets the api calls contract address&#13;
    // ------------------------------------------------------------------------&#13;
    function setApiCallsContractAddress(address newAddress) public onlyOwner {&#13;
        require(newAddress != address(0));&#13;
        apiCallsContractAddress = newAddress;&#13;
    }&#13;
}&#13;
contract Registry is Ownable {&#13;
&#13;
    struct ModuleForSale {&#13;
        uint price;&#13;
        bytes32 sellerUsername;&#13;
        bytes32 moduleName;&#13;
        address sellerAddress;&#13;
        bytes4 licenseId;&#13;
    }&#13;
&#13;
    mapping(string =&gt; uint) internal moduleIds;&#13;
    mapping(uint =&gt; ModuleForSale) public modules;&#13;
&#13;
    uint public numModules;&#13;
    uint public version;&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Constructor, establishes ownership because contract is owned&#13;
    // ------------------------------------------------------------------------&#13;
    constructor() public {&#13;
        numModules = 0;&#13;
        version = 1;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)&#13;
    // ------------------------------------------------------------------------&#13;
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {&#13;
        return ERC20(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Lets a user list a software module for sale in this registry&#13;
    // ------------------------------------------------------------------------&#13;
    function listModule(uint price, bytes32 sellerUsername, bytes32 moduleName, string usernameAndProjectName, bytes4 licenseId) public {&#13;
        // make sure input params are valid&#13;
        require(price != 0 &amp;&amp; sellerUsername != "" &amp;&amp; moduleName != "" &amp;&amp; bytes(usernameAndProjectName).length != 0 &amp;&amp; licenseId != 0);&#13;
&#13;
        // make sure the name isn't already taken&#13;
        require(moduleIds[usernameAndProjectName] == 0);&#13;
&#13;
        numModules += 1;&#13;
        moduleIds[usernameAndProjectName] = numModules;&#13;
&#13;
        ModuleForSale storage module = modules[numModules];&#13;
&#13;
        module.price = price;&#13;
        module.sellerUsername = sellerUsername;&#13;
        module.moduleName = moduleName;&#13;
        module.sellerAddress = msg.sender;&#13;
        module.licenseId = licenseId;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Get the ID number of a module given the username and project name of that module&#13;
    // ------------------------------------------------------------------------&#13;
    function getModuleId(string usernameAndProjectName) public view returns (uint) {&#13;
        return moduleIds[usernameAndProjectName];&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Get info stored for a module by id&#13;
    // ------------------------------------------------------------------------&#13;
    function getModuleById(&#13;
        uint moduleId&#13;
    ) &#13;
        public &#13;
        view &#13;
        returns (&#13;
            uint price, &#13;
            bytes32 sellerUsername, &#13;
            bytes32 moduleName, &#13;
            address sellerAddress, &#13;
            bytes4 licenseId&#13;
        ) &#13;
    {&#13;
        ModuleForSale storage module = modules[moduleId];&#13;
        &#13;
&#13;
        if (module.sellerAddress == address(0)) {&#13;
            return;&#13;
        }&#13;
&#13;
        price = module.price;&#13;
        sellerUsername = module.sellerUsername;&#13;
        moduleName = module.moduleName;&#13;
        sellerAddress = module.sellerAddress;&#13;
        licenseId = module.licenseId;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // get info stored for a module by name&#13;
    // ------------------------------------------------------------------------&#13;
    function getModuleByName(&#13;
        string usernameAndProjectName&#13;
    ) &#13;
        public &#13;
        view&#13;
        returns (&#13;
            uint price, &#13;
            bytes32 sellerUsername, &#13;
            bytes32 moduleName, &#13;
            address sellerAddress, &#13;
            bytes4 licenseId&#13;
        ) &#13;
    {&#13;
        uint moduleId = moduleIds[usernameAndProjectName];&#13;
        if (moduleId == 0) {&#13;
            return;&#13;
        }&#13;
        ModuleForSale storage module = modules[moduleId];&#13;
&#13;
        price = module.price;&#13;
        sellerUsername = module.sellerUsername;&#13;
        moduleName = module.moduleName;&#13;
        sellerAddress = module.sellerAddress;&#13;
        licenseId = module.licenseId;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Edit a module listing&#13;
    // ------------------------------------------------------------------------&#13;
    function editModule(uint moduleId, uint price, address sellerAddress, bytes4 licenseId) public {&#13;
        // Make sure input params are valid&#13;
        require(moduleId != 0 &amp;&amp; price != 0 &amp;&amp; sellerAddress != address(0) &amp;&amp; licenseId != 0);&#13;
&#13;
        ModuleForSale storage module = modules[moduleId];&#13;
&#13;
        // prevent editing an empty module (effectively listing a module)&#13;
        require(&#13;
            module.price != 0 &amp;&amp; module.sellerUsername != "" &amp;&amp; module.moduleName != "" &amp;&amp; module.licenseId != 0 &amp;&amp; module.sellerAddress != address(0)&#13;
        );&#13;
&#13;
        // require that sender is the original module lister, or the contract owner&#13;
        // the contract owner clause lets us recover a module listing if a dev loses access to their privkey&#13;
        require(msg.sender == module.sellerAddress || msg.sender == owner);&#13;
&#13;
        module.price = price;&#13;
        module.sellerAddress = sellerAddress;&#13;
        module.licenseId = licenseId;&#13;
    }&#13;
}&#13;
contract LicenseSales is Ownable {&#13;
    using SafeMath for uint;&#13;
&#13;
    // the amount rewarded to a seller for selling a license&#13;
    uint public tokenReward;&#13;
&#13;
    // the fee this contract takes from every sale.  expressed as percent.  so a value of 3 indicates a 3% txn fee&#13;
    uint public saleFee;&#13;
&#13;
    // address of the relay contract which holds the address of the registry contract.&#13;
    address public relayContractAddress;&#13;
&#13;
    // the token address&#13;
    address public tokenContractAddress;&#13;
&#13;
    // this contract version&#13;
    uint public version;&#13;
&#13;
    // the address that is authorized to withdraw eth&#13;
    address private withdrawAddress;&#13;
&#13;
    event LicenseSale(&#13;
        bytes32 moduleName,&#13;
        bytes32 sellerUsername,&#13;
        address indexed sellerAddress,&#13;
        address indexed buyerAddress,&#13;
        uint price,&#13;
        uint soldAt,&#13;
        uint rewardedTokens,&#13;
        uint networkFee,&#13;
        bytes4 licenseId&#13;
    );&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Constructor&#13;
    // ------------------------------------------------------------------------&#13;
    constructor() public {&#13;
        version = 1;&#13;
&#13;
        // default token reward of 100 tokens.  &#13;
        // token has 18 decimal places so that's why 100 * 10^18&#13;
        tokenReward = 100 * 10**18;&#13;
&#13;
        // default saleFee of 10%&#13;
        saleFee = 10;&#13;
&#13;
        // default withdrawAddress is owner&#13;
        withdrawAddress = msg.sender;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can transfer out any accidentally sent ERC20 tokens (just in case)&#13;
    // ------------------------------------------------------------------------&#13;
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyOwner returns (bool success) {&#13;
        return ERC20(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can transfer out any ETH&#13;
    // ------------------------------------------------------------------------&#13;
    function withdrawEther() public {&#13;
        require(msg.sender == withdrawAddress);&#13;
        withdrawAddress.transfer(this.balance);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can set address of who can withdraw&#13;
    // ------------------------------------------------------------------------&#13;
    function setWithdrawAddress(address _withdrawAddress) public onlyOwner {&#13;
        require(_withdrawAddress != address(0));&#13;
        withdrawAddress = _withdrawAddress;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can set address of relay contract&#13;
    // ------------------------------------------------------------------------&#13;
    function setRelayContractAddress(address _relayContractAddress) public onlyOwner {&#13;
        require(_relayContractAddress != address(0));&#13;
        relayContractAddress = _relayContractAddress;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can set address of token contract&#13;
    // ------------------------------------------------------------------------&#13;
    function setTokenContractAddress(address _tokenContractAddress) public onlyOwner {&#13;
        require(_tokenContractAddress != address(0));&#13;
        tokenContractAddress = _tokenContractAddress;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can set token reward&#13;
    // ------------------------------------------------------------------------&#13;
    function setTokenReward(uint _tokenReward) public onlyOwner {&#13;
        tokenReward = _tokenReward;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can set the sale fee&#13;
    // ------------------------------------------------------------------------&#13;
    function setSaleFee(uint _saleFee) public onlyOwner {&#13;
        saleFee = _saleFee;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Anyone can make a sale if they provide a moduleId&#13;
    // ------------------------------------------------------------------------&#13;
    function makeSale(uint moduleId) public payable {&#13;
        require(moduleId != 0);&#13;
&#13;
        // look up the registry address from relay token&#13;
        Relay relay = Relay(relayContractAddress);&#13;
        address registryAddress = relay.registryContractAddress();&#13;
&#13;
        // get the module info from registry&#13;
        Registry registry = Registry(registryAddress);&#13;
&#13;
        uint price;&#13;
        bytes32 sellerUsername;&#13;
        bytes32 moduleName;&#13;
        address sellerAddress;&#13;
        bytes4 licenseId;&#13;
&#13;
        (price, sellerUsername, moduleName, sellerAddress, licenseId) = registry.getModuleById(moduleId);&#13;
&#13;
        // make sure the customer has sent enough eth&#13;
        require(msg.value &gt;= price);&#13;
&#13;
        // make sure the module is actually valid&#13;
        require(sellerUsername != "" &amp;&amp; moduleName != "" &amp;&amp; sellerAddress != address(0) &amp;&amp; licenseId != "");&#13;
&#13;
        // calculate fee and payout&#13;
        uint fee = msg.value.mul(saleFee).div(100); &#13;
        uint payout = msg.value.sub(fee);&#13;
&#13;
        // log the sale&#13;
        emit LicenseSale(&#13;
            moduleName,&#13;
            sellerUsername,&#13;
            sellerAddress,&#13;
            msg.sender,&#13;
            price,&#13;
            block.timestamp,&#13;
            tokenReward,&#13;
            fee,&#13;
            licenseId&#13;
        );&#13;
&#13;
        // give seller some tokens for the sale&#13;
        rewardTokens(sellerAddress);&#13;
        &#13;
        // pay seller the ETH&#13;
        sellerAddress.transfer(payout);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Reward user with tokens IF the contract has them in it's allowance&#13;
    // ------------------------------------------------------------------------&#13;
    function rewardTokens(address toReward) private {&#13;
        DeconetToken token = DeconetToken(tokenContractAddress);&#13;
        address tokenOwner = token.owner();&#13;
&#13;
        // check balance of tokenOwner&#13;
        uint tokenOwnerBalance = token.balanceOf(tokenOwner);&#13;
        uint tokenOwnerAllowance = token.allowance(tokenOwner, address(this));&#13;
        if (tokenOwnerBalance &gt;= tokenReward &amp;&amp; tokenOwnerAllowance &gt;= tokenReward) {&#13;
            token.transferFrom(tokenOwner, toReward, tokenReward);&#13;
        }&#13;
    }&#13;
}
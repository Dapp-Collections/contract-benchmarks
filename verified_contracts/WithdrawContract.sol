//File: node_modules/giveth-common-contracts/contracts/ERC20.sol
pragma solidity ^0.4.15;


/**
 * @title ERC20
 * @dev A standard interface for tokens.
 * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md
 */
contract ERC20 {
  
    /// @dev Returns the total token supply.
    function totalSupply() public constant returns (uint256 supply);

    /// @dev Returns the account balance of another account with address _owner.
    function balanceOf(address _owner) public constant returns (uint256 balance);

    /// @dev Transfers _value amount of tokens to address _to
    function transfer(address _to, uint256 _value) public returns (bool success);

    /// @dev Transfers _value amount of tokens from address _from to address _to
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    /// @dev Allows _spender to withdraw from your account multiple times, up to the _value amount
    function approve(address _spender, uint256 _value) public returns (bool success);

    /// @dev Returns the amount which _spender is still allowed to withdraw from _owner.
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);

}
//File: node_modules/giveth-common-contracts/contracts/Owned.sol
pragma solidity ^0.4.15;


/// @title Owned
/// @author Adrià Massanet <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3f5e5b4d565e7f5c505b5a5c50514b5a474b115650">[email protected]</a>&gt;&#13;
/// @notice The Owned contract has an owner address, and provides basic &#13;
///  authorization control functions, this simplifies &amp; the implementation of&#13;
///  "user permissions"&#13;
contract Owned {&#13;
&#13;
    address public owner;&#13;
    address public newOwnerCandidate;&#13;
&#13;
    event OwnershipRequested(address indexed by, address indexed to);&#13;
    event OwnershipTransferred(address indexed from, address indexed to);&#13;
    event OwnershipRemoved();&#13;
&#13;
    /// @dev The constructor sets the `msg.sender` as the`owner` of the contract&#13;
    function Owned() {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev `owner` is the only address that can call a function with this&#13;
    /// modifier&#13;
    modifier onlyOwner() {&#13;
        require (msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice `owner` can step down and assign some other address to this role&#13;
    /// @param _newOwner The address of the new owner.&#13;
    function changeOwnership(address _newOwner) onlyOwner {&#13;
        require(_newOwner != 0x0);&#13;
&#13;
        address oldOwner = owner;&#13;
        owner = _newOwner;&#13;
        newOwnerCandidate = 0x0;&#13;
&#13;
        OwnershipTransferred(oldOwner, owner);&#13;
    }&#13;
&#13;
    /// @notice `onlyOwner` Proposes to transfer control of the contract to a&#13;
    ///  new owner&#13;
    /// @param _newOwnerCandidate The address being proposed as the new owner&#13;
    function proposeOwnership(address _newOwnerCandidate) onlyOwner {&#13;
        newOwnerCandidate = _newOwnerCandidate;&#13;
        OwnershipRequested(msg.sender, newOwnerCandidate);&#13;
    }&#13;
&#13;
    /// @notice Can only be called by the `newOwnerCandidate`, accepts the&#13;
    ///  transfer of ownership&#13;
    function acceptOwnership() {&#13;
        require(msg.sender == newOwnerCandidate);&#13;
&#13;
        address oldOwner = owner;&#13;
        owner = newOwnerCandidate;&#13;
        newOwnerCandidate = 0x0;&#13;
&#13;
        OwnershipTransferred(oldOwner, owner);&#13;
    }&#13;
&#13;
    /// @notice Decentralizes the contract, this operation cannot be undone &#13;
    /// @param _dac `0xdac` has to be entered for this function to work&#13;
    function removeOwnership(address _dac) onlyOwner {&#13;
        require(_dac == 0xdac);&#13;
        owner = 0x0;&#13;
        newOwnerCandidate = 0x0;&#13;
        OwnershipRemoved();     &#13;
    }&#13;
&#13;
} &#13;
&#13;
//File: node_modules/giveth-common-contracts/contracts/Escapable.sol&#13;
/*&#13;
    Copyright 2016, Jordi Baylina&#13;
    Contributor: Adrià Massanet &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3e5f5a4c575f7e5d515a5b5d51504a5b464a105751">[email protected]</a>&gt;&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
*/&#13;
&#13;
pragma solidity ^0.4.15;&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @dev `Escapable` is a base level contract built off of the `Owned`&#13;
///  contract that creates an escape hatch function to send its ether to&#13;
///  `escapeHatchDestination` when called by the `escapeHatchCaller` in the case that&#13;
///  something unexpected happens&#13;
contract Escapable is Owned {&#13;
    address public escapeHatchCaller;&#13;
    address public escapeHatchDestination;&#13;
    mapping (address=&gt;bool) private escapeBlacklist;&#13;
&#13;
    /// @notice The Constructor assigns the `escapeHatchDestination` and the&#13;
    ///  `escapeHatchCaller`&#13;
    /// @param _escapeHatchDestination The address of a safe location (usu a&#13;
    ///  Multisig) to send the ether held in this contract&#13;
    /// @param _escapeHatchCaller The address of a trusted account or contract to&#13;
    ///  call `escapeHatch()` to send the ether in this contract to the&#13;
    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller` cannot move&#13;
    ///  funds out of `escapeHatchDestination`&#13;
    function Escapable(address _escapeHatchCaller, address _escapeHatchDestination) {&#13;
        escapeHatchCaller = _escapeHatchCaller;&#13;
        escapeHatchDestination = _escapeHatchDestination;&#13;
    }&#13;
&#13;
    modifier onlyEscapeHatchCallerOrOwner {&#13;
        require ((msg.sender == escapeHatchCaller)||(msg.sender == owner));&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice The `blacklistEscapeTokens()` marks a token in a whitelist to be&#13;
    ///   escaped. The proupose is to be done at construction time.&#13;
    /// @param _token the be bloacklisted for escape&#13;
    function blacklistEscapeToken(address _token) internal {&#13;
        escapeBlacklist[_token] = true;&#13;
        EscapeHatchBlackistedToken(_token);&#13;
    }&#13;
&#13;
    function isTokenEscapable(address _token) constant public returns (bool) {&#13;
        return !escapeBlacklist[_token];&#13;
    }&#13;
&#13;
    /// @notice The `escapeHatch()` should only be called as a last resort if a&#13;
    /// security issue is uncovered or something unexpected happened&#13;
    /// @param _token to transfer, use 0x0 for ethers&#13;
    function escapeHatch(address _token) public onlyEscapeHatchCallerOrOwner {   &#13;
        require(escapeBlacklist[_token]==false);&#13;
&#13;
        uint256 balance;&#13;
&#13;
        if (_token == 0x0) {&#13;
            balance = this.balance;&#13;
            escapeHatchDestination.transfer(balance);&#13;
            EscapeHatchCalled(_token, balance);&#13;
            return;&#13;
        }&#13;
&#13;
        ERC20 token = ERC20(_token);&#13;
        balance = token.balanceOf(this);&#13;
        token.transfer(escapeHatchDestination, balance);&#13;
        EscapeHatchCalled(_token, balance);&#13;
    }&#13;
&#13;
    /// @notice Changes the address assigned to call `escapeHatch()`&#13;
    /// @param _newEscapeHatchCaller The address of a trusted account or contract to&#13;
    ///  call `escapeHatch()` to send the ether in this contract to the&#13;
    ///  `escapeHatchDestination` it would be ideal that `escapeHatchCaller` cannot&#13;
    ///  move funds out of `escapeHatchDestination`&#13;
    function changeHatchEscapeCaller(address _newEscapeHatchCaller) onlyEscapeHatchCallerOrOwner {&#13;
        escapeHatchCaller = _newEscapeHatchCaller;&#13;
    }&#13;
&#13;
    event EscapeHatchBlackistedToken(address token);&#13;
    event EscapeHatchCalled(address token, uint amount);&#13;
}&#13;
&#13;
//File: ./contracts/WithdrawContract.sol&#13;
pragma solidity ^0.4.18;&#13;
/*&#13;
    Copyright 2017, Jordi Baylina&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
*/&#13;
&#13;
&#13;
/// @dev This declares a few functions from `MiniMeToken` so that the&#13;
///  `WithdrawContract` can interface with the `MiniMeToken`&#13;
contract MiniMeToken {&#13;
    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint);&#13;
    function totalSupplyAt(uint _blockNumber) public constant returns(uint);&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
/// @dev This is the main contract, it is intended to distribute deposited funds&#13;
///  from a TRUSTED `owner` to token holders of a MiniMe style ERC-20 Token;&#13;
///  only deposits from the `owner` using the functions `newTokenPayment()` &amp;&#13;
///  `newEtherPayment()` will be distributed, any other funds sent to this&#13;
///  contract can only be removed via the `escapeHatch()`&#13;
contract WithdrawContract is Escapable {&#13;
&#13;
    /// @dev Tracks the deposits made to this contract&#13;
    struct Deposit {&#13;
        uint block;    // Determines which token holders are able to collect&#13;
        ERC20 token;   // The token address (0x0 if ether)&#13;
        uint amount;   // The amount deposited in the smallest unit (wei if ETH)&#13;
        bool canceled; // True if canceled by the `owner`&#13;
    }&#13;
&#13;
    Deposit[] public deposits; // Array of deposits to this contract&#13;
    MiniMeToken rewardToken;     // Token that is used for withdraws&#13;
&#13;
    mapping (address =&gt; uint) public nextDepositToPayout; // Tracks Payouts&#13;
    mapping (address =&gt; mapping(uint =&gt; bool)) skipDeposits;&#13;
&#13;
/////////&#13;
// Constructor&#13;
/////////&#13;
&#13;
    /// @notice The Constructor creates the `WithdrawContract` on the blockchain&#13;
    ///  the `owner` role is assigned to the address that deploys this contract&#13;
    /// @param _rewardToken The address of the token that is used to determine the&#13;
    ///  distribution of the deposits according to the balance held at the&#13;
    ///  deposit's specified `block`&#13;
    /// @param _escapeHatchCaller The address of a trusted account or contract&#13;
    ///  to call `escapeHatch()` to send the specified token (or ether) held in&#13;
    ///  this contract to the `escapeHatchDestination`&#13;
    /// @param _escapeHatchDestination The address of a safe location (usu a&#13;
    ///  Multisig) to send the ether and tokens held in this contract when the&#13;
    ///  `escapeHatch()` is called&#13;
    function WithdrawContract(&#13;
        MiniMeToken _rewardToken,&#13;
        address _escapeHatchCaller,&#13;
        address _escapeHatchDestination)&#13;
        Escapable(_escapeHatchCaller, _escapeHatchDestination)&#13;
        public&#13;
    {&#13;
        rewardToken = _rewardToken;&#13;
    }&#13;
&#13;
    /// @dev When ether is sent to this contract `newEtherDeposit()` is called&#13;
    function () payable public {&#13;
        newEtherDeposit(0);&#13;
    }&#13;
/////////&#13;
// Owner Functions&#13;
/////////&#13;
&#13;
    /// @notice Adds an ether deposit to `deposits[]`; only the `owner` can&#13;
    ///  deposit into this contract&#13;
    /// @param _block The block height that determines the snapshot of token&#13;
    ///  holders that will be able to withdraw their share of this deposit; this&#13;
    ///  block must be set in the past, if 0 it defaults to one block before the&#13;
    ///  transaction&#13;
    /// @return _idDeposit The id number for the deposit&#13;
    function newEtherDeposit(uint _block)&#13;
        public onlyOwner payable&#13;
        returns (uint _idDeposit)&#13;
    {&#13;
        require(msg.value&gt;0);&#13;
        require(_block &lt; block.number);&#13;
        _idDeposit = deposits.length ++;&#13;
&#13;
        // Record the deposit&#13;
        Deposit storage d = deposits[_idDeposit];&#13;
        d.block = _block == 0 ? block.number -1 : _block;&#13;
        d.token = ERC20(0);&#13;
        d.amount = msg.value;&#13;
        NewDeposit(_idDeposit, ERC20(0), msg.value);&#13;
    }&#13;
&#13;
    /// @notice Adds a token deposit to `deposits[]`; only the `owner` can&#13;
    ///  call this function and it will only work if the account sending the&#13;
    ///  tokens has called `approve()` so that this contract can call&#13;
    ///  `transferFrom()` and take the tokens&#13;
    /// @param _token The address for the ERC20 that is being deposited&#13;
    /// @param _amount The quantity of tokens that is deposited into the&#13;
    ///  contract in the smallest unit of tokens (if a token has its decimals&#13;
    ///  set to 18 and 1 token is sent, the `_amount` would be 10^18)&#13;
    /// @param _block The block height that determines the snapshot of token&#13;
    ///  holders that will be able to withdraw their share of this deposit; this&#13;
    ///  block must be set in the past, if 0 it defaults to one block before the&#13;
    ///  transaction&#13;
    /// @return _idDeposit The id number for the deposit&#13;
    function newTokenDeposit(ERC20 _token, uint _amount, uint _block)&#13;
        public onlyOwner&#13;
        returns (uint _idDeposit)&#13;
    {&#13;
        require(_amount &gt; 0);&#13;
        require(_block &lt; block.number);&#13;
&#13;
        // Must `approve()` this contract in a previous transaction&#13;
        require( _token.transferFrom(msg.sender, address(this), _amount) );&#13;
        _idDeposit = deposits.length ++;&#13;
&#13;
        // Record the deposit&#13;
        Deposit storage d = deposits[_idDeposit];&#13;
        d.block = _block == 0 ? block.number -1 : _block;&#13;
        d.token = _token;&#13;
        d.amount = _amount;&#13;
        NewDeposit(_idDeposit, _token, _amount);&#13;
    }&#13;
&#13;
    /// @notice This function is a failsafe function in case a token is&#13;
    ///  deposited that has an issue that could prevent it's withdraw loop break&#13;
    ///  (e.g. transfers are disabled), can only be called by the `owner`&#13;
    /// @param _idDeposit The id number for the deposit being canceled&#13;
    function cancelPaymentGlobally(uint _idDeposit) public onlyOwner {&#13;
        require(_idDeposit &lt; deposits.length);&#13;
        deposits[_idDeposit].canceled = true;&#13;
        CancelPaymentGlobally(_idDeposit);&#13;
    }&#13;
&#13;
/////////&#13;
// Public Functions&#13;
/////////&#13;
    /// @notice Sends all the tokens and ether to the token holder by looping&#13;
    ///  through all the deposits, determining the appropriate amount by&#13;
    ///  dividing the `totalSupply` by the number of tokens the token holder had&#13;
    ///  at `deposit.block` for each deposit; this function may have to be&#13;
    ///  called multiple times if their are many deposits&#13;
    function withdraw() public {&#13;
        uint acc = 0; // Accumulates the amount of tokens/ether to be sent&#13;
        uint i = nextDepositToPayout[msg.sender]; // Iterates through the deposits&#13;
        require(i&lt;deposits.length);&#13;
        ERC20 currentToken = deposits[i].token; // Sets the `currentToken` to ether&#13;
&#13;
        require(msg.gas&gt;149000); // Throws if there is no gas to do at least a single transfer.&#13;
        while (( i&lt; deposits.length) &amp;&amp; ( msg.gas &gt; 148000)) {&#13;
            Deposit storage d = deposits[i];&#13;
&#13;
            // Make sure `deposit[i]` shouldn't be skipped&#13;
            if ((!d.canceled)&amp;&amp;(!isDepositSkiped(msg.sender, i))) {&#13;
&#13;
                // The current diposti is different of the accumulated until now,&#13;
                // so we return the accumulated tokens until now and resset the&#13;
                // accumulator.&#13;
                if (currentToken != d.token) {&#13;
                    nextDepositToPayout[msg.sender] = i;&#13;
                    require(doPayment(i-1, msg.sender, currentToken, acc));&#13;
                    assert(nextDepositToPayout[msg.sender] == i);&#13;
                    currentToken = d.token;&#13;
                    acc =0;&#13;
                }&#13;
&#13;
                // Accumulate the amount to send for the `currentToken`&#13;
                acc +=  d.amount *&#13;
                        rewardToken.balanceOfAt(msg.sender, d.block) /&#13;
                            rewardToken.totalSupplyAt(d.block);&#13;
            }&#13;
&#13;
            i++; // Next deposit :-D&#13;
        }&#13;
        // Return the accumulated tokens.&#13;
        nextDepositToPayout[msg.sender] = i;&#13;
        require(doPayment(i-1, msg.sender, currentToken, acc));&#13;
        assert(nextDepositToPayout[msg.sender] == i);&#13;
    }&#13;
&#13;
    /// @notice This function is a failsafe function in case a token holder&#13;
    ///  wants to skip a payment, can only be applied to one deposit at a time&#13;
    ///  and only affects the payment for the `msg.sender` calling the function;&#13;
    ///  can be undone by calling again with `skip == false`&#13;
    /// @param _idDeposit The id number for the deposit being canceled&#13;
    /// @param _skip True if the caller wants to skip the payment for `idDeposit`&#13;
    function skipPayment(uint _idDeposit, bool _skip) public {&#13;
        require(_idDeposit &lt; deposits.length);&#13;
        skipDeposits[msg.sender][_idDeposit] = _skip;&#13;
        SkipPayment(_idDeposit, _skip);&#13;
    }&#13;
&#13;
/////////&#13;
// Constant Functions&#13;
/////////&#13;
&#13;
    /// @notice Calculates the amount of a given token (or ether) the holder can&#13;
    ///  receive&#13;
    /// @param _token The address of the token being queried, 0x0 = ether&#13;
    /// @param _holder The address being checked&#13;
    /// @return The amount of `token` able to be collected in the smallest&#13;
    ///  unit of the `token` (wei for ether)&#13;
    function getPendingReward(ERC20 _token, address _holder) public constant returns(uint) {&#13;
        uint acc =0;&#13;
        for (uint i=nextDepositToPayout[msg.sender]; i&lt;deposits.length; i++) {&#13;
            Deposit storage d = deposits[i];&#13;
            if ((d.token == _token)&amp;&amp;(!d.canceled) &amp;&amp; (!isDepositSkiped(_holder, i))) {&#13;
                acc +=  d.amount *&#13;
                    rewardToken.balanceOfAt(_holder, d.block) /&#13;
                        rewardToken.totalSupplyAt(d.block);&#13;
            }&#13;
        }&#13;
        return acc;&#13;
    }&#13;
&#13;
    /// @notice A check to see if a specific address has anything to collect&#13;
    /// @param _holder The address being checked for available deposits&#13;
    /// @return True if there are payments to be collected&#13;
    function canWithdraw(address _holder) public constant returns (bool) {&#13;
        if (nextDepositToPayout[_holder] == deposits.length) return false;&#13;
        for (uint i=nextDepositToPayout[msg.sender]; i&lt;deposits.length; i++) {&#13;
            Deposit storage d = deposits[i];&#13;
            if ((!d.canceled) &amp;&amp; (!isDepositSkiped(_holder, i))) {&#13;
                uint amount =  d.amount *&#13;
                    rewardToken.balanceOfAt(_holder, d.block) /&#13;
                        rewardToken.totalSupplyAt(d.block);&#13;
                if (amount&gt;0) return true;&#13;
            }&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    /// @notice Checks how many deposits have been made&#13;
    /// @return The number of deposits&#13;
    function nDeposits() public constant returns (uint) {&#13;
        return deposits.length;&#13;
    }&#13;
&#13;
    /// @notice Checks to see if a specific deposit has been skipped&#13;
    /// @param _holder The address being checked for available deposits&#13;
    /// @param _idDeposit The id number for the deposit being canceled&#13;
    /// @return True if the specified deposit has been skipped&#13;
    function isDepositSkiped(address _holder, uint _idDeposit) public constant returns(bool) {&#13;
        return skipDeposits[_holder][_idDeposit];&#13;
    }&#13;
&#13;
/////////&#13;
// Internal Functions&#13;
/////////&#13;
&#13;
    /// @notice Transfers `amount` of `token` to `dest`, only used internally,&#13;
    ///  and does not throw, will always return `true` or `false`&#13;
    /// @param _token The address for the ERC20 that is being transferred&#13;
    /// @param _dest The destination address of the transfer&#13;
    /// @param _amount The quantity of tokens that is being transferred&#13;
    ///  denominated in the smallest unit of tokens (if a token has its decimals&#13;
    ///  set to 18 and 1 token is being transferred the `amount` would be 10^18)&#13;
    /// @return True if the payment succeeded&#13;
    function doPayment(uint _idDeposit,  address _dest, ERC20 _token, uint _amount) internal returns (bool) {&#13;
        if (_amount == 0) return true;&#13;
        if (address(_token) == 0) {&#13;
            if (!_dest.send(_amount)) return false;   // If we can't send, we continue...&#13;
        } else {&#13;
            if (!_token.transfer(_dest, _amount)) return false;&#13;
        }&#13;
        Withdraw(_idDeposit, _dest, _token, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    function getBalance(ERC20 _token, address _holder) internal constant returns (uint) {&#13;
        if (address(_token) == 0) {&#13;
            return _holder.balance;&#13;
        } else {&#13;
            return _token.balanceOf(_holder);&#13;
        }&#13;
    }&#13;
&#13;
/////////&#13;
// Events&#13;
/////////&#13;
&#13;
    event Withdraw(uint indexed lastIdPayment, address indexed holder, ERC20 indexed tokenContract, uint amount);&#13;
    event NewDeposit(uint indexed idDeposit, ERC20 indexed tokenContract, uint amount);&#13;
    event CancelPaymentGlobally(uint indexed idDeposit);&#13;
    event SkipPayment(uint indexed idDeposit, bool skip);&#13;
}
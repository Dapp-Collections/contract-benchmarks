pragma solidity ^0.4.18;

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
	address public owner;


	/**
	 * @dev The Ownable constructor sets the original `owner` of the contract to the sender
	 * account.
	 */
	function Ownable() public {
		owner = msg.sender;
	}


	/**
	 * @dev Throws if called by any account other than the owner.
	 */
	modifier onlyOwner() {
		require(msg.sender == owner);
		_;
	}


	/**
	 * @dev Allows the current owner to transfer control of the contract to a newOwner.
	 * @param newOwner The address to transfer ownership to.
	 */
	function transferOwnership(address newOwner) public onlyOwner {
		if (newOwner != address(0)) {
			owner = newOwner;
		}
	}

}


/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="e185849584a18099888e8c9b848fcf828e">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
    // Required methods&#13;
    function totalSupply() public view returns (uint256 total);&#13;
    function balanceOf(address _owner) public view returns (uint256 balance);&#13;
    function ownerOf(uint256 _tokenId) external view returns (address owner);&#13;
    function approve(address _to, uint256 _tokenId) external;&#13;
    function transfer(address _to, uint256 _tokenId) external;&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
&#13;
    // Events&#13;
    event Transfer(address from, address to, uint256 tokenId);&#13;
    event Approval(address owner, address approved, uint256 tokenId);&#13;
&#13;
    // Optional&#13;
    // function name() public view returns (string name);&#13;
    // function symbol() public view returns (string symbol);&#13;
    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);&#13;
    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);&#13;
&#13;
    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool);&#13;
}&#13;
&#13;
&#13;
/// @title SEKRETs&#13;
contract GeneScienceInterface {&#13;
    /// @dev simply a boolean to indicate this is the contract we expect to be&#13;
    function isGeneScience() public pure returns (bool);&#13;
&#13;
    /// @dev given genes of EtherDog 1 &amp; 2, return a genetic combination - may have a random factor&#13;
    /// @param genes1 genes of mom&#13;
    /// @param genes2 genes of sire&#13;
    /// @return the genes that are supposed to be passed down the child&#13;
    function mixGenes(uint256 genes1, uint256 genes2, uint256 targetBlock) public returns (uint256);&#13;
}&#13;
&#13;
&#13;
/// @title A facet of EtherDogCore that manages special access privileges.&#13;
/// @author CybEye (http://www.cybeye.com/us/index.jsp)&#13;
/// @dev See the EtherDogCore contract documentation to understand how the various contract facets are arranged.&#13;
contract EtherDogACL {&#13;
    // This facet controls access control for EtherDogs. There are four roles managed here:&#13;
    //&#13;
    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart&#13;
    //         contracts. It is also the only role that can unpause the smart contract. It is initially&#13;
    //         set to the address that created the smart contract in the EtherDogCore constructor.&#13;
    //&#13;
    //     - The CFO: The CFO can withdraw funds from EtherDogCore and its auction contracts.&#13;
    //&#13;
    //     - The COO: The COO can release gen0 EtherDogs to auction, and mint promo dogs.&#13;
    //&#13;
    // It should be noted that these roles are distinct without overlap in their access abilities, the&#13;
    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any&#13;
    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This&#13;
    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of&#13;
    // convenience. The less we use an address, the less likely it is that we somehow compromise the&#13;
    // account.&#13;
&#13;
    /// @dev Emited when contract is upgraded - See README.md for updgrade plan&#13;
    event ContractUpgrade(address newContract);&#13;
&#13;
    // The addresses of the accounts (or contracts) that can execute actions within each roles.&#13;
    address public ceoAddress;&#13;
    address public cfoAddress;&#13;
    address public cooAddress;&#13;
&#13;
    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked&#13;
    bool public paused = false;&#13;
&#13;
    /// @dev Access modifier for CEO-only functionality&#13;
    modifier onlyCEO() {&#13;
        require(msg.sender == ceoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access modifier for CFO-only functionality&#13;
    modifier onlyCFO() {&#13;
        require(msg.sender == cfoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access modifier for COO-only functionality&#13;
    modifier onlyCOO() {&#13;
        require(msg.sender == cooAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyCLevel() {&#13;
        require(&#13;
            msg.sender == cooAddress ||&#13;
            msg.sender == ceoAddress ||&#13;
            msg.sender == cfoAddress&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.&#13;
    /// @param _newCEO The address of the new CEO&#13;
    function setCEO(address _newCEO) external onlyCEO {&#13;
        require(_newCEO != address(0));&#13;
&#13;
        ceoAddress = _newCEO;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.&#13;
    /// @param _newCFO The address of the new CFO&#13;
    function setCFO(address _newCFO) external onlyCEO {&#13;
        require(_newCFO != address(0));&#13;
&#13;
        cfoAddress = _newCFO;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.&#13;
    /// @param _newCOO The address of the new COO&#13;
    function setCOO(address _newCOO) external onlyCEO {&#13;
        require(_newCOO != address(0));&#13;
&#13;
        cooAddress = _newCOO;&#13;
    }&#13;
&#13;
    /*** Pausable functionality adapted from OpenZeppelin ***/&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS NOT paused&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS paused&#13;
    modifier whenPaused {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Called by any "C-level" role to pause the contract. Used only when&#13;
    ///  a bug or exploit is detected and we need to limit damage.&#13;
    function pause() external onlyCLevel whenNotPaused {&#13;
        paused = true;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the CEO, since&#13;
    ///  one reason we may pause the contract is when CFO or COO accounts are&#13;
    ///  compromised.&#13;
    /// @notice This is public rather than external so it can be called by&#13;
    ///  derived contracts.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        // can't unpause if contract was upgraded&#13;
        paused = false;&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title Base contract for EtherDog. Holds all common structs, events and base variables.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev See the EtherDogCore contract documentation to understand how the various contract facets are arranged.&#13;
contract EtherDogBase is EtherDogACL {&#13;
	/*** EVENTS ***/&#13;
&#13;
	/// @dev The Birth event is fired whenever a new EtherDog comes into existence. This obviously&#13;
	///  includes any time a EtherDog is created through the giveBirth method, but it is also called&#13;
	///  when a new gen0 EtherDog is created.&#13;
	event Birth(address owner, uint256 EtherDogId, uint256 matronId, uint256 sireId, uint256 genes, uint256 generation);&#13;
&#13;
	/// @dev Transfer event as defined in current draft of ERC721. Emitted every time a EtherDog&#13;
	///  ownership is assigned, including births.&#13;
	event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
	/*** DATA TYPES ***/&#13;
&#13;
	/// @dev The main EtherDog struct. Every EtherDog in EtherDog is represented by a copy&#13;
	///  of this structure, so great care was taken to ensure that it fits neatly into&#13;
	///  exactly two 256-bit words. Note that the order of the members in this structure&#13;
	///  is important because of the byte-packing rules used by Ethereum.&#13;
	///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html&#13;
	struct EtherDog {&#13;
		// The EtherDog's genetic code is packed into these 256-bits, the format is&#13;
		// sooper-sekret! A EtherDog's genes never change.&#13;
		uint256 genes;&#13;
&#13;
		// The timestamp from the block when this EtherDog came into existence.&#13;
		uint64 birthTime;&#13;
&#13;
		// The minimum timestamp after which this EtherDog can engage in breeding&#13;
		// activities again. This same timestamp is used for the pregnancy&#13;
		// timer (for matrons) as well as the siring cooldown.&#13;
		uint64 cooldownEndBlock;&#13;
&#13;
		// The ID of the parents of this EtherDog, set to 0 for gen0 EtherDogs.&#13;
		// Note that using 32-bit unsigned integers limits us to a "mere"&#13;
		// 4 billion EtherDogs. This number might seem small until you realize&#13;
		// that Ethereum currently has a limit of about 500 million&#13;
		// transactions per year! So, this definitely won't be a problem&#13;
		// for several years (even as Ethereum learns to scale).&#13;
		uint32 matronId;&#13;
		uint32 sireId;&#13;
&#13;
		// Set to the ID of the sire EtherDog for matrons that are pregnant,&#13;
		// zero otherwise. A non-zero value here is how we know a EtherDog&#13;
		// is pregnant. Used to retrieve the genetic material for the new&#13;
		// EtherDog when the birth transpires.&#13;
		uint32 siringWithId;&#13;
&#13;
		// Set to the index in the cooldown array (see below) that represents&#13;
		// the current cooldown duration for this EtherDog. This starts at zero&#13;
		// for gen0 EtherDogs, and is initialized to floor(generation/2) for others.&#13;
		// Incremented by one for each successful breeding action, regardless&#13;
		// of whether this EtherDog is acting as matron or sire.&#13;
		uint16 cooldownIndex;&#13;
&#13;
		// The "generation number" of this EtherDog. EtherDogs minted by the CZ contract&#13;
		// for sale are called "gen0" and have a generation number of 0. The&#13;
		// generation number of all other EtherDogs is the larger of the two generation&#13;
		// numbers of their parents, plus one.&#13;
		// (i.e. max(matron.generation, sire.generation) + 1)&#13;
		uint16 generation;&#13;
	}&#13;
&#13;
	/*** CONSTANTS ***/&#13;
&#13;
	/// @dev A lookup table inEtherDoging the cooldown duration after any successful&#13;
	///  breeding action, called "pregnancy time" for matrons and "siring cooldown"&#13;
	///  for sires. Designed such that the cooldown roughly doubles each time a EtherDog&#13;
	///  is bred, encouraging owners not to just keep breeding the same EtherDog over&#13;
	///  and over again. Caps out at one week (a EtherDog can breed an unbounded number&#13;
	///  of times, and the maximum cooldown is always seven days).&#13;
	uint32[14] public cooldowns = [&#13;
		uint32(1 minutes),&#13;
		uint32(2 minutes),&#13;
		uint32(5 minutes),&#13;
		uint32(10 minutes),&#13;
		uint32(30 minutes),&#13;
		uint32(1 hours),&#13;
		uint32(2 hours),&#13;
		uint32(4 hours),&#13;
		uint32(8 hours),&#13;
		uint32(16 hours),&#13;
		uint32(1 days),&#13;
		uint32(2 days),&#13;
		uint32(4 days),&#13;
		uint32(7 days)&#13;
	];&#13;
&#13;
	// An approximation of currently how many seconds are in between blocks.&#13;
	uint256 public secondsPerBlock = 15;&#13;
&#13;
	/*** STORAGE ***/&#13;
&#13;
	/// @dev An array containing the EtherDog struct for all EtherDogs in existence. The ID&#13;
	///  of each EtherDog is actually an index into this array. Note that ID 0 is a negaEtherDog,&#13;
	///  the unEtherDog, the mythical beast that is the parent of all gen0 EtherDogs. A bizarre&#13;
	///  creature that is both matron and sire... to itself! Has an invalid genetic code.&#13;
	///  In other words, EtherDog ID 0 is invalid... ;-)&#13;
	EtherDog[] EtherDogs;&#13;
&#13;
	/// @dev A mapping from EtherDog IDs to the address that owns them. All EtherDogs have&#13;
	///  some valid owner address, even gen0 EtherDogs are created with a non-zero owner.&#13;
	mapping (uint256 =&gt; address) public EtherDogIndexToOwner;&#13;
&#13;
	// @dev A mapping from owner address to count of tokens that address owns.&#13;
	//  Used internally inside balanceOf() to resolve ownership count.&#13;
	mapping (address =&gt; uint256) ownershipTokenCount;&#13;
&#13;
	/// @dev A mapping from EtherDogIDs to an address that has been approved to call&#13;
	///  transferFrom(). Each EtherDog can only have one approved address for transfer&#13;
	///  at any time. A zero value means no approval is outstanding.&#13;
	mapping (uint256 =&gt; address) public EtherDogIndexToApproved;&#13;
&#13;
	/// @dev A mapping from EtherDogIDs to an address that has been approved to use&#13;
	///  this EtherDog for siring via breedWith(). Each EtherDog can only have one approved&#13;
	///  address for siring at any time. A zero value means no approval is outstanding.&#13;
	mapping (uint256 =&gt; address) public sireAllowedToAddress;&#13;
&#13;
	/// @dev The address of the ClockAuction contract that handles sales of EtherDogs. This&#13;
	///  same contract handles both peer-to-peer sales as well as the gen0 sales which are&#13;
	///  initiated every 15 minutes.&#13;
	SaleClockAuction public saleAuction;&#13;
&#13;
	/// @dev The address of a custom ClockAuction subclassed contract that handles siring&#13;
	///  auctions. Needs to be separate from saleAuction because the actions taken on success&#13;
	///  after a sales and siring auction are quite different.&#13;
	SiringClockAuction public siringAuction;&#13;
&#13;
	/// @dev Assigns ownership of a specific EtherDog to an address.&#13;
	function _transfer(address _from, address _to, uint256 _tokenId) internal {&#13;
		// Since the number of EtherDogs is capped to 2^32 we can't overflow this&#13;
		ownershipTokenCount[_to]++;&#13;
		// transfer ownership&#13;
		EtherDogIndexToOwner[_tokenId] = _to;&#13;
		// When creating new EtherDogs _from is 0x0, but we can't account that address.&#13;
		if (_from != address(0)) {&#13;
			ownershipTokenCount[_from]--;&#13;
			// once the EtherDog is transferred also clear sire allowances&#13;
			delete sireAllowedToAddress[_tokenId];&#13;
			// clear any previously approved ownership exchange&#13;
			delete EtherDogIndexToApproved[_tokenId];&#13;
		}&#13;
		// Emit the transfer event.&#13;
		Transfer(_from, _to, _tokenId);&#13;
	}&#13;
&#13;
	/// @dev An internal method that creates a new EtherDog and stores it. This&#13;
	///  method doesn't do any checking and should only be called when the&#13;
	///  input data is known to be valid. Will generate both a Birth event&#13;
	///  and a Transfer event.&#13;
	/// @param _matronId The EtherDog ID of the matron of this EtherDog (zero for gen0)&#13;
	/// @param _sireId The EtherDog ID of the sire of this EtherDog (zero for gen0)&#13;
	/// @param _generation The generation number of this EtherDog, must be computed by caller.&#13;
	/// @param _genes The EtherDog's genetic code.&#13;
	/// @param _owner The inital owner of this EtherDog, must be non-zero (except for the unEtherDog, ID 0)&#13;
	function _createEtherDog(&#13;
		uint256 _matronId,&#13;
		uint256 _sireId,&#13;
		uint256 _generation,&#13;
		uint256 _genes,&#13;
		address _owner&#13;
	)&#13;
		internal&#13;
		returns (uint)&#13;
	{&#13;
		// These requires are not strictly necessary, our calling code should make&#13;
		// sure that these conditions are never broken. However! _createEtherDog() is already&#13;
		// an expensive call (for storage), and it doesn't hurt to be especially careful&#13;
		// to ensure our data structures are always valid.&#13;
		require(_matronId == uint256(uint32(_matronId)));&#13;
		require(_sireId == uint256(uint32(_sireId)));&#13;
		require(_generation == uint256(uint16(_generation)));&#13;
&#13;
		// New EtherDog starts with the same cooldown as parent gen/2&#13;
		uint16 cooldownIndex = uint16(_generation / 2);&#13;
		if (cooldownIndex &gt; 13) {&#13;
			cooldownIndex = 13;&#13;
		}&#13;
&#13;
		EtherDog memory _EtherDog = EtherDog({&#13;
			genes: _genes,&#13;
			birthTime: uint64(now),&#13;
			cooldownEndBlock: 0,&#13;
			matronId: uint32(_matronId),&#13;
			sireId: uint32(_sireId),&#13;
			siringWithId: 0,&#13;
			cooldownIndex: cooldownIndex,&#13;
			generation: uint16(_generation)&#13;
		});&#13;
		uint256 newEtherDogId = EtherDogs.push(_EtherDog) - 1;&#13;
&#13;
		// It's probably never going to happen, 4 billion EtherDogs is A LOT, but&#13;
		// let's just be 100% sure we never let this happen.&#13;
		require(newEtherDogId == uint256(uint32(newEtherDogId)));&#13;
&#13;
		// emit the birth event&#13;
		Birth(&#13;
			_owner,&#13;
			newEtherDogId,&#13;
			uint256(_EtherDog.matronId),&#13;
			uint256(_EtherDog.sireId),&#13;
			_EtherDog.genes,&#13;
            uint256(_EtherDog.generation)&#13;
		);&#13;
&#13;
		// This will assign ownership, and also emit the Transfer event as&#13;
		// per ERC721 draft&#13;
		_transfer(0, _owner, newEtherDogId);&#13;
&#13;
		return newEtherDogId;&#13;
	}&#13;
&#13;
	/// @dev An internal method that creates a new EtherDog and stores it. This&#13;
	///  method doesn't do any checking and should only be called when the&#13;
	///  input data is known to be valid. Will generate both a Birth event&#13;
	///  and a Transfer event.&#13;
	/// @param _matronId The EtherDog ID of the matron of this EtherDog (zero for gen0)&#13;
	/// @param _sireId The EtherDog ID of the sire of this EtherDog (zero for gen0)&#13;
	/// @param _generation The generation number of this EtherDog, must be computed by caller.&#13;
	/// @param _genes The EtherDog's genetic code.&#13;
	/// @param _owner The inital owner of this EtherDog, must be non-zero (except for the unEtherDog, ID 0)&#13;
    /// @param _time The birth time of EtherDog&#13;
    /// @param _cooldownIndex The cooldownIndex of EtherDog&#13;
	function _createEtherDogWithTime(&#13;
		uint256 _matronId,&#13;
		uint256 _sireId,&#13;
		uint256 _generation,&#13;
		uint256 _genes,&#13;
		address _owner,&#13;
        uint256 _time,&#13;
        uint256 _cooldownIndex&#13;
	)&#13;
	internal&#13;
	returns (uint)&#13;
	{&#13;
		// These requires are not strictly necessary, our calling code should make&#13;
		// sure that these conditions are never broken. However! _createEtherDog() is already&#13;
		// an expensive call (for storage), and it doesn't hurt to be especially careful&#13;
		// to ensure our data structures are always valid.&#13;
		require(_matronId == uint256(uint32(_matronId)));&#13;
		require(_sireId == uint256(uint32(_sireId)));&#13;
		require(_generation == uint256(uint16(_generation)));&#13;
        require(_time == uint256(uint64(_time)));&#13;
        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));&#13;
&#13;
        // Copy down EtherDog cooldownIndex&#13;
        uint16 cooldownIndex = uint16(_cooldownIndex);&#13;
		if (cooldownIndex &gt; 13) {&#13;
			cooldownIndex = 13;&#13;
		}&#13;
&#13;
		EtherDog memory _EtherDog = EtherDog({&#13;
			genes: _genes,&#13;
			birthTime: uint64(_time),&#13;
			cooldownEndBlock: 0,&#13;
			matronId: uint32(_matronId),&#13;
			sireId: uint32(_sireId),&#13;
			siringWithId: 0,&#13;
			cooldownIndex: cooldownIndex,&#13;
			generation: uint16(_generation)&#13;
			});&#13;
		uint256 newEtherDogId = EtherDogs.push(_EtherDog) - 1;&#13;
&#13;
		// It's probably never going to happen, 4 billion EtherDogs is A LOT, but&#13;
		// let's just be 100% sure we never let this happen.&#13;
		require(newEtherDogId == uint256(uint32(newEtherDogId)));&#13;
&#13;
		// emit the birth event&#13;
		Birth(&#13;
			_owner,&#13;
			newEtherDogId,&#13;
			uint256(_EtherDog.matronId),&#13;
			uint256(_EtherDog.sireId),&#13;
			_EtherDog.genes,&#13;
            uint256(_EtherDog.generation)&#13;
		);&#13;
&#13;
		// This will assign ownership, and also emit the Transfer event as&#13;
		// per ERC721 draft&#13;
		_transfer(0, _owner, newEtherDogId);&#13;
&#13;
		return newEtherDogId;&#13;
	}&#13;
&#13;
	// Any C-level can fix how many seconds per blocks are currently observed.&#13;
	function setSecondsPerBlock(uint256 secs) external onlyCLevel {&#13;
		require(secs &lt; cooldowns[0]);&#13;
		secondsPerBlock = secs;&#13;
	}&#13;
}&#13;
&#13;
&#13;
/// @title The external contract that is responsible for generating metadata for the EtherDogs,&#13;
///  it has one function that will return the data as bytes.&#13;
contract ERC721Metadata {&#13;
    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.&#13;
    function getMetadata(uint256 _tokenId, string) public pure returns (bytes32[4] buffer, uint256 count) {&#13;
        if (_tokenId == 1) {&#13;
            buffer[0] = "Hello World! :D";&#13;
            count = 15;&#13;
        } else if (_tokenId == 2) {&#13;
            buffer[0] = "I would definitely choose a medi";&#13;
            buffer[1] = "um length string.";&#13;
            count = 49;&#13;
        } else if (_tokenId == 3) {&#13;
            buffer[0] = "Lorem ipsum dolor sit amet, mi e";&#13;
            buffer[1] = "st accumsan dapibus augue lorem,";&#13;
            buffer[2] = " tristique vestibulum id, libero";&#13;
            buffer[3] = " suscipit varius sapien aliquam.";&#13;
            count = 128;&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title The facet of the EtherDogs core contract that manages ownership, ERC-721 (draft) compliant.&#13;
/// @dev Ref: https://github.com/ethereum/EIPs/issues/721&#13;
///  See the EtherDogCore contract documentation to understand how the various contract facets are arranged.&#13;
contract EtherDogOwnership is EtherDogBase, ERC721 {&#13;
&#13;
    /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
    string public constant name = "EtherDogs";&#13;
    string public constant symbol = "EDOG";&#13;
&#13;
    // The contract that will return EtherDog metadata&#13;
    ERC721Metadata public erc721Metadata;&#13;
&#13;
    bytes4 constant InterfaceSignature_ERC165 =&#13;
        bytes4(keccak256('supportsInterface(bytes4)'));&#13;
&#13;
    bytes4 constant InterfaceSignature_ERC721 =&#13;
        bytes4(keccak256('name()')) ^&#13;
        bytes4(keccak256('symbol()')) ^&#13;
        bytes4(keccak256('totalSupply()')) ^&#13;
        bytes4(keccak256('balanceOf(address)')) ^&#13;
        bytes4(keccak256('ownerOf(uint256)')) ^&#13;
        bytes4(keccak256('approve(address,uint256)')) ^&#13;
        bytes4(keccak256('transfer(address,uint256)')) ^&#13;
        bytes4(keccak256('transferFrom(address,address,uint256)')) ^&#13;
        bytes4(keccak256('tokensOfOwner(address)')) ^&#13;
        bytes4(keccak256('tokenMetadata(uint256,string)'));&#13;
&#13;
    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).&#13;
    ///  Returns true for any standardized interfaces implemented by this contract. We implement&#13;
    ///  ERC-165 (obviously!) and ERC-721.&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool)&#13;
    {&#13;
        // DEBUG ONLY&#13;
        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) &amp;&amp; (InterfaceSignature_ERC721 == 0x9a20483d));&#13;
&#13;
        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));&#13;
    }&#13;
&#13;
    /// @dev Set the address of the sibling contract that tracks metadata.&#13;
    ///  CEO only.&#13;
    function setMetadataAddress(address _contractAddress) public onlyCEO {&#13;
        erc721Metadata = ERC721Metadata(_contractAddress);&#13;
    }&#13;
&#13;
    // Internal utility functions: These functions all assume that their input arguments&#13;
    // are valid. We leave it to public methods to sanitize their inputs and follow&#13;
    // the required logic.&#13;
&#13;
    /// @dev Checks if a given address is the current owner of a particular EtherDog.&#13;
    /// @param _claimant the address we are validating against.&#13;
    /// @param _tokenId EtherDog id, only valid when &gt; 0&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return EtherDogIndexToOwner[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Checks if a given address currently has transferApproval for a particular EtherDog.&#13;
    /// @param _claimant the address we are confirming EtherDog is approved for.&#13;
    /// @param _tokenId EtherDog id, only valid when &gt; 0&#13;
    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return EtherDogIndexToApproved[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous&#13;
    ///  approval. Setting _approved to address(0) clears all transfer approval.&#13;
    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because&#13;
    ///  _approve() and transferFrom() are used together for putting EtherDogs on auction, and&#13;
    ///  there is no value in spamming the log with Approval events in that case.&#13;
    function _approve(uint256 _tokenId, address _approved) internal {&#13;
        EtherDogIndexToApproved[_tokenId] = _approved;&#13;
    }&#13;
&#13;
    /// @notice Returns the number of EtherDogs owned by a specific address.&#13;
    /// @param _owner The owner address to check.&#13;
    /// @dev Required for ERC-721 compliance&#13;
    function balanceOf(address _owner) public view returns (uint256 count) {&#13;
        return ownershipTokenCount[_owner];&#13;
    }&#13;
&#13;
    /// @notice Transfers a EtherDog to another address. If transferring to a smart&#13;
    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or&#13;
    ///  EtherDogs specifically) or your EtherDog may be lost forever. Seriously.&#13;
    /// @param _to The address of the recipient, can be a user or contract.&#13;
    /// @param _tokenId The ID of the EtherDog to transfer.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function transfer(&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any EtherDogs (except very briefly&#13;
        // after a gen0 dog is created and before it goes on auction).&#13;
        require(_to != address(this));&#13;
        // Disallow transfers to the auction contracts to prevent accidental&#13;
        // misuse. Auction contracts should only take ownership of EtherDogs&#13;
        // through the allow + transferFrom flow.&#13;
        require(_to != address(saleAuction));&#13;
        require(_to != address(siringAuction));&#13;
&#13;
        // You can only send your own dog.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Reassign ownership, clear pending approvals, emit Transfer event.&#13;
        _transfer(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Grant another address the right to transfer a specific EtherDog via&#13;
    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.&#13;
    /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
    ///  clear all approvals.&#13;
    /// @param _tokenId The ID of the EtherDog that can be transferred if this call succeeds.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function approve(&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Only an owner can grant transfer approval.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Register the approval (replacing any previous approval).&#13;
        _approve(_tokenId, _to);&#13;
&#13;
        // Emit approval event.&#13;
        Approval(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Transfer a EtherDog owned by another address, for which the calling address&#13;
    ///  has previously been granted transfer approval by the owner.&#13;
    /// @param _from The address that owns the EtherDog to be transfered.&#13;
    /// @param _to The address that should take ownership of the EtherDog. Can be any address,&#13;
    ///  including the caller.&#13;
    /// @param _tokenId The ID of the EtherDog to be transferred.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function transferFrom(&#13;
        address _from,&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any EtherDogs (except very briefly&#13;
        // after a gen0 dog is created and before it goes on auction).&#13;
        require(_to != address(this));&#13;
        // Check for approval and valid ownership&#13;
        require(_approvedFor(msg.sender, _tokenId));&#13;
        require(_owns(_from, _tokenId));&#13;
&#13;
        // Reassign ownership (also clears pending approvals and emits Transfer event).&#13;
        _transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Returns the total number of EtherDogs currently in existence.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function totalSupply() public view returns (uint) {&#13;
        return EtherDogs.length - 1;&#13;
    }&#13;
&#13;
    /// @notice Returns the address currently assigned ownership of a given EtherDog.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function ownerOf(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns (address owner)&#13;
    {&#13;
        owner = EtherDogIndexToOwner[_tokenId];&#13;
&#13;
        require(owner != address(0));&#13;
    }&#13;
&#13;
    /// @notice Returns a list of all EtherDog IDs assigned to an address.&#13;
    /// @param _owner The owner whose EtherDogs we are interested in.&#13;
    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly&#13;
    ///  expensive (it walks the entire EtherDog array looking for dogs belonging to owner),&#13;
    ///  but it also returns a dynamic array, which is only supported for web3 calls, and&#13;
    ///  not contract-to-contract calls.&#13;
    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {&#13;
        uint256 tokenCount = balanceOf(_owner);&#13;
&#13;
        if (tokenCount == 0) {&#13;
            // Return an empty array&#13;
            return new uint256[](0);&#13;
        } else {&#13;
            uint256[] memory result = new uint256[](tokenCount);&#13;
            uint256 totalDogs = totalSupply();&#13;
            uint256 resultIndex = 0;&#13;
&#13;
            // We count on the fact that all dogs have IDs starting at 1 and increasing&#13;
            // sequentially up to the totalDog count.&#13;
            uint256 dogId;&#13;
&#13;
            for (dogId = 1; dogId &lt;= totalDogs; dogId++) {&#13;
                if (EtherDogIndexToOwner[dogId] == _owner) {&#13;
                    result[resultIndex] = dogId;&#13;
                    resultIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            return result;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6001120103080e0904200e0f14040f144e0e0514">[emailÂ protected]</a>&gt;)&#13;
    ///  This method is licenced under the Apache License.&#13;
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol&#13;
    function _memcpy(uint _dest, uint _src, uint _len) private view {&#13;
        // Copy word-length chunks while possible&#13;
        for(; _len &gt;= 32; _len -= 32) {&#13;
            assembly {&#13;
                mstore(_dest, mload(_src))&#13;
            }&#13;
            _dest += 32;&#13;
            _src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint256 mask = 256 ** (32 - _len) - 1;&#13;
        assembly {&#13;
            let srcpart := and(mload(_src), not(mask))&#13;
            let destpart := and(mload(_dest), mask)&#13;
            mstore(_dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f3928192909b9d9a97b39d9c87979c87dd9d9687">[emailÂ protected]</a>&gt;)&#13;
    ///  This method is licenced under the Apache License.&#13;
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol&#13;
    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {&#13;
        var outputString = new string(_stringLength);&#13;
        uint256 outputPtr;&#13;
        uint256 bytesPtr;&#13;
&#13;
        assembly {&#13;
            outputPtr := add(outputString, 32)&#13;
            bytesPtr := _rawBytes&#13;
        }&#13;
&#13;
        _memcpy(outputPtr, bytesPtr, _stringLength);&#13;
&#13;
        return outputString;&#13;
    }&#13;
&#13;
    /// @notice Returns a URI pointing to a metadata package for this token conforming to&#13;
    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)&#13;
    /// @param _tokenId The ID number of the EtherDog whose metadata should be returned.&#13;
    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {&#13;
        require(erc721Metadata != address(0));&#13;
        bytes32[4] memory buffer;&#13;
        uint256 count;&#13;
        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);&#13;
&#13;
        return _toString(buffer, count);&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title A facet of EtherDogCore that manages EtherDog siring, gestation, and birth.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev See the EtherDogCore contract documentation to understand how the various contract facets are arranged.&#13;
contract EtherDogBreeding is EtherDogOwnership {&#13;
&#13;
    /// @dev The Pregnant event is fired when two dogs successfully breed and the pregnancy&#13;
    ///  timer begins for the matron.&#13;
    event Pregnant(address owner, uint256 matronId, uint256 sireId, uint256 matronCooldownEndBlock, uint256 sireCooldownEndBlock);&#13;
&#13;
    /// @notice The minimum payment required to use breedWithAuto(). This fee goes towards&#13;
    ///  the gas cost paid by whatever calls giveBirth(), and can be dynamically updated by&#13;
    ///  the COO role as the gas price changes.&#13;
    uint256 public autoBirthFee = 2 finney;&#13;
&#13;
    // Keeps track of number of pregnant EtherDogs.&#13;
    uint256 public pregnantEtherDogs;&#13;
&#13;
    /// @dev The address of the sibling contract that is used to implement the sooper-sekret&#13;
    ///  genetic combination algorithm.&#13;
    GeneScienceInterface public geneScience;&#13;
&#13;
    /// @dev Update the address of the genetic contract, can only be called by the CEO.&#13;
    /// @param _address An address of a GeneScience contract instance to be used from this point forward.&#13;
    function setGeneScienceAddress(address _address) external onlyCEO {&#13;
        GeneScienceInterface candidateContract = GeneScienceInterface(_address);&#13;
&#13;
        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117&#13;
        require(candidateContract.isGeneScience());&#13;
&#13;
        // Set the new contract address&#13;
        geneScience = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Checks that a given EtherDog is able to breed. Requires that the&#13;
    ///  current cooldown is finished (for sires) and also checks that there is&#13;
    ///  no pending pregnancy.&#13;
    function _isReadyToBreed(EtherDog _dog) internal view returns (bool) {&#13;
        // In addition to checking the cooldownEndBlock, we also need to check to see if&#13;
        // the dog has a pending birth; there can be some period of time between the end&#13;
        // of the pregnacy timer and the birth event.&#13;
        return (_dog.siringWithId == 0) &amp;&amp; (_dog.cooldownEndBlock &lt;= uint64(block.number));&#13;
    }&#13;
&#13;
    /// @dev Check if a sire has authorized breeding with this matron. True if both sire&#13;
    ///  and matron have the same owner, or if the sire has given siring permission to&#13;
    ///  the matron's owner (via approveSiring()).&#13;
    function _isSiringPermitted(uint256 _sireId, uint256 _matronId) internal view returns (bool) {&#13;
        address matronOwner = EtherDogIndexToOwner[_matronId];&#13;
        address sireOwner = EtherDogIndexToOwner[_sireId];&#13;
&#13;
        // Siring is okay if they have same owner, or if the matron's owner was given&#13;
        // permission to breed with this sire.&#13;
        return (matronOwner == sireOwner || sireAllowedToAddress[_sireId] == matronOwner);&#13;
    }&#13;
&#13;
    /// @dev Set the cooldownEndTime for the given EtherDog, based on its current cooldownIndex.&#13;
    ///  Also increments the cooldownIndex (unless it has hit the cap).&#13;
    /// @param _dog A reference to the EtherDog in storage which needs its timer started.&#13;
    function _triggerCooldown(EtherDog storage _dog) internal {&#13;
        // Compute an estimation of the cooldown time in blocks (based on current cooldownIndex).&#13;
        _dog.cooldownEndBlock = uint64((cooldowns[_dog.cooldownIndex]/secondsPerBlock) + block.number);&#13;
&#13;
        // Increment the breeding count, clamping it at 13, which is the length of the&#13;
        // cooldowns array. We could check the array size dynamically, but hard-coding&#13;
        // this as a constant saves gas. Yay, Solidity!&#13;
        if (_dog.cooldownIndex &lt; 13) {&#13;
            _dog.cooldownIndex += 1;&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Grants approval to another user to sire with one of your EtherDogs.&#13;
    /// @param _addr The address that will be able to sire with your EtherDog. Set to&#13;
    ///  address(0) to clear all siring approvals for this EtherDog.&#13;
    /// @param _sireId A EtherDog that you own that _addr will now be able to sire with.&#13;
    function approveSiring(address _addr, uint256 _sireId)&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        require(_owns(msg.sender, _sireId));&#13;
        sireAllowedToAddress[_sireId] = _addr;&#13;
    }&#13;
&#13;
    /// @dev Updates the minimum payment required for calling giveBirthAuto(). Can only&#13;
    ///  be called by the COO address. (This fee is used to offset the gas cost incurred&#13;
    ///  by the autobirth daemon).&#13;
    function setAutoBirthFee(uint256 val) external onlyCOO {&#13;
        autoBirthFee = val;&#13;
    }&#13;
&#13;
    /// @dev Checks to see if a given EtherDog is pregnant and (if so) if the gestation&#13;
    ///  period has passed.&#13;
    function _isReadyToGiveBirth(EtherDog _matron) private view returns (bool) {&#13;
        return (_matron.siringWithId != 0) &amp;&amp; (_matron.cooldownEndBlock &lt;= uint64(block.number));&#13;
    }&#13;
&#13;
    /// @notice Checks that a given EtherDog is able to breed (i.e. it is not pregnant or&#13;
    ///  in the middle of a siring cooldown).&#13;
    /// @param _EtherDogId reference the id of the EtherDog, any user can inquire about it&#13;
    function isReadyToBreed(uint256 _EtherDogId)&#13;
        public&#13;
        view&#13;
        returns (bool)&#13;
    {&#13;
        require(_EtherDogId &gt; 0);&#13;
        EtherDog storage kit = EtherDogs[_EtherDogId];&#13;
        return _isReadyToBreed(kit);&#13;
    }&#13;
&#13;
    /// @dev Checks whether a EtherDog is currently pregnant.&#13;
    /// @param _EtherDogId reference the id of the EtherDog, any user can inquire about it&#13;
    function isPregnant(uint256 _EtherDogId)&#13;
        public&#13;
        view&#13;
        returns (bool)&#13;
    {&#13;
        require(_EtherDogId &gt; 0);&#13;
        // A EtherDog is pregnant if and only if this field is set&#13;
        return EtherDogs[_EtherDogId].siringWithId != 0;&#13;
    }&#13;
&#13;
    /// @dev Internal check to see if a given sire and matron are a valid mating pair. DOES NOT&#13;
    ///  check ownership permissions (that is up to the caller).&#13;
    /// @param _matron A reference to the EtherDog struct of the potential matron.&#13;
    /// @param _matronId The matron's ID.&#13;
    /// @param _sire A reference to the EtherDog struct of the potential sire.&#13;
    /// @param _sireId The sire's ID&#13;
    function _isValidMatingPair(&#13;
        EtherDog storage _matron,&#13;
        uint256 _matronId,&#13;
        EtherDog storage _sire,&#13;
        uint256 _sireId&#13;
    )&#13;
        private&#13;
        view&#13;
        returns(bool)&#13;
    {&#13;
        // A EtherDog can't breed with itself!&#13;
        if (_matronId == _sireId) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // EtherDogs can't breed with their parents.&#13;
        if (_matron.matronId == _sireId || _matron.sireId == _sireId) {&#13;
            return false;&#13;
        }&#13;
        if (_sire.matronId == _matronId || _sire.sireId == _matronId) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // We can short circuit the sibling check (below) if either dog is&#13;
        // gen zero (has a matron ID of zero).&#13;
        if (_sire.matronId == 0 || _matron.matronId == 0) {&#13;
            return true;&#13;
        }&#13;
&#13;
        // EtherDogs can't breed with full or half siblings.&#13;
        if (_sire.matronId == _matron.matronId || _sire.matronId == _matron.sireId) {&#13;
            return false;&#13;
        }&#13;
        if (_sire.sireId == _matron.matronId || _sire.sireId == _matron.sireId) {&#13;
            return false;&#13;
        }&#13;
&#13;
        // Everything seems cool! Let's get DTF.&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev Internal check to see if a given sire and matron are a valid mating pair for&#13;
    ///  breeding via auction (i.e. skips ownership and siring approval checks).&#13;
    function _canBreedWithViaAuction(uint256 _matronId, uint256 _sireId)&#13;
        internal&#13;
        view&#13;
        returns (bool)&#13;
    {&#13;
        EtherDog storage matron = EtherDogs[_matronId];&#13;
        EtherDog storage sire = EtherDogs[_sireId];&#13;
        return _isValidMatingPair(matron, _matronId, sire, _sireId);&#13;
    }&#13;
&#13;
    /// @notice Checks to see if two dogs can breed together, including checks for&#13;
    ///  ownership and siring approvals. Does NOT check that both dogs are ready for&#13;
    ///  breeding (i.e. breedWith could still fail until the cooldowns are finished).&#13;
    ///  TODO: Shouldn't this check pregnancy and cooldowns?!?&#13;
    /// @param _matronId The ID of the proposed matron.&#13;
    /// @param _sireId The ID of the proposed sire.&#13;
    function canBreedWith(uint256 _matronId, uint256 _sireId)&#13;
        external&#13;
        view&#13;
        returns(bool)&#13;
    {&#13;
        require(_matronId &gt; 0);&#13;
        require(_sireId &gt; 0);&#13;
        EtherDog storage matron = EtherDogs[_matronId];&#13;
        EtherDog storage sire = EtherDogs[_sireId];&#13;
        return _isValidMatingPair(matron, _matronId, sire, _sireId) &amp;&amp;&#13;
            _isSiringPermitted(_sireId, _matronId);&#13;
    }&#13;
&#13;
    /// @dev Internal utility function to initiate breeding, assumes that all breeding&#13;
    ///  requirements have been checked.&#13;
    function _breedWith(uint256 _matronId, uint256 _sireId) internal {&#13;
        // Grab a reference to the EtherDogs from storage.&#13;
        EtherDog storage sire = EtherDogs[_sireId];&#13;
        EtherDog storage matron = EtherDogs[_matronId];&#13;
&#13;
        // Mark the matron as pregnant, keeping track of who the sire is.&#13;
        matron.siringWithId = uint32(_sireId);&#13;
&#13;
        // Trigger the cooldown for both parents.&#13;
        _triggerCooldown(sire);&#13;
        _triggerCooldown(matron);&#13;
&#13;
        // Clear siring permission for both parents. This may not be strictly necessary&#13;
        // but it's likely to avoid confusion!&#13;
        delete sireAllowedToAddress[_matronId];&#13;
        delete sireAllowedToAddress[_sireId];&#13;
&#13;
        // Every time a EtherDog gets pregnant, counter is incremented.&#13;
        pregnantEtherDogs++;&#13;
&#13;
        // Emit the pregnancy event.&#13;
        Pregnant(EtherDogIndexToOwner[_matronId], _matronId, _sireId, matron.cooldownEndBlock, sire.cooldownEndBlock);&#13;
    }&#13;
&#13;
    /// @notice Breed a EtherDog you own (as matron) with a sire that you own, or for which you&#13;
    ///  have previously been given Siring approval. Will either make your dog pregnant, or will&#13;
    ///  fail entirely. Requires a pre-payment of the fee given out to the first caller of giveBirth()&#13;
    /// @param _matronId The ID of the EtherDog acting as matron (will end up pregnant if successful)&#13;
    /// @param _sireId The ID of the EtherDog acting as sire (will begin its siring cooldown if successful)&#13;
    function breedWithAuto(uint256 _matronId, uint256 _sireId)&#13;
        external&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        // Checks for payment.&#13;
        require(msg.value &gt;= autoBirthFee);&#13;
&#13;
        // Caller must own the matron.&#13;
        require(_owns(msg.sender, _matronId));&#13;
&#13;
        // Neither sire nor matron are allowed to be on auction during a normal&#13;
        // breeding operation, but we don't need to check that explicitly.&#13;
        // For matron: The caller of this function can't be the owner of the matron&#13;
        //   because the owner of a EtherDog on auction is the auction house, and the&#13;
        //   auction house will never call breedWith().&#13;
        // For sire: Similarly, a sire on auction will be owned by the auction house&#13;
        //   and the act of transferring ownership will have cleared any oustanding&#13;
        //   siring approval.&#13;
        // Thus we don't need to spend gas explicitly checking to see if either dog&#13;
        // is on auction.&#13;
&#13;
        // Check that matron and sire are both owned by caller, or that the sire&#13;
        // has given siring permission to caller (i.e. matron's owner).&#13;
        // Will fail for _sireId = 0&#13;
        require(_isSiringPermitted(_sireId, _matronId));&#13;
&#13;
        // Grab a reference to the potential matron&#13;
        EtherDog storage matron = EtherDogs[_matronId];&#13;
&#13;
        // Make sure matron isn't pregnant, or in the middle of a siring cooldown&#13;
        require(_isReadyToBreed(matron));&#13;
&#13;
        // Grab a reference to the potential sire&#13;
        EtherDog storage sire = EtherDogs[_sireId];&#13;
&#13;
        // Make sure sire isn't pregnant, or in the middle of a siring cooldown&#13;
        require(_isReadyToBreed(sire));&#13;
&#13;
        // Test that these dogs are a valid mating pair.&#13;
        require(_isValidMatingPair(&#13;
            matron,&#13;
            _matronId,&#13;
            sire,&#13;
            _sireId&#13;
        ));&#13;
&#13;
        // All checks passed, EtherDog gets pregnant!&#13;
        _breedWith(_matronId, _sireId);&#13;
    }&#13;
&#13;
    /// @notice Have a pregnant EtherDog give birth!&#13;
    /// @param _matronId A EtherDog ready to give birth.&#13;
    /// @return The EtherDog ID of the new EtherDog.&#13;
    /// @dev Looks at a given EtherDog and, if pregnant and if the gestation period has passed,&#13;
    ///  combines the genes of the two parents to create a new EtherDog. The new EtherDog is assigned&#13;
    ///  to the current owner of the matron. Upon successful completion, both the matron and the&#13;
    ///  new EtherDog will be ready to breed again. Note that anyone can call this function (if they&#13;
    ///  are willing to pay the gas!), but the new EtherDog always goes to the mother's owner.&#13;
    function giveBirth(uint256 _matronId)&#13;
        external&#13;
        whenNotPaused&#13;
        returns(uint256)&#13;
    {&#13;
        // Grab a reference to the matron in storage.&#13;
        EtherDog storage matron = EtherDogs[_matronId];&#13;
&#13;
        // Check that the matron is a valid dog.&#13;
        require(matron.birthTime != 0);&#13;
&#13;
        // Check that the matron is pregnant, and that its time has come!&#13;
        require(_isReadyToGiveBirth(matron));&#13;
&#13;
        // Grab a reference to the sire in storage.&#13;
        uint256 sireId = matron.siringWithId;&#13;
        EtherDog storage sire = EtherDogs[sireId];&#13;
&#13;
        // Determine the higher generation number of the two parents&#13;
        uint16 parentGen = matron.generation;&#13;
        if (sire.generation &gt; matron.generation) {&#13;
            parentGen = sire.generation;&#13;
        }&#13;
&#13;
        // Call the sooper-sekret gene mixing operation.&#13;
        uint256 childGenes = geneScience.mixGenes(matron.genes, sire.genes, matron.cooldownEndBlock - 1);&#13;
&#13;
        // Make the new EtherDog!&#13;
        address owner = EtherDogIndexToOwner[_matronId];&#13;
        uint256 EtherDogId = _createEtherDog(_matronId, matron.siringWithId, parentGen + 1, childGenes, owner);&#13;
&#13;
        // Clear the reference to sire from the matron (REQUIRED! Having siringWithId&#13;
        // set is what marks a matron as being pregnant.)&#13;
        delete matron.siringWithId;&#13;
&#13;
        // Every time a EtherDog gives birth counter is decremented.&#13;
        pregnantEtherDogs--;&#13;
&#13;
        // Send the balance fee to the person who made birth happen.&#13;
        msg.sender.transfer(autoBirthFee);&#13;
&#13;
        // return the new EtherDog's ID&#13;
        return EtherDogId;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title Auction Core&#13;
/// @dev Contains models, variables, and internal methods for the auction.&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract ClockAuctionBase {&#13;
&#13;
    // Represents an auction on an NFT&#13;
    struct Auction {&#13;
        // Current owner of NFT&#13;
        address seller;&#13;
        // Price (in wei) at beginning of auction&#13;
        uint128 startingPrice;&#13;
        // Price (in wei) at end of auction&#13;
        uint128 endingPrice;&#13;
        // Duration (in seconds) of auction&#13;
        uint64 duration;&#13;
        // Time when auction started&#13;
        // NOTE: 0 if this auction has been concluded&#13;
        uint64 startedAt;&#13;
    }&#13;
&#13;
    // Reference to contract tracking NFT ownership&#13;
    ERC721 public nonFungibleContract;&#13;
&#13;
    // Cut owner takes on each auction, measured in basis points (1/100 of a percent).&#13;
    // Values 0-10,000 map to 0%-100%&#13;
    uint256 public ownerCut;&#13;
&#13;
    // Map from token ID to their corresponding auction.&#13;
    mapping (uint256 =&gt; Auction) tokenIdToAuction;&#13;
&#13;
    event AuctionCreated(uint256 tokenId, uint256 startingPrice, uint256 endingPrice, uint256 duration);&#13;
    event AuctionSuccessful(uint256 tokenId, uint256 totalPrice, address winner);&#13;
    event AuctionCancelled(uint256 tokenId);&#13;
&#13;
    /// @dev Returns true if the claimant owns the token.&#13;
    /// @param _claimant - Address claiming to own the token.&#13;
    /// @param _tokenId - ID of token whose ownership to verify.&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return (nonFungibleContract.ownerOf(_tokenId) == _claimant);&#13;
    }&#13;
&#13;
    /// @dev Escrows the NFT, assigning ownership to this contract.&#13;
    /// Throws if the escrow fails.&#13;
    /// @param _owner - Current owner address of token to escrow.&#13;
    /// @param _tokenId - ID of token whose approval to verify.&#13;
    function _escrow(address _owner, uint256 _tokenId) internal {&#13;
        // it will throw if transfer fails&#13;
        nonFungibleContract.transferFrom(_owner, this, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Transfers an NFT owned by this contract to another address.&#13;
    /// Returns true if the transfer succeeds.&#13;
    /// @param _receiver - Address to transfer NFT to.&#13;
    /// @param _tokenId - ID of token to transfer.&#13;
    function _transfer(address _receiver, uint256 _tokenId) internal {&#13;
        // it will throw if transfer fails&#13;
        nonFungibleContract.transfer(_receiver, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Adds an auction to the list of open auctions. Also fires the&#13;
    ///  AuctionCreated event.&#13;
    /// @param _tokenId The ID of the token to be put on auction.&#13;
    /// @param _auction Auction to add.&#13;
    function _addAuction(uint256 _tokenId, Auction _auction) internal {&#13;
        // Require that all auctions have a duration of&#13;
        // at least one minute. (Keeps our math from getting hairy!)&#13;
        require(_auction.duration &gt;= 1 minutes);&#13;
&#13;
        tokenIdToAuction[_tokenId] = _auction;&#13;
&#13;
        AuctionCreated(&#13;
            uint256(_tokenId),&#13;
            uint256(_auction.startingPrice),&#13;
            uint256(_auction.endingPrice),&#13;
            uint256(_auction.duration)&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction unconditionally.&#13;
    function _cancelAuction(uint256 _tokenId, address _seller) internal {&#13;
        _removeAuction(_tokenId);&#13;
        _transfer(_seller, _tokenId);&#13;
        AuctionCancelled(_tokenId);&#13;
    }&#13;
&#13;
    /// @dev Computes the price and transfers winnings.&#13;
    /// Does NOT transfer ownership of token.&#13;
    function _bid(uint256 _tokenId, uint256 _bidAmount)&#13;
        internal&#13;
        returns (uint256)&#13;
    {&#13;
        // Get a reference to the auction struct&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
&#13;
        // Explicitly check that this auction is currently live.&#13;
        // (Because of how Ethereum mappings work, we can't just count&#13;
        // on the lookup above failing. An invalid _tokenId will just&#13;
        // return an auction object that is all zeros.)&#13;
        require(_isOnAuction(auction));&#13;
&#13;
        // Check that the bid is greater than or equal to the current price&#13;
        uint256 price = _currentPrice(auction);&#13;
        require(_bidAmount &gt;= price);&#13;
&#13;
        // Grab a reference to the seller before the auction struct&#13;
        // gets deleted.&#13;
        address seller = auction.seller;&#13;
&#13;
        // The bid is good! Remove the auction before sending the fees&#13;
        // to the sender so we can't have a reentrancy attack.&#13;
        _removeAuction(_tokenId);&#13;
&#13;
        // Transfer proceeds to seller (if there are any!)&#13;
        if (price &gt; 0) {&#13;
            // Calculate the auctioneer's cut.&#13;
            // (NOTE: _computeCut() is guaranteed to return a&#13;
            // value &lt;= price, so this subtraction can't go negative.)&#13;
            uint256 auctioneerCut = _computeCut(price);&#13;
            uint256 sellerProceeds = price - auctioneerCut;&#13;
&#13;
            // NOTE: Doing a transfer() in the middle of a complex&#13;
            // method like this is generally discouraged because of&#13;
            // reentrancy attacks and DoS attacks if the seller is&#13;
            // a contract with an invalid fallback function. We explicitly&#13;
            // guard against reentrancy attacks by removing the auction&#13;
            // before calling transfer(), and the only thing the seller&#13;
            // can DoS is the sale of their own asset! (And if it's an&#13;
            // accident, they can call cancelAuction(). )&#13;
            seller.transfer(sellerProceeds);&#13;
        }&#13;
&#13;
        // Calculate any excess funds included with the bid. If the excess&#13;
        // is anything worth worrying about, transfer it back to bidder.&#13;
        // NOTE: We checked above that the bid amount is greater than or&#13;
        // equal to the price so this cannot underflow.&#13;
        uint256 bidExcess = _bidAmount - price;&#13;
&#13;
        // Return the funds. Similar to the previous transfer, this is&#13;
        // not susceptible to a re-entry attack because the auction is&#13;
        // removed before any transfers occur.&#13;
        msg.sender.transfer(bidExcess);&#13;
&#13;
        // Tell the world!&#13;
        AuctionSuccessful(_tokenId, price, msg.sender);&#13;
&#13;
        return price;&#13;
    }&#13;
&#13;
    /// @dev Removes an auction from the list of open auctions.&#13;
    /// @param _tokenId - ID of NFT on auction.&#13;
    function _removeAuction(uint256 _tokenId) internal {&#13;
        delete tokenIdToAuction[_tokenId];&#13;
    }&#13;
&#13;
    /// @dev Returns true if the NFT is on auction.&#13;
    /// @param _auction - Auction to check.&#13;
    function _isOnAuction(Auction storage _auction) internal view returns (bool) {&#13;
        return (_auction.startedAt &gt; 0);&#13;
    }&#13;
&#13;
    /// @dev Returns current price of an NFT on auction. Broken into two&#13;
    ///  functions (this one, that computes the duration from the auction&#13;
    ///  structure, and the other that does the price computation) so we&#13;
    ///  can easily test that the price computation works correctly.&#13;
    function _currentPrice(Auction storage _auction)&#13;
        internal&#13;
        view&#13;
        returns (uint256)&#13;
    {&#13;
        uint256 secondsPassed = 0;&#13;
&#13;
        // A bit of insurance against negative values (or wraparound).&#13;
        // Probably not necessary (since Ethereum guarnatees that the&#13;
        // now variable doesn't ever go backwards).&#13;
        if (now &gt; _auction.startedAt) {&#13;
            secondsPassed = now - _auction.startedAt;&#13;
        }&#13;
&#13;
        return _computeCurrentPrice(&#13;
            _auction.startingPrice,&#13;
            _auction.endingPrice,&#13;
            _auction.duration,&#13;
            secondsPassed&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Computes the current price of an auction. Factored out&#13;
    ///  from _currentPrice so we can run extensive unit tests.&#13;
    ///  When testing, make this function public and turn on&#13;
    ///  `Current price computation` test suite.&#13;
    function _computeCurrentPrice(&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration,&#13;
        uint256 _secondsPassed&#13;
    )&#13;
        internal&#13;
        pure&#13;
        returns (uint256)&#13;
    {&#13;
        // NOTE: We don't use SafeMath (or similar) in this function because&#13;
        //  all of our public functions carefully cap the maximum values for&#13;
        //  time (at 64-bits) and currency (at 128-bits). _duration is&#13;
        //  also known to be non-zero (see the require() statement in&#13;
        //  _addAuction())&#13;
        if (_secondsPassed &gt;= _duration) {&#13;
            // We've reached the end of the dynamic pricing portion&#13;
            // of the auction, just return the end price.&#13;
            return _endingPrice;&#13;
        } else {&#13;
            // Starting price can be higher than ending price (and often is!), so&#13;
            // this delta can be negative.&#13;
            int256 totalPriceChange = int256(_endingPrice) - int256(_startingPrice);&#13;
&#13;
            // This multiplication can't overflow, _secondsPassed will easily fit within&#13;
            // 64-bits, and totalPriceChange will easily fit within 128-bits, their product&#13;
            // will always fit within 256-bits.&#13;
            int256 currentPriceChange = totalPriceChange * int256(_secondsPassed) / int256(_duration);&#13;
&#13;
            // currentPriceChange can be negative, but if so, will have a magnitude&#13;
            // less that _startingPrice. Thus, this result will always end up positive.&#13;
            int256 currentPrice = int256(_startingPrice) + currentPriceChange;&#13;
&#13;
            return uint256(currentPrice);&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Computes owner's cut of a sale.&#13;
    /// @param _price - Sale price of NFT.&#13;
    function _computeCut(uint256 _price) internal view returns (uint256) {&#13;
        // NOTE: We don't use SafeMath (or similar) in this function because&#13;
        //  all of our entry functions carefully cap the maximum values for&#13;
        //  currency (at 128-bits), and ownerCut &lt;= 10000 (see the require()&#13;
        //  statement in the ClockAuction constructor). The result of this&#13;
        //  function is always guaranteed to be &lt;= _price.&#13;
        return _price * ownerCut / 10000;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is Ownable {&#13;
	event Pause();&#13;
	event Unpause();&#13;
&#13;
	bool public paused = false;&#13;
&#13;
&#13;
	/**&#13;
	 * @dev modifier to allow actions only when the contract IS paused&#13;
	 */&#13;
	modifier whenNotPaused() {&#13;
		require(!paused);&#13;
		_;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev modifier to allow actions only when the contract IS NOT paused&#13;
	 */&#13;
	modifier whenPaused {&#13;
		require(paused);&#13;
		_;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev called by the owner to pause, triggers stopped state&#13;
	 */&#13;
	function pause() public onlyOwner whenNotPaused returns (bool) {&#13;
		paused = true;&#13;
		Pause();&#13;
		return true;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev called by the owner to unpause, returns to normal state&#13;
	 */&#13;
	function unpause() public onlyOwner whenPaused returns (bool) {&#13;
		paused = false;&#13;
		Unpause();&#13;
		return true;&#13;
	}&#13;
}&#13;
&#13;
&#13;
/// @title Clock auction for non-fungible tokens.&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract ClockAuction is Pausable, ClockAuctionBase {&#13;
&#13;
    /// @dev The ERC-165 interface signature for ERC-721.&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/165&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/721&#13;
    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);&#13;
&#13;
    /// @dev Constructor creates a reference to the NFT ownership contract&#13;
    ///  and verifies the owner cut is in the valid range.&#13;
    /// @param _nftAddress - address of a deployed contract implementing&#13;
    ///  the Nonfungible Interface.&#13;
    /// @param _cut - percent cut the owner takes on each auction, must be&#13;
    ///  between 0-10,000.&#13;
    function ClockAuction(address _nftAddress, uint256 _cut) public {&#13;
        require(_cut &lt;= 10000);&#13;
        ownerCut = _cut;&#13;
&#13;
        ERC721 candidateContract = ERC721(_nftAddress);&#13;
        require(candidateContract.supportsInterface(InterfaceSignature_ERC721));&#13;
        nonFungibleContract = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Remove all Ether from the contract, which is the owner's cuts&#13;
    ///  as well as any Ether sent directly to the contract address.&#13;
    ///  Always transfers to the NFT contract, but can be called either by&#13;
    ///  the owner or the NFT contract.&#13;
    function withdrawBalance() external {&#13;
        address nftAddress = address(nonFungibleContract);&#13;
&#13;
        require(&#13;
            msg.sender == owner ||&#13;
            msg.sender == nftAddress&#13;
        );&#13;
        // We are using this boolean method to make sure that even if one fails it will still work&#13;
        nftAddress.transfer(this.balance);&#13;
    }&#13;
&#13;
    /// @dev Creates and begins a new auction.&#13;
    /// @param _tokenId - ID of token to auction, sender must be owner.&#13;
    /// @param _startingPrice - Price of item (in wei) at beginning of auction.&#13;
    /// @param _endingPrice - Price of item (in wei) at end of auction.&#13;
    /// @param _duration - Length of time to move between starting&#13;
    ///  price and ending price (in seconds).&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createAuction(&#13;
        uint256 _tokenId,&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration,&#13;
        address _seller&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_startingPrice == uint256(uint128(_startingPrice)));&#13;
        require(_endingPrice == uint256(uint128(_endingPrice)));&#13;
        require(_duration == uint256(uint64(_duration)));&#13;
&#13;
        require(_owns(msg.sender, _tokenId));&#13;
        _escrow(msg.sender, _tokenId);&#13;
        Auction memory auction = Auction(&#13;
            _seller,&#13;
            uint128(_startingPrice),&#13;
            uint128(_endingPrice),&#13;
            uint64(_duration),&#13;
            uint64(now)&#13;
        );&#13;
        _addAuction(_tokenId, auction);&#13;
    }&#13;
&#13;
    /// @dev Bids on an open auction, completing the auction and transferring&#13;
    ///  ownership of the NFT if enough Ether is supplied.&#13;
    /// @param _tokenId - ID of token to bid on.&#13;
    function bid(uint256 _tokenId)&#13;
        external&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        // _bid will throw if the bid or funds transfer fails&#13;
        _bid(_tokenId, msg.value);&#13;
        _transfer(msg.sender, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction that hasn't been won yet.&#13;
    ///  Returns the NFT to original owner.&#13;
    /// @notice This is a state-modifying function that can&#13;
    ///  be called while the contract is paused.&#13;
    /// @param _tokenId - ID of token on auction&#13;
    function cancelAuction(uint256 _tokenId)&#13;
        external&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        address seller = auction.seller;&#13;
        require(msg.sender == seller);&#13;
        _cancelAuction(_tokenId, seller);&#13;
    }&#13;
&#13;
    /// @dev Cancels an auction when the contract is paused.&#13;
    ///  Only the owner may do this, and NFTs are returned to&#13;
    ///  the seller. This should only be used in emergencies.&#13;
    /// @param _tokenId - ID of the NFT on auction to cancel.&#13;
    function cancelAuctionWhenPaused(uint256 _tokenId)&#13;
        whenPaused&#13;
        onlyOwner&#13;
        external&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        _cancelAuction(_tokenId, auction.seller);&#13;
    }&#13;
&#13;
    /// @dev Returns auction info for an NFT on auction.&#13;
    /// @param _tokenId - ID of NFT on auction.&#13;
    function getAuction(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns&#13;
    (&#13;
        address seller,&#13;
        uint256 startingPrice,&#13;
        uint256 endingPrice,&#13;
        uint256 duration,&#13;
        uint256 startedAt&#13;
    ) {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        return (&#13;
            auction.seller,&#13;
            auction.startingPrice,&#13;
            auction.endingPrice,&#13;
            auction.duration,&#13;
            auction.startedAt&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Returns the current price of an auction.&#13;
    /// @param _tokenId - ID of the token price we are checking.&#13;
    function getCurrentPrice(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns (uint256)&#13;
    {&#13;
        Auction storage auction = tokenIdToAuction[_tokenId];&#13;
        require(_isOnAuction(auction));&#13;
        return _currentPrice(auction);&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// @title Reverse auction modified for siring&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract SiringClockAuction is ClockAuction {&#13;
&#13;
    // @dev Sanity check that allows us to ensure that we are pointing to the&#13;
    //  right auction in our setSiringAuctionAddress() call.&#13;
    bool public isSiringClockAuction = true;&#13;
&#13;
    // Delegate constructor&#13;
    function SiringClockAuction(address _nftAddr, uint256 _cut) public&#13;
        ClockAuction(_nftAddr, _cut) {}&#13;
&#13;
    /// @dev Creates and begins a new auction. Since this function is wrapped,&#13;
    /// require sender to be EtherDogCore contract.&#13;
    /// @param _tokenId - ID of token to auction, sender must be owner.&#13;
    /// @param _startingPrice - Price of item (in wei) at beginning of auction.&#13;
    /// @param _endingPrice - Price of item (in wei) at end of auction.&#13;
    /// @param _duration - Length of auction (in seconds).&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createAuction(&#13;
        uint256 _tokenId,&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration,&#13;
        address _seller&#13;
    )&#13;
        external&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_startingPrice == uint256(uint128(_startingPrice)));&#13;
        require(_endingPrice == uint256(uint128(_endingPrice)));&#13;
        require(_duration == uint256(uint64(_duration)));&#13;
&#13;
        require(msg.sender == address(nonFungibleContract));&#13;
        _escrow(_seller, _tokenId);&#13;
        Auction memory auction = Auction(&#13;
            _seller,&#13;
            uint128(_startingPrice),&#13;
            uint128(_endingPrice),&#13;
            uint64(_duration),&#13;
            uint64(now)&#13;
        );&#13;
        _addAuction(_tokenId, auction);&#13;
    }&#13;
&#13;
    /// @dev Places a bid for siring. Requires the sender&#13;
    /// is the EtherDogCore contract because all bid methods&#13;
    /// should be wrapped. Also returns the EtherDog to the&#13;
    /// seller rather than the winner.&#13;
    function bid(uint256 _tokenId)&#13;
        external&#13;
        payable&#13;
    {&#13;
        require(msg.sender == address(nonFungibleContract));&#13;
        address seller = tokenIdToAuction[_tokenId].seller;&#13;
        // _bid checks that token ID is valid and will throw if bid fails&#13;
        _bid(_tokenId, msg.value);&#13;
        // We transfer the EtherDog back to the seller, the winner will get&#13;
        // the offspring&#13;
        _transfer(seller, _tokenId);&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// @title Clock auction modified for sale of EtherDogs&#13;
/// @notice We omit a fallback function to prevent accidental sends to this contract.&#13;
contract SaleClockAuction is ClockAuction {&#13;
&#13;
    // @dev Sanity check that allows us to ensure that we are pointing to the&#13;
    //  right auction in our setSaleAuctionAddress() call.&#13;
    bool public isSaleClockAuction = true;&#13;
&#13;
    // Tracks last 5 sale price of gen0 EtherDog sales&#13;
    uint256 public gen0SaleCount;&#13;
    uint256[5] public lastGen0SalePrices;&#13;
&#13;
    // Delegate constructor&#13;
    function SaleClockAuction(address _nftAddr, uint256 _cut) public&#13;
        ClockAuction(_nftAddr, _cut) {}&#13;
&#13;
    /// @dev Creates and begins a new auction.&#13;
    /// @param _tokenId - ID of token to auction, sender must be owner.&#13;
    /// @param _startingPrice - Price of item (in wei) at beginning of auction.&#13;
    /// @param _endingPrice - Price of item (in wei) at end of auction.&#13;
    /// @param _duration - Length of auction (in seconds).&#13;
    /// @param _seller - Seller, if not the message sender&#13;
    function createAuction(&#13;
        uint256 _tokenId,&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration,&#13;
        address _seller&#13;
    )&#13;
        external&#13;
    {&#13;
        // Sanity check that no inputs overflow how many bits we've allocated&#13;
        // to store them in the auction struct.&#13;
        require(_startingPrice == uint256(uint128(_startingPrice)));&#13;
        require(_endingPrice == uint256(uint128(_endingPrice)));&#13;
        require(_duration == uint256(uint64(_duration)));&#13;
&#13;
        require(msg.sender == address(nonFungibleContract));&#13;
        _escrow(_seller, _tokenId);&#13;
        Auction memory auction = Auction(&#13;
            _seller,&#13;
            uint128(_startingPrice),&#13;
            uint128(_endingPrice),&#13;
            uint64(_duration),&#13;
            uint64(now)&#13;
        );&#13;
        _addAuction(_tokenId, auction);&#13;
    }&#13;
&#13;
    /// @dev Updates lastSalePrice if seller is the nft contract&#13;
    /// Otherwise, works the same as default bid method.&#13;
    function bid(uint256 _tokenId)&#13;
        external&#13;
        payable&#13;
    {&#13;
        // _bid verifies token ID size&#13;
        address seller = tokenIdToAuction[_tokenId].seller;&#13;
        uint256 price = _bid(_tokenId, msg.value);&#13;
        _transfer(msg.sender, _tokenId);&#13;
&#13;
        // If not a gen0 auction, exit&#13;
        if (seller == address(nonFungibleContract)) {&#13;
            // Track gen0 sale prices&#13;
            lastGen0SalePrices[gen0SaleCount % 5] = price;&#13;
            gen0SaleCount++;&#13;
        }&#13;
    }&#13;
&#13;
    function averageGen0SalePrice() external view returns (uint256) {&#13;
        uint256 sum = 0;&#13;
        for (uint256 i = 0; i &lt; 5; i++) {&#13;
            sum += lastGen0SalePrices[i];&#13;
        }&#13;
        return sum / 5;&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// @title Handles creating auctions for sale and siring of EtherDogs.&#13;
///  This wrapper of ReverseAuction exists only so that users can create&#13;
///  auctions with only one transaction.&#13;
contract EtherDogAuction is EtherDogBreeding {&#13;
&#13;
    // @notice The auction contract variables are defined in EtherDogBase to allow&#13;
    //  us to refer to them in EtherDogOwnership to prevent accidental transfers.&#13;
    // `saleAuction` refers to the auction for gen0 and p2p sale of EtherDogs.&#13;
    // `siringAuction` refers to the auction for siring rights of EtherDogs.&#13;
&#13;
    /// @dev Sets the reference to the sale auction.&#13;
    /// @param _address - Address of sale contract.&#13;
    function setSaleAuctionAddress(address _address) external onlyCEO {&#13;
        SaleClockAuction candidateContract = SaleClockAuction(_address);&#13;
&#13;
        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117&#13;
        require(candidateContract.isSaleClockAuction());&#13;
&#13;
        // Set the new contract address&#13;
        saleAuction = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Sets the reference to the siring auction.&#13;
    /// @param _address - Address of siring contract.&#13;
    function setSiringAuctionAddress(address _address) external onlyCEO {&#13;
        SiringClockAuction candidateContract = SiringClockAuction(_address);&#13;
&#13;
        // NOTE: verify that a contract is what we expect - https://github.com/Lunyr/crowdsale-contracts/blob/cfadd15986c30521d8ba7d5b6f57b4fefcc7ac38/contracts/LunyrToken.sol#L117&#13;
        require(candidateContract.isSiringClockAuction());&#13;
&#13;
        // Set the new contract address&#13;
        siringAuction = candidateContract;&#13;
    }&#13;
&#13;
    /// @dev Put a EtherDog up for auction.&#13;
    ///  Does some ownership trickery to create auctions in one tx.&#13;
    function createSaleAuction(&#13;
        uint256 _EtherDogId,&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Auction contract checks input sizes&#13;
        // If EtherDog is already on any auction, this will throw&#13;
        // because it will be owned by the auction contract.&#13;
        require(_owns(msg.sender, _EtherDogId));&#13;
        // Ensure the EtherDog is not pregnant to prevent the auction&#13;
        // contract accidentally receiving ownership of the child.&#13;
        // NOTE: the EtherDog IS allowed to be in a cooldown.&#13;
        require(!isPregnant(_EtherDogId));&#13;
        _approve(_EtherDogId, saleAuction);&#13;
        // Sale auction throws if inputs are invalid and clears&#13;
        // transfer and sire approval after escrowing the EtherDog.&#13;
        saleAuction.createAuction(&#13;
            _EtherDogId,&#13;
            _startingPrice,&#13;
            _endingPrice,&#13;
            _duration,&#13;
            msg.sender&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Put a EtherDog up for auction to be sire.&#13;
    ///  Performs checks to ensure the EtherDog can be sired, then&#13;
    ///  delegates to reverse auction.&#13;
    function createSiringAuction(&#13;
        uint256 _EtherDogId,&#13;
        uint256 _startingPrice,&#13;
        uint256 _endingPrice,&#13;
        uint256 _duration&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Auction contract checks input sizes&#13;
        // If EtherDog is already on any auction, this will throw&#13;
        // because it will be owned by the auction contract.&#13;
        require(_owns(msg.sender, _EtherDogId));&#13;
        require(isReadyToBreed(_EtherDogId));&#13;
        _approve(_EtherDogId, siringAuction);&#13;
        // Siring auction throws if inputs are invalid and clears&#13;
        // transfer and sire approval after escrowing the EtherDog.&#13;
        siringAuction.createAuction(&#13;
            _EtherDogId,&#13;
            _startingPrice,&#13;
            _endingPrice,&#13;
            _duration,&#13;
            msg.sender&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev Completes a siring auction by bidding.&#13;
    ///  Immediately breeds the winning matron with the sire on auction.&#13;
    /// @param _sireId - ID of the sire on auction.&#13;
    /// @param _matronId - ID of the matron owned by the bidder.&#13;
    function bidOnSiringAuction(&#13;
        uint256 _sireId,&#13;
        uint256 _matronId&#13;
    )&#13;
        external&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        // Auction contract checks input sizes&#13;
        require(_owns(msg.sender, _matronId));&#13;
        require(isReadyToBreed(_matronId));&#13;
        require(_canBreedWithViaAuction(_matronId, _sireId));&#13;
&#13;
        // Define the current price of the auction.&#13;
        uint256 currentPrice = siringAuction.getCurrentPrice(_sireId);&#13;
        require(msg.value &gt;= currentPrice + autoBirthFee);&#13;
&#13;
        // Siring auction will throw if the bid fails.&#13;
        siringAuction.bid.value(msg.value - autoBirthFee)(_sireId);&#13;
        _breedWith(uint32(_matronId), uint32(_sireId));&#13;
    }&#13;
&#13;
    /// @dev Transfers the balance of the sale auction contract&#13;
    /// to the EtherDogCore contract. We use two-step withdrawal to&#13;
    /// prevent two transfer calls in the auction bid function.&#13;
    function withdrawAuctionBalances() external onlyCLevel {&#13;
        saleAuction.withdrawBalance();&#13;
        siringAuction.withdrawBalance();&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title all functions related to creating EtherDogs&#13;
contract EtherDogMinting is EtherDogAuction {&#13;
&#13;
    // Limits the number of dogs the contract owner can ever create.&#13;
    uint256 public constant DEFAULT_CREATION_LIMIT = 50000;&#13;
&#13;
    // Counts the number of dogs the contract owner has created.&#13;
    uint256 public defaultCreatedCount;&#13;
&#13;
&#13;
    /// @dev we can create EtherDogs with different generations. Only callable by COO&#13;
    /// @param _genes The encoded genes of the EtherDog to be created, any value is accepted&#13;
    /// @param _owner The future owner of the created EtherDog. Default to contract COO&#13;
    /// @param _time The birth time of EtherDog&#13;
    /// @param _cooldownIndex The cooldownIndex of EtherDog&#13;
    function createDefaultGen0EtherDog(uint256 _genes, address _owner, uint256 _time, uint256 _cooldownIndex) external onlyCOO {&#13;
&#13;
        require(_time == uint256(uint64(_time)));&#13;
        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));&#13;
&#13;
        require(_time &gt; 0);&#13;
        require(_cooldownIndex &gt;= 0 &amp;&amp; _cooldownIndex &lt;= 13);&#13;
&#13;
        address EtherDogOwner = _owner;&#13;
        if (EtherDogOwner == address(0)) {&#13;
            EtherDogOwner = cooAddress;&#13;
        }&#13;
        require(defaultCreatedCount &lt; DEFAULT_CREATION_LIMIT);&#13;
&#13;
        defaultCreatedCount++;&#13;
        _createEtherDogWithTime(0, 0, 0, _genes, EtherDogOwner, _time, _cooldownIndex);&#13;
    }&#13;
&#13;
    /// @dev we can create EtherDogs with different generations. Only callable by COO&#13;
    /// @param _matronId The EtherDog ID of the matron of this EtherDog&#13;
    /// @param _sireId The EtherDog ID of the sire of this EtherDog&#13;
    /// @param _genes The encoded genes of the EtherDog to be created, any value is accepted&#13;
    /// @param _owner The future owner of the created EtherDog. Default to contract COO&#13;
    /// @param _time The birth time of EtherDog&#13;
    /// @param _cooldownIndex The cooldownIndex of EtherDog&#13;
    function createDefaultEtherDog(uint256 _matronId, uint256 _sireId, uint256 _genes, address _owner, uint256 _time, uint256 _cooldownIndex) external onlyCOO {&#13;
&#13;
        require(_matronId == uint256(uint32(_matronId)));&#13;
        require(_sireId == uint256(uint32(_sireId)));&#13;
        require(_time == uint256(uint64(_time)));&#13;
        require(_cooldownIndex == uint256(uint16(_cooldownIndex)));&#13;
&#13;
        require(_time &gt; 0);&#13;
        require(_cooldownIndex &gt;= 0 &amp;&amp; _cooldownIndex &lt;= 13);&#13;
&#13;
        address EtherDogOwner = _owner;&#13;
        if (EtherDogOwner == address(0)) {&#13;
            EtherDogOwner = cooAddress;&#13;
        }&#13;
&#13;
        require(_matronId &gt; 0);&#13;
        require(_sireId &gt; 0);&#13;
&#13;
        // Grab a reference to the matron in storage.&#13;
        EtherDog storage matron = EtherDogs[_matronId];&#13;
&#13;
        // Grab a reference to the sire in storage.&#13;
        EtherDog storage sire = EtherDogs[_sireId];&#13;
&#13;
        // Determine the higher generation number of the two parents&#13;
        uint16 parentGen = matron.generation;&#13;
        if (sire.generation &gt; matron.generation) {&#13;
            parentGen = sire.generation;&#13;
        }&#13;
&#13;
        _createEtherDogWithTime(_matronId, _sireId, parentGen + 1, _genes, EtherDogOwner, _time, _cooldownIndex);&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
/// @title EtherDogs: Collectible, breedable, and oh-so-adorable EtherDogs on the Ethereum blockchain.&#13;
/// @dev The main EtherDogs contract, keeps track of dogs so they don't wander around and get lost.&#13;
contract EtherDogCore is EtherDogMinting {&#13;
/* contract EtherDogCore { */&#13;
    // This is the main EtherDogs contract. In order to keep our code seperated into logical sections,&#13;
    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts&#13;
    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are&#13;
    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping&#13;
    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks&#13;
    // EtherDog ownership. The genetic combination algorithm is kept seperate so we can open-source all of&#13;
    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.&#13;
    // Don't worry, I'm sure someone will reverse engineer it soon enough!&#13;
    //&#13;
    // Secondly, we break the core contract into multiple files using inheritence, one for each major&#13;
    // facet of functionality of CK. This allows us to keep related code bundled together while still&#13;
    // avoiding a single giant file with everything in it. The breakdown is as follows:&#13;
    //&#13;
    //      - EtherDogBase: This is where we define the most fundamental code shared throughout the core&#13;
    //             functionality. This includes our main data storage, constants and data types, plus&#13;
    //             internal functions for managing these items.&#13;
    //&#13;
    //      - EtherDogAccessControl: This contract manages the various addresses and constraints for operations&#13;
    //             that can be executed only by specific roles. Namely CEO, CFO and COO.&#13;
    //&#13;
    //      - EtherDogOwnership: This provides the methods required for basic non-fungible token&#13;
    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).&#13;
    //&#13;
    //      - EtherDogBreeding: This file contains the methods necessary to breed EtherDogs together, including&#13;
    //             keeping track of siring offers, and relies on an external genetic combination contract.&#13;
    //&#13;
    //      - EtherDogAuctions: Here we have the public methods for auctioning or bidding on EtherDogs or siring&#13;
    //             services. The actual auction functionality is handled in two sibling contracts (one&#13;
    //             for sales and one for siring), while auction creation and bidding is mostly mediated&#13;
    //             through this facet of the core contract.&#13;
    //&#13;
    //      - EtherDogMinting: This final facet contains the functionality we use for creating new gen0 EtherDogs.&#13;
    //             We can make up to 5000 "promo" EtherDogs that can be given away (especially important when&#13;
    //             the community is new), and all others can only be created and then immediately put up&#13;
    //             for auction via an algorithmically determined starting price. Regardless of how they&#13;
    //             are created, there is a hard limit of 2400*12*12 gen0 EtherDogs. After that, it's all up to the&#13;
    //             community to breed, breed, breed!&#13;
&#13;
    // Set in case the core contract is broken and an upgrade is required&#13;
    address public newContractAddress;&#13;
&#13;
    /// @notice Creates the main EtherDogs smart contract instance.&#13;
    function EtherDogCore() public {&#13;
        // Starts paused.&#13;
        paused = true;&#13;
&#13;
        // the creator of the contract is the initial CEO&#13;
        ceoAddress = msg.sender;&#13;
&#13;
        // the creator of the contract is also the initial COO&#13;
        cooAddress = msg.sender;&#13;
&#13;
        // start with the mythical EtherDog 0 - so we don't have generation-0 parent issues&#13;
        _createEtherDog(0, 0, 0, uint256(-1), address(0));&#13;
    }&#13;
&#13;
    /// @dev Used to mark the smart contract as upgraded, in case there is a serious&#13;
    ///  breaking bug. This method does nothing but keep track of the new contract and&#13;
    ///  emit a message indicating that the new address is set. It's up to clients of this&#13;
    ///  contract to update to the new contract address in that case. (This contract will&#13;
    ///  be paused indefinitely if such an upgrade takes place.)&#13;
    /// @param _v2Address new address&#13;
    function setNewAddress(address _v2Address) external onlyCEO whenPaused {&#13;
        // See README.md for updgrade plan&#13;
        newContractAddress = _v2Address;&#13;
        ContractUpgrade(_v2Address);&#13;
    }&#13;
&#13;
    /// @notice No tipping!&#13;
    /// @dev Reject all Ether from being sent here, unless it's from one of the&#13;
    ///  two auction contracts. (Hopefully, we can prevent user accidents.)&#13;
    function() external payable {&#13;
        require(&#13;
            msg.sender == address(saleAuction) ||&#13;
            msg.sender == address(siringAuction)&#13;
        );&#13;
    }&#13;
&#13;
    /// @notice Returns all the relevant information about a specific EtherDog.&#13;
    /// @param _id The ID of the EtherDog of interest.&#13;
    function getEtherDog(uint256 _id)&#13;
        external&#13;
        view&#13;
        returns (&#13;
        bool isGestating,&#13;
        bool isReady,&#13;
        uint256 cooldownIndex,&#13;
        uint256 nextActionAt,&#13;
        uint256 siringWithId,&#13;
        uint256 birthTime,&#13;
        uint256 matronId,&#13;
        uint256 sireId,&#13;
        uint256 generation,&#13;
        uint256 genes&#13;
    ) {&#13;
        EtherDog storage dog = EtherDogs[_id];&#13;
&#13;
        // if this variable is 0 then it's not gestating&#13;
        isGestating = (dog.siringWithId != 0);&#13;
        isReady = (dog.cooldownEndBlock &lt;= block.number);&#13;
        cooldownIndex = uint256(dog.cooldownIndex);&#13;
        nextActionAt = uint256(dog.cooldownEndBlock);&#13;
        siringWithId = uint256(dog.siringWithId);&#13;
        birthTime = uint256(dog.birthTime);&#13;
        matronId = uint256(dog.matronId);&#13;
        sireId = uint256(dog.sireId);&#13;
        generation = uint256(dog.generation);&#13;
        genes = dog.genes;&#13;
    }&#13;
&#13;
    /// @dev Override unpause so it requires all external contract addresses&#13;
    ///  to be set before contract can be unpaused. Also, we can't have&#13;
    ///  newContractAddress set either, because then the contract was upgraded.&#13;
    /// @notice This is public rather than external so we can call super.unpause&#13;
    ///  without using an expensive CALL.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        require(saleAuction != address(0));&#13;
        require(siringAuction != address(0));&#13;
        require(geneScience != address(0));&#13;
        require(newContractAddress == address(0));&#13;
&#13;
        // Actually unpause the contract.&#13;
        super.unpause();&#13;
    }&#13;
&#13;
    // @dev Allows the CFO to capture the balance available to the contract.&#13;
    function withdrawBalance() external onlyCFO {&#13;
        uint256 balance = this.balance;&#13;
        // Subtract all the currently pregnant dogs we have, plus 1 of margin.&#13;
        uint256 subtractFees = (pregnantEtherDogs + 1) * autoBirthFee;&#13;
&#13;
        if (balance &gt; subtractFees) {&#13;
            cfoAddress.transfer(balance - subtractFees);&#13;
        }&#13;
    }&#13;
}
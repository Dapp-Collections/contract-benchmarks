pragma solidity 0.4.18;

/// @title Math library - Allows calculation of logarithmic and exponential functions
/// @author Alan Lu - <<span class="__cf_email__" data-cfemail="ec8d808d82c28099ac8b82839f859fc29c81">[email protected]</span>&gt;&#13;
/// @author Stefan George - &lt;<span class="__cf_email__" data-cfemail="3645425350575876515859455f4518465b">[email protected]</span>&gt;&#13;
library Math {&#13;
&#13;
    /*&#13;
     *  Constants&#13;
     */&#13;
    // This is equal to 1 in our calculations&#13;
    uint public constant ONE =  0x10000000000000000;&#13;
    uint public constant LN2 = 0xb17217f7d1cf79ac;&#13;
    uint public constant LOG2_E = 0x171547652b82fe177;&#13;
&#13;
    /*&#13;
     *  Public functions&#13;
     */&#13;
    /// @dev Returns natural exponential function value of given x&#13;
    /// @param x x&#13;
    /// @return e**x&#13;
    function exp(int x)&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        // revert if x is &gt; MAX_POWER, where&#13;
        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))&#13;
        require(x &lt;= 2454971259878909886679);&#13;
        // return 0 if exp(x) is tiny, using&#13;
        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))&#13;
        if (x &lt; -818323753292969962227)&#13;
            return 0;&#13;
        // Transform so that e^x -&gt; 2^x&#13;
        x = x * int(ONE) / int(LN2);&#13;
        // 2^x = 2^whole(x) * 2^frac(x)&#13;
        //       ^^^^^^^^^^ is a bit shift&#13;
        // so Taylor expand on z = frac(x)&#13;
        int shift;&#13;
        uint z;&#13;
        if (x &gt;= 0) {&#13;
            shift = x / int(ONE);&#13;
            z = uint(x % int(ONE));&#13;
        }&#13;
        else {&#13;
            shift = x / int(ONE) - 1;&#13;
            z = ONE - uint(-x % int(ONE));&#13;
        }&#13;
        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...&#13;
        //&#13;
        // Can generate the z coefficients using mpmath and the following lines&#13;
        // &gt;&gt;&gt; from mpmath import mp&#13;
        // &gt;&gt;&gt; mp.dps = 100&#13;
        // &gt;&gt;&gt; ONE =  0x10000000000000000&#13;
        // &gt;&gt;&gt; print('\n'.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))&#13;
        // 0xb17217f7d1cf79ab&#13;
        // 0x3d7f7bff058b1d50&#13;
        // 0xe35846b82505fc5&#13;
        // 0x276556df749cee5&#13;
        // 0x5761ff9e299cc4&#13;
        // 0xa184897c363c3&#13;
        uint zpow = z;&#13;
        uint result = ONE;&#13;
        result += 0xb17217f7d1cf79ab * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x3d7f7bff058b1d50 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0xe35846b82505fc5 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x276556df749cee5 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x5761ff9e299cc4 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0xa184897c363c3 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0xffe5fe2c4586 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x162c0223a5c8 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1b5253d395e * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1e4cf5158b * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1e8cac735 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1c3bd650 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1816193 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x131496 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0xe1b7 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x9c7 * zpow / ONE;&#13;
        if (shift &gt;= 0) {&#13;
            if (result &gt;&gt; (256-shift) &gt; 0)&#13;
                return (2**256-1);&#13;
            return result &lt;&lt; shift;&#13;
        }&#13;
        else&#13;
            return result &gt;&gt; (-shift);&#13;
    }&#13;
&#13;
    /// @dev Returns natural logarithm value of given x&#13;
    /// @param x x&#13;
    /// @return ln(x)&#13;
    function ln(uint x)&#13;
        public&#13;
        constant&#13;
        returns (int)&#13;
    {&#13;
        require(x &gt; 0);&#13;
        // binary search for floor(log2(x))&#13;
        int ilog2 = floorLog2(x);&#13;
        int z;&#13;
        if (ilog2 &lt; 0)&#13;
            z = int(x &lt;&lt; uint(-ilog2));&#13;
        else&#13;
            z = int(x &gt;&gt; uint(ilog2));&#13;
        // z = x * 2^-⌊log₂x⌋&#13;
        // so 1 &lt;= z &lt; 2&#13;
        // and ln z = ln x - ⌊log₂x⌋/log₂e&#13;
        // so just compute ln z using artanh series&#13;
        // and calculate ln x from that&#13;
        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));&#13;
        int halflnz = term;&#13;
        int termpow = term * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 3;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 5;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 7;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 9;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 11;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 13;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 15;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 17;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 19;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 21;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 23;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 25;&#13;
        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;&#13;
    }&#13;
&#13;
    /// @dev Returns base 2 logarithm value of given x&#13;
    /// @param x x&#13;
    /// @return logarithmic value&#13;
    function floorLog2(uint x)&#13;
        public&#13;
        constant&#13;
        returns (int lo)&#13;
    {&#13;
        lo = -64;&#13;
        int hi = 193;&#13;
        // I use a shift here instead of / 2 because it floors instead of rounding towards 0&#13;
        int mid = (hi + lo) &gt;&gt; 1;&#13;
        while((lo + 1) &lt; hi) {&#13;
            if (mid &lt; 0 &amp;&amp; x &lt;&lt; uint(-mid) &lt; ONE || mid &gt;= 0 &amp;&amp; x &gt;&gt; uint(mid) &lt; ONE)&#13;
                hi = mid;&#13;
            else&#13;
                lo = mid;&#13;
            mid = (hi + lo) &gt;&gt; 1;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Returns maximum of an array&#13;
    /// @param nums Numbers to look through&#13;
    /// @return Maximum number&#13;
    function max(int[] nums)&#13;
        public&#13;
        constant&#13;
        returns (int max)&#13;
    {&#13;
        require(nums.length &gt; 0);&#13;
        max = -2**255;&#13;
        for (uint i = 0; i &lt; nums.length; i++)&#13;
            if (nums[i] &gt; max)&#13;
                max = nums[i];&#13;
    }&#13;
&#13;
    /// @dev Returns whether an add operation causes an overflow&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Did no overflow occur?&#13;
    function safeToAdd(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        return a + b &gt;= a;&#13;
    }&#13;
&#13;
    /// @dev Returns whether a subtraction operation causes an underflow&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Did no underflow occur?&#13;
    function safeToSub(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        return a &gt;= b;&#13;
    }&#13;
&#13;
    /// @dev Returns whether a multiply operation causes an overflow&#13;
    /// @param a First factor&#13;
    /// @param b Second factor&#13;
    /// @return Did no overflow occur?&#13;
    function safeToMul(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        return b == 0 || a * b / b == a;&#13;
    }&#13;
&#13;
    /// @dev Returns sum if no overflow occurred&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Sum&#13;
    function add(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        require(safeToAdd(a, b));&#13;
        return a + b;&#13;
    }&#13;
&#13;
    /// @dev Returns difference if no overflow occurred&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Difference&#13;
    function sub(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        require(safeToSub(a, b));&#13;
        return a - b;&#13;
    }&#13;
&#13;
    /// @dev Returns product if no overflow occurred&#13;
    /// @param a First factor&#13;
    /// @param b Second factor&#13;
    /// @return Product&#13;
    function mul(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        require(safeToMul(a, b));&#13;
        return a * b;&#13;
    }&#13;
&#13;
    /// @dev Returns whether an add operation causes an overflow&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Did no overflow occur?&#13;
    function safeToAdd(int a, int b)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        return (b &gt;= 0 &amp;&amp; a + b &gt;= a) || (b &lt; 0 &amp;&amp; a + b &lt; a);&#13;
    }&#13;
&#13;
    /// @dev Returns whether a subtraction operation causes an underflow&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Did no underflow occur?&#13;
    function safeToSub(int a, int b)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        return (b &gt;= 0 &amp;&amp; a - b &lt;= a) || (b &lt; 0 &amp;&amp; a - b &gt; a);&#13;
    }&#13;
&#13;
    /// @dev Returns whether a multiply operation causes an overflow&#13;
    /// @param a First factor&#13;
    /// @param b Second factor&#13;
    /// @return Did no overflow occur?&#13;
    function safeToMul(int a, int b)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        return (b == 0) || (a * b / b == a);&#13;
    }&#13;
&#13;
    /// @dev Returns sum if no overflow occurred&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Sum&#13;
    function add(int a, int b)&#13;
        public&#13;
        constant&#13;
        returns (int)&#13;
    {&#13;
        require(safeToAdd(a, b));&#13;
        return a + b;&#13;
    }&#13;
&#13;
    /// @dev Returns difference if no overflow occurred&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Difference&#13;
    function sub(int a, int b)&#13;
        public&#13;
        constant&#13;
        returns (int)&#13;
    {&#13;
        require(safeToSub(a, b));&#13;
        return a - b;&#13;
    }&#13;
&#13;
    /// @dev Returns product if no overflow occurred&#13;
    /// @param a First factor&#13;
    /// @param b Second factor&#13;
    /// @return Product&#13;
    function mul(int a, int b)&#13;
        public&#13;
        constant&#13;
        returns (int)&#13;
    {&#13;
        require(safeToMul(a, b));&#13;
        return a * b;&#13;
    }&#13;
}&#13;
&#13;
/// @title Abstract token contract - Functions to be implemented by token contracts&#13;
contract Token {&#13;
&#13;
    /*&#13;
     *  Events&#13;
     */&#13;
    event Transfer(address indexed from, address indexed to, uint value);&#13;
    event Approval(address indexed owner, address indexed spender, uint value);&#13;
&#13;
    /*&#13;
     *  Public functions&#13;
     */&#13;
    function transfer(address to, uint value) public returns (bool);&#13;
    function transferFrom(address from, address to, uint value) public returns (bool);&#13;
    function approve(address spender, uint value) public returns (bool);&#13;
    function balanceOf(address owner) public constant returns (uint);&#13;
    function allowance(address owner, address spender) public constant returns (uint);&#13;
    function totalSupply() public constant returns (uint);&#13;
}&#13;
&#13;
&#13;
/// @title Standard token contract with overflow protection&#13;
contract StandardToken is Token {&#13;
    using Math for *;&#13;
&#13;
    /*&#13;
     *  Storage&#13;
     */&#13;
    mapping (address =&gt; uint) balances;&#13;
    mapping (address =&gt; mapping (address =&gt; uint)) allowances;&#13;
    uint totalTokens;&#13;
&#13;
    /*&#13;
     *  Public functions&#13;
     */&#13;
    /// @dev Transfers sender's tokens to a given address. Returns success&#13;
    /// @param to Address of token receiver&#13;
    /// @param value Number of tokens to transfer&#13;
    /// @return Was transfer successful?&#13;
    function transfer(address to, uint value)&#13;
        public&#13;
        returns (bool)&#13;
    {&#13;
        if (   !balances[msg.sender].safeToSub(value)&#13;
            || !balances[to].safeToAdd(value))&#13;
            return false;&#13;
        balances[msg.sender] -= value;&#13;
        balances[to] += value;&#13;
        Transfer(msg.sender, to, value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success&#13;
    /// @param from Address from where tokens are withdrawn&#13;
    /// @param to Address to where tokens are sent&#13;
    /// @param value Number of tokens to transfer&#13;
    /// @return Was transfer successful?&#13;
    function transferFrom(address from, address to, uint value)&#13;
        public&#13;
        returns (bool)&#13;
    {&#13;
        if (   !balances[from].safeToSub(value)&#13;
            || !allowances[from][msg.sender].safeToSub(value)&#13;
            || !balances[to].safeToAdd(value))&#13;
            return false;&#13;
        balances[from] -= value;&#13;
        allowances[from][msg.sender] -= value;&#13;
        balances[to] += value;&#13;
        Transfer(from, to, value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev Sets approved amount of tokens for spender. Returns success&#13;
    /// @param spender Address of allowed account&#13;
    /// @param value Number of approved tokens&#13;
    /// @return Was approval successful?&#13;
    function approve(address spender, uint value)&#13;
        public&#13;
        returns (bool)&#13;
    {&#13;
        allowances[msg.sender][spender] = value;&#13;
        Approval(msg.sender, spender, value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev Returns number of allowed tokens for given address&#13;
    /// @param owner Address of token owner&#13;
    /// @param spender Address of token spender&#13;
    /// @return Remaining allowance for spender&#13;
    function allowance(address owner, address spender)&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        return allowances[owner][spender];&#13;
    }&#13;
&#13;
    /// @dev Returns number of tokens owned by given address&#13;
    /// @param owner Address of token owner&#13;
    /// @return Balance of owner&#13;
    function balanceOf(address owner)&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        return balances[owner];&#13;
    }&#13;
&#13;
    /// @dev Returns total supply of tokens&#13;
    /// @return Total supply&#13;
    function totalSupply()&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        return totalTokens;&#13;
    }&#13;
}&#13;
&#13;
contract PlayToken is StandardToken {&#13;
    /*&#13;
     *  Events&#13;
     */&#13;
    event Issuance(address indexed owner, uint amount);&#13;
    event Burn(address indexed burner, uint256 value);&#13;
    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
    &#13;
    /*&#13;
     *  Storage&#13;
     */&#13;
    address public creator;&#13;
    mapping (address =&gt; bool) public whitelist;&#13;
&#13;
    /*&#13;
     *  Modifiers&#13;
     */&#13;
    modifier isCreator { require(msg.sender == creator); _; }&#13;
&#13;
    /*&#13;
     *  Public functions&#13;
     */&#13;
    /// @dev Constructor sets events contract address&#13;
    function PlayToken()&#13;
        public&#13;
    {&#13;
        creator = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev Allows creator to issue tokens. Will reject if msg.sender isn't the creator.&#13;
    /// @param recipients Addresses of recipients&#13;
    /// @param amount Number of tokens to issue each recipient&#13;
    function issue(address[] recipients, uint amount)&#13;
        public&#13;
        isCreator&#13;
    {&#13;
        for(uint i = 0; i &lt; recipients.length; i++) {&#13;
            address recipient = recipients[i];&#13;
            balances[recipient] = balances[recipient].add(amount);&#13;
            Issuance(recipient, amount);&#13;
            Transfer(address(0), recipient, amount);&#13;
        }&#13;
        totalTokens = totalTokens.add(amount.mul(recipients.length));&#13;
    }&#13;
&#13;
    /// @dev Allows creator to mark addresses as whitelisted for transfers to and from those addresses.&#13;
    /// @param allowed Addresses to be added to the whitelist&#13;
    function allowTransfers(address[] allowed)&#13;
        public&#13;
        isCreator&#13;
    {&#13;
        for(uint i = 0; i &lt; allowed.length; i++) {&#13;
            whitelist[allowed[i]] = true;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Allows creator to remove addresses from being whitelisted for transfers to and from those addresses.&#13;
    /// @param disallowed Addresses to be removed from the whitelist&#13;
    function disallowTransfers(address[] disallowed)&#13;
        public&#13;
        isCreator&#13;
    {&#13;
        for(uint i = 0; i &lt; disallowed.length; i++) {&#13;
            whitelist[disallowed[i]] = false;&#13;
        }&#13;
    }&#13;
    &#13;
    function transferOwnership(address newOwner)&#13;
        public&#13;
        isCreator&#13;
    {&#13;
        require(newOwner != address(0));&#13;
        OwnershipTransferred(creator, newOwner);&#13;
        creator = newOwner;&#13;
    }&#13;
&#13;
    function transfer(address to, uint value) public returns (bool) {&#13;
        require(whitelist[msg.sender] || whitelist[to]);&#13;
        return super.transfer(to, value);&#13;
    }&#13;
&#13;
    function transferFrom(address from, address to, uint value) public returns (bool) {&#13;
        require(whitelist[from] || whitelist[to]);&#13;
        return super.transferFrom(from, to, value);&#13;
    }&#13;
&#13;
    function emergencyERC20Drain( ERC20Interface token, uint amount ){&#13;
      // callable by anyone&#13;
      address noah = 0xb9E29984Fe50602E7A619662EBED4F90D93824C7;&#13;
      token.transfer( noah, amount );&#13;
    }&#13;
    &#13;
    function burn(uint256 _value) public {&#13;
      require(_value &lt;= balances[msg.sender]);&#13;
&#13;
      address burner = msg.sender;&#13;
      balances[burner] = balances[burner].sub(_value);&#13;
      totalTokens = totalTokens.sub(_value);&#13;
      Burn(burner, _value);&#13;
      Transfer(burner, address(0), _value);&#13;
    }&#13;
&#13;
}&#13;
&#13;
contract TokenFansToken is PlayToken {&#13;
    /*&#13;
     *  Constants&#13;
     */&#13;
    string public constant name = "TokenFans Token";&#13;
    string public constant symbol = "TFT";&#13;
    uint8 public constant decimals = 0;&#13;
}&#13;
&#13;
contract ERC20Interface {&#13;
  function transferFrom(address _from, address _to, uint _value) returns (bool){}&#13;
  function transfer(address _to, uint _value) returns (bool){}&#13;
  function ERC20Interface(){}&#13;
}
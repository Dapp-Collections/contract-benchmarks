// The elements of the array listTINAmotley can be claimed, 
// transferred, bought, and sold on the ethereum network. 
// Users can also add to the original array.

// The elements in listTINAmotley below are recited in a video
// by Greg Smith. Both the video and this program will be part of
// exhibitions at the John Michael Kohler Art Center in
// Sheboygan, WI, and at Susan Inglett Gallery in New York, NY.

// This program is based on CryptoPunks, by Larva Labs.

// List elements in listTINAmotley contain text snippets from 
// Margaret Thatcher, Donna Haraway (A Cyborg Manfesto), Francois 
// Rabelias (Gargantua and Pantagruel), Walt Whitman (Germs), and 
// Miguel de Cervantes (Don Quixote).

// A list element associated with _index can be claimed if 
// gift_CanBeClaimed(_index) returns true. For inquiries
// about receiving lines owned by info_ownerOfContract for free, 
// email <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b4f8ddc7c0e0fdfaf5d9dbc0d8d1cdf4d3d9d5ddd89ad7dbd99a">[emailÂ protected]</a> &#13;
&#13;
// In general, the functions that begin with "gift_" are used for &#13;
// claiming, transferring, and creating script lines without cost beyond &#13;
// the transaction fee. For example, to claim an available list element &#13;
// associated with _index, execute the gift_ClaimTINAmotleyLine(_index) &#13;
// function.&#13;
&#13;
// The functions that begin with "info_" are used to obtain information &#13;
// about aspects of the program state, including the address that owns &#13;
// a list element, and the "for sale" or "bid" status of a list element. &#13;
&#13;
// The functions that begin with "market_" are used for buying, selling, and&#13;
// placing bids on a list element. For example, to bid on the list element&#13;
// associated with _index, send the bid (in wei, not ether) along with&#13;
// the function execution of market_DeclareBid(_index).&#13;
&#13;
// Note that if there's a transaction involving ether (successful sale, &#13;
// accepted bid, etc..), the ether (don't forget: in units of wei) is not&#13;
// automatically credited to an account; it has to be withdrawn by&#13;
// calling market_WithdrawWei().&#13;
&#13;
// Source code and code used to test the contract are available at &#13;
// https://github.com/ListTINAmotley/LcommaG&#13;
&#13;
// EVERYTHING IS IN UNITS OF WEI, NOT ETHER!&#13;
&#13;
// Contract is deployed at  on the &#13;
// mainnet.&#13;
&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
contract LcommaG {&#13;
&#13;
    string public info_Name;&#13;
    string public info_Symbol;&#13;
&#13;
    address public info_OwnerOfContract;&#13;
    // Contains the list&#13;
    string[] private listTINAmotley;&#13;
    // Contains the total number of elements in the list&#13;
    uint256 private listTINAmotleyTotalSupply;&#13;
    &#13;
    mapping (uint =&gt; address) private listTINAmotleyIndexToAddress;&#13;
    mapping(address =&gt; uint256) private listTINAmotleyBalanceOf;&#13;
 &#13;
    // Put list element up for sale by owner. Can be linked to specific &#13;
    // potential buyer&#13;
    struct forSaleInfo {&#13;
        bool isForSale;&#13;
        uint256 tokenIndex;&#13;
        address seller;&#13;
        uint256 minValue;          //in wei.... everything in wei&#13;
        address onlySellTo;     // specify to sell only to a specific person&#13;
    }&#13;
&#13;
    // Place bid for specific list element&#13;
    struct bidInfo {&#13;
        bool hasBid;&#13;
        uint256 tokenIndex;&#13;
        address bidder;&#13;
        uint256 value;&#13;
    }&#13;
&#13;
    // Public info about tokens for sale.&#13;
    mapping (uint256 =&gt; forSaleInfo) public info_ForSaleInfoByIndex;&#13;
    // Public info about highest bid for each token.&#13;
    mapping (uint256 =&gt; bidInfo) public info_BidInfoByIndex;&#13;
    // Information about withdrawals (in units of wei) available  &#13;
    //  ... for addresses due to failed bids, successful sales, etc...&#13;
    mapping (address =&gt; uint256) public info_PendingWithdrawals;&#13;
&#13;
//Events&#13;
&#13;
&#13;
    event Claim(uint256 tokenId, address indexed to);&#13;
    event Transfer(uint256 tokenId, address indexed from, address indexed to);&#13;
    event ForSaleDeclared(uint256 indexed tokenId, address indexed from, &#13;
        uint256 minValue,address indexed to);&#13;
    event ForSaleWithdrawn(uint256 indexed tokenId, address indexed from);&#13;
    event ForSaleBought(uint256 indexed tokenId, uint256 value, &#13;
        address indexed from, address indexed to);&#13;
    event BidDeclared(uint256 indexed tokenId, uint256 value, &#13;
        address indexed from);&#13;
    event BidWithdrawn(uint256 indexed tokenId, uint256 value, &#13;
        address indexed from);&#13;
    event BidAccepted(uint256 indexed tokenId, uint256 value, &#13;
        address indexed from, address indexed to);&#13;
    &#13;
    constructor () public {&#13;
    	info_OwnerOfContract = msg.sender;&#13;
	info_Name = "LcommaG";&#13;
	info_Symbol = "L, G";&#13;
	listTINAmotley.push("Now that, that there, that's for everyone");&#13;
	listTINAmotleyIndexToAddress[0] = address(0);&#13;
	listTINAmotley.push("Everyone's invited");&#13;
	listTINAmotleyIndexToAddress[1] = address(0);&#13;
	listTINAmotley.push("Just bring your lists");&#13;
	listTINAmotleyIndexToAddress[2] = address(0);&#13;
	listTINAmotley.push("The for godsakes of surveillance");&#13;
	listTINAmotleyIndexToAddress[3] = address(0);&#13;
	listTINAmotley.push("The shitabranna of there is no alternative");&#13;
	listTINAmotleyIndexToAddress[4] = address(0);&#13;
	listTINAmotley.push("The clew-bottom of trustless memorials");&#13;
	listTINAmotleyIndexToAddress[5] = address(0);&#13;
	listTINAmotley.push("The churning ballock of sadness");&#13;
	listTINAmotleyIndexToAddress[6] = address(0);&#13;
	listTINAmotley.push("The bagpiped bravado of TINA");&#13;
	listTINAmotleyIndexToAddress[7] = address(0);&#13;
	listTINAmotley.push("There T");&#13;
	listTINAmotleyIndexToAddress[8] = address(0);&#13;
	listTINAmotley.push("Is I");&#13;
	listTINAmotleyIndexToAddress[9] = address(0);&#13;
	listTINAmotley.push("No N");&#13;
	listTINAmotleyIndexToAddress[10] = address(0);&#13;
	listTINAmotley.push("Alternative A");&#13;
	listTINAmotleyIndexToAddress[11] = address(0);&#13;
	listTINAmotley.push("TINA TINA TINA");&#13;
	listTINAmotleyIndexToAddress[12] = address(0);&#13;
	listTINAmotley.push("Motley");&#13;
	listTINAmotleyIndexToAddress[13] = info_OwnerOfContract;&#13;
	listTINAmotley.push("There is no alternative");&#13;
	listTINAmotleyIndexToAddress[14] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Machines made of sunshine");&#13;
	listTINAmotleyIndexToAddress[15] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Infidel heteroglossia");&#13;
	listTINAmotleyIndexToAddress[16] = info_OwnerOfContract;&#13;
	listTINAmotley.push("TINA and the cyborg, Margaret and motley");&#13;
	listTINAmotleyIndexToAddress[17] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Motley fecundity, be fruitful and multiply");&#13;
	listTINAmotleyIndexToAddress[18] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Perverts! Mothers! Leninists!");&#13;
	listTINAmotleyIndexToAddress[19] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Space!");&#13;
	listTINAmotleyIndexToAddress[20] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Over the exosphere");&#13;
	listTINAmotleyIndexToAddress[21] = info_OwnerOfContract;&#13;
	listTINAmotley.push("On top of the stratosphere");&#13;
	listTINAmotleyIndexToAddress[22] = info_OwnerOfContract;&#13;
	listTINAmotley.push("On top of the troposphere");&#13;
	listTINAmotleyIndexToAddress[23] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Over the chandelier");&#13;
	listTINAmotleyIndexToAddress[24] = info_OwnerOfContract;&#13;
	listTINAmotley.push("On top of the lithosphere");&#13;
	listTINAmotleyIndexToAddress[25] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Over the crust");&#13;
	listTINAmotleyIndexToAddress[26] = info_OwnerOfContract;&#13;
	listTINAmotley.push("You're the top");&#13;
	listTINAmotleyIndexToAddress[27] = info_OwnerOfContract;&#13;
	listTINAmotley.push("You're the top");&#13;
	listTINAmotleyIndexToAddress[28] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Be fruitful!");&#13;
	listTINAmotleyIndexToAddress[29] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Fill the atmosphere, the heavens, the ether");&#13;
	listTINAmotleyIndexToAddress[30] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Glory! Glory. TINA TINA Glory.");&#13;
	listTINAmotleyIndexToAddress[31] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Over the stratosphere");&#13;
	listTINAmotleyIndexToAddress[32] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Over the mesosphere");&#13;
	listTINAmotleyIndexToAddress[33] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Over the troposphere");&#13;
	listTINAmotleyIndexToAddress[34] = info_OwnerOfContract;&#13;
	listTINAmotley.push("On top of bags of space");&#13;
	listTINAmotleyIndexToAddress[35] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Over backbones and bags of ether");&#13;
	listTINAmotleyIndexToAddress[36] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Now TINA, TINA has a backbone");&#13;
	listTINAmotleyIndexToAddress[37] = info_OwnerOfContract;&#13;
	listTINAmotley.push("And motley confetti lists");&#13;
	listTINAmotleyIndexToAddress[38] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Confetti arms, confetti feet, confetti mouths, confetti faces");&#13;
	listTINAmotleyIndexToAddress[39] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Confetti assholes");&#13;
	listTINAmotleyIndexToAddress[40] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Confetti cunts and confetti cocks");&#13;
	listTINAmotleyIndexToAddress[41] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Confetti offspring, splendid suns");&#13;
	listTINAmotleyIndexToAddress[42] = info_OwnerOfContract;&#13;
	listTINAmotley.push("The moon and rings, the countless combinations and effects");&#13;
	listTINAmotleyIndexToAddress[43] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Such-like, and good as such-like");&#13;
	listTINAmotleyIndexToAddress[44] = info_OwnerOfContract;&#13;
	listTINAmotley.push("(Mumbled)");&#13;
	listTINAmotleyIndexToAddress[45] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Everything's for sale");&#13;
	listTINAmotleyIndexToAddress[46] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Just bring your lists");&#13;
	listTINAmotleyIndexToAddress[47] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Micro resurrections");&#13;
	listTINAmotleyIndexToAddress[48] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Paddle steamers");&#13;
	listTINAmotleyIndexToAddress[49] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Windmills");&#13;
	listTINAmotleyIndexToAddress[50] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Anti-anti-utopias");&#13;
	listTINAmotleyIndexToAddress[51] = info_OwnerOfContract;&#13;
	listTINAmotley.push("Rocinante lists");&#13;
	listTINAmotleyIndexToAddress[52] = info_OwnerOfContract;&#13;
	listTINAmotley.push("In memoriam lists");&#13;
	listTINAmotleyIndexToAddress[53] = info_OwnerOfContract;&#13;
	listTINAmotley.push("TINA TINA TINA");&#13;
	listTINAmotleyIndexToAddress[54] = info_OwnerOfContract;&#13;
       &#13;
	listTINAmotleyBalanceOf[info_OwnerOfContract] = 42;&#13;
	listTINAmotleyBalanceOf[address(0)] = 13;&#13;
	listTINAmotleyTotalSupply = 55;&#13;
     }&#13;
     &#13;
    function info_TotalSupply() public view returns (uint256 total){&#13;
        total = listTINAmotleyTotalSupply;&#13;
        return total;&#13;
    }&#13;
&#13;
    //Number of list elements owned by an account.&#13;
    function info_BalanceOf(address _owner) public view &#13;
            returns (uint256 balance){&#13;
        balance = listTINAmotleyBalanceOf[_owner];&#13;
        return balance;&#13;
    }&#13;
    &#13;
    //Shows text of a list element.&#13;
    function info_SeeTINAmotleyLine(uint256 _tokenId) external view &#13;
            returns(string){&#13;
        require(_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        return listTINAmotley[_tokenId];&#13;
    }&#13;
    &#13;
    function info_OwnerTINAmotleyLine(uint256 _tokenId) external view &#13;
            returns (address owner){&#13;
        require(_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        owner = listTINAmotleyIndexToAddress[_tokenId];&#13;
        return owner;&#13;
    }&#13;
&#13;
    // Is the line available to be claimed?&#13;
    function info_CanBeClaimed(uint256 _tokenId) external view returns(bool){&#13;
 	require(_tokenId &lt; listTINAmotleyTotalSupply);&#13;
	if (listTINAmotleyIndexToAddress[_tokenId] == address(0))&#13;
	  return true;&#13;
	else&#13;
	  return false;&#13;
	  }&#13;
	&#13;
    // Claim line owned by address(0).&#13;
    function gift_ClaimTINAmotleyLine(uint256 _tokenId) external returns(bool){&#13;
        require(_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        require(listTINAmotleyIndexToAddress[_tokenId] == address(0));&#13;
        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;&#13;
        listTINAmotleyBalanceOf[msg.sender]++;&#13;
        listTINAmotleyBalanceOf[address(0)]--;&#13;
        emit Claim(_tokenId, msg.sender);&#13;
        return true;&#13;
    }&#13;
&#13;
   // Create new list element. &#13;
    function gift_CreateTINAmotleyLine(string _text) external returns(bool){ &#13;
        require (msg.sender != address(0));&#13;
        uint256  oldTotalSupply = listTINAmotleyTotalSupply;&#13;
        listTINAmotleyTotalSupply++;&#13;
        require (listTINAmotleyTotalSupply &gt; oldTotalSupply);&#13;
        listTINAmotley.push(_text);&#13;
        uint256 _tokenId = listTINAmotleyTotalSupply - 1;&#13;
        listTINAmotleyIndexToAddress[_tokenId] = msg.sender;&#13;
        listTINAmotleyBalanceOf[msg.sender]++;&#13;
        return true;&#13;
    }&#13;
&#13;
    // Transfer by owner to address. Transferring to address(0) will&#13;
    // make line available to be claimed.&#13;
    function gift_Transfer(address _to, uint256 _tokenId) public returns(bool) {&#13;
        address initialOwner = listTINAmotleyIndexToAddress[_tokenId];&#13;
        require (initialOwner == msg.sender);&#13;
        require (_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        // Remove for sale.&#13;
        market_WithdrawForSale(_tokenId);&#13;
        rawTransfer (initialOwner, _to, _tokenId);&#13;
        // Remove new owner's bid, if it exists.&#13;
        clearNewOwnerBid(_to, _tokenId);&#13;
        return true;&#13;
    }&#13;
&#13;
    // Let anyone interested know that the owner put a token up for sale. &#13;
    // Anyone can obtain it by sending an amount of wei equal to or&#13;
    // larger than  _minPriceInWei. &#13;
    function market_DeclareForSale(uint256 _tokenId, uint256 _minPriceInWei) &#13;
            external returns (bool){&#13;
        require (_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];&#13;
        require (msg.sender == tokenOwner);&#13;
        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, &#13;
            msg.sender, _minPriceInWei, address(0));&#13;
        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, address(0));&#13;
        return true;&#13;
    }&#13;
    &#13;
    // Let anyone interested know that the owner put a token up for sale. &#13;
    // Only the address _to can obtain it by sending an amount of wei equal &#13;
    // to or larger than _minPriceInWei.&#13;
    function market_DeclareForSaleToAddress(uint256 _tokenId, uint256 &#13;
            _minPriceInWei, address _to) external returns(bool){&#13;
        require (_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        address tokenOwner = listTINAmotleyIndexToAddress[_tokenId];&#13;
        require (msg.sender == tokenOwner);&#13;
        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(true, _tokenId, &#13;
            msg.sender, _minPriceInWei, _to);&#13;
        emit ForSaleDeclared(_tokenId, msg.sender, _minPriceInWei, _to);&#13;
        return true;&#13;
    }&#13;
&#13;
    // Owner no longer wants token for sale, or token has changed owner, &#13;
    // so previously posted for sale is no longer valid.&#13;
    function market_WithdrawForSale(uint256 _tokenId) public returns(bool){&#13;
        require (_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        require (msg.sender == listTINAmotleyIndexToAddress[_tokenId]);&#13;
        info_ForSaleInfoByIndex[_tokenId] = forSaleInfo(false, _tokenId, &#13;
            address(0), 0, address(0));&#13;
        emit ForSaleWithdrawn(_tokenId, msg.sender);&#13;
        return true;&#13;
    }&#13;
    &#13;
    // I'll take it. Must send at least as many wei as minValue in &#13;
    // forSale structure.&#13;
    function market_BuyForSale(uint256 _tokenId) payable external returns(bool){&#13;
        require (_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        forSaleInfo storage existingForSale = info_ForSaleInfoByIndex[_tokenId];&#13;
        require(existingForSale.isForSale);&#13;
        require(existingForSale.onlySellTo == address(0) || &#13;
            existingForSale.onlySellTo == msg.sender);&#13;
        require(msg.value &gt;= existingForSale.minValue); &#13;
        require(existingForSale.seller == &#13;
            listTINAmotleyIndexToAddress[_tokenId]); &#13;
        address seller = listTINAmotleyIndexToAddress[_tokenId];&#13;
        rawTransfer(seller, msg.sender, _tokenId);&#13;
        // must withdrawal for sale after transfer to make sure msg.sender&#13;
        //  is the current owner.&#13;
        market_WithdrawForSale(_tokenId);&#13;
        // clear bid of new owner, if it exists&#13;
        clearNewOwnerBid(msg.sender, _tokenId);&#13;
        info_PendingWithdrawals[seller] += msg.value;&#13;
        emit ForSaleBought(_tokenId, msg.value, seller, msg.sender);&#13;
        return true;&#13;
    }&#13;
    &#13;
    // Let anyone interested know that potential buyer put up money for a token.&#13;
    function market_DeclareBid(uint256 _tokenId) payable external returns(bool){&#13;
        require (_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));&#13;
        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);&#13;
        require (msg.value &gt; 0);&#13;
        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];&#13;
        // Keep only the highest bid.&#13;
        require (msg.value &gt; existingBid.value);&#13;
        if (existingBid.value &gt; 0){&#13;
            info_PendingWithdrawals[existingBid.bidder] += existingBid.value;&#13;
        }&#13;
        info_BidInfoByIndex[_tokenId] = bidInfo(true, _tokenId, &#13;
            msg.sender, msg.value);&#13;
        emit BidDeclared(_tokenId, msg.value, msg.sender);&#13;
        return true;&#13;
    }&#13;
    &#13;
    // Potential buyer changes mind and withdrawals bid.&#13;
    function market_WithdrawBid(uint256 _tokenId) external returns(bool){&#13;
        require (_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        require (listTINAmotleyIndexToAddress[_tokenId] != address(0));&#13;
        require (listTINAmotleyIndexToAddress[_tokenId] != msg.sender);&#13;
        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];&#13;
        require (existingBid.hasBid);&#13;
        require (existingBid.bidder == msg.sender);&#13;
        uint256 amount = existingBid.value;&#13;
        // Refund&#13;
        info_PendingWithdrawals[existingBid.bidder] += amount;&#13;
        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0), 0);&#13;
        emit BidWithdrawn(_tokenId, amount, msg.sender);&#13;
        return true;&#13;
    }&#13;
    &#13;
    // Accept bid, and transfer money and token. All money in wei.&#13;
    function market_AcceptBid(uint256 _tokenId, uint256 minPrice) &#13;
            external returns(bool){&#13;
        require (_tokenId &lt; listTINAmotleyTotalSupply);&#13;
        address seller = listTINAmotleyIndexToAddress[_tokenId];&#13;
        require (seller == msg.sender);&#13;
        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];&#13;
        require (existingBid.hasBid);&#13;
        //Bid must be larger than minPrice&#13;
        require (existingBid.value &gt; minPrice);&#13;
        address buyer = existingBid.bidder;&#13;
        // Remove for sale.&#13;
        market_WithdrawForSale(_tokenId);&#13;
        rawTransfer (seller, buyer, _tokenId);&#13;
        uint256 amount = existingBid.value;&#13;
        // Remove bid.&#13;
        info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, address(0),0);&#13;
        info_PendingWithdrawals[seller] += amount;&#13;
        emit BidAccepted(_tokenId, amount, seller, buyer);&#13;
        return true;&#13;
    }&#13;
    &#13;
    // Retrieve money to successful sale, failed bid, withdrawn bid, etc.&#13;
    //  All in wei. Note that refunds, income, etc. are NOT automatically&#13;
    // deposited in the user's address. The user must withdraw the funds.&#13;
    function market_WithdrawWei() external returns(bool) {&#13;
       uint256 amount = info_PendingWithdrawals[msg.sender];&#13;
       require (amount &gt; 0);&#13;
       info_PendingWithdrawals[msg.sender] = 0;&#13;
       msg.sender.transfer(amount);&#13;
       return true;&#13;
    } &#13;
    &#13;
    function clearNewOwnerBid(address _to, uint256 _tokenId) internal {&#13;
        // clear bid when become owner via transfer or forSaleBuy&#13;
        bidInfo storage existingBid = info_BidInfoByIndex[_tokenId];&#13;
        if (existingBid.bidder == _to){&#13;
            uint256 amount = existingBid.value;&#13;
            info_PendingWithdrawals[_to] += amount;&#13;
            info_BidInfoByIndex[_tokenId] = bidInfo(false, _tokenId, &#13;
                address(0), 0);&#13;
            emit BidWithdrawn(_tokenId, amount, _to);&#13;
        }&#13;
      &#13;
    }&#13;
    &#13;
    function rawTransfer(address _from, address _to, uint256 _tokenId) &#13;
            internal {&#13;
        listTINAmotleyBalanceOf[_from]--;&#13;
        listTINAmotleyBalanceOf[_to]++;&#13;
        listTINAmotleyIndexToAddress[_tokenId] = _to;&#13;
        emit Transfer(_tokenId, _from, _to);&#13;
    }&#13;
    &#13;
    &#13;
}
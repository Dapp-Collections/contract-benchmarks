pragma solidity 0.4.18;

/// @title User Comments
/// @author Mark Beylin <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c7aaa6b5ace9a5a2beabaea987a4a8a9b4a2a9b4beb4e9a9a2b3">[emailÂ protected]</a>&gt;&#13;
&#13;
contract UserComments {&#13;
    event CommentAdded(string _comment, address _from, address _to, uint _time);&#13;
&#13;
    struct Comment{&#13;
      string comment;&#13;
      address from;&#13;
      address to;&#13;
      bool aboutBounty;&#13;
      uint bountyId;&#13;
      uint time;&#13;
    }&#13;
&#13;
    Comment[] public comments;&#13;
&#13;
    modifier isValidCommentIndex(uint i){&#13;
      require (i &lt; comments.length);&#13;
      _;&#13;
    }&#13;
&#13;
    function addComment(string _comment, address _to, bool _aboutBounty, uint _bountyId)&#13;
    public&#13;
    {&#13;
      if (_aboutBounty){&#13;
        comments.push(Comment(_comment, msg.sender, address(0), _aboutBounty, _bountyId, block.timestamp));&#13;
      } else {&#13;
        comments.push(Comment(_comment, msg.sender, _to, _aboutBounty, _bountyId, block.timestamp));&#13;
      }&#13;
      CommentAdded(_comment, msg.sender, _to, block.timestamp);&#13;
    }&#13;
&#13;
    function numComments()&#13;
    public&#13;
    constant&#13;
    returns (uint){&#13;
      return comments.length;&#13;
    }&#13;
&#13;
    function getComment(uint _commentId)&#13;
    isValidCommentIndex(_commentId)&#13;
    public&#13;
    constant&#13;
    returns (string, address, address, bool, uint, uint){&#13;
      return (comments[_commentId].comment,&#13;
              comments[_commentId].from,&#13;
              comments[_commentId].to,&#13;
              comments[_commentId].aboutBounty,&#13;
              comments[_commentId].bountyId,&#13;
              comments[_commentId].time);&#13;
    }&#13;
}
pragma solidity ^0.4.24;

// ----------------------------------------------------------------------------
// 'AGRI' - AgriChain Utility Token Contract
//
// Symbol           : AGRI
// Name             : AgriChain Utility Token
// Max Total supply : 1,000,000,000.000000000000000000 (1 billion)
// Decimals         : 18
//
// Company          : AgriChain Pty Ltd (trading as BlockGrain)
//                  : https://agrichain.com
// Version          : 2.1 
// Author           : Martin Halford <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9af9eef5dafbfde8f3f9f2fbf3f4b4f9f5f7">[emailÂ protected]</a>&gt;&#13;
// Published        : 15 Aug 2018&#13;
//&#13;
// ----------------------------------------------------------------------------&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// Safe Maths&#13;
// ----------------------------------------------------------------------------&#13;
library SafeMath {&#13;
    &#13;
    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {&#13;
        if (_a == 0) {&#13;
            return 0;&#13;
        }&#13;
        uint256 c = _a * _b;&#13;
        require(c / _a == _b, "Muliply overflow error.");&#13;
        return c;&#13;
    }&#13;
&#13;
    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {&#13;
        require(_b &gt; 0, "Divide by zero error."); &#13;
        uint256 c = _a / _b;&#13;
        return c;&#13;
    }&#13;
&#13;
    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {&#13;
        require(_b &lt;= _a, "Subtraction overflow error.");&#13;
        uint256 c = _a - _b;&#13;
        return c;&#13;
    }&#13;
&#13;
    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {&#13;
        uint256 c = _a + _b;&#13;
        require(c &gt;= _a, "Addition overflow error.");&#13;
        return c;&#13;
    }&#13;
&#13;
    function mod(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        require(b != 0, "Mod overflow error");&#13;
        return a % b;&#13;
    }&#13;
}&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// ERC Token Standard #20 Interface&#13;
// ----------------------------------------------------------------------------&#13;
contract ERC20Interface {&#13;
&#13;
    function totalSupply() public view returns (uint);&#13;
    function balanceOf(address tokenOwner) public view returns (uint balance);&#13;
    function allowance(address tokenOwner, address spender) public view returns (uint remaining);&#13;
    function transfer(address to, uint tokens) public returns (bool success);&#13;
    function approve(address spender, uint tokens) public returns (bool success);&#13;
    function transferFrom(address from, address to, uint tokens) public returns (bool success);&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint tokens);&#13;
    event Approval(address indexed tokenOwner, address indexed spender, uint tokens);&#13;
}&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// Contract function to receive approval and execute function in one call&#13;
// ----------------------------------------------------------------------------&#13;
contract ApproveAndCallFallBack {&#13;
    function receiveApproval(address from, uint256 tokens, address token, bytes data) public;&#13;
}&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// Owned contract&#13;
// ----------------------------------------------------------------------------&#13;
contract Owned {&#13;
&#13;
    address public owner;&#13;
    address public newOwner;&#13;
&#13;
    event OwnershipTransferred(address indexed _from, address indexed _to);&#13;
&#13;
    constructor() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner, "Not contract owner.");&#13;
        _;&#13;
    }&#13;
&#13;
    function transferOwnership(address _newOwner) public onlyOwner {&#13;
        newOwner = _newOwner;&#13;
    }&#13;
    function acceptOwnership() public {&#13;
        require(msg.sender == newOwner, "Not new contract owner.");&#13;
        emit OwnershipTransferred(owner, newOwner);&#13;
        owner = newOwner;&#13;
        newOwner = address(0);&#13;
    }&#13;
}&#13;
&#13;
&#13;
// ----------------------------------------------------------------------------&#13;
// Agri Token&#13;
// ----------------------------------------------------------------------------&#13;
contract AgriChainToken is ERC20Interface, Owned {&#13;
    &#13;
    using SafeMath for uint;&#13;
&#13;
    uint256 constant public MAX_SUPPLY = 1000000000000000000000000000; // 1 billion Agri &#13;
&#13;
    string public symbol;&#13;
    string public  name;&#13;
    uint8 public decimals;&#13;
    uint256 _totalSupply;&#13;
&#13;
    mapping(address =&gt; uint) balances;&#13;
    mapping(address =&gt; mapping(address =&gt; uint)) allowed;&#13;
&#13;
    // Flag to allow or disallow transfers&#13;
    bool public isAllowingTransfers;&#13;
&#13;
    // List of admins who can mint, burn and allow transfers of tokens&#13;
    mapping (address =&gt; bool) public administrators;&#13;
&#13;
    // modifier to check if transfers being allowed&#13;
    modifier allowingTransfers() {&#13;
        require(isAllowingTransfers, "Contract currently not allowing transfers.");&#13;
        _;&#13;
    }&#13;
&#13;
    // modifier to check admin status&#13;
    modifier onlyAdmin() {&#13;
        require(administrators[msg.sender], "Not contract administrator.");&#13;
        _;&#13;
    }&#13;
&#13;
    // This notifies clients about the amount burnt, only admins can burn tokens&#13;
    event Burn(address indexed burner, uint256 value); &#13;
&#13;
    // This notifies clients about the transfers being allowed or disallowed&#13;
    event AllowTransfers ();&#13;
    event DisallowTransfers ();&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Constructor&#13;
    // ------------------------------------------------------------------------&#13;
    constructor(uint initialTokenSupply) public {&#13;
        symbol = "AGRI";&#13;
        name = "AgriChain Utility Token";&#13;
        decimals = 18;&#13;
        _totalSupply = initialTokenSupply * 10**uint(decimals);&#13;
&#13;
        balances[owner] = _totalSupply;&#13;
        emit Transfer(address(0), owner, _totalSupply);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Total supply&#13;
    // ------------------------------------------------------------------------&#13;
    function totalSupply() public view returns (uint) {&#13;
        return _totalSupply.sub(balances[address(0)]);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Get the token balance for account `tokenOwner`&#13;
    // ------------------------------------------------------------------------&#13;
    function balanceOf(address tokenOwner) public view returns (uint balance) {&#13;
        return balances[tokenOwner];&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Transfer the balance from token owner's account to `to` account&#13;
    // - Owner's account must have sufficient balance to transfer&#13;
    // - 0 value transfers are allowed&#13;
    // ------------------------------------------------------------------------&#13;
    function transfer(address to, uint tokens) public allowingTransfers returns (bool success) {&#13;
        balances[msg.sender] = balances[msg.sender].sub(tokens);&#13;
        balances[to] = balances[to].add(tokens);&#13;
        emit Transfer(msg.sender, to, tokens);&#13;
        return true;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Token owner can approve for `spender` to transferFrom(...) `tokens`&#13;
    // from the token owner's account&#13;
    // ------------------------------------------------------------------------&#13;
    function approve(address spender, uint tokens) public returns (bool success) {&#13;
        allowed[msg.sender][spender] = tokens;&#13;
        emit Approval(msg.sender, spender, tokens);&#13;
        return true;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Transfer `tokens` from the `from` account to the `to` account&#13;
    // &#13;
    // The calling account must already have sufficient tokens approve(...)-d&#13;
    // for spending from the `from` account and&#13;
    // - From account must have sufficient balance to transfer&#13;
    // - Spender must have sufficient allowance to transfer&#13;
    // - 0 value transfers are allowed&#13;
    // ------------------------------------------------------------------------&#13;
    function transferFrom(address from, address to, uint tokens) public allowingTransfers returns (bool success) {&#13;
        balances[from] = balances[from].sub(tokens);&#13;
        allowed[from][msg.sender] = allowed[from][msg.sender].sub(tokens);&#13;
        balances[to] = balances[to].add(tokens);&#13;
        emit Transfer(from, to, tokens);&#13;
        return true;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Returns the amount of tokens approved by the owner that can be&#13;
    // transferred to the spender's account&#13;
    // ------------------------------------------------------------------------&#13;
    function allowance(address tokenOwner, address spender) public view returns (uint remaining) {&#13;
        return allowed[tokenOwner][spender];&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Token owner can approve for `spender` to transferFrom(...) `tokens`&#13;
    // from the token owner's account. The `spender` contract function&#13;
    // `receiveApproval(...)` is then executed&#13;
    // ------------------------------------------------------------------------&#13;
    function approveAndCall(address spender, uint tokens, bytes data) public returns (bool success) {&#13;
        allowed[msg.sender][spender] = tokens;&#13;
        emit Approval(msg.sender, spender, tokens);&#13;
        ApproveAndCallFallBack(spender).receiveApproval(msg.sender, tokens, this, data);&#13;
        return true;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Don't accept ETH&#13;
    // ------------------------------------------------------------------------&#13;
    function () public payable {&#13;
        revert("Contract does not accept ETH.");&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can transfer out any accidentally sent ERC20 tokens&#13;
    // ------------------------------------------------------------------------&#13;
    function transferAnyERC20Token(address tokenAddress, uint tokens) public onlyAdmin returns (bool success) {&#13;
        return ERC20Interface(tokenAddress).transfer(owner, tokens);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Administrator can mint additional tokens &#13;
    // Do ** NOT ** let totalSupply exceed MAX_SUPPLY&#13;
    // ------------------------------------------------------------------------&#13;
    function mintTokens(uint256 _value) public onlyAdmin {&#13;
        require(_totalSupply.add(_value) &lt;= MAX_SUPPLY, "Cannot mint greater than maximum supply.");&#13;
        balances[msg.sender] = balances[msg.sender].add(_value);&#13;
        _totalSupply = _totalSupply.add(_value);&#13;
        emit Transfer(0, msg.sender, _value);      &#13;
    }    &#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Administrator can burn tokens&#13;
    // ------------------------------------------------------------------------&#13;
    function burn(uint256 _value) public onlyAdmin {&#13;
        require(_value &lt;= balances[msg.sender], "Burn value exceeds balance.");&#13;
        address burner = msg.sender;&#13;
        balances[burner] = balances[burner].sub(_value);&#13;
        _totalSupply = _totalSupply.sub(_value);&#13;
        emit Burn(burner, _value);&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Administrator can allow transfer of tokens&#13;
    // ------------------------------------------------------------------------&#13;
    function allowTransfers() public onlyAdmin {&#13;
        isAllowingTransfers = true;&#13;
        emit AllowTransfers();&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Administrator can disallow transfer of tokens&#13;
    // ------------------------------------------------------------------------&#13;
    function disallowTransfers() public onlyAdmin {&#13;
        isAllowingTransfers = false;&#13;
        emit DisallowTransfers();&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can add administrators of tokens&#13;
    // ------------------------------------------------------------------------&#13;
    function addAdministrator(address _admin) public onlyOwner {&#13;
        administrators[_admin] = true;&#13;
    }&#13;
&#13;
    // ------------------------------------------------------------------------&#13;
    // Owner can remove administrators of tokens&#13;
    // ------------------------------------------------------------------------&#13;
    function removeAdministrator(address _admin) public onlyOwner {&#13;
        administrators[_admin] = false;&#13;
    }&#13;
}
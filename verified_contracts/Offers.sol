pragma solidity ^0.4.24;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8aeeebfcefcaebe1e5e7e8eba4e9e5e7">[emailÂ protected]</a>&#13;
// released under Apache 2.0 licence&#13;
// input  /Users/howard/Documents/programming/dapperlabs/ck-offers-contracts/contracts/Offers.sol&#13;
// flattened :  Tuesday, 04-Dec-18 19:41:54 UTC&#13;
contract OffersAccessControl {&#13;
&#13;
    // The address of the account that can replace ceo, coo, cfo, lostAndFound&#13;
    address public ceoAddress;&#13;
    // The address of the account that can adjust configuration variables and fulfill offer&#13;
    address public cooAddress;&#13;
    // The address of the CFO account that receives all the fees&#13;
    address public cfoAddress;&#13;
    // The address where funds of failed "push"es go to&#13;
    address public lostAndFoundAddress;&#13;
&#13;
    // The total amount of ether (in wei) in escrow owned by CFO&#13;
    uint256 public totalCFOEarnings;&#13;
    // The total amount of ether (in wei) in escrow owned by lostAndFound&#13;
    uint256 public totalLostAndFoundBalance;&#13;
&#13;
    /// @notice Keeps track whether the contract is frozen.&#13;
    ///  When frozen is set to be true, it cannot be set back to false again,&#13;
    ///  and all whenNotFrozen actions will be blocked.&#13;
    bool public frozen = false;&#13;
&#13;
    /// @notice Access modifier for CEO-only functionality&#13;
    modifier onlyCEO() {&#13;
        require(msg.sender == ceoAddress, "only CEO is allowed to perform this operation");&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Access modifier for COO-only functionality&#13;
    modifier onlyCOO() {&#13;
        require(msg.sender == cooAddress, "only COO is allowed to perform this operation");&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Access modifier for CFO-only functionality&#13;
    modifier onlyCFO() {&#13;
        require(&#13;
            msg.sender == cfoAddress &amp;&amp;&#13;
            msg.sender != address(0),&#13;
            "only CFO is allowed to perform this operation"&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Access modifier for CEO-only or CFO-only functionality&#13;
    modifier onlyCeoOrCfo() {&#13;
        require(&#13;
            msg.sender != address(0) &amp;&amp;&#13;
            (&#13;
                msg.sender == ceoAddress ||&#13;
                msg.sender == cfoAddress&#13;
            ),&#13;
            "only CEO or CFO is allowed to perform this operation"&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Access modifier for LostAndFound-only functionality&#13;
    modifier onlyLostAndFound() {&#13;
        require(&#13;
            msg.sender == lostAndFoundAddress &amp;&amp;&#13;
            msg.sender != address(0),&#13;
            "only LostAndFound is allowed to perform this operation"&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Assigns a new address to act as the CEO. Only available to the current CEO.&#13;
    /// @param _newCEO The address of the new CEO&#13;
    function setCEO(address _newCEO) external onlyCEO {&#13;
        require(_newCEO != address(0), "new CEO address cannot be the zero-account");&#13;
        ceoAddress = _newCEO;&#13;
    }&#13;
&#13;
    /// @notice Assigns a new address to act as the COO. Only available to the current CEO.&#13;
    /// @param _newCOO The address of the new COO&#13;
    function setCOO(address _newCOO) public onlyCEO {&#13;
        require(_newCOO != address(0), "new COO address cannot be the zero-account");&#13;
        cooAddress = _newCOO;&#13;
    }&#13;
&#13;
    /// @notice Assigns a new address to act as the CFO. Only available to the current CEO.&#13;
    /// @param _newCFO The address of the new CFO&#13;
    function setCFO(address _newCFO) external onlyCEO {&#13;
        require(_newCFO != address(0), "new CFO address cannot be the zero-account");&#13;
        cfoAddress = _newCFO;&#13;
    }&#13;
&#13;
    /// @notice Assigns a new address to act as the LostAndFound account. Only available to the current CEO.&#13;
    /// @param _newLostAndFound The address of the new lostAndFound address&#13;
    function setLostAndFound(address _newLostAndFound) external onlyCEO {&#13;
        require(_newLostAndFound != address(0), "new lost and found cannot be the zero-account");&#13;
        lostAndFoundAddress = _newLostAndFound;&#13;
    }&#13;
&#13;
    /// @notice CFO withdraws the CFO earnings&#13;
    function withdrawTotalCFOEarnings() external onlyCFO {&#13;
        // Obtain reference&#13;
        uint256 balance = totalCFOEarnings;&#13;
        totalCFOEarnings = 0;&#13;
        cfoAddress.transfer(balance);&#13;
    }&#13;
&#13;
    /// @notice LostAndFound account withdraws all the lost and found amount&#13;
    function withdrawTotalLostAndFoundBalance() external onlyLostAndFound {&#13;
        // Obtain reference&#13;
        uint256 balance = totalLostAndFoundBalance;&#13;
        totalLostAndFoundBalance = 0;&#13;
        lostAndFoundAddress.transfer(balance);&#13;
    }&#13;
&#13;
    /// @notice Modifier to allow actions only when the contract is not frozen&#13;
    modifier whenNotFrozen() {&#13;
        require(!frozen, "contract needs to not be frozen");&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Modifier to allow actions only when the contract is frozen&#13;
    modifier whenFrozen() {&#13;
        require(frozen, "contract needs to be frozen");&#13;
        _;&#13;
    }&#13;
&#13;
    /// @notice Called by CEO or CFO role to freeze the contract.&#13;
    ///  Only intended to be used if a serious exploit is detected.&#13;
    /// @notice Allow two C-level roles to call this function in case either CEO or CFO key is compromised.&#13;
    /// @notice This is a one-way process; there is no un-freezing.&#13;
    /// @dev A frozen contract will be frozen forever, there's no way to undo this action.&#13;
    function freeze() external onlyCeoOrCfo whenNotFrozen {&#13;
        frozen = true;&#13;
    }&#13;
&#13;
}&#13;
&#13;
contract ERC721 {&#13;
    // Required methods&#13;
    function totalSupply() public view returns (uint256 total);&#13;
    function balanceOf(address _owner) public view returns (uint256 balance);&#13;
    function ownerOf(uint256 _tokenId) external view returns (address owner);&#13;
    function approve(address _to, uint256 _tokenId) external;&#13;
    function transfer(address _to, uint256 _tokenId) external;&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
&#13;
    // Events&#13;
    event Transfer(address from, address to, uint256 tokenId);&#13;
    event Approval(address owner, address approved, uint256 tokenId);&#13;
&#13;
    // Optional&#13;
    // function name() public view returns (string name);&#13;
    // function symbol() public view returns (string symbol);&#13;
    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);&#13;
    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);&#13;
&#13;
    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool);&#13;
}&#13;
&#13;
contract OffersConfig is OffersAccessControl {&#13;
&#13;
    /* ************************* */&#13;
    /* ADJUSTABLE CONFIGURATIONS */&#13;
    /* ************************* */&#13;
&#13;
    // The duration (in seconds) of all offers that are created. This parameter is also used in calculating&#13;
    // new expiration times when extending offers.&#13;
    uint256 public globalDuration;&#13;
    // The global minimum offer value (price + offer fee, in wei)&#13;
    uint256 public minimumTotalValue;&#13;
    // The minimum overbid increment % (expressed in basis points, which is 1/100 of a percent)&#13;
    // For basis points, values 0-10,000 map to 0%-100%&#13;
    uint256 public minimumPriceIncrement;&#13;
&#13;
    /* *************** */&#13;
    /* ADJUSTABLE FEES */&#13;
    /* *************** */&#13;
&#13;
    // Throughout the various contracts there will be various symbols used for the purpose of a clear display&#13;
    // of the underlying mathematical formulation. Specifically,&#13;
    //&#13;
    //          - T: This is the total amount of funds associated with an offer, comprised of 1) the offer&#13;
    //                  price which the bidder is proposing the owner of the token receive, and 2) an amount&#13;
    //                  that is the maximum the main Offers contract will ever take - this is when the offer&#13;
    //                  is cancelled, or fulfilled. In other scenarios, the amount taken by the main contract&#13;
    //                  may be less, depending on other configurations.&#13;
    //&#13;
    //          - S: This is called the offerCut, expressed as a basis point. This determines the maximum amount&#13;
    //                  of ether the main contract can ever take in the various possible outcomes of an offer&#13;
    //                  (cancelled, expired, overbid, fulfilled, updated).&#13;
    //&#13;
    //          - P: This simply refers to the price that the bidder is offering the owner receive, upon&#13;
    //                  fulfillment of the offer process.&#13;
    //&#13;
    //          - Below is the formula that ties the symbols listed above together (S is % for brevity):&#13;
    //                  T = P + S * P&#13;
&#13;
    // Flat fee (in wei) the main contract takes when offer has been expired or overbid. The fee serves as a&#13;
    // disincentive for abuse and allows recoupment of ether spent calling batchRemoveExpired on behalf of users.&#13;
    uint256 public unsuccessfulFee;&#13;
    // This is S, the maximum % the main contract takes on each offer. S represents the total amount paid when&#13;
    // an offer has been fulfilled or cancelled.&#13;
    uint256 public offerCut;&#13;
&#13;
    /* ****** */&#13;
    /* EVENTS */&#13;
    /* ****** */&#13;
&#13;
    event GlobalDurationUpdated(uint256 value);&#13;
    event MinimumTotalValueUpdated(uint256 value);&#13;
    event MinimumPriceIncrementUpdated(uint256 value);&#13;
    event OfferCutUpdated(uint256 value);&#13;
    event UnsuccessfulFeeUpdated(uint256 value);&#13;
&#13;
    /* ********* */&#13;
    /* FUNCTIONS */&#13;
    /* ********* */&#13;
&#13;
    /// @notice Sets the minimumTotalValue value. This would impact offers created after this has been set, but&#13;
    ///  not existing offers.&#13;
    /// @notice Only callable by COO, when not frozen.&#13;
    /// @param _newMinTotal The minimumTotalValue value to set&#13;
    function setMinimumTotalValue(uint256 _newMinTotal) external onlyCOO whenNotFrozen {&#13;
        _setMinimumTotalValue(_newMinTotal, unsuccessfulFee);&#13;
        emit MinimumTotalValueUpdated(_newMinTotal);&#13;
    }&#13;
&#13;
    /// @notice Sets the globalDuration value. All offers that are created or updated will compute a new expiration&#13;
    ///  time based on this.&#13;
    /// @notice Only callable by COO, when not frozen.&#13;
    /// @dev Need to check for underflow since function argument is 256 bits, and the offer expiration time is&#13;
    ///  packed into 64 bits in the Offer struct.&#13;
    /// @param _newDuration The globalDuration value to set.&#13;
    function setGlobalDuration(uint256 _newDuration) external onlyCOO whenNotFrozen {&#13;
        require(_newDuration == uint256(uint64(_newDuration)), "new globalDuration value must not underflow");&#13;
        globalDuration = _newDuration;&#13;
        emit GlobalDurationUpdated(_newDuration);&#13;
    }&#13;
&#13;
    /// @notice Sets the offerCut value. All offers will compute a fee taken by this contract based on this&#13;
    ///  configuration.&#13;
    /// @notice Only callable by COO, when not frozen.&#13;
    /// @dev As this configuration is a basis point, the value to set must be less than or equal to 10000.&#13;
    /// @param _newOfferCut The offerCut value to set.&#13;
    function setOfferCut(uint256 _newOfferCut) external onlyCOO whenNotFrozen {&#13;
        _setOfferCut(_newOfferCut);&#13;
        emit OfferCutUpdated(_newOfferCut);&#13;
    }&#13;
&#13;
    /// @notice Sets the unsuccessfulFee value. All offers that are unsuccessful (overbid or expired)&#13;
    ///  will have a flat fee taken by the main contract before being refunded to bidders.&#13;
    /// @notice Given Tmin (_minTotal), flat fee (_unsuccessfulFee),&#13;
    ///  Tmin â¥ (2 * flat fee) guarantees that offer prices â¥ flat fee, always. This is important to prevent the&#13;
    ///  existence of offers that, when overbid or expired, would result in the main contract taking too big of a cut.&#13;
    ///  In the case of a sufficiently low offer price, eg. the same as unsuccessfulFee, the most the main contract can&#13;
    ///  ever take is simply the amount of unsuccessfulFee.&#13;
    /// @notice Only callable by COO, when not frozen.&#13;
    /// @param _newUnsuccessfulFee The unsuccessfulFee value to set.&#13;
    function setUnsuccessfulFee(uint256 _newUnsuccessfulFee) external onlyCOO whenNotFrozen {&#13;
        require(minimumTotalValue &gt;= (2 * _newUnsuccessfulFee), "unsuccessful value must be &lt;= half of minimumTotalValue");&#13;
        unsuccessfulFee = _newUnsuccessfulFee;&#13;
        emit UnsuccessfulFeeUpdated(_newUnsuccessfulFee);&#13;
    }&#13;
&#13;
    /// @notice Sets the minimumPriceIncrement value. All offers that are overbid must have a price greater&#13;
    ///  than the minimum increment computed from this basis point.&#13;
    /// @notice Only callable by COO, when not frozen.&#13;
    /// @dev As this configuration is a basis point, the value to set must be less than or equal to 10000.&#13;
    /// @param _newMinimumPriceIncrement The minimumPriceIncrement value to set.&#13;
    function setMinimumPriceIncrement(uint256 _newMinimumPriceIncrement) external onlyCOO whenNotFrozen {&#13;
        _setMinimumPriceIncrement(_newMinimumPriceIncrement);&#13;
        emit MinimumPriceIncrementUpdated(_newMinimumPriceIncrement);&#13;
    }&#13;
&#13;
    /// @notice Utility function used internally for the setMinimumTotalValue method.&#13;
    /// @notice Given Tmin (_minTotal), flat fee (_unsuccessfulFee),&#13;
    ///  Tmin â¥ (2 * flat fee) guarantees that offer prices â¥ flat fee, always. This is important to prevent the&#13;
    ///  existence of offers that, when overbid or expired, would result in the main contract taking too big of a cut.&#13;
    ///  In the case of a sufficiently low offer price, eg. the same as unsuccessfulFee, the most the main contract can&#13;
    ///  ever take is simply the amount of unsuccessfulFee.&#13;
    /// @param _newMinTotal The minimumTotalValue value to set.&#13;
    /// @param _unsuccessfulFee The unsuccessfulFee value used to check if the _minTotal specified&#13;
    ///  is too low.&#13;
    function _setMinimumTotalValue(uint256 _newMinTotal, uint256 _unsuccessfulFee) internal {&#13;
        require(_newMinTotal &gt;= (2 * _unsuccessfulFee), "minimum value must be &gt;= 2 * unsuccessful fee");&#13;
        minimumTotalValue = _newMinTotal;&#13;
    }&#13;
&#13;
    /// @dev As offerCut is a basis point, the value to set must be less than or equal to 10000.&#13;
    /// @param _newOfferCut The offerCut value to set.&#13;
    function _setOfferCut(uint256 _newOfferCut) internal {&#13;
        require(_newOfferCut &lt;= 1e4, "offer cut must be a valid basis point");&#13;
        offerCut = _newOfferCut;&#13;
    }&#13;
&#13;
    /// @dev As minimumPriceIncrement is a basis point, the value to set must be less than or equal to 10000.&#13;
    /// @param _newMinimumPriceIncrement The minimumPriceIncrement value to set.&#13;
    function _setMinimumPriceIncrement(uint256 _newMinimumPriceIncrement) internal {&#13;
        require(_newMinimumPriceIncrement &lt;= 1e4, "minimum price increment must be a valid basis point");&#13;
        minimumPriceIncrement = _newMinimumPriceIncrement;&#13;
    }&#13;
}&#13;
&#13;
contract OffersBase is OffersConfig {&#13;
    /*** EVENTS ***/&#13;
&#13;
    /// @notice The OfferCreated event is emitted when an offer is created through&#13;
    ///  createOffer method.&#13;
    /// @param tokenId The token id that a bidder is offering to buy from the owner.&#13;
    /// @param bidder The creator of the offer.&#13;
    /// @param expiresAt The timestamp when the offer will be expire.&#13;
    /// @param total The total eth value the bidder sent to the Offer contract.&#13;
    /// @param offerPrice The eth price that the owner of the token will receive&#13;
    ///  if the offer is accepted.&#13;
    event OfferCreated(&#13;
        uint256 tokenId,&#13;
        address bidder,&#13;
        uint256 expiresAt,&#13;
        uint256 total,&#13;
        uint256 offerPrice&#13;
    );&#13;
&#13;
    /// @notice The OfferCancelled event is emitted when an offer is cancelled before expired.&#13;
    /// @param tokenId The token id that the cancelled offer was offering to buy.&#13;
    /// @param bidder The creator of the offer.&#13;
    /// @param bidderReceived The eth amount that the bidder received as refund.&#13;
    /// @param fee The eth amount that CFO received as the fee for the cancellation.&#13;
    event OfferCancelled(&#13;
        uint256 tokenId,&#13;
        address bidder,&#13;
        uint256 bidderReceived,&#13;
        uint256 fee&#13;
    );&#13;
&#13;
    /// @notice The OfferFulfilled event is emitted when an active offer has been fulfilled, meaning&#13;
    ///  the bidder now owns the token, and the orignal owner receives the eth amount from the offer.&#13;
    /// @param tokenId The token id that the fulfilled offer was offering to buy.&#13;
    /// @param bidder The creator of the offer.&#13;
    /// @param owner The original owner of the token who accepted the offer.&#13;
    /// @param ownerReceived The eth amount that the original owner received from the offer&#13;
    /// @param fee The eth amount that CFO received as the fee for the successfully fulfilling.&#13;
    event OfferFulfilled(&#13;
        uint256 tokenId,&#13;
        address bidder,&#13;
        address owner,&#13;
        uint256 ownerReceived,&#13;
        uint256 fee&#13;
    );&#13;
&#13;
    /// @notice The OfferUpdated event is emitted when an active offer was either extended the expiry&#13;
    ///  or raised the price.&#13;
    /// @param tokenId The token id that the updated offer was offering to buy.&#13;
    /// @param bidder The creator of the offer, also is whom updated the offer.&#13;
    /// @param newExpiresAt The new expiry date of the updated offer.&#13;
    /// @param totalRaised The total eth value the bidder sent to the Offer contract to raise the offer.&#13;
    ///  if the totalRaised is 0, it means the offer was extended without raising the price.&#13;
    event OfferUpdated(&#13;
        uint256 tokenId,&#13;
        address bidder,&#13;
        uint256 newExpiresAt,&#13;
        uint256 totalRaised&#13;
    );&#13;
&#13;
    /// @notice The ExpiredOfferRemoved event is emitted when an expired offer gets removed. The eth value will&#13;
    ///  be returned to the bidder's account, excluding the fee.&#13;
    /// @param tokenId The token id that the removed offer was offering to buy&#13;
    /// @param bidder The creator of the offer.&#13;
    /// @param bidderReceived The eth amount that the bidder received from the offer.&#13;
    /// @param fee The eth amount that CFO received as the fee.&#13;
    event ExpiredOfferRemoved(&#13;
      uint256 tokenId,&#13;
      address bidder,&#13;
      uint256 bidderReceived,&#13;
      uint256 fee&#13;
    );&#13;
&#13;
    /// @notice The BidderWithdrewFundsWhenFrozen event is emitted when a bidder withdrew their eth value of&#13;
    ///  the offer when the contract is frozen.&#13;
    /// @param tokenId The token id that withdrawed offer was offering to buy&#13;
    /// @param bidder The creator of the offer, also is whom withdrawed the fund.&#13;
    /// @param amount The total amount that the bidder received.&#13;
    event BidderWithdrewFundsWhenFrozen(&#13;
        uint256 tokenId,&#13;
        address bidder,&#13;
        uint256 amount&#13;
    );&#13;
&#13;
&#13;
    /// @dev The PushFundsFailed event is emitted when the Offer contract fails to send certain amount of eth&#13;
    ///  to an address, e.g. sending the fund back to the bidder when the offer was overbidden by a higher offer.&#13;
    /// @param tokenId The token id of an offer that the sending fund is involved.&#13;
    /// @param to The address that is supposed to receive the fund but failed for any reason.&#13;
    /// @param amount The eth amount that the receiver fails to receive.&#13;
    event PushFundsFailed(&#13;
        uint256 tokenId,&#13;
        address to,&#13;
        uint256 amount&#13;
    );&#13;
&#13;
    /*** DATA TYPES ***/&#13;
&#13;
    /// @dev The Offer struct. The struct fits in two 256-bits words.&#13;
    struct Offer {&#13;
        // Time when offer expires&#13;
        uint64 expiresAt;&#13;
        // Bidder The creator of the offer&#13;
        address bidder;&#13;
        // Offer cut in basis points, which ranges from 0-10000.&#13;
        // It's the cut that CFO takes when the offer is successfully accepted by the owner.&#13;
        // This is stored in the offer struct so that it won't be changed if COO updates&#13;
        // the `offerCut` for new offers.&#13;
        uint16 offerCut;&#13;
        // Total value (in wei) a bidder sent in msg.value to create the offer&#13;
        uint128 total;&#13;
        // Fee (in wei) that CFO takes when the offer is expired or overbid.&#13;
        // This is stored in the offer struct so that it won't be changed if COO updates&#13;
        // the `unsuccessfulFee` for new offers.&#13;
        uint128 unsuccessfulFee;&#13;
    }&#13;
&#13;
    /*** STORAGE ***/&#13;
    /// @notice Mapping from token id to its corresponding offer.&#13;
    /// @dev One token can only have one offer.&#13;
    ///  Making it public so that solc-0.4.24 will generate code to query offer by a given token id.&#13;
    mapping (uint256 =&gt; Offer) public tokenIdToOffer;&#13;
&#13;
    /// @notice computes the minimum offer price to overbid a given offer with its offer price.&#13;
    ///  The new offer price has to be a certain percentage, which defined by `minimumPriceIncrement`,&#13;
    ///  higher than the previous offer price.&#13;
    /// @dev This won't overflow, because `_offerPrice` is in uint128, and `minimumPriceIncrement`&#13;
    ///  is 16 bits max.&#13;
    /// @param _offerPrice The amount of ether in wei as the offer price&#13;
    /// @return The minimum amount of ether in wei to overbid the given offer price&#13;
    function _computeMinimumOverbidPrice(uint256 _offerPrice) internal view returns (uint256) {&#13;
        return _offerPrice * (1e4 + minimumPriceIncrement) / 1e4;&#13;
    }&#13;
&#13;
    /// @notice Computes the offer price that the owner will receive if the offer is accepted.&#13;
    /// @dev This is safe against overflow because msg.value and the total supply of ether is capped within 128 bits.&#13;
    /// @param _total The total value of the offer. Also is the msg.value that the bidder sent when&#13;
    ///  creating the offer.&#13;
    /// @param _offerCut The percentage in basis points that will be taken by the CFO if the offer is fulfilled.&#13;
    /// @return The offer price that the owner will receive if the offer is fulfilled.&#13;
    function _computeOfferPrice(uint256 _total, uint256 _offerCut) internal pure returns (uint256) {&#13;
        return _total * 1e4 / (1e4 + _offerCut);&#13;
    }&#13;
&#13;
    /// @notice Check if an offer exists or not by checking the expiresAt field of the offer.&#13;
    ///  True if exists, False if not.&#13;
    /// @dev Assuming the expiresAt field is from the offer struct in storage.&#13;
    /// @dev Since expiry check always come right after the offer existance check, it will save some gas by checking&#13;
    /// both existance and expiry on one field, as it only reads from the storage once.&#13;
    /// @param _expiresAt The time at which the offer we want to validate expires.&#13;
    /// @return True or false (if the offer exists not).&#13;
    function _offerExists(uint256 _expiresAt) internal pure returns (bool) {&#13;
        return _expiresAt &gt; 0;&#13;
    }&#13;
&#13;
    /// @notice Check if an offer is still active by checking the expiresAt field of the offer. True if the offer is,&#13;
    ///  still active, False if the offer has expired,&#13;
    /// @dev Assuming the expiresAt field is from the offer struct in storage.&#13;
    /// @param _expiresAt The time at which the offer we want to validate expires.&#13;
    /// @return True or false (if the offer has expired or not).&#13;
    function _isOfferActive(uint256 _expiresAt) internal view returns (bool) {&#13;
        return now &lt; _expiresAt;&#13;
    }&#13;
&#13;
    /// @dev Try pushing the fund to an address.&#13;
    /// @notice If sending the fund to the `_to` address fails for whatever reason, then the logic&#13;
    ///  will continue and the amount will be kept under the LostAndFound account. Also an event `PushFundsFailed`&#13;
    ///  will be emitted for notifying the failure.&#13;
    /// @param _tokenId The token id for the offer.&#13;
    /// @param _to The address the main contract is attempting to send funds to.&#13;
    /// @param _amount The amount of funds (in wei) the main contract is attempting to send.&#13;
    function _tryPushFunds(uint256 _tokenId, address _to, uint256 _amount) internal {&#13;
        // Sending the amount of eth in wei, and handling the failure.&#13;
        // The gas spent transferring funds has a set upper limit&#13;
        bool success = _to.send(_amount);&#13;
        if (!success) {&#13;
            // If failed sending to the `_to` address, then keep the amount under the LostAndFound account by&#13;
            // accumulating totalLostAndFoundBalance.&#13;
            totalLostAndFoundBalance = totalLostAndFoundBalance + _amount;&#13;
&#13;
            // Emitting the event lost amount.&#13;
            emit PushFundsFailed(_tokenId, _to, _amount);&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
contract Offers is OffersBase {&#13;
&#13;
    // This is the main Offers contract. In order to keep our code separated into logical sections,&#13;
    // we've broken it up into multiple files using inheritance. This allows us to keep related code&#13;
    // collocated while still avoiding a single large file, which would be harder to maintain. The breakdown&#13;
    // is as follows:&#13;
    //&#13;
    //      - OffersBase: This contract defines the fundamental code that the main contract uses.&#13;
    //              This includes our main data storage, data types, events, and internal functions for&#13;
    //              managing offers in their lifecycle.&#13;
    //&#13;
    //      - OffersConfig: This contract manages the various configuration values that determine the&#13;
    //              details of the offers that get created, cancelled, overbid, expired, and fulfilled,&#13;
    //              as well as the fee structure that the offers will be operating with.&#13;
    //&#13;
    //      - OffersAccessControl: This contract manages the various addresses and constraints for&#13;
    //              operations that can be executed only by specific roles. The roles are: CEO, CFO,&#13;
    //              COO, and LostAndFound. Additionally, this contract exposes functions for the CFO&#13;
    //              to withdraw earnings and the LostAndFound account to withdraw any lost funds.&#13;
&#13;
    /// @dev The ERC-165 interface signature for ERC-721.&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/165&#13;
    ///  Ref: https://github.com/ethereum/EIPs/issues/721&#13;
    bytes4 constant InterfaceSignature_ERC721 = bytes4(0x9a20483d);&#13;
&#13;
    // Reference to contract tracking NFT ownership&#13;
    ERC721 public nonFungibleContract;&#13;
&#13;
    /// @notice Creates the main Offers smart contract instance and sets initial configuration values&#13;
    /// @param _nftAddress The address of the ERC-721 contract managing NFT ownership&#13;
    /// @param _cooAddress The address of the COO to set&#13;
    /// @param _globalDuration The initial globalDuration value to set&#13;
    /// @param _minimumTotalValue The initial minimumTotalValue value to set&#13;
    /// @param _minimumPriceIncrement The initial minimumPriceIncrement value to set&#13;
    /// @param _unsuccessfulFee The initial unsuccessfulFee value to set&#13;
    /// @param _offerCut The initial offerCut value to set&#13;
    constructor(&#13;
      address _nftAddress,&#13;
      address _cooAddress,&#13;
      uint256 _globalDuration,&#13;
      uint256 _minimumTotalValue,&#13;
      uint256 _minimumPriceIncrement,&#13;
      uint256 _unsuccessfulFee,&#13;
      uint256 _offerCut&#13;
    ) public {&#13;
        // The creator of the contract is the ceo&#13;
        ceoAddress = msg.sender;&#13;
&#13;
        // Get reference of the address of the NFT contract&#13;
        ERC721 candidateContract = ERC721(_nftAddress);&#13;
        require(candidateContract.supportsInterface(InterfaceSignature_ERC721), "NFT Contract needs to support ERC721 Interface");&#13;
        nonFungibleContract = candidateContract;&#13;
&#13;
        setCOO(_cooAddress);&#13;
&#13;
        // Set initial claw-figuration values&#13;
        globalDuration = _globalDuration;&#13;
        unsuccessfulFee = _unsuccessfulFee;&#13;
        _setOfferCut(_offerCut);&#13;
        _setMinimumPriceIncrement(_minimumPriceIncrement);&#13;
        _setMinimumTotalValue(_minimumTotalValue, _unsuccessfulFee);&#13;
    }&#13;
&#13;
    /// @notice Creates an offer on a token. This contract receives bidders funds and refunds the previous bidder&#13;
    ///  if this offer overbids a previously active (unexpired) offer.&#13;
    /// @notice When this offer overbids a previously active offer, this offer must have a price greater than&#13;
    ///  a certain percentage of the previous offer price, which the minimumOverbidPrice basis point specifies.&#13;
    ///  A flat fee is also taken from the previous offer before refund the previous bidder.&#13;
    /// @notice When there is a previous offer that has already expired but not yet been removed from storage,&#13;
    ///  the new offer can be created with any total value as long as it is greater than the minimumTotalValue.&#13;
    /// @notice Works only when contract is not frozen.&#13;
    /// @param _tokenId The token a bidder wants to create an offer for&#13;
    function createOffer(uint256 _tokenId) external payable whenNotFrozen {&#13;
        // T = msg.value&#13;
        // Check that the total amount of the offer isn't below the meow-nimum&#13;
        require(msg.value &gt;= minimumTotalValue, "offer total value must be above minimumTotalValue");&#13;
&#13;
        uint256 _offerCut = offerCut;&#13;
&#13;
        // P, the price that owner will see and receive if the offer is accepted.&#13;
        uint256 offerPrice = _computeOfferPrice(msg.value, _offerCut);&#13;
&#13;
        Offer storage previousOffer = tokenIdToOffer[_tokenId];&#13;
        uint256 previousExpiresAt = previousOffer.expiresAt;&#13;
&#13;
        uint256 toRefund = 0;&#13;
&#13;
        // Check if tokenId already has an offer&#13;
        if (_offerExists(previousExpiresAt)) {&#13;
            uint256 previousOfferTotal = uint256(previousOffer.total);&#13;
&#13;
            // If the previous offer is still active, the new offer needs to match the previous offer's price&#13;
            // plus a minimum required increment (minimumOverbidPrice).&#13;
            // We calculate the previous offer's price, the corresponding minimumOverbidPrice, and check if the&#13;
            // new offerPrice is greater than or equal to the minimumOverbidPrice&#13;
            // The owner is fur-tunate to have such a desirable kitty&#13;
            if (_isOfferActive(previousExpiresAt)) {&#13;
                uint256 previousPriceForOwner = _computeOfferPrice(previousOfferTotal, uint256(previousOffer.offerCut));&#13;
                uint256 minimumOverbidPrice = _computeMinimumOverbidPrice(previousPriceForOwner);&#13;
                require(offerPrice &gt;= minimumOverbidPrice, "overbid price must match minimum price increment criteria");&#13;
            }&#13;
&#13;
            uint256 cfoEarnings = previousOffer.unsuccessfulFee;&#13;
            // Bidder gets refund: T - flat fee&#13;
            // The in-fur-ior offer gets refunded for free, how nice.&#13;
            toRefund = previousOfferTotal - cfoEarnings;&#13;
&#13;
            totalCFOEarnings += cfoEarnings;&#13;
        }&#13;
&#13;
        uint256 newExpiresAt = now + globalDuration;&#13;
&#13;
        // Get a reference of previous bidder address before overwriting with new offer.&#13;
        // This is only needed if there is refund&#13;
        address previousBidder;&#13;
        if (toRefund &gt; 0) {&#13;
            previousBidder = previousOffer.bidder;&#13;
        }&#13;
&#13;
        tokenIdToOffer[_tokenId] = Offer(&#13;
            uint64(newExpiresAt),&#13;
            msg.sender,&#13;
            uint16(_offerCut),&#13;
            uint128(msg.value),&#13;
            uint128(unsuccessfulFee)&#13;
        );&#13;
&#13;
        // Postpone the refund until the previous offer has been overwritten by the new offer.&#13;
        if (toRefund &gt; 0) {&#13;
            // Finally, sending funds to this bidder. If failed, the fund will be kept in escrow&#13;
            // under lostAndFound's address&#13;
            _tryPushFunds(&#13;
                _tokenId,&#13;
                previousBidder,&#13;
                toRefund&#13;
            );&#13;
        }&#13;
&#13;
        emit OfferCreated(&#13;
            _tokenId,&#13;
            msg.sender,&#13;
            newExpiresAt,&#13;
            msg.value,&#13;
            offerPrice&#13;
        );&#13;
    }&#13;
&#13;
    /// @notice Cancels an offer that must exist and be active currently. This moves funds from this contract&#13;
    ///  back to the the bidder, after a cut has been taken.&#13;
    /// @notice Works only when contract is not frozen.&#13;
    /// @param _tokenId The token specified by the offer a bidder wants to cancel&#13;
    function cancelOffer(uint256 _tokenId) external whenNotFrozen {&#13;
        // Check that offer exists and is active currently&#13;
        Offer storage offer = tokenIdToOffer[_tokenId];&#13;
        uint256 expiresAt = offer.expiresAt;&#13;
        require(_offerExists(expiresAt), "offer to cancel must exist");&#13;
        require(_isOfferActive(expiresAt), "offer to cancel must not be expired");&#13;
&#13;
        address bidder = offer.bidder;&#13;
        require(msg.sender == bidder, "caller must be bidder of offer to be cancelled");&#13;
&#13;
        // T&#13;
        uint256 total = uint256(offer.total);&#13;
        // P = T - S; Bidder gets all of P, CFO gets all of T - P&#13;
        uint256 toRefund = _computeOfferPrice(total, offer.offerCut);&#13;
        uint256 cfoEarnings = total - toRefund;&#13;
&#13;
        // Remove offer from storage&#13;
        delete tokenIdToOffer[_tokenId];&#13;
&#13;
        // Add to CFO's balance&#13;
        totalCFOEarnings += cfoEarnings;&#13;
&#13;
        // Transfer money in escrow back to bidder&#13;
        _tryPushFunds(_tokenId, bidder, toRefund);&#13;
&#13;
        emit OfferCancelled(&#13;
            _tokenId,&#13;
            bidder,&#13;
            toRefund,&#13;
            cfoEarnings&#13;
        );&#13;
    }&#13;
&#13;
    /// @notice Fulfills an offer that must exist and be active currently. This moves the funds of the&#13;
    ///  offer held in escrow in this contract to the owner of the token, and atomically transfers the&#13;
    ///  token from the owner to the bidder. A cut is taken by this contract.&#13;
    /// @notice We also acknowledge the paw-sible difficulties of keeping in-sync with the Ethereum&#13;
    ///  blockchain, and have allowed for fulfilling offers by specifying the _minOfferPrice at which the owner&#13;
    ///  of the token is happy to accept the offer. Thus, the owner will always receive the latest offer&#13;
    ///  price, which can only be at least the _minOfferPrice that was specified. Specifically, this&#13;
    ///  implementation is designed to prevent the edge case where the owner accidentally accepts an offer&#13;
    ///  with a price lower than intended. For example, this can happen when the owner fulfills the offer&#13;
    ///  precisely when the offer expires and is subsequently replaced with a new offer priced lower.&#13;
    /// @notice Works only when contract is not frozen.&#13;
    /// @dev We make sure that the token is not on auction when we fulfill an offer, because the owner of the&#13;
    ///  token would be the auction contract instead of the user. This function requires that this Offers contract&#13;
    ///  is approved for the token in order to make the call to transfer token ownership. This is sufficient&#13;
    ///  because approvals are cleared on transfer (including transfer to the auction).&#13;
    /// @param _tokenId The token specified by the offer that will be fulfilled.&#13;
    /// @param _minOfferPrice The minimum price at which the owner of the token is happy to accept the offer.&#13;
    function fulfillOffer(uint256 _tokenId, uint128 _minOfferPrice) external whenNotFrozen {&#13;
        // Check that offer exists and is active currently&#13;
        Offer storage offer = tokenIdToOffer[_tokenId];&#13;
        uint256 expiresAt = offer.expiresAt;&#13;
        require(_offerExists(expiresAt), "offer to fulfill must exist");&#13;
        require(_isOfferActive(expiresAt), "offer to fulfill must not be expired");&#13;
&#13;
        // Get the owner of the token&#13;
        address owner = nonFungibleContract.ownerOf(_tokenId);&#13;
&#13;
        require(msg.sender == cooAddress || msg.sender == owner, "only COO or the owner can fulfill order");&#13;
&#13;
        // T&#13;
        uint256 total = uint256(offer.total);&#13;
        // P = T - S&#13;
        uint256 offerPrice = _computeOfferPrice(total, offer.offerCut);&#13;
&#13;
        // Check if the offer price is below the minimum that the owner is happy to accept the offer for&#13;
        require(offerPrice &gt;= _minOfferPrice, "cannot fulfill offer â offer price too low");&#13;
&#13;
        // Get a reference of the bidder address befur removing offer from storage&#13;
        address bidder = offer.bidder;&#13;
&#13;
        // Remove offer from storage&#13;
        delete tokenIdToOffer[_tokenId];&#13;
&#13;
        // Transfer token on behalf of owner to bidder&#13;
        nonFungibleContract.transferFrom(owner, bidder, _tokenId);&#13;
&#13;
        // NFT has been transferred! Now calculate fees and transfer fund to the owner&#13;
        // T - P, the CFO's earnings&#13;
        uint256 cfoEarnings = total - offerPrice;&#13;
        totalCFOEarnings += cfoEarnings;&#13;
&#13;
        // Transfer money in escrow to owner&#13;
        _tryPushFunds(_tokenId, owner, offerPrice);&#13;
&#13;
        emit OfferFulfilled(&#13;
            _tokenId,&#13;
            bidder,&#13;
            owner,&#13;
            offerPrice,&#13;
            cfoEarnings&#13;
        );&#13;
    }&#13;
&#13;
    /// @notice Removes any existing and inactive (expired) offers from storage. In doing so, this contract&#13;
    ///  takes a flat fee from the total amount attached to each offer before sending the remaining funds&#13;
    ///  back to the bidder.&#13;
    /// @notice Nothing will be done if the offer for a token is either non-existent or active.&#13;
    /// @param _tokenIds The array of tokenIds that will be removed from storage&#13;
    function batchRemoveExpired(uint256[] _tokenIds) external whenNotFrozen {&#13;
        uint256 len = _tokenIds.length;&#13;
&#13;
        // Use temporary accumulator&#13;
        uint256 cumulativeCFOEarnings = 0;&#13;
&#13;
        for (uint256 i = 0; i &lt; len; i++) {&#13;
            uint256 tokenId = _tokenIds[i];&#13;
            Offer storage offer = tokenIdToOffer[tokenId];&#13;
            uint256 expiresAt = offer.expiresAt;&#13;
&#13;
            // Skip the offer if not exist&#13;
            if (!_offerExists(expiresAt)) {&#13;
                continue;&#13;
            }&#13;
            // Skip if the offer has not expired yet&#13;
            if (_isOfferActive(expiresAt)) {&#13;
                continue;&#13;
            }&#13;
&#13;
            // Get a reference of the bidder address before removing offer from storage&#13;
            address bidder = offer.bidder;&#13;
&#13;
            // CFO gets the flat fee&#13;
            uint256 cfoEarnings = uint256(offer.unsuccessfulFee);&#13;
&#13;
            // Bidder gets refund: T - flat&#13;
            uint256 toRefund = uint256(offer.total) - cfoEarnings;&#13;
&#13;
            // Ensure the previous offer has been removed before refunding&#13;
            delete tokenIdToOffer[tokenId];&#13;
&#13;
            // Add to cumulative balance of CFO's earnings&#13;
            cumulativeCFOEarnings += cfoEarnings;&#13;
&#13;
            // Finally, sending funds to this bidder. If failed, the fund will be kept in escrow&#13;
            // under lostAndFound's address&#13;
            _tryPushFunds(&#13;
                tokenId,&#13;
                bidder,&#13;
                toRefund&#13;
            );&#13;
&#13;
            emit ExpiredOfferRemoved(&#13;
                tokenId,&#13;
                bidder,&#13;
                toRefund,&#13;
                cfoEarnings&#13;
            );&#13;
        }&#13;
&#13;
        // Add to CFO's balance if any expired offer has been removed&#13;
        if (cumulativeCFOEarnings &gt; 0) {&#13;
            totalCFOEarnings += cumulativeCFOEarnings;&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Updates an existing and active offer by setting a new expiration time and, optionally, raise&#13;
    ///  the price of the offer.&#13;
    /// @notice As the offers are always using the configuration values currently in storage, the updated&#13;
    ///  offer may be adhering to configuration values that are different at the time of its original creation.&#13;
    /// @dev We check msg.value to determine if the offer price should be raised. If 0, only a new&#13;
    ///  expiration time is set.&#13;
    /// @param _tokenId The token specified by the offer that will be updated.&#13;
    function updateOffer(uint256 _tokenId) external payable whenNotFrozen {&#13;
        // Check that offer exists and is active currently&#13;
        Offer storage offer = tokenIdToOffer[_tokenId];&#13;
        uint256 expiresAt = uint256(offer.expiresAt);&#13;
        require(_offerExists(expiresAt), "offer to update must exist");&#13;
        require(_isOfferActive(expiresAt), "offer to update must not be expired");&#13;
&#13;
        require(msg.sender == offer.bidder, "caller must be bidder of offer to be updated");&#13;
&#13;
        uint256 newExpiresAt = now + globalDuration;&#13;
&#13;
        // Check if the caller wants to raise the offer as well&#13;
        if (msg.value &gt; 0) {&#13;
            // Set the new price&#13;
            offer.total += uint128(msg.value);&#13;
        }&#13;
&#13;
        offer.expiresAt = uint64(newExpiresAt);&#13;
&#13;
        emit OfferUpdated(_tokenId, msg.sender, newExpiresAt, msg.value);&#13;
&#13;
    }&#13;
&#13;
    /// @notice Sends funds of each existing offer held in escrow back to bidders. The function is callable&#13;
    ///  by anyone.&#13;
    /// @notice Works only when contract is frozen. In this case, we want to allow all funds to be returned&#13;
    ///  without taking any fees.&#13;
    /// @param _tokenId The token specified by the offer a bidder wants to withdraw funds for.&#13;
    function bidderWithdrawFunds(uint256 _tokenId) external whenFrozen {&#13;
        // Check that offer exists&#13;
        Offer storage offer = tokenIdToOffer[_tokenId];&#13;
        require(_offerExists(offer.expiresAt), "offer to withdraw funds from must exist");&#13;
        require(msg.sender == offer.bidder, "only bidders can withdraw their funds in escrow");&#13;
&#13;
        // Get a reference of the total to withdraw before removing offer from storage&#13;
        uint256 total = uint256(offer.total);&#13;
&#13;
        delete tokenIdToOffer[_tokenId];&#13;
&#13;
        // Send funds back to bidders!&#13;
        msg.sender.transfer(total);&#13;
&#13;
        emit BidderWithdrewFundsWhenFrozen(_tokenId, msg.sender, total);&#13;
    }&#13;
&#13;
    /// @notice we don't accept any value transfer.&#13;
    function() external payable {&#13;
        revert("we don't accept any payments!");&#13;
    }&#13;
}
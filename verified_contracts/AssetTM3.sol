pragma solidity ^0.4.16;
/**
* @notice Temple3 TOKEN CONTRACT
* Token for the construction for future Third Temple in Jerusalem
* @dev ERC-20 Token Standar Compliant
* @author Fares A. Akel C. <span class="__cf_email__" data-cfemail="4f29612e213b20212620612e242a230f28222e2623612c2022">[emailÂ protected]</span>&#13;
*/&#13;
&#13;
/**&#13;
 * @title SafeMath by OpenZeppelin&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
    }&#13;
&#13;
    function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        uint256 c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
&#13;
    function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a / b;&#13;
    return c;&#13;
    }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC20TokenInterface&#13;
 * @dev Token contract interface for external use&#13;
 */&#13;
contract ERC20TokenInterface {&#13;
&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance);&#13;
    function transfer(address _to, uint256 _value) public returns (bool success);&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);&#13;
    function approve(address _spender, uint256 _value) public returns (bool success);&#13;
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);&#13;
&#13;
    }&#13;
&#13;
&#13;
/**&#13;
* @title ERC20Token&#13;
* @notice Token definition contract&#13;
*/&#13;
contract ERC20Token is ERC20TokenInterface { //Standar definition of an ERC20Token&#13;
    using SafeMath for uint256; //SafeMath is used for uint256 operations&#13;
    mapping (address =&gt; uint256) balances; //A mapping of all balances per address&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) allowed; //A mapping of all allowances&#13;
    uint256 public totalSupply;&#13;
    &#13;
    /**&#13;
    * @notice Get the balance of an _owner address.&#13;
    * @param _owner The address to be query.&#13;
    */&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance) {&#13;
      return balances[_owner];&#13;
    }&#13;
&#13;
    /**&#13;
    * @notice transfer _value tokens to address _to&#13;
    * @param _to The address to transfer to.&#13;
    * @param _value The amount to be transferred.&#13;
    * @return success with boolean value true if done&#13;
    */&#13;
    function transfer(address _to, uint256 _value) public returns (bool success) {&#13;
        require(_to != address(0)); //If you dont want that people destroy token&#13;
        require(balances[msg.sender] &gt;= _value);&#13;
        balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
        Transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    * @notice Transfer _value tokens from address _from to address _to using allowance msg.sender allowance on _from&#13;
    * @param _from The address where tokens comes.&#13;
    * @param _to The address to transfer to.&#13;
    * @param _value The amount to be transferred.&#13;
    * @return success with boolean value true if done&#13;
    */&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {&#13;
        require(_to != address(0)); //If you dont want that people destroy token&#13;
        require(balances[_from] &gt;= _value &amp;&amp; allowed[_from][msg.sender] &gt;= _value);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
        balances[_from] = balances[_from].sub(_value);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
        Transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    * @notice Assign allowance _value to _spender address to use the msg.sender balance&#13;
    * @param _spender The address to be allowed to spend.&#13;
    * @param _value The amount to be allowed.&#13;
    * @return success with boolean value true&#13;
    */&#13;
    function approve(address _spender, uint256 _value) public returns (bool success) {&#13;
      allowed[msg.sender][_spender] = _value;&#13;
        Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    * @notice Get the allowance of an specified address to use another address balance.&#13;
    * @param _owner The address of the owner of the tokens.&#13;
    * @param _spender The address of the allowed spender.&#13;
    * @return remaining with the allowance value&#13;
    */&#13;
    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {&#13;
    return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Log Events&#13;
    */&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
&#13;
}&#13;
&#13;
/**&#13;
* @title AssetTM3&#13;
* @notice Temple3 token creation.&#13;
* @dev TM3 is an ERC20 Token&#13;
*/&#13;
contract AssetTM3 is ERC20Token {&#13;
    string public name = 'Temple3';&#13;
    uint256 public decimals = 18;&#13;
    string public symbol = 'TM3';&#13;
    string public version = '1';&#13;
    &#13;
    /**&#13;
    * @notice TM3 token contructor.&#13;
    */&#13;
    function AssetTM3(uint256 _initialSupply) public {&#13;
        totalSupply = _initialSupply; //Tokens initial supply;&#13;
        balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6] = totalSupply.div(1000);&#13;
        balances[msg.sender] = totalSupply.sub(balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6]);&#13;
        Transfer(0, this, totalSupply);&#13;
        Transfer(this, msg.sender, balances[msg.sender]);&#13;
        Transfer(this, 0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6, balances[0xFAB6368b0F7be60c573a6562d82469B5ED9e7eE6]);        &#13;
    }&#13;
    &#13;
    /**&#13;
    * @notice this contract will revert on direct non-function calls&#13;
    * @dev Function to handle callback calls&#13;
    */&#13;
    function() public {&#13;
        revert();&#13;
    }&#13;
&#13;
}
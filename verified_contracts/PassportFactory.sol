pragma solidity ^0.4.24;

// File: openzeppelin-solidity/contracts/ownership/Ownable.sol

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  event OwnershipRenounced(address indexed previousOwner);
  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() public {
    owner = msg.sender;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the `onlyOwner`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipRenounced(owner);
    owner = address(0);
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function transferOwnership(address _newOwner) public onlyOwner {
    _transferOwnership(_newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param _newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address _newOwner) internal {
    require(_newOwner != address(0));
    emit OwnershipTransferred(owner, _newOwner);
    owner = _newOwner;
  }
}

// File: openzeppelin-solidity/contracts/ownership/HasNoEther.sol

/**
 * @title Contracts that should not own Ether
 * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="4d3f28202e220d7f">[email protected]</a>π.com&gt;&#13;
 * @dev This tries to block incoming ether to prevent accidental loss of Ether. Should Ether end up&#13;
 * in the contract, it will allow the owner to reclaim this Ether.&#13;
 * @notice Ether can still be sent to this contract by:&#13;
 * calling functions labeled `payable`&#13;
 * `selfdestruct(contract_address)`&#13;
 * mining directly to the contract address&#13;
 */&#13;
contract HasNoEther is Ownable {&#13;
&#13;
  /**&#13;
  * @dev Constructor that rejects incoming Ether&#13;
  * The `payable` flag is added so we can access `msg.value` without compiler warning. If we&#13;
  * leave out payable, then Solidity will allow inheriting contracts to implement a payable&#13;
  * constructor. By doing it this way we prevent a payable constructor from working. Alternatively&#13;
  * we could use assembly to access msg.value.&#13;
  */&#13;
  constructor() public payable {&#13;
    require(msg.value == 0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Disallows direct send by setting a default function without the `payable` flag.&#13;
   */&#13;
  function() external {&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfer all Ether held by the contract to the owner.&#13;
   */&#13;
  function reclaimEther() external onlyOwner {&#13;
    owner.transfer(address(this).balance);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Basic.sol&#13;
&#13;
/**&#13;
 * @title ERC20Basic&#13;
 * @dev Simpler version of ERC20 interface&#13;
 * See https://github.com/ethereum/EIPs/issues/179&#13;
 */&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address _who) public view returns (uint256);&#13;
  function transfer(address _to, uint256 _value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address _owner, address _spender)&#13;
    public view returns (uint256);&#13;
&#13;
  function transferFrom(address _from, address _to, uint256 _value)&#13;
    public returns (bool);&#13;
&#13;
  function approve(address _spender, uint256 _value) public returns (bool);&#13;
  event Approval(&#13;
    address indexed owner,&#13;
    address indexed spender,&#13;
    uint256 value&#13;
  );&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol&#13;
&#13;
/**&#13;
 * @title SafeERC20&#13;
 * @dev Wrappers around ERC20 operations that throw on failure.&#13;
 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,&#13;
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.&#13;
 */&#13;
library SafeERC20 {&#13;
  function safeTransfer(&#13;
    ERC20Basic _token,&#13;
    address _to,&#13;
    uint256 _value&#13;
  )&#13;
    internal&#13;
  {&#13;
    require(_token.transfer(_to, _value));&#13;
  }&#13;
&#13;
  function safeTransferFrom(&#13;
    ERC20 _token,&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _value&#13;
  )&#13;
    internal&#13;
  {&#13;
    require(_token.transferFrom(_from, _to, _value));&#13;
  }&#13;
&#13;
  function safeApprove(&#13;
    ERC20 _token,&#13;
    address _spender,&#13;
    uint256 _value&#13;
  )&#13;
    internal&#13;
  {&#13;
    require(_token.approve(_spender, _value));&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/CanReclaimToken.sol&#13;
&#13;
/**&#13;
 * @title Contracts that should be able to recover tokens&#13;
 * @author SylTi&#13;
 * @dev This allow a contract to recover any ERC20 token received in a contract by transferring the balance to the contract owner.&#13;
 * This will prevent any accidental loss of tokens.&#13;
 */&#13;
contract CanReclaimToken is Ownable {&#13;
  using SafeERC20 for ERC20Basic;&#13;
&#13;
  /**&#13;
   * @dev Reclaim all ERC20Basic compatible tokens&#13;
   * @param _token ERC20Basic The address of the token contract&#13;
   */&#13;
  function reclaimToken(ERC20Basic _token) external onlyOwner {&#13;
    uint256 balance = _token.balanceOf(this);&#13;
    _token.safeTransfer(owner, balance);&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/HasNoTokens.sol&#13;
&#13;
/**&#13;
 * @title Contracts that should not own Tokens&#13;
 * @author Remco Bloemen &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="24564149474b6416">[email protected]</a>π.com&gt;&#13;
 * @dev This blocks incoming ERC223 tokens to prevent accidental loss of tokens.&#13;
 * Should tokens (any ERC20Basic compatible) end up in the contract, it allows the&#13;
 * owner to reclaim the tokens.&#13;
 */&#13;
contract HasNoTokens is CanReclaimToken {&#13;
&#13;
 /**&#13;
  * @dev Reject all ERC223 compatible tokens&#13;
  * @param _from address The address that is transferring the tokens&#13;
  * @param _value uint256 the amount of the specified token&#13;
  * @param _data Bytes The data passed from the caller.&#13;
  */&#13;
  function tokenFallback(&#13;
    address _from,&#13;
    uint256 _value,&#13;
    bytes _data&#13;
  )&#13;
    external&#13;
    pure&#13;
  {&#13;
    _from;&#13;
    _value;&#13;
    _data;&#13;
    revert();&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: contracts/ownership/OwnableProxy.sol&#13;
&#13;
/**&#13;
 * @title OwnableProxy&#13;
 */&#13;
contract OwnableProxy {&#13;
    event OwnershipRenounced(address indexed previousOwner);&#13;
    event OwnershipTransferred(&#13;
        address indexed previousOwner,&#13;
        address indexed newOwner&#13;
    );&#13;
&#13;
    /**&#13;
     * @dev Storage slot with the owner of the contract.&#13;
     * This is the keccak-256 hash of "org.monetha.proxy.owner", and is&#13;
     * validated in the constructor.&#13;
     */&#13;
    bytes32 private constant OWNER_SLOT = 0x3ca57e4b51fc2e18497b219410298879868edada7e6fe5132c8feceb0a080d22;&#13;
&#13;
    /**&#13;
     * @dev The OwnableProxy constructor sets the original `owner` of the contract to the sender&#13;
     * account.&#13;
     */&#13;
    constructor() public {&#13;
        assert(OWNER_SLOT == keccak256("org.monetha.proxy.owner"));&#13;
&#13;
        _setOwner(msg.sender);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Throws if called by any account other than the owner.&#13;
     */&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == _getOwner());&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Allows the current owner to relinquish control of the contract.&#13;
     * @notice Renouncing to ownership will leave the contract without an owner.&#13;
     * It will not be possible to call the functions with the `onlyOwner`&#13;
     * modifier anymore.&#13;
     */&#13;
    function renounceOwnership() public onlyOwner {&#13;
        emit OwnershipRenounced(_getOwner());&#13;
        _setOwner(address(0));&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
     * @param _newOwner The address to transfer ownership to.&#13;
     */&#13;
    function transferOwnership(address _newOwner) public onlyOwner {&#13;
        _transferOwnership(_newOwner);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Transfers control of the contract to a newOwner.&#13;
     * @param _newOwner The address to transfer ownership to.&#13;
     */&#13;
    function _transferOwnership(address _newOwner) internal {&#13;
        require(_newOwner != address(0));&#13;
        emit OwnershipTransferred(_getOwner(), _newOwner);&#13;
        _setOwner(_newOwner);&#13;
    }&#13;
&#13;
    /**&#13;
     * @return The owner address.&#13;
     */&#13;
    function owner() public view returns (address) {&#13;
        return _getOwner();&#13;
    }&#13;
&#13;
    /**&#13;
     * @return The owner address.&#13;
     */&#13;
    function _getOwner() internal view returns (address own) {&#13;
        bytes32 slot = OWNER_SLOT;&#13;
        assembly {&#13;
            own := sload(slot)&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Sets the address of the proxy owner.&#13;
     * @param _newOwner Address of the new proxy owner.&#13;
     */&#13;
    function _setOwner(address _newOwner) internal {&#13;
        bytes32 slot = OWNER_SLOT;&#13;
&#13;
        assembly {&#13;
            sstore(slot, _newOwner)&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/ownership/ClaimableProxy.sol&#13;
&#13;
/**&#13;
 * @title ClaimableProxy&#13;
 * @dev Extension for the OwnableProxy contract, where the ownership needs to be claimed.&#13;
 * This allows the new owner to accept the transfer.&#13;
 */&#13;
contract ClaimableProxy is OwnableProxy {&#13;
    /**&#13;
     * @dev Storage slot with the pending owner of the contract.&#13;
     * This is the keccak-256 hash of "org.monetha.proxy.pendingOwner", and is&#13;
     * validated in the constructor.&#13;
     */&#13;
    bytes32 private constant PENDING_OWNER_SLOT = 0xcfd0c6ea5352192d7d4c5d4e7a73c5da12c871730cb60ff57879cbe7b403bb52;&#13;
&#13;
    /**&#13;
     * @dev The ClaimableProxy constructor validates PENDING_OWNER_SLOT constant.&#13;
     */&#13;
    constructor() public {&#13;
        assert(PENDING_OWNER_SLOT == keccak256("org.monetha.proxy.pendingOwner"));&#13;
    }&#13;
&#13;
    function pendingOwner() public view returns (address) {&#13;
        return _getPendingOwner();&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Modifier throws if called by any account other than the pendingOwner.&#13;
     */&#13;
    modifier onlyPendingOwner() {&#13;
        require(msg.sender == _getPendingOwner());&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Allows the current owner to set the pendingOwner address.&#13;
     * @param newOwner The address to transfer ownership to.&#13;
     */&#13;
    function transferOwnership(address newOwner) public onlyOwner {&#13;
        _setPendingOwner(newOwner);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Allows the pendingOwner address to finalize the transfer.&#13;
     */&#13;
    function claimOwnership() public onlyPendingOwner {&#13;
        emit OwnershipTransferred(_getOwner(), _getPendingOwner());&#13;
        _setOwner(_getPendingOwner());&#13;
        _setPendingOwner(address(0));&#13;
    }&#13;
&#13;
    /**&#13;
     * @return The pending owner address.&#13;
     */&#13;
    function _getPendingOwner() internal view returns (address penOwn) {&#13;
        bytes32 slot = PENDING_OWNER_SLOT;&#13;
        assembly {&#13;
            penOwn := sload(slot)&#13;
        }&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Sets the address of the pending owner.&#13;
     * @param _newPendingOwner Address of the new pending owner.&#13;
     */&#13;
    function _setPendingOwner(address _newPendingOwner) internal {&#13;
        bytes32 slot = PENDING_OWNER_SLOT;&#13;
&#13;
        assembly {&#13;
            sstore(slot, _newPendingOwner)&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/lifecycle/DestructibleProxy.sol&#13;
&#13;
/**&#13;
 * @title Destructible&#13;
 * @dev Base contract that can be destroyed by owner. All funds in contract will be sent to the owner.&#13;
 */&#13;
contract DestructibleProxy is OwnableProxy {&#13;
    /**&#13;
     * @dev Transfers the current balance to the owner and terminates the contract.&#13;
     */&#13;
    function destroy() public onlyOwner {&#13;
        selfdestruct(_getOwner());&#13;
    }&#13;
&#13;
    function destroyAndSend(address _recipient) public onlyOwner {&#13;
        selfdestruct(_recipient);&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/IPassportLogicRegistry.sol&#13;
&#13;
interface IPassportLogicRegistry {&#13;
    /**&#13;
     * @dev This event will be emitted every time a new passport logic implementation is registered&#13;
     * @param version representing the version name of the registered passport logic implementation&#13;
     * @param implementation representing the address of the registered passport logic implementation&#13;
     */&#13;
    event PassportLogicAdded(string version, address implementation);&#13;
&#13;
    /**&#13;
     * @dev This event will be emitted every time a new passport logic implementation is set as current one&#13;
     * @param version representing the version name of the current passport logic implementation&#13;
     * @param implementation representing the address of the current passport logic implementation&#13;
     */&#13;
    event CurrentPassportLogicSet(string version, address implementation);&#13;
&#13;
    /**&#13;
     * @dev Tells the address of the passport logic implementation for a given version&#13;
     * @param _version to query the implementation of&#13;
     * @return address of the passport logic implementation registered for the given version&#13;
     */&#13;
    function getPassportLogic(string _version) external view returns (address);&#13;
&#13;
    /**&#13;
     * @dev Tells the version of the current passport logic implementation&#13;
     * @return version of the current passport logic implementation&#13;
     */&#13;
    function getCurrentPassportLogicVersion() external view returns (string);&#13;
&#13;
    /**&#13;
     * @dev Tells the address of the current passport logic implementation&#13;
     * @return address of the current passport logic implementation&#13;
     */&#13;
    function getCurrentPassportLogic() external view returns (address);&#13;
}&#13;
&#13;
// File: contracts/upgradeability/Proxy.sol&#13;
&#13;
/**&#13;
 * @title Proxy&#13;
 * @dev Implements delegation of calls to other contracts, with proper&#13;
 * forwarding of return values and bubbling of failures.&#13;
 * It defines a fallback function that delegates all calls to the address&#13;
 * returned by the abstract _implementation() internal function.&#13;
 */&#13;
contract Proxy {&#13;
    /**&#13;
     * @dev Fallback function.&#13;
     * Implemented entirely in `_fallback`.&#13;
     */&#13;
    function () payable external {&#13;
        _delegate(_implementation());&#13;
    }&#13;
&#13;
    /**&#13;
     * @return The Address of the implementation.&#13;
     */&#13;
    function _implementation() internal view returns (address);&#13;
&#13;
    /**&#13;
     * @dev Delegates execution to an implementation contract.&#13;
     * This is a low level function that doesn't return to its internal call site.&#13;
     * It will return to the external caller whatever the implementation returns.&#13;
     * @param implementation Address to delegate.&#13;
     */&#13;
    function _delegate(address implementation) internal {&#13;
        assembly {&#13;
        // Copy msg.data. We take full control of memory in this inline assembly&#13;
        // block because it will not return to Solidity code. We overwrite the&#13;
        // Solidity scratch pad at memory position 0.&#13;
            calldatacopy(0, 0, calldatasize)&#13;
&#13;
        // Call the implementation.&#13;
        // out and outsize are 0 because we don't know the size yet.&#13;
            let result := delegatecall(gas, implementation, 0, calldatasize, 0, 0)&#13;
&#13;
        // Copy the returned data.&#13;
            returndatacopy(0, 0, returndatasize)&#13;
&#13;
            switch result&#13;
            // delegatecall returns 0 on error.&#13;
            case 0 { revert(0, returndatasize) }&#13;
            default { return(0, returndatasize) }&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/Passport.sol&#13;
&#13;
/**&#13;
 * @title Passport&#13;
 */&#13;
contract Passport is Proxy, ClaimableProxy, DestructibleProxy {&#13;
&#13;
    event PassportLogicRegistryChanged(&#13;
        address indexed previousRegistry,&#13;
        address indexed newRegistry&#13;
    );&#13;
&#13;
    /**&#13;
     * @dev Storage slot with the address of the current registry of the passport implementations.&#13;
     * This is the keccak-256 hash of "org.monetha.passport.proxy.registry", and is&#13;
     * validated in the constructor.&#13;
     */&#13;
    bytes32 private constant REGISTRY_SLOT = 0xa04bab69e45aeb4c94a78ba5bc1be67ef28977c4fdf815a30b829a794eb67a4a;&#13;
&#13;
    /**&#13;
     * @dev Contract constructor.&#13;
     * @param _registry Address of the passport implementations registry.&#13;
     */&#13;
    constructor(IPassportLogicRegistry _registry) public {&#13;
        assert(REGISTRY_SLOT == keccak256("org.monetha.passport.proxy.registry"));&#13;
&#13;
        _setRegistry(_registry);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Changes the passport logic registry.&#13;
     * @param _registry Address of the new passport implementations registry.&#13;
     */&#13;
    function changePassportLogicRegistry(IPassportLogicRegistry _registry) public onlyOwner {&#13;
        emit PassportLogicRegistryChanged(address(_getRegistry()), address(_registry));&#13;
        _setRegistry(_registry);&#13;
    }&#13;
&#13;
    /**&#13;
     * @return the address of passport logic registry.&#13;
     */&#13;
    function getPassportLogicRegistry() public view returns (address) {&#13;
        return _getRegistry();&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Returns the current passport logic implementation (used in Proxy fallback function to delegate call&#13;
     * to passport logic implementation).&#13;
     * @return Address of the current passport implementation&#13;
     */&#13;
    function _implementation() internal view returns (address) {&#13;
        return _getRegistry().getCurrentPassportLogic();&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Returns the current passport implementations registry.&#13;
     * @return Address of the current implementation&#13;
     */&#13;
    function _getRegistry() internal view returns (IPassportLogicRegistry reg) {&#13;
        bytes32 slot = REGISTRY_SLOT;&#13;
        assembly {&#13;
            reg := sload(slot)&#13;
        }&#13;
    }&#13;
&#13;
    function _setRegistry(IPassportLogicRegistry _registry) internal {&#13;
        require(address(_registry) != 0x0, "Cannot set registry to a zero address");&#13;
&#13;
        bytes32 slot = REGISTRY_SLOT;&#13;
        assembly {&#13;
            sstore(slot, _registry)&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/PassportFactory.sol&#13;
&#13;
/**&#13;
 * @title PassportFactory&#13;
 * @dev This contract works as a passport factory.&#13;
 */&#13;
contract PassportFactory is Ownable, HasNoEther, HasNoTokens {&#13;
    IPassportLogicRegistry private registry;&#13;
&#13;
    /**&#13;
    * @dev This event will be emitted every time a new passport is created&#13;
    * @param passport representing the address of the passport created&#13;
    * @param owner representing the address of the passport owner&#13;
    */&#13;
    event PassportCreated(address indexed passport, address indexed owner);&#13;
&#13;
    /**&#13;
    * @dev This event will be emitted every time a passport logic registry is changed&#13;
    * @param oldRegistry representing the address of the old passport logic registry&#13;
    * @param newRegistry representing the address of the new passport logic registry&#13;
    */&#13;
    event PassportLogicRegistryChanged(address indexed oldRegistry, address indexed newRegistry);&#13;
&#13;
    constructor(IPassportLogicRegistry _registry) public {&#13;
        _setRegistry(_registry);&#13;
    }&#13;
&#13;
    function setRegistry(IPassportLogicRegistry _registry) public onlyOwner {&#13;
        emit PassportLogicRegistryChanged(registry, _registry);&#13;
        _setRegistry(_registry);&#13;
    }&#13;
&#13;
    function getRegistry() external view returns (address) {&#13;
        return registry;&#13;
    }&#13;
&#13;
    /**&#13;
    * @dev Creates new passport. The method should be called by the owner of the created passport.&#13;
    * After the passport is created, the owner must call the claimOwnership() passport method to become a full owner.&#13;
    * @return address of the created passport&#13;
    */&#13;
    function createPassport() public returns (Passport) {&#13;
        Passport pass = new Passport(registry);&#13;
        pass.transferOwnership(msg.sender); // owner needs to call claimOwnership()&#13;
        emit PassportCreated(pass, msg.sender);&#13;
        return pass;&#13;
    }&#13;
&#13;
    function _setRegistry(IPassportLogicRegistry _registry) internal {&#13;
        require(address(_registry) != 0x0);&#13;
        registry = _registry;&#13;
    }&#13;
}
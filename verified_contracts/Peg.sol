pragma solidity ^ 0.4 .11;

/*
 * @title String & slice utility library for Solidity contracts.
 * @author Nick Johnson <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cdacbfacaea5a3a4a98da3a2b9a9a2b9e3a3a8b9">[emailÂ protected]</a>&gt;&#13;
 *&#13;
 * @dev Functionality in this library is largely implemented using an&#13;
 *      abstraction called a 'slice'. A slice represents a part of a string -&#13;
 *      anything from the entire string to a single character, or even no&#13;
 *      characters at all (a 0-length slice). Since a slice only has to specify&#13;
 *      an offset and a length, copying and manipulating slices is a lot less&#13;
 *      expensive than copying and manipulating the strings they reference.&#13;
 *&#13;
 *      To further reduce gas costs, most functions on slice that need to return&#13;
 *      a slice modify the original one instead of allocating a new one; for&#13;
 *      instance, `s.split(".")` will return the text up to the first '.',&#13;
 *      modifying s to only contain the remainder of the string after the '.'.&#13;
 *      In situations where you do not want to modify the original slice, you&#13;
 *      can make a copy first with `.copy()`, for example:&#13;
 *      `s.copy().split(".")`. Try and avoid using this idiom in loops; since&#13;
 *      Solidity has no memory management, it will result in allocating many&#13;
 *      short-lived slices that are later discarded.&#13;
 *&#13;
 *      Functions that return two slices come in two versions: a non-allocating&#13;
 *      version that takes the second slice as an argument, modifying it in&#13;
 *      place, and an allocating version that allocates and returns the second&#13;
 *      slice; see `nextRune` for example.&#13;
 *&#13;
 *      Functions that have to copy string data will return strings rather than&#13;
 *      slices; these can be cast back to slices for further processing if&#13;
 *      required.&#13;
 *&#13;
 *      For convenience, some functions are provided with non-modifying&#13;
 *      variants that create a new slice and return both; for instance,&#13;
 *      `s.splitNew('.')` leaves s unmodified, and returns two values&#13;
 *      corresponding to the left and right parts of the string.&#13;
 */&#13;
library strings {&#13;
    struct slice {&#13;
        uint _len;&#13;
        uint _ptr;&#13;
    }&#13;
&#13;
    function memcpy(uint dest, uint src, uint len) private {&#13;
        // Copy word-length chunks while possible&#13;
        for(; len &gt;= 32; len -= 32) {&#13;
            assembly {&#13;
                mstore(dest, mload(src))&#13;
            }&#13;
            dest += 32;&#13;
            src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint mask = 256 ** (32 - len) - 1;&#13;
        assembly {&#13;
            let srcpart := and(mload(src), not(mask))&#13;
            let destpart := and(mload(dest), mask)&#13;
            mstore(dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire string.&#13;
     * @param self The string to make a slice from.&#13;
     * @return A newly allocated slice containing the entire string.&#13;
     */&#13;
    function toSlice(string self) internal returns (slice) {&#13;
        uint ptr;&#13;
        assembly {&#13;
            ptr := add(self, 0x20)&#13;
        }&#13;
        return slice(bytes(self).length, ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length of a null-terminated bytes32 string.&#13;
     * @param self The value to find the length of.&#13;
     * @return The length of the string, from 0 to 32.&#13;
     */&#13;
    function len(bytes32 self) internal returns (uint) {&#13;
        uint ret;&#13;
        if (self == 0)&#13;
            return 0;&#13;
        if (self &amp; 0xffffffffffffffffffffffffffffffff == 0) {&#13;
            ret += 16;&#13;
            self = bytes32(uint(self) / 0x100000000000000000000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffffffffffff == 0) {&#13;
            ret += 8;&#13;
            self = bytes32(uint(self) / 0x10000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffff == 0) {&#13;
            ret += 4;&#13;
            self = bytes32(uint(self) / 0x100000000);&#13;
        }&#13;
        if (self &amp; 0xffff == 0) {&#13;
            ret += 2;&#13;
            self = bytes32(uint(self) / 0x10000);&#13;
        }&#13;
        if (self &amp; 0xff == 0) {&#13;
            ret += 1;&#13;
        }&#13;
        return 32 - ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire bytes32, interpreted as a&#13;
     *      null-termintaed utf-8 string.&#13;
     * @param self The bytes32 value to convert to a slice.&#13;
     * @return A new slice containing the value of the input argument up to the&#13;
     *         first null.&#13;
     */&#13;
    function toSliceB32(bytes32 self) internal returns (slice ret) {&#13;
        // Allocate space for `self` in memory, copy it there, and point ret at it&#13;
        assembly {&#13;
            let ptr := mload(0x40)&#13;
            mstore(0x40, add(ptr, 0x20))&#13;
            mstore(ptr, self)&#13;
            mstore(add(ret, 0x20), ptr)&#13;
        }&#13;
        ret._len = len(self);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a new slice containing the same data as the current slice.&#13;
     * @param self The slice to copy.&#13;
     * @return A new slice containing the same data as `self`.&#13;
     */&#13;
    function copy(slice self) internal returns (slice) {&#13;
        return slice(self._len, self._ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Copies a slice to a new string.&#13;
     * @param self The slice to copy.&#13;
     * @return A newly allocated string containing the slice's text.&#13;
     */&#13;
    function toString(slice self) internal returns (string) {&#13;
        var ret = new string(self._len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length in runes of the slice. Note that this operation&#13;
     *      takes time proportional to the length of the slice; avoid using it&#13;
     *      in loops, and call `slice.empty()` if you only need to know whether&#13;
     *      the slice is empty or not.&#13;
     * @param self The slice to operate on.&#13;
     * @return The length of the slice in runes.&#13;
     */&#13;
    function len(slice self) internal returns (uint) {&#13;
        // Starting at ptr-31 means the LSB will be the byte we care about&#13;
        var ptr = self._ptr - 31;&#13;
        var end = ptr + self._len;&#13;
        for (uint len = 0; ptr &lt; end; len++) {&#13;
            uint8 b;&#13;
            assembly { b := and(mload(ptr), 0xFF) }&#13;
            if (b &lt; 0x80) {&#13;
                ptr += 1;&#13;
            } else if(b &lt; 0xE0) {&#13;
                ptr += 2;&#13;
            } else if(b &lt; 0xF0) {&#13;
                ptr += 3;&#13;
            } else if(b &lt; 0xF8) {&#13;
                ptr += 4;&#13;
            } else if(b &lt; 0xFC) {&#13;
                ptr += 5;&#13;
            } else {&#13;
                ptr += 6;&#13;
            }&#13;
        }&#13;
        return len;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice is empty (has a length of 0).&#13;
     * @param self The slice to operate on.&#13;
     * @return True if the slice is empty, False otherwise.&#13;
     */&#13;
    function empty(slice self) internal returns (bool) {&#13;
        return self._len == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a positive number if `other` comes lexicographically after&#13;
     *      `self`, a negative number if it comes before, or zero if the&#13;
     *      contents of the two slices are equal. Comparison is done per-rune,&#13;
     *      on unicode codepoints.&#13;
     * @param self The first slice to compare.&#13;
     * @param other The second slice to compare.&#13;
     * @return The result of the comparison.&#13;
     */&#13;
    function compare(slice self, slice other) internal returns (int) {&#13;
        uint shortest = self._len;&#13;
        if (other._len &lt; self._len)&#13;
            shortest = other._len;&#13;
&#13;
        var selfptr = self._ptr;&#13;
        var otherptr = other._ptr;&#13;
        for (uint idx = 0; idx &lt; shortest; idx += 32) {&#13;
            uint a;&#13;
            uint b;&#13;
            assembly {&#13;
                a := mload(selfptr)&#13;
                b := mload(otherptr)&#13;
            }&#13;
            if (a != b) {&#13;
                // Mask out irrelevant bytes and check again&#13;
                uint mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);&#13;
                var diff = (a &amp; mask) - (b &amp; mask);&#13;
                if (diff != 0)&#13;
                    return int(diff);&#13;
            }&#13;
            selfptr += 32;&#13;
            otherptr += 32;&#13;
        }&#13;
        return int(self._len) - int(other._len);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the two slices contain the same text.&#13;
     * @param self The first slice to compare.&#13;
     * @param self The second slice to compare.&#13;
     * @return True if the slices are equal, false otherwise.&#13;
     */&#13;
    function equals(slice self, slice other) internal returns (bool) {&#13;
        return compare(self, other) == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Extracts the first rune in the slice into `rune`, advancing the&#13;
     *      slice to point to the next rune and returning `self`.&#13;
     * @param self The slice to operate on.&#13;
     * @param rune The slice that will contain the first rune.&#13;
     * @return `rune`.&#13;
     */&#13;
    function nextRune(slice self, slice rune) internal returns (slice) {&#13;
        rune._ptr = self._ptr;&#13;
&#13;
        if (self._len == 0) {&#13;
            rune._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        uint len;&#13;
        uint b;&#13;
        // Load the first byte of the rune into the LSBs of b&#13;
        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }&#13;
        if (b &lt; 0x80) {&#13;
            len = 1;&#13;
        } else if(b &lt; 0xE0) {&#13;
            len = 2;&#13;
        } else if(b &lt; 0xF0) {&#13;
            len = 3;&#13;
        } else {&#13;
            len = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (len &gt; self._len) {&#13;
            rune._len = self._len;&#13;
            self._ptr += self._len;&#13;
            self._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        self._ptr += len;&#13;
        self._len -= len;&#13;
        rune._len = len;&#13;
        return rune;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the first rune in the slice, advancing the slice to point&#13;
     *      to the next rune.&#13;
     * @param self The slice to operate on.&#13;
     * @return A slice containing only the first rune from `self`.&#13;
     */&#13;
    function nextRune(slice self) internal returns (slice ret) {&#13;
        nextRune(self, ret);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the number of the first codepoint in the slice.&#13;
     * @param self The slice to operate on.&#13;
     * @return The number of the first codepoint in the slice.&#13;
     */&#13;
    function ord(slice self) internal returns (uint ret) {&#13;
        if (self._len == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        uint word;&#13;
        uint len;&#13;
        uint div = 2 ** 248;&#13;
&#13;
        // Load the rune into the MSBs of b&#13;
        assembly { word:= mload(mload(add(self, 32))) }&#13;
        var b = word / div;&#13;
        if (b &lt; 0x80) {&#13;
            ret = b;&#13;
            len = 1;&#13;
        } else if(b &lt; 0xE0) {&#13;
            ret = b &amp; 0x1F;&#13;
            len = 2;&#13;
        } else if(b &lt; 0xF0) {&#13;
            ret = b &amp; 0x0F;&#13;
            len = 3;&#13;
        } else {&#13;
            ret = b &amp; 0x07;&#13;
            len = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (len &gt; self._len) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        for (uint i = 1; i &lt; len; i++) {&#13;
            div = div / 256;&#13;
            b = (word / div) &amp; 0xFF;&#13;
            if (b &amp; 0xC0 != 0x80) {&#13;
                // Invalid UTF-8 sequence&#13;
                return 0;&#13;
            }&#13;
            ret = (ret * 64) | (b &amp; 0x3F);&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the keccak-256 hash of the slice.&#13;
     * @param self The slice to hash.&#13;
     * @return The hash of the slice.&#13;
     */&#13;
    function keccak(slice self) internal returns (bytes32 ret) {&#13;
        assembly {&#13;
            ret := sha3(mload(add(self, 32)), mload(self))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if `self` starts with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function startsWith(slice self, slice needle) internal returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (self._ptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
            let len := mload(needle)&#13;
            let selfptr := mload(add(self, 0x20))&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(sha3(selfptr, len), sha3(needleptr, len))&#13;
        }&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` starts with `needle`, `needle` is removed from the&#13;
     *      beginning of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function beyond(slice self, slice needle) internal returns (slice) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        bool equal = true;&#13;
        if (self._ptr != needle._ptr) {&#13;
            assembly {&#13;
                let len := mload(needle)&#13;
                let selfptr := mload(add(self, 0x20))&#13;
                let needleptr := mload(add(needle, 0x20))&#13;
                equal := eq(sha3(selfptr, len), sha3(needleptr, len))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
            self._ptr += needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice ends with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function endsWith(slice self, slice needle) internal returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        var selfptr = self._ptr + self._len - needle._len;&#13;
&#13;
        if (selfptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
            let len := mload(needle)&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(sha3(selfptr, len), sha3(needleptr, len))&#13;
        }&#13;
&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` ends with `needle`, `needle` is removed from the&#13;
     *      end of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function until(slice self, slice needle) internal returns (slice) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        var selfptr = self._ptr + self._len - needle._len;&#13;
        bool equal = true;&#13;
        if (selfptr != needle._ptr) {&#13;
            assembly {&#13;
                let len := mload(needle)&#13;
                let needleptr := mload(add(needle, 0x20))&#13;
                equal := eq(sha3(selfptr, len), sha3(needleptr, len))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte of the first occurrence of&#13;
    // `needle` in `self`, or the first byte after `self` if not found.&#13;
    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {&#13;
        uint ptr;&#13;
        uint idx;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                // Optimized assembly for 68 gas per byte on short strings&#13;
                assembly {&#13;
                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))&#13;
                    let needledata := and(mload(needleptr), mask)&#13;
                    let end := add(selfptr, sub(selflen, needlelen))&#13;
                    ptr := selfptr&#13;
                    loop:&#13;
                    jumpi(exit, eq(and(mload(ptr), mask), needledata))&#13;
                    ptr := add(ptr, 1)&#13;
                    jumpi(loop, lt(sub(ptr, 1), end))&#13;
                    ptr := add(selfptr, selflen)&#13;
                    exit:&#13;
                }&#13;
                return ptr;&#13;
            } else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly { hash := sha3(needleptr, needlelen) }&#13;
                ptr = selfptr;&#13;
                for (idx = 0; idx &lt;= selflen - needlelen; idx++) {&#13;
                    bytes32 testHash;&#13;
                    assembly { testHash := sha3(ptr, needlelen) }&#13;
                    if (hash == testHash)&#13;
                        return ptr;&#13;
                    ptr += 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr + selflen;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte after the last occurrence of&#13;
    // `needle` in `self`, or the address of `self` if not found.&#13;
    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private returns (uint) {&#13;
        uint ptr;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                // Optimized assembly for 69 gas per byte on short strings&#13;
                assembly {&#13;
                    let mask := not(sub(exp(2, mul(8, sub(32, needlelen))), 1))&#13;
                    let needledata := and(mload(needleptr), mask)&#13;
                    ptr := add(selfptr, sub(selflen, needlelen))&#13;
                    loop:&#13;
                    jumpi(ret, eq(and(mload(ptr), mask), needledata))&#13;
                    ptr := sub(ptr, 1)&#13;
                    jumpi(loop, gt(add(ptr, 1), selfptr))&#13;
                    ptr := selfptr&#13;
                    jump(exit)&#13;
                    ret:&#13;
                    ptr := add(ptr, needlelen)&#13;
                    exit:&#13;
                }&#13;
                return ptr;&#13;
            } else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly { hash := sha3(needleptr, needlelen) }&#13;
                ptr = selfptr + (selflen - needlelen);&#13;
                while (ptr &gt;= selfptr) {&#13;
                    bytes32 testHash;&#13;
                    assembly { testHash := sha3(ptr, needlelen) }&#13;
                    if (hash == testHash)&#13;
                        return ptr + needlelen;&#13;
                    ptr -= 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain everything from the first occurrence of&#13;
     *      `needle` to the end of the slice. `self` is set to the empty slice&#13;
     *      if `needle` is not found.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function find(slice self, slice needle) internal returns (slice) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len -= ptr - self._ptr;&#13;
        self._ptr = ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain the part of the string from the start of&#13;
     *      `self` to the end of the first occurrence of `needle`. If `needle`&#13;
     *      is not found, `self` is set to the empty slice.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function rfind(slice self, slice needle) internal returns (slice) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len = ptr - self._ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and `token` to everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function split(slice self, slice needle, slice token) internal returns (slice) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = self._ptr;&#13;
        token._len = ptr - self._ptr;&#13;
        if (ptr == self._ptr + self._len) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        } else {&#13;
            self._len -= token._len + needle._len;&#13;
            self._ptr = ptr + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and returning everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` up to the first occurrence of `delim`.&#13;
     */&#13;
    function split(slice self, slice needle) internal returns (slice token) {&#13;
        split(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and `token` to everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function rsplit(slice self, slice needle, slice token) internal returns (slice) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = ptr;&#13;
        token._len = self._len - (ptr - self._ptr);&#13;
        if (ptr == self._ptr) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        } else {&#13;
            self._len -= token._len + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and returning everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` after the last occurrence of `delim`.&#13;
     */&#13;
    function rsplit(slice self, slice needle) internal returns (slice token) {&#13;
        rsplit(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The number of occurrences of `needle` found in `self`.&#13;
     */&#13;
    function count(slice self, slice needle) internal returns (uint count) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;&#13;
        while (ptr &lt;= self._ptr + self._len) {&#13;
            count++;&#13;
            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns True if `self` contains `needle`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return True if `needle` is found in `self`, false otherwise.&#13;
     */&#13;
    function contains(slice self, slice needle) internal returns (bool) {&#13;
        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a newly allocated string containing the concatenation of&#13;
     *      `self` and `other`.&#13;
     * @param self The first slice to concatenate.&#13;
     * @param other The second slice to concatenate.&#13;
     * @return The concatenation of the two strings.&#13;
     */&#13;
    function concat(slice self, slice other) internal returns (string) {&#13;
        var ret = new string(self._len + other._len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        memcpy(retptr + self._len, other._ptr, other._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Joins an array of slices, using `self` as a delimiter, returning a&#13;
     *      newly allocated string.&#13;
     * @param self The delimiter to use.&#13;
     * @param parts A list of slices to join.&#13;
     * @return A newly allocated string containing all the slices in `parts`,&#13;
     *         joined with `self`.&#13;
     */&#13;
    function join(slice self, slice[] parts) internal returns (string) {&#13;
        if (parts.length == 0)&#13;
            return "";&#13;
&#13;
        uint len = self._len * (parts.length - 1);&#13;
        for(uint i = 0; i &lt; parts.length; i++)&#13;
            len += parts[i]._len;&#13;
&#13;
        var ret = new string(len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
&#13;
        for(i = 0; i &lt; parts.length; i++) {&#13;
            memcpy(retptr, parts[i]._ptr, parts[i]._len);&#13;
            retptr += parts[i]._len;&#13;
            if (i &lt; parts.length - 1) {&#13;
                memcpy(retptr, self._ptr, self._len);&#13;
                retptr += self._len;&#13;
            }&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
}&#13;
&#13;
&#13;
contract Contract {function pegHandler( address _from, uint256 _value );}&#13;
&#13;
&#13;
contract Manager {&#13;
    &#13;
    &#13;
    address owner;&#13;
    address  manager;&#13;
    &#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
    &#13;
    modifier onlyManagement {&#13;
        if( msg.sender != owner &amp;&amp; msg.sender != manager ) throw;&#13;
        _;&#13;
    }&#13;
    &#13;
    &#13;
    &#13;
    &#13;
    &#13;
    &#13;
}&#13;
&#13;
contract Token {&#13;
&#13;
    function balanceOf(address tokenHolder) constant returns(uint256)  {}&#13;
    function totalSupply() constant returns(uint256) {}&#13;
    function getAccountCount() constant returns(uint256) {}&#13;
    function getAddress(uint slot) constant returns(address) {}&#13;
    &#13;
}&#13;
&#13;
 &#13;
 contract Contracts {&#13;
     &#13;
    Contract public contract_address;&#13;
    Token token;&#13;
    uint256 profit_per_token;&#13;
    address public TokenCreationContract;&#13;
    &#13;
 &#13;
    mapping( address =&gt; bool ) public contracts;&#13;
    mapping( address =&gt; bool ) public contractExists;&#13;
    mapping( uint =&gt; address) public  contractIndex;&#13;
    mapping( address =&gt; bool ) public contractOrigin;&#13;
    &#13;
    uint public contractCount;&#13;
    address owner;&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
    event ContractCall ( address _address, uint _value );&#13;
    event Log ( address _address, uint value  );&#13;
    event Message ( uint value  );&#13;
&#13;
     modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
    &#13;
    &#13;
     modifier onlyTokenContractCreator {&#13;
        require(msg.sender == TokenCreationContract  ||  msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
&#13;
    function addContract ( address _contract ) public onlyOwner returns(bool)  {&#13;
        &#13;
        &#13;
            contracts[ _contract ] = true;&#13;
        if  ( !contractExists[ _contract ]){&#13;
            contractExists[ _contract ] = true;&#13;
            contractIndex[ contractCount ] = _contract;&#13;
            contractOrigin[ _contract ] = true;&#13;
            contractCount++;&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
    &#13;
    function setContractOrigin ( address _contract , bool who ) onlyTokenContractCreator {&#13;
        &#13;
         contractOrigin[ _contract ] = who;&#13;
        &#13;
    }&#13;
    &#13;
    function getContractOrigin ()  returns (bool b)  {&#13;
        &#13;
         return contractOrigin[ msg.sender ];&#13;
        &#13;
    }&#13;
    &#13;
    &#13;
    function latchContract () public returns(bool)  {&#13;
        &#13;
        &#13;
            contracts[ msg.sender ] = true;&#13;
        if  ( !contractExists[ msg.sender ]){&#13;
            contractExists[ msg.sender ] = true;&#13;
            contractIndex[ contractCount ] = msg.sender;&#13;
            contractOrigin[ msg.sender ] = false;&#13;
            contractCount++;&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
    &#13;
    &#13;
    function unlatchContract ( ) public returns(bool){&#13;
        &#13;
       &#13;
        contracts[ msg.sender ] = false;&#13;
        &#13;
    }&#13;
    &#13;
    &#13;
    function removeContract ( address _contract )  public  onlyOwner returns(bool) {&#13;
        &#13;
        contracts[ _contract ] =  false;&#13;
        &#13;
        return true;&#13;
        &#13;
    }&#13;
    &#13;
    &#13;
    function getContractCount() public constant returns (uint256){&#13;
        &#13;
        return contractCount;&#13;
        &#13;
    }&#13;
    &#13;
    function getContractAddress( uint slot ) public constant returns (address){&#13;
        &#13;
        return contractIndex[slot];&#13;
        &#13;
    }&#13;
    &#13;
    function getContractStatus( address _address) public constant returns (bool) {&#13;
        &#13;
        return contracts[ _address];&#13;
    }&#13;
&#13;
&#13;
    function contractCheck ( address _address, uint256 value ) internal  {&#13;
        &#13;
       &#13;
        &#13;
        if( contracts[ _address ] ) {&#13;
            contract_address = Contract (  _address  );&#13;
            contract_address.pegHandler  ( msg.sender , value );&#13;
         &#13;
        }        &#13;
      //  ContractCall ( _address , value  );&#13;
    }&#13;
    &#13;
    &#13;
   &#13;
    &#13;
    &#13;
&#13;
}&#13;
&#13;
contract tokenRecipient {&#13;
    function receiveApproval(address _from, uint256 _value, address _token, bytes _extraData);&#13;
}&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
    function mul(uint256 a, uint256 b) internal constant returns(uint256) {&#13;
        uint256 c = a * b;&#13;
        assert(a == 0 || c / a == b);&#13;
        return c;&#13;
    }&#13;
&#13;
    function div(uint256 a, uint256 b) internal constant returns(uint256) {&#13;
        // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
        uint256 c = a / b;&#13;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
        return c;&#13;
    }&#13;
&#13;
    function sub(uint256 a, uint256 b) internal constant returns(uint256) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
    }&#13;
&#13;
    function add(uint256 a, uint256 b) internal constant returns(uint256) {&#13;
        uint256 c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
}&#13;
&#13;
library StringUtils {&#13;
    /// @dev Does a byte-by-byte lexicographical comparison of two strings.&#13;
    /// @return a negative number if `_a` is smaller, zero if they are equal&#13;
    /// and a positive numbe if `_b` is smaller.&#13;
    function compare(string _a, string _b) returns (int) {&#13;
        bytes memory a = bytes(_a);&#13;
        bytes memory b = bytes(_b);&#13;
        uint minLength = a.length;&#13;
        if (b.length &lt; minLength) minLength = b.length;&#13;
        //@todo unroll the loop into increments of 32 and do full 32 byte comparisons&#13;
        for (uint i = 0; i &lt; minLength; i ++)&#13;
            if (a[i] &lt; b[i])&#13;
                return -1;&#13;
            else if (a[i] &gt; b[i])&#13;
                return 1;&#13;
        if (a.length &lt; b.length)&#13;
            return -1;&#13;
        else if (a.length &gt; b.length)&#13;
            return 1;&#13;
        else&#13;
            return 0;&#13;
    }&#13;
    /// @dev Compares two strings and returns true iff they are equal.&#13;
    function equal(string _a, string _b) returns (bool) {&#13;
        return compare(_a, _b) == 0;&#13;
    }&#13;
    /// @dev Finds the index of the first occurrence of _needle in _haystack&#13;
    function indexOf(string _haystack, string _needle) returns (int)&#13;
    {&#13;
        bytes memory h = bytes(_haystack);&#13;
        bytes memory n = bytes(_needle);&#13;
        if(h.length &lt; 1 || n.length &lt; 1 || (n.length &gt; h.length)) &#13;
            return -1;&#13;
        else if(h.length &gt; (2**128 -1)) // since we have to be able to return -1 (if the char isn't found or input error), this function must return an "int" type with a max length of (2^128 - 1)&#13;
            return -1;                                  &#13;
        else&#13;
        {&#13;
            uint subindex = 0;&#13;
            for (uint i = 0; i &lt; h.length; i ++)&#13;
            {&#13;
                if (h[i] == n[0]) // found the first char of b&#13;
                {&#13;
                    subindex = 1;&#13;
                    while(subindex &lt; n.length &amp;&amp; (i + subindex) &lt; h.length &amp;&amp; h[i + subindex] == n[subindex]) // search until the chars don't match or until we reach the end of a or b&#13;
                    {&#13;
                        subindex++;&#13;
                    }   &#13;
                    if(subindex == n.length)&#13;
                        return int(i);&#13;
                }&#13;
            }&#13;
            return -1;&#13;
        }   &#13;
    }&#13;
}&#13;
&#13;
contract ERC20 {&#13;
&#13;
   function totalSupply() constant returns(uint totalSupply);&#13;
&#13;
    function balanceOf(address who) constant returns(uint256);&#13;
&#13;
    function transfer(address to, uint value) returns(bool ok);&#13;
&#13;
    function transferFrom(address from, address to, uint value) returns(bool ok);&#13;
&#13;
    function approve(address spender, uint value) returns(bool ok);&#13;
&#13;
    function allowance(address owner, address spender) constant returns(uint);&#13;
    event Transfer(address indexed from, address indexed to, uint value);&#13;
    event Approval(address indexed owner, address indexed spender, uint value);&#13;
&#13;
}&#13;
&#13;
&#13;
contract SubToken { function SubTokenCreate ( uint256 _initialSupply, uint8 decimalUnits, string  _name, string   _symbol, address _tokenowner )&#13;
returns (address){} }&#13;
&#13;
contract Dividend { function setReseller ( address ){}}&#13;
&#13;
contract Peg is ERC20, Contracts, Manager {&#13;
&#13;
    using strings for *;&#13;
    using SafeMath&#13;
    for uint256;&#13;
    /* Public variables of the token */&#13;
    string public standard = 'Token 0.1';&#13;
    string public name;&#13;
    string public symbol;&#13;
    uint8 public decimals;&#13;
    uint256 public totalSupply;&#13;
    uint256 public initialSupply;&#13;
&#13;
    address public owner;&#13;
    address public minter;&#13;
    address public manager;&#13;
    address public masterresellercontract;&#13;
    &#13;
    Memo m;&#13;
    &#13;
    uint256 public dividendcommission;&#13;
    uint256 public transactionfee;&#13;
    &#13;
&#13;
&#13;
    /* This creates an array with all balances */&#13;
    mapping( address =&gt; uint256) public balanceOf;&#13;
    mapping( uint =&gt; address) public accountIndex;&#13;
    mapping( address =&gt; bool ) public accountFreeze;&#13;
    mapping( address =&gt; bool ) public reseller;&#13;
    uint accountCount;&#13;
    &#13;
    &#13;
    struct Memo {&#13;
         address   _from;&#13;
         address     _to;&#13;
         uint256 _amount;&#13;
         string    _memo;&#13;
         string    _hash;&#13;
    }&#13;
    &#13;
    mapping ( string =&gt; uint ) private memos;&#13;
    mapping( uint =&gt; Memo ) private memoIndex;&#13;
    uint memoCount;&#13;
   &#13;
    &#13;
   &#13;
    mapping(address =&gt; mapping(address =&gt; uint256)) public allowance;&#13;
&#13;
    /* This generates a public event on the blockchain that will notify clients */&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
    event Approval(address indexed owner, address indexed spender, uint value);&#13;
    event FrozenFunds ( address target, bool frozen );&#13;
    &#13;
    event TTLAccounts ( uint accounts );&#13;
    event TTLSupply ( uint supply ) ;&#13;
    event Display  (address _from,  address _to, uint256 _amount, string _memo, string _hash);&#13;
&#13;
    /* This notifies clients about the amount burnt */&#13;
    event Burn(address indexed from, uint256 value);&#13;
&#13;
    /* Initializes contract with initial supply tokens to the creator of the contract */&#13;
    function Peg() {&#13;
&#13;
 &#13;
                                       &#13;
    uint256 _initialSupply = 1000000000000000000000000000000000000 ; // THIS HERE MAY NEED TO BE ADJUSTED..&#13;
            // MYETHERWALLET AND MIST BOTH SHOW DIFERENT QUANTITIES BECAUSE OF THE DECIMAL&#13;
            // INFORMATION&#13;
        uint8 decimalUnits = 30;&#13;
        appendTokenHolders(msg.sender);&#13;
        balanceOf[msg.sender] = _initialSupply; // Give the creator all initial tokens&#13;
        totalSupply = _initialSupply; // Update total supply&#13;
        initialSupply = _initialSupply;&#13;
        name = "PEG"; // Set the name for display purposes&#13;
        symbol = "PEG"; // Set the symbol for display purposes&#13;
        decimals = decimalUnits; // Amount of decimals for display purposes&#13;
        memoCount++;&#13;
        owner   = msg.sender;&#13;
        manager = owner;&#13;
        minter  = owner;&#13;
        dividendcommission =  100;&#13;
    }&#13;
&#13;
    // Specifies contract address as a valid studio sub project&#13;
    &#13;
    &#13;
    &#13;
    &#13;
    &#13;
    // Function allows for external access to tokenHoler's Balance&#13;
    function balanceOf(address tokenHolder) constant returns(uint256) {&#13;
&#13;
        return balanceOf[tokenHolder];&#13;
    }&#13;
&#13;
    function totalSupply() constant returns(uint256) {&#13;
&#13;
        return totalSupply;&#13;
    }&#13;
&#13;
    // Function allows for external access to number of accounts that are holding or once held Studio&#13;
    //tokens&#13;
&#13;
    function getAccountCount() constant returns(uint256) {&#13;
&#13;
        return accountCount;&#13;
    }&#13;
&#13;
    //function allows for external access to tokenHolders&#13;
    function getAddress(uint slot) constant returns(address) {&#13;
&#13;
        return accountIndex[slot];&#13;
&#13;
    }&#13;
&#13;
    // checks to see if tokenholder has a balance, if not it appends the tokenholder to the accountIndex&#13;
   // which the getAddress() can later access externally&#13;
&#13;
    function appendTokenHolders(address tokenHolder) private {&#13;
&#13;
        if (balanceOf[tokenHolder] == 0) {&#13;
            accountIndex[accountCount] = tokenHolder;&#13;
            accountCount++;&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    /* Send coins */&#13;
    function transfer(address _to, uint256 _value) returns(bool ok) {&#13;
        if (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead&#13;
        if (balanceOf[msg.sender] &lt; _value) throw; // Check if the sender has enough&#13;
&#13;
        if (balanceOf[_to] + _value &lt; balanceOf[_to]) throw; // Check for overflows&#13;
        if ( accountFreeze[ msg.sender ]  ) throw;&#13;
        &#13;
       &#13;
        &#13;
        appendTokenHolders(_to);&#13;
        balanceOf[msg.sender] -= _value; // Subtract from the sender&#13;
        balanceOf[_to] += _value; // Add the same to the recipient&#13;
        &#13;
        Transfer(msg.sender, _to, _value); // Notify anyone listening that this transfer took place&#13;
        contractCheck( _to , _value );&#13;
        return true;&#13;
    }&#13;
    &#13;
    &#13;
    &#13;
    function transferWithMemo(address _to, uint256 _value, string _memo, string _hash ) public returns(bool ok) {&#13;
        &#13;
        &#13;
        var _hh = _hash.toSlice();&#13;
        uint len = _hh.len();&#13;
        require ( len &gt; 10 );&#13;
        if ( memos[ _hash ] != 0 ) throw;&#13;
        transfer ( _to, _value);&#13;
       &#13;
        m._from   = msg.sender;&#13;
        m._to     = _to;&#13;
        m._amount = _value;&#13;
        m._memo   = _memo;&#13;
        m._hash   = _hash;&#13;
        memoIndex[ memoCount ] = m;&#13;
        memos [ _hash ] = memoCount;&#13;
        memoCount++;&#13;
        &#13;
        Display (  msg.sender ,   _to,  _value,  _memo, _hash );&#13;
        return true;&#13;
        &#13;
    }&#13;
    &#13;
    function getMemos( string  _hash ) returns (  address _from,  address _to, uint256 _amount, string _memo ) {&#13;
        &#13;
        if ( memos [_hash] == 0 ) throw;    &#13;
        _from = memoIndex[memos [_hash]]._from;&#13;
        _to =  memoIndex[memos [_hash]]._to;&#13;
        _amount  = memoIndex[memos [_hash]]._amount;&#13;
        _memo = memoIndex[memos [_hash]]._memo;&#13;
        &#13;
        Display (   _from,   _to,  _amount,  _memo, _hash );&#13;
           &#13;
        return ( _from, _to, _amount, _memo ) ;&#13;
    }&#13;
    &#13;
    &#13;
    function getMemo( uint256 num ) returns (  address _from,  address _to, uint256 _amount, string _memo, string _hash )  {&#13;
        &#13;
        require ( msg.sender == owner || msg.sender == manager );&#13;
        _from = memoIndex[ num ]._from;&#13;
        _to =  memoIndex[ num ]._to;&#13;
        _amount  = memoIndex[ num ]._amount;&#13;
        _memo = memoIndex[ num ]._memo;&#13;
        _hash = memoIndex[ num ]._hash;&#13;
        &#13;
        Display (   _from,   _to,  _amount,  _memo, _hash );&#13;
        &#13;
        return ( _from, _to, _amount, _memo, _hash );&#13;
        &#13;
    }&#13;
    &#13;
    &#13;
    function setDividendCommission ( uint256 _comm )  {&#13;
        &#13;
        if( msg.sender != owner &amp;&amp; msg.sender != manager ) throw;&#13;
        if  (_comm &gt; 200 ) throw;&#13;
        dividendcommission = _comm;&#13;
        &#13;
        &#13;
        &#13;
    }&#13;
    &#13;
     function setTransactionFee ( uint256 _fee ) {&#13;
        &#13;
        if( msg.sender != owner &amp;&amp; msg.sender != manager ) throw;&#13;
        if  (_fee &gt; 100 ) throw;&#13;
        transactionfee= _fee;&#13;
        &#13;
        &#13;
        &#13;
    }&#13;
&#13;
    function setMasterResellerContract ( address _contract ) {&#13;
        if( msg.sender != owner &amp;&amp; msg.sender != manager ) throw;&#13;
&#13;
        masterresellercontract = _contract;&#13;
&#13;
    }&#13;
&#13;
    function setResellerOnDistributionContract ( address _contract, address reseller ) {&#13;
&#13;
        if( msg.sender != owner &amp;&amp; msg.sender != manager ) throw;&#13;
        Dividend div = Dividend ( _contract );&#13;
        div.setReseller ( reseller );&#13;
&#13;
&#13;
    }&#13;
&#13;
    function addReseller ( address _contract )onlyReseller{&#13;
&#13;
&#13;
        reseller[_contract] = true;&#13;
&#13;
    }&#13;
&#13;
    function isReseller ( address _contract ) constant returns(bool){&#13;
&#13;
&#13;
        return reseller[_contract];&#13;
    }&#13;
    &#13;
&#13;
    function removeReseller ( address _contract )onlyOwner{&#13;
&#13;
        reseller[_contract] = false;&#13;
&#13;
    }&#13;
    &#13;
&#13;
    /* Allow another contract to spend some tokens in your behalf */&#13;
    function approve(address _spender, uint256 _value)&#13;
    returns(bool success) {&#13;
        allowance[msg.sender][_spender] = _value;&#13;
        Approval( msg.sender ,_spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /* Approve and then communicate the approved contract in a single tx */&#13;
    function approveAndCall(address _spender, uint256 _value, bytes _extraData)&#13;
    returns(bool success) {&#13;
        tokenRecipient spender = tokenRecipient(_spender);&#13;
        if (approve(_spender, _value)) {&#13;
            spender.receiveApproval(msg.sender, _value, this, _extraData);&#13;
            return true;&#13;
        }&#13;
    }&#13;
&#13;
    function allowance(address _owner, address _spender) constant returns(uint256 remaining) {&#13;
        return allowance[_owner][_spender];&#13;
    }&#13;
&#13;
    /* A contract attempts to get the coins */&#13;
    function transferFrom(address _from, address _to, uint256 _value) returns(bool success) {&#13;
        if (_to == 0x0) throw; // Prevent transfer to 0x0 address. Use burn() instead&#13;
        if (balanceOf[_from] &lt; _value) throw; // Check if the sender has enough&#13;
    &#13;
        if (balanceOf[_to] + _value &lt; balanceOf[_to]) throw; // Check for overflows&#13;
        if (_value &gt; allowance[_from][msg.sender]) throw; // Check allowance&#13;
        if ( accountFreeze[ _from ]  ) throw;&#13;
        &#13;
        &#13;
        &#13;
        appendTokenHolders(_to);&#13;
        balanceOf[_from] -= _value; // Subtract from the sender&#13;
        balanceOf[_to] += _value; // Add the same to the recipient&#13;
        allowance[_from][msg.sender] -= _value;&#13;
        Transfer(_from, _to, _value);&#13;
        contractCheck( _to , _value );&#13;
        return true;&#13;
    }&#13;
  &#13;
    function burn(uint256 _value) returns(bool success) {&#13;
        if (balanceOf[msg.sender] &lt; _value) throw; // Check if the sender has enough&#13;
&#13;
        balanceOf[msg.sender] -= _value; // Subtract from the sender&#13;
        totalSupply -= _value; // Updates totalSupply&#13;
        Burn(msg.sender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function burnFrom(address _from, uint256 _value) returns(bool success) {&#13;
    &#13;
        if (balanceOf[_from] &lt; _value) throw; // Check if the sender has enough&#13;
        if (_value &gt; allowance[_from][msg.sender]) throw; // Check allowance&#13;
&#13;
        balanceOf[_from] -= _value; // Subtract from the sender&#13;
        totalSupply -= _value; // Updates totalSupply&#13;
        Burn(_from, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
    &#13;
    modifier onlyMinter {&#13;
        require(msg.sender == minter );&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyReseller {&#13;
        require(msg.sender == masterresellercontract );&#13;
        _;&#13;
    }&#13;
&#13;
    function transferOwnership(address newOwner) public onlyOwner {&#13;
&#13;
        owner = newOwner;&#13;
    }&#13;
    &#13;
    function assignMinter (address _minter) public onlyOwner {&#13;
&#13;
        minter = _minter;&#13;
    }&#13;
    &#13;
    &#13;
    function assignManagement (address _manager) public onlyOwner {&#13;
&#13;
        manager = _manager;&#13;
    }&#13;
    &#13;
    function freezeAccount ( address _account ) public onlyOwner{&#13;
        &#13;
        accountFreeze [ _account ] = true;&#13;
        FrozenFunds ( _account , true );&#13;
        &#13;
        &#13;
    }&#13;
    &#13;
    function unfreezeAccount ( address _account ) public onlyOwner{&#13;
        &#13;
         accountFreeze [ _account ] = false;&#13;
         FrozenFunds ( _account , false );&#13;
        &#13;
        &#13;
    }&#13;
    &#13;
    &#13;
   function mintToken(address target, uint256 mintedAmount) onlyOwner {&#13;
        appendTokenHolders(target);&#13;
        balanceOf[target] += mintedAmount;&#13;
        totalSupply += mintedAmount;&#13;
        Transfer(0, owner, mintedAmount);&#13;
        Transfer(owner, target, mintedAmount);&#13;
&#13;
    }&#13;
    &#13;
     function mintTokenByMinter( address target, uint256 mintedAmount ) onlyMinter  {&#13;
        &#13;
        appendTokenHolders(target);&#13;
        balanceOf[target] += mintedAmount;&#13;
        totalSupply += mintedAmount;&#13;
        Transfer(0, minter, mintedAmount);&#13;
        Transfer(minter, target, mintedAmount);&#13;
&#13;
    }&#13;
    &#13;
    function setTokenCreationContract ( address _contractaddress ) onlyOwner {&#13;
        &#13;
        &#13;
        TokenCreationContract = _contractaddress;&#13;
        &#13;
        &#13;
    }&#13;
    &#13;
    &#13;
    &#13;
&#13;
&#13;
    &#13;
    &#13;
     function payPegDistribution( address _token, uint256 amount ){&#13;
         &#13;
        if ( ! getContractStatus( msg.sender )) throw;&#13;
        if ( balanceOf[ msg.sender ] &lt; amount ) throw;&#13;
        if ( ! getContractOrigin() ){&#13;
            &#13;
            throw;&#13;
        }&#13;
        &#13;
        token = Token ( _token );&#13;
        Transfer( msg.sender , _token, amount );&#13;
        uint256  accountCount = token.getAccountCount();&#13;
        uint256  supply = token.totalSupply();&#13;
        Log( _token, amount  );&#13;
        profit_per_token = amount / supply;&#13;
        Message( profit_per_token );&#13;
        for ( uint i=0; i &lt; accountCount ; i++ ) {&#13;
               &#13;
            address tokenHolder = token.getAddress(i);&#13;
           &#13;
            if ( tokenHolder != msg.sender ) {&#13;
&#13;
            //transfer( tokenHolder,  token.balanceOf( tokenHolder ) * profit_per_token );&#13;
                balanceOf[ tokenHolder ] += token.balanceOf( tokenHolder ) * profit_per_token; &#13;
&#13;
            }&#13;
        &#13;
          }&#13;
            balanceOf[ msg.sender ] -= amount;&#13;
         &#13;
            &#13;
                  &#13;
            &#13;
        &#13;
    }&#13;
&#13;
    &#13;
}
pragma solidity ^0.4.24;

/*
 * @title String & slice utility library for Solidity contracts.
 * @author Nick Johnson <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="c2a3b0a3a1aaacaba682acadb6a6adb6ecaca7b6">[emailÂ protected]</a>&gt;&#13;
 *&#13;
 * @dev Functionality in this library is largely implemented using an&#13;
 *      abstraction called a 'slice'. A slice represents a part of a string -&#13;
 *      anything from the entire string to a single character, or even no&#13;
 *      characters at all (a 0-length slice). Since a slice only has to specify&#13;
 *      an offset and a length, copying and manipulating slices is a lot less&#13;
 *      expensive than copying and manipulating the strings they reference.&#13;
 *&#13;
 *      To further reduce gas costs, most functions on slice that need to return&#13;
 *      a slice modify the original one instead of allocating a new one; for&#13;
 *      instance, `s.split(".")` will return the text up to the first '.',&#13;
 *      modifying s to only contain the remainder of the string after the '.'.&#13;
 *      In situations where you do not want to modify the original slice, you&#13;
 *      can make a copy first with `.copy()`, for example:&#13;
 *      `s.copy().split(".")`. Try and avoid using this idiom in loops; since&#13;
 *      Solidity has no memory management, it will result in allocating many&#13;
 *      short-lived slices that are later discarded.&#13;
 *&#13;
 *      Functions that return two slices come in two versions: a non-allocating&#13;
 *      version that takes the second slice as an argument, modifying it in&#13;
 *      place, and an allocating version that allocates and returns the second&#13;
 *      slice; see `nextRune` for example.&#13;
 *&#13;
 *      Functions that have to copy string data will return strings rather than&#13;
 *      slices; these can be cast back to slices for further processing if&#13;
 *      required.&#13;
 *&#13;
 *      For convenience, some functions are provided with non-modifying&#13;
 *      variants that create a new slice and return both; for instance,&#13;
 *      `s.splitNew('.')` leaves s unmodified, and returns two values&#13;
 *      corresponding to the left and right parts of the string.&#13;
 */&#13;
&#13;
pragma solidity ^0.4.14;&#13;
&#13;
library strings {&#13;
    struct slice {&#13;
        uint _len;&#13;
        uint _ptr;&#13;
    }&#13;
&#13;
    function memcpy(uint dest, uint src, uint len) private pure {&#13;
        // Copy word-length chunks while possible&#13;
        for(; len &gt;= 32; len -= 32) {&#13;
            assembly {&#13;
                mstore(dest, mload(src))&#13;
            }&#13;
            dest += 32;&#13;
            src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint mask = 256 ** (32 - len) - 1;&#13;
        assembly {&#13;
            let srcpart := and(mload(src), not(mask))&#13;
            let destpart := and(mload(dest), mask)&#13;
            mstore(dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire string.&#13;
     * @param self The string to make a slice from.&#13;
     * @return A newly allocated slice containing the entire string.&#13;
     */&#13;
    function toSlice(string memory self) internal pure returns (slice memory) {&#13;
        uint ptr;&#13;
        assembly {&#13;
            ptr := add(self, 0x20)&#13;
        }&#13;
        return slice(bytes(self).length, ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length of a null-terminated bytes32 string.&#13;
     * @param self The value to find the length of.&#13;
     * @return The length of the string, from 0 to 32.&#13;
     */&#13;
    function len(bytes32 self) internal pure returns (uint) {&#13;
        uint ret;&#13;
        if (self == 0)&#13;
            return 0;&#13;
        if (self &amp; 0xffffffffffffffffffffffffffffffff == 0) {&#13;
            ret += 16;&#13;
            self = bytes32(uint(self) / 0x100000000000000000000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffffffffffff == 0) {&#13;
            ret += 8;&#13;
            self = bytes32(uint(self) / 0x10000000000000000);&#13;
        }&#13;
        if (self &amp; 0xffffffff == 0) {&#13;
            ret += 4;&#13;
            self = bytes32(uint(self) / 0x100000000);&#13;
        }&#13;
        if (self &amp; 0xffff == 0) {&#13;
            ret += 2;&#13;
            self = bytes32(uint(self) / 0x10000);&#13;
        }&#13;
        if (self &amp; 0xff == 0) {&#13;
            ret += 1;&#13;
        }&#13;
        return 32 - ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a slice containing the entire bytes32, interpreted as a&#13;
     *      null-terminated utf-8 string.&#13;
     * @param self The bytes32 value to convert to a slice.&#13;
     * @return A new slice containing the value of the input argument up to the&#13;
     *         first null.&#13;
     */&#13;
    function toSliceB32(bytes32 self) internal pure returns (slice memory ret) {&#13;
        // Allocate space for `self` in memory, copy it there, and point ret at it&#13;
        assembly {&#13;
            let ptr := mload(0x40)&#13;
            mstore(0x40, add(ptr, 0x20))&#13;
            mstore(ptr, self)&#13;
            mstore(add(ret, 0x20), ptr)&#13;
        }&#13;
        ret._len = len(self);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a new slice containing the same data as the current slice.&#13;
     * @param self The slice to copy.&#13;
     * @return A new slice containing the same data as `self`.&#13;
     */&#13;
    function copy(slice memory self) internal pure returns (slice memory) {&#13;
        return slice(self._len, self._ptr);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Copies a slice to a new string.&#13;
     * @param self The slice to copy.&#13;
     * @return A newly allocated string containing the slice's text.&#13;
     */&#13;
    function toString(slice memory self) internal pure returns (string memory) {&#13;
        string memory ret = new string(self._len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the length in runes of the slice. Note that this operation&#13;
     *      takes time proportional to the length of the slice; avoid using it&#13;
     *      in loops, and call `slice.empty()` if you only need to know whether&#13;
     *      the slice is empty or not.&#13;
     * @param self The slice to operate on.&#13;
     * @return The length of the slice in runes.&#13;
     */&#13;
    function len(slice memory self) internal pure returns (uint l) {&#13;
        // Starting at ptr-31 means the LSB will be the byte we care about&#13;
        uint ptr = self._ptr - 31;&#13;
        uint end = ptr + self._len;&#13;
        for (l = 0; ptr &lt; end; l++) {&#13;
            uint8 b;&#13;
            assembly { b := and(mload(ptr), 0xFF) }&#13;
            if (b &lt; 0x80) {&#13;
                ptr += 1;&#13;
            } else if(b &lt; 0xE0) {&#13;
                ptr += 2;&#13;
            } else if(b &lt; 0xF0) {&#13;
                ptr += 3;&#13;
            } else if(b &lt; 0xF8) {&#13;
                ptr += 4;&#13;
            } else if(b &lt; 0xFC) {&#13;
                ptr += 5;&#13;
            } else {&#13;
                ptr += 6;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice is empty (has a length of 0).&#13;
     * @param self The slice to operate on.&#13;
     * @return True if the slice is empty, False otherwise.&#13;
     */&#13;
    function empty(slice memory self) internal pure returns (bool) {&#13;
        return self._len == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a positive number if `other` comes lexicographically after&#13;
     *      `self`, a negative number if it comes before, or zero if the&#13;
     *      contents of the two slices are equal. Comparison is done per-rune,&#13;
     *      on unicode codepoints.&#13;
     * @param self The first slice to compare.&#13;
     * @param other The second slice to compare.&#13;
     * @return The result of the comparison.&#13;
     */&#13;
    function compare(slice memory self, slice memory other) internal pure returns (int) {&#13;
        uint shortest = self._len;&#13;
        if (other._len &lt; self._len)&#13;
            shortest = other._len;&#13;
&#13;
        uint selfptr = self._ptr;&#13;
        uint otherptr = other._ptr;&#13;
        for (uint idx = 0; idx &lt; shortest; idx += 32) {&#13;
            uint a;&#13;
            uint b;&#13;
            assembly {&#13;
                a := mload(selfptr)&#13;
                b := mload(otherptr)&#13;
            }&#13;
            if (a != b) {&#13;
                // Mask out irrelevant bytes and check again&#13;
                uint256 mask = uint256(-1); // 0xffff...&#13;
                if(shortest &lt; 32) {&#13;
                  mask = ~(2 ** (8 * (32 - shortest + idx)) - 1);&#13;
                }&#13;
                uint256 diff = (a &amp; mask) - (b &amp; mask);&#13;
                if (diff != 0)&#13;
                    return int(diff);&#13;
            }&#13;
            selfptr += 32;&#13;
            otherptr += 32;&#13;
        }&#13;
        return int(self._len) - int(other._len);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the two slices contain the same text.&#13;
     * @param self The first slice to compare.&#13;
     * @param self The second slice to compare.&#13;
     * @return True if the slices are equal, false otherwise.&#13;
     */&#13;
    function equals(slice memory self, slice memory other) internal pure returns (bool) {&#13;
        return compare(self, other) == 0;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Extracts the first rune in the slice into `rune`, advancing the&#13;
     *      slice to point to the next rune and returning `self`.&#13;
     * @param self The slice to operate on.&#13;
     * @param rune The slice that will contain the first rune.&#13;
     * @return `rune`.&#13;
     */&#13;
    function nextRune(slice memory self, slice memory rune) internal pure returns (slice memory) {&#13;
        rune._ptr = self._ptr;&#13;
&#13;
        if (self._len == 0) {&#13;
            rune._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        uint l;&#13;
        uint b;&#13;
        // Load the first byte of the rune into the LSBs of b&#13;
        assembly { b := and(mload(sub(mload(add(self, 32)), 31)), 0xFF) }&#13;
        if (b &lt; 0x80) {&#13;
            l = 1;&#13;
        } else if(b &lt; 0xE0) {&#13;
            l = 2;&#13;
        } else if(b &lt; 0xF0) {&#13;
            l = 3;&#13;
        } else {&#13;
            l = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (l &gt; self._len) {&#13;
            rune._len = self._len;&#13;
            self._ptr += self._len;&#13;
            self._len = 0;&#13;
            return rune;&#13;
        }&#13;
&#13;
        self._ptr += l;&#13;
        self._len -= l;&#13;
        rune._len = l;&#13;
        return rune;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the first rune in the slice, advancing the slice to point&#13;
     *      to the next rune.&#13;
     * @param self The slice to operate on.&#13;
     * @return A slice containing only the first rune from `self`.&#13;
     */&#13;
    function nextRune(slice memory self) internal pure returns (slice memory ret) {&#13;
        nextRune(self, ret);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the number of the first codepoint in the slice.&#13;
     * @param self The slice to operate on.&#13;
     * @return The number of the first codepoint in the slice.&#13;
     */&#13;
    function ord(slice memory self) internal pure returns (uint ret) {&#13;
        if (self._len == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        uint word;&#13;
        uint length;&#13;
        uint divisor = 2 ** 248;&#13;
&#13;
        // Load the rune into the MSBs of b&#13;
        assembly { word:= mload(mload(add(self, 32))) }&#13;
        uint b = word / divisor;&#13;
        if (b &lt; 0x80) {&#13;
            ret = b;&#13;
            length = 1;&#13;
        } else if(b &lt; 0xE0) {&#13;
            ret = b &amp; 0x1F;&#13;
            length = 2;&#13;
        } else if(b &lt; 0xF0) {&#13;
            ret = b &amp; 0x0F;&#13;
            length = 3;&#13;
        } else {&#13;
            ret = b &amp; 0x07;&#13;
            length = 4;&#13;
        }&#13;
&#13;
        // Check for truncated codepoints&#13;
        if (length &gt; self._len) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        for (uint i = 1; i &lt; length; i++) {&#13;
            divisor = divisor / 256;&#13;
            b = (word / divisor) &amp; 0xFF;&#13;
            if (b &amp; 0xC0 != 0x80) {&#13;
                // Invalid UTF-8 sequence&#13;
                return 0;&#13;
            }&#13;
            ret = (ret * 64) | (b &amp; 0x3F);&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns the keccak-256 hash of the slice.&#13;
     * @param self The slice to hash.&#13;
     * @return The hash of the slice.&#13;
     */&#13;
    function keccak(slice memory self) internal pure returns (bytes32 ret) {&#13;
        assembly {&#13;
            ret := keccak256(mload(add(self, 32)), mload(self))&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if `self` starts with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function startsWith(slice memory self, slice memory needle) internal pure returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        if (self._ptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
            let length := mload(needle)&#13;
            let selfptr := mload(add(self, 0x20))&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
        }&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` starts with `needle`, `needle` is removed from the&#13;
     *      beginning of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function beyond(slice memory self, slice memory needle) internal pure returns (slice memory) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        bool equal = true;&#13;
        if (self._ptr != needle._ptr) {&#13;
            assembly {&#13;
                let length := mload(needle)&#13;
                let selfptr := mload(add(self, 0x20))&#13;
                let needleptr := mload(add(needle, 0x20))&#13;
                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
            self._ptr += needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns true if the slice ends with `needle`.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return True if the slice starts with the provided text, false otherwise.&#13;
     */&#13;
    function endsWith(slice memory self, slice memory needle) internal pure returns (bool) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return false;&#13;
        }&#13;
&#13;
        uint selfptr = self._ptr + self._len - needle._len;&#13;
&#13;
        if (selfptr == needle._ptr) {&#13;
            return true;&#13;
        }&#13;
&#13;
        bool equal;&#13;
        assembly {&#13;
            let length := mload(needle)&#13;
            let needleptr := mload(add(needle, 0x20))&#13;
            equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
        }&#13;
&#13;
        return equal;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev If `self` ends with `needle`, `needle` is removed from the&#13;
     *      end of `self`. Otherwise, `self` is unmodified.&#13;
     * @param self The slice to operate on.&#13;
     * @param needle The slice to search for.&#13;
     * @return `self`&#13;
     */&#13;
    function until(slice memory self, slice memory needle) internal pure returns (slice memory) {&#13;
        if (self._len &lt; needle._len) {&#13;
            return self;&#13;
        }&#13;
&#13;
        uint selfptr = self._ptr + self._len - needle._len;&#13;
        bool equal = true;&#13;
        if (selfptr != needle._ptr) {&#13;
            assembly {&#13;
                let length := mload(needle)&#13;
                let needleptr := mload(add(needle, 0x20))&#13;
                equal := eq(keccak256(selfptr, length), keccak256(needleptr, length))&#13;
            }&#13;
        }&#13;
&#13;
        if (equal) {&#13;
            self._len -= needle._len;&#13;
        }&#13;
&#13;
        return self;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte of the first occurrence of&#13;
    // `needle` in `self`, or the first byte after `self` if not found.&#13;
    function findPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {&#13;
        uint ptr = selfptr;&#13;
        uint idx;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));&#13;
&#13;
                bytes32 needledata;&#13;
                assembly { needledata := and(mload(needleptr), mask) }&#13;
&#13;
                uint end = selfptr + selflen - needlelen;&#13;
                bytes32 ptrdata;&#13;
                assembly { ptrdata := and(mload(ptr), mask) }&#13;
&#13;
                while (ptrdata != needledata) {&#13;
                    if (ptr &gt;= end)&#13;
                        return selfptr + selflen;&#13;
                    ptr++;&#13;
                    assembly { ptrdata := and(mload(ptr), mask) }&#13;
                }&#13;
                return ptr;&#13;
            } else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly { hash := keccak256(needleptr, needlelen) }&#13;
&#13;
                for (idx = 0; idx &lt;= selflen - needlelen; idx++) {&#13;
                    bytes32 testHash;&#13;
                    assembly { testHash := keccak256(ptr, needlelen) }&#13;
                    if (hash == testHash)&#13;
                        return ptr;&#13;
                    ptr += 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr + selflen;&#13;
    }&#13;
&#13;
    // Returns the memory address of the first byte after the last occurrence of&#13;
    // `needle` in `self`, or the address of `self` if not found.&#13;
    function rfindPtr(uint selflen, uint selfptr, uint needlelen, uint needleptr) private pure returns (uint) {&#13;
        uint ptr;&#13;
&#13;
        if (needlelen &lt;= selflen) {&#13;
            if (needlelen &lt;= 32) {&#13;
                bytes32 mask = bytes32(~(2 ** (8 * (32 - needlelen)) - 1));&#13;
&#13;
                bytes32 needledata;&#13;
                assembly { needledata := and(mload(needleptr), mask) }&#13;
&#13;
                ptr = selfptr + selflen - needlelen;&#13;
                bytes32 ptrdata;&#13;
                assembly { ptrdata := and(mload(ptr), mask) }&#13;
&#13;
                while (ptrdata != needledata) {&#13;
                    if (ptr &lt;= selfptr)&#13;
                        return selfptr;&#13;
                    ptr--;&#13;
                    assembly { ptrdata := and(mload(ptr), mask) }&#13;
                }&#13;
                return ptr + needlelen;&#13;
            } else {&#13;
                // For long needles, use hashing&#13;
                bytes32 hash;&#13;
                assembly { hash := keccak256(needleptr, needlelen) }&#13;
                ptr = selfptr + (selflen - needlelen);&#13;
                while (ptr &gt;= selfptr) {&#13;
                    bytes32 testHash;&#13;
                    assembly { testHash := keccak256(ptr, needlelen) }&#13;
                    if (hash == testHash)&#13;
                        return ptr + needlelen;&#13;
                    ptr -= 1;&#13;
                }&#13;
            }&#13;
        }&#13;
        return selfptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain everything from the first occurrence of&#13;
     *      `needle` to the end of the slice. `self` is set to the empty slice&#13;
     *      if `needle` is not found.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function find(slice memory self, slice memory needle) internal pure returns (slice memory) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len -= ptr - self._ptr;&#13;
        self._ptr = ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Modifies `self` to contain the part of the string from the start of&#13;
     *      `self` to the end of the first occurrence of `needle`. If `needle`&#13;
     *      is not found, `self` is set to the empty slice.&#13;
     * @param self The slice to search and modify.&#13;
     * @param needle The text to search for.&#13;
     * @return `self`.&#13;
     */&#13;
    function rfind(slice memory self, slice memory needle) internal pure returns (slice memory) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        self._len = ptr - self._ptr;&#13;
        return self;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and `token` to everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function split(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = self._ptr;&#13;
        token._len = ptr - self._ptr;&#13;
        if (ptr == self._ptr + self._len) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        } else {&#13;
            self._len -= token._len + needle._len;&#13;
            self._ptr = ptr + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything after the first&#13;
     *      occurrence of `needle`, and returning everything before it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` up to the first occurrence of `delim`.&#13;
     */&#13;
    function split(slice memory self, slice memory needle) internal pure returns (slice memory token) {&#13;
        split(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and `token` to everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and `token` is set to the entirety of `self`.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @param token An output parameter to which the first token is written.&#13;
     * @return `token`.&#13;
     */&#13;
    function rsplit(slice memory self, slice memory needle, slice memory token) internal pure returns (slice memory) {&#13;
        uint ptr = rfindPtr(self._len, self._ptr, needle._len, needle._ptr);&#13;
        token._ptr = ptr;&#13;
        token._len = self._len - (ptr - self._ptr);&#13;
        if (ptr == self._ptr) {&#13;
            // Not found&#13;
            self._len = 0;&#13;
        } else {&#13;
            self._len -= token._len + needle._len;&#13;
        }&#13;
        return token;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Splits the slice, setting `self` to everything before the last&#13;
     *      occurrence of `needle`, and returning everything after it. If&#13;
     *      `needle` does not occur in `self`, `self` is set to the empty slice,&#13;
     *      and the entirety of `self` is returned.&#13;
     * @param self The slice to split.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The part of `self` after the last occurrence of `delim`.&#13;
     */&#13;
    function rsplit(slice memory self, slice memory needle) internal pure returns (slice memory token) {&#13;
        rsplit(self, needle, token);&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Counts the number of nonoverlapping occurrences of `needle` in `self`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return The number of occurrences of `needle` found in `self`.&#13;
     */&#13;
    function count(slice memory self, slice memory needle) internal pure returns (uint cnt) {&#13;
        uint ptr = findPtr(self._len, self._ptr, needle._len, needle._ptr) + needle._len;&#13;
        while (ptr &lt;= self._ptr + self._len) {&#13;
            cnt++;&#13;
            ptr = findPtr(self._len - (ptr - self._ptr), ptr, needle._len, needle._ptr) + needle._len;&#13;
        }&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns True if `self` contains `needle`.&#13;
     * @param self The slice to search.&#13;
     * @param needle The text to search for in `self`.&#13;
     * @return True if `needle` is found in `self`, false otherwise.&#13;
     */&#13;
    function contains(slice memory self, slice memory needle) internal pure returns (bool) {&#13;
        return rfindPtr(self._len, self._ptr, needle._len, needle._ptr) != self._ptr;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Returns a newly allocated string containing the concatenation of&#13;
     *      `self` and `other`.&#13;
     * @param self The first slice to concatenate.&#13;
     * @param other The second slice to concatenate.&#13;
     * @return The concatenation of the two strings.&#13;
     */&#13;
    function concat(slice memory self, slice memory other) internal pure returns (string memory) {&#13;
        string memory ret = new string(self._len + other._len);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
        memcpy(retptr, self._ptr, self._len);&#13;
        memcpy(retptr + self._len, other._ptr, other._len);&#13;
        return ret;&#13;
    }&#13;
&#13;
    /*&#13;
     * @dev Joins an array of slices, using `self` as a delimiter, returning a&#13;
     *      newly allocated string.&#13;
     * @param self The delimiter to use.&#13;
     * @param parts A list of slices to join.&#13;
     * @return A newly allocated string containing all the slices in `parts`,&#13;
     *         joined with `self`.&#13;
     */&#13;
    function join(slice memory self, slice[] memory parts) internal pure returns (string memory) {&#13;
        if (parts.length == 0)&#13;
            return "";&#13;
&#13;
        uint length = self._len * (parts.length - 1);&#13;
        for(uint i = 0; i &lt; parts.length; i++)&#13;
            length += parts[i]._len;&#13;
&#13;
        string memory ret = new string(length);&#13;
        uint retptr;&#13;
        assembly { retptr := add(ret, 32) }&#13;
&#13;
        for(i = 0; i &lt; parts.length; i++) {&#13;
            memcpy(retptr, parts[i]._ptr, parts[i]._len);&#13;
            retptr += parts[i]._len;&#13;
            if (i &lt; parts.length - 1) {&#13;
                memcpy(retptr, self._ptr, self._len);&#13;
                retptr += self._len;&#13;
            }&#13;
        }&#13;
&#13;
        return ret;&#13;
    }&#13;
}&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * Utility library of inline functions on addresses&#13;
 */&#13;
library AddressUtils {&#13;
&#13;
  /**&#13;
   * Returns whether the target address is a contract&#13;
   * @dev This function will return false if invoked during the constructor of a contract,&#13;
   *  as the code is not actually created until after the constructor finishes.&#13;
   * @param addr address to check&#13;
   * @return whether the target address is a contract&#13;
   */&#13;
  function isContract(address addr) internal view returns (bool) {&#13;
    uint256 size;&#13;
    // XXX Currently there is no better way to check if there is a contract in an address&#13;
    // than to check the size of the code at that address.&#13;
    // See https://ethereum.stackexchange.com/a/14016/36603&#13;
    // for more details about how this works.&#13;
    // TODO Check this again before the Serenity release, because all addresses will be&#13;
    // contracts then.&#13;
    assembly { size := extcodesize(addr) }  // solium-disable-line security/no-inline-assembly&#13;
    return size &gt; 0;&#13;
  }&#13;
&#13;
}&#13;
/**&#13;
 * @title Migratable&#13;
 * Helper contract to support intialization and migration schemes between&#13;
 * different implementations of a contract in the context of upgradeability.&#13;
 * To use it, replace the constructor with a function that has the&#13;
 * `isInitializer` modifier starting with `"0"` as `migrationId`.&#13;
 * When you want to apply some migration code during an upgrade, increase&#13;
 * the `migrationId`. Or, if the migration code must be applied only after&#13;
 * another migration has been already applied, use the `isMigration` modifier.&#13;
 * This helper supports multiple inheritance.&#13;
 * WARNING: It is the developer's responsibility to ensure that migrations are&#13;
 * applied in a correct order, or that they are run at all.&#13;
 * See `Initializable` for a simpler version.&#13;
 */&#13;
contract Migratable {&#13;
  /**&#13;
   * @dev Emitted when the contract applies a migration.&#13;
   * @param contractName Name of the Contract.&#13;
   * @param migrationId Identifier of the migration applied.&#13;
   */&#13;
  event Migrated(string contractName, string migrationId);&#13;
&#13;
  /**&#13;
   * @dev Mapping of the already applied migrations.&#13;
   * (contractName =&gt; (migrationId =&gt; bool))&#13;
   */&#13;
  mapping (string =&gt; mapping (string =&gt; bool)) internal migrated;&#13;
&#13;
  /**&#13;
   * @dev Internal migration id used to specify that a contract has already been initialized.&#13;
   */&#13;
  string constant private INITIALIZED_ID = "initialized";&#13;
&#13;
&#13;
  /**&#13;
   * @dev Modifier to use in the initialization function of a contract.&#13;
   * @param contractName Name of the contract.&#13;
   * @param migrationId Identifier of the migration.&#13;
   */&#13;
  modifier isInitializer(string contractName, string migrationId) {&#13;
    validateMigrationIsPending(contractName, INITIALIZED_ID);&#13;
    validateMigrationIsPending(contractName, migrationId);&#13;
    _;&#13;
    emit Migrated(contractName, migrationId);&#13;
    migrated[contractName][migrationId] = true;&#13;
    migrated[contractName][INITIALIZED_ID] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to use in the migration of a contract.&#13;
   * @param contractName Name of the contract.&#13;
   * @param requiredMigrationId Identifier of the previous migration, required&#13;
   * to apply new one.&#13;
   * @param newMigrationId Identifier of the new migration to be applied.&#13;
   */&#13;
  modifier isMigration(string contractName, string requiredMigrationId, string newMigrationId) {&#13;
    require(isMigrated(contractName, requiredMigrationId), "Prerequisite migration ID has not been run yet");&#13;
    validateMigrationIsPending(contractName, newMigrationId);&#13;
    _;&#13;
    emit Migrated(contractName, newMigrationId);&#13;
    migrated[contractName][newMigrationId] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns true if the contract migration was applied.&#13;
   * @param contractName Name of the contract.&#13;
   * @param migrationId Identifier of the migration.&#13;
   * @return true if the contract migration was applied, false otherwise.&#13;
   */&#13;
  function isMigrated(string contractName, string migrationId) public view returns(bool) {&#13;
    return migrated[contractName][migrationId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Initializer that marks the contract as initialized.&#13;
   * It is important to run this if you had deployed a previous version of a Migratable contract.&#13;
   * For more information see https://github.com/zeppelinos/zos-lib/issues/158.&#13;
   */&#13;
  function initialize() isInitializer("Migratable", "1.2.1") public {&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Reverts if the requested migration was already executed.&#13;
   * @param contractName Name of the contract.&#13;
   * @param migrationId Identifier of the migration.&#13;
   */&#13;
  function validateMigrationIsPending(string contractName, string migrationId) private view {&#13;
    require(!isMigrated(contractName, migrationId), "Requested target migration ID has already been run");&#13;
  }&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable is Migratable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  function initialize(address _sender) public isInitializer("Ownable", "1.9.0") {&#13;
    owner = _sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, newOwner);&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC165&#13;
 * @dev https://github.com/ethereum/EIPs/blob/master/EIPS/eip-165.md&#13;
 */&#13;
interface ERC165 {&#13;
&#13;
  /**&#13;
   * @notice Query if a contract implements an interface&#13;
   * @param _interfaceId The interface identifier, as specified in ERC-165&#13;
   * @dev Interface identification is specified in ERC-165. This function&#13;
   * uses less than 30,000 gas.&#13;
   */&#13;
  function supportsInterface(bytes4 _interfaceId)&#13;
    external&#13;
    view&#13;
    returns (bool);&#13;
}&#13;
&#13;
/**&#13;
 * @title SupportsInterfaceWithLookup&#13;
 * @author Matt Condon (@shrugs)&#13;
 * @dev Implements ERC165 using a lookup table.&#13;
 */&#13;
contract SupportsInterfaceWithLookup is ERC165 {&#13;
&#13;
  bytes4 public constant InterfaceId_ERC165 = 0x01ffc9a7;&#13;
  /**&#13;
   * 0x01ffc9a7 ===&#13;
   *   bytes4(keccak256('supportsInterface(bytes4)'))&#13;
   */&#13;
&#13;
  /**&#13;
   * @dev a mapping of interface id to whether or not it's supported&#13;
   */&#13;
  mapping(bytes4 =&gt; bool) internal supportedInterfaces;&#13;
&#13;
  /**&#13;
   * @dev A contract implementing SupportsInterfaceWithLookup&#13;
   * implement ERC165 itself&#13;
   */&#13;
  constructor()&#13;
    public&#13;
  {&#13;
    _registerInterface(InterfaceId_ERC165);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev implement supportsInterface(bytes4) using a lookup table&#13;
   */&#13;
  function supportsInterface(bytes4 _interfaceId)&#13;
    external&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    return supportedInterfaces[_interfaceId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev private method for registering an interface&#13;
   */&#13;
  function _registerInterface(bytes4 _interfaceId)&#13;
    internal&#13;
  {&#13;
    require(_interfaceId != 0xffffffff);&#13;
    supportedInterfaces[_interfaceId] = true;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC721 token receiver interface&#13;
 * @dev Interface for any contract that wants to support safeTransfers&#13;
 * from ERC721 asset contracts.&#13;
 */&#13;
contract ERC721Receiver {&#13;
  /**&#13;
   * @dev Magic value to be returned upon successful reception of an NFT&#13;
   *  Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`,&#13;
   *  which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`&#13;
   */&#13;
  bytes4 internal constant ERC721_RECEIVED = 0x150b7a02;&#13;
&#13;
  /**&#13;
   * @notice Handle the receipt of an NFT&#13;
   * @dev The ERC721 smart contract calls this function on the recipient&#13;
   * after a `safetransfer`. This function MAY throw to revert and reject the&#13;
   * transfer. Return of other than the magic value MUST result in the&#13;
   * transaction being reverted.&#13;
   * Note: the contract address is always the message sender.&#13;
   * @param _operator The address which called `safeTransferFrom` function&#13;
   * @param _from The address which previously owned the token&#13;
   * @param _tokenId The NFT identifier which is being transferred&#13;
   * @param _data Additional data with no specified format&#13;
   * @return `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`&#13;
   */&#13;
  function onERC721Received(&#13;
    address _operator,&#13;
    address _from,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public&#13;
    returns(bytes4);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC721 Non-Fungible Token Standard basic interface&#13;
 * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Basic is ERC165 {&#13;
&#13;
  bytes4 internal constant InterfaceId_ERC721 = 0x80ac58cd;&#13;
  /*&#13;
   * 0x80ac58cd ===&#13;
   *   bytes4(keccak256('balanceOf(address)')) ^&#13;
   *   bytes4(keccak256('ownerOf(uint256)')) ^&#13;
   *   bytes4(keccak256('approve(address,uint256)')) ^&#13;
   *   bytes4(keccak256('getApproved(uint256)')) ^&#13;
   *   bytes4(keccak256('setApprovalForAll(address,bool)')) ^&#13;
   *   bytes4(keccak256('isApprovedForAll(address,address)')) ^&#13;
   *   bytes4(keccak256('transferFrom(address,address,uint256)')) ^&#13;
   *   bytes4(keccak256('safeTransferFrom(address,address,uint256)')) ^&#13;
   *   bytes4(keccak256('safeTransferFrom(address,address,uint256,bytes)'))&#13;
   */&#13;
&#13;
  bytes4 internal constant InterfaceId_ERC721Exists = 0x4f558e79;&#13;
  /*&#13;
   * 0x4f558e79 ===&#13;
   *   bytes4(keccak256('exists(uint256)'))&#13;
   */&#13;
&#13;
  bytes4 internal constant InterfaceId_ERC721Enumerable = 0x780e9d63;&#13;
  /**&#13;
   * 0x780e9d63 ===&#13;
   *   bytes4(keccak256('totalSupply()')) ^&#13;
   *   bytes4(keccak256('tokenOfOwnerByIndex(address,uint256)')) ^&#13;
   *   bytes4(keccak256('tokenByIndex(uint256)'))&#13;
   */&#13;
&#13;
  bytes4 internal constant InterfaceId_ERC721Metadata = 0x5b5e139f;&#13;
  /**&#13;
   * 0x5b5e139f ===&#13;
   *   bytes4(keccak256('name()')) ^&#13;
   *   bytes4(keccak256('symbol()')) ^&#13;
   *   bytes4(keccak256('tokenURI(uint256)'))&#13;
   */&#13;
&#13;
  event Transfer(&#13;
    address indexed _from,&#13;
    address indexed _to,&#13;
    uint256 indexed _tokenId&#13;
  );&#13;
  event Approval(&#13;
    address indexed _owner,&#13;
    address indexed _approved,&#13;
    uint256 indexed _tokenId&#13;
  );&#13;
  event ApprovalForAll(&#13;
    address indexed _owner,&#13;
    address indexed _operator,&#13;
    bool _approved&#13;
  );&#13;
&#13;
  function balanceOf(address _owner) public view returns (uint256 _balance);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address _owner);&#13;
  function exists(uint256 _tokenId) public view returns (bool _exists);&#13;
&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function getApproved(uint256 _tokenId)&#13;
    public view returns (address _operator);&#13;
&#13;
  function setApprovalForAll(address _operator, bool _approved) public;&#13;
  function isApprovedForAll(address _owner, address _operator)&#13;
    public view returns (bool);&#13;
&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function safeTransferFrom(address _from, address _to, uint256 _tokenId)&#13;
    public;&#13;
&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public;&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Enumerable is ERC721Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function tokenOfOwnerByIndex(&#13;
    address _owner,&#13;
    uint256 _index&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (uint256 _tokenId);&#13;
&#13;
  function tokenByIndex(uint256 _index) public view returns (uint256);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, optional metadata extension&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Metadata is ERC721Basic {&#13;
  function name() external view returns (string _name);&#13;
  function symbol() external view returns (string _symbol);&#13;
  function tokenURI(uint256 _tokenId) public view returns (string);&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC-721 Non-Fungible Token Standard, full implementation interface&#13;
 * @dev See https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721 is ERC721Basic, ERC721Enumerable, ERC721Metadata {&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC721 Non-Fungible Token Standard basic implementation&#13;
 * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721BasicToken is SupportsInterfaceWithLookup, ERC721Basic {&#13;
&#13;
  using SafeMath for uint256;&#13;
  using AddressUtils for address;&#13;
&#13;
  // Equals to `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`&#13;
  // which can be also obtained as `ERC721Receiver(0).onERC721Received.selector`&#13;
  bytes4 private constant ERC721_RECEIVED = 0x150b7a02;&#13;
&#13;
  // Mapping from token ID to owner&#13;
  mapping (uint256 =&gt; address) internal tokenOwner;&#13;
&#13;
  // Mapping from token ID to approved address&#13;
  mapping (uint256 =&gt; address) internal tokenApprovals;&#13;
&#13;
  // Mapping from owner to number of owned token&#13;
  mapping (address =&gt; uint256) internal ownedTokensCount;&#13;
&#13;
  // Mapping from owner to operator approvals&#13;
  mapping (address =&gt; mapping (address =&gt; bool)) internal operatorApprovals;&#13;
&#13;
  constructor()&#13;
    public&#13;
  {&#13;
    // register the supported interfaces to conform to ERC721 via ERC165&#13;
    _registerInterface(InterfaceId_ERC721);&#13;
    _registerInterface(InterfaceId_ERC721Exists);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the balance of the specified address&#13;
   * @param _owner address to query the balance of&#13;
   * @return uint256 representing the amount owned by the passed address&#13;
   */&#13;
  function balanceOf(address _owner) public view returns (uint256) {&#13;
    require(_owner != address(0));&#13;
    return ownedTokensCount[_owner];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the owner of the specified token ID&#13;
   * @param _tokenId uint256 ID of the token to query the owner of&#13;
   * @return owner address currently marked as the owner of the given token ID&#13;
   */&#13;
  function ownerOf(uint256 _tokenId) public view returns (address) {&#13;
    address owner = tokenOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
    return owner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether the specified token exists&#13;
   * @param _tokenId uint256 ID of the token to query the existence of&#13;
   * @return whether the token exists&#13;
   */&#13;
  function exists(uint256 _tokenId) public view returns (bool) {&#13;
    address owner = tokenOwner[_tokenId];&#13;
    return owner != address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approves another address to transfer the given token ID&#13;
   * The zero address indicates there is no approved address.&#13;
   * There can only be one approved address per token at a given time.&#13;
   * Can only be called by the token owner or an approved operator.&#13;
   * @param _to address to be approved for the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be approved&#13;
   */&#13;
  function approve(address _to, uint256 _tokenId) public {&#13;
    address owner = ownerOf(_tokenId);&#13;
    require(_to != owner);&#13;
    require(msg.sender == owner || isApprovedForAll(owner, msg.sender));&#13;
&#13;
    tokenApprovals[_tokenId] = _to;&#13;
    emit Approval(owner, _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the approved address for a token ID, or zero if no address set&#13;
   * @param _tokenId uint256 ID of the token to query the approval of&#13;
   * @return address currently approved for the given token ID&#13;
   */&#13;
  function getApproved(uint256 _tokenId) public view returns (address) {&#13;
    return tokenApprovals[_tokenId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Sets or unsets the approval of a given operator&#13;
   * An operator is allowed to transfer all tokens of the sender on their behalf&#13;
   * @param _to operator address to set the approval&#13;
   * @param _approved representing the status of the approval to be set&#13;
   */&#13;
  function setApprovalForAll(address _to, bool _approved) public {&#13;
    require(_to != msg.sender);&#13;
    operatorApprovals[msg.sender][_to] = _approved;&#13;
    emit ApprovalForAll(msg.sender, _to, _approved);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Tells whether an operator is approved by a given owner&#13;
   * @param _owner owner address which you want to query the approval of&#13;
   * @param _operator operator address which you want to query the approval of&#13;
   * @return bool whether the given operator is approved by the given owner&#13;
   */&#13;
  function isApprovedForAll(&#13;
    address _owner,&#13;
    address _operator&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    return operatorApprovals[_owner][_operator];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers the ownership of a given token ID to another address&#13;
   * Usage of this method is discouraged, use `safeTransferFrom` whenever possible&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
  */&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  )&#13;
    public&#13;
  {&#13;
    require(isApprovedOrOwner(msg.sender, _tokenId));&#13;
    require(_from != address(0));&#13;
    require(_to != address(0));&#13;
&#13;
    clearApproval(_from, _tokenId);&#13;
    removeTokenFrom(_from, _tokenId);&#13;
    addTokenTo(_to, _tokenId);&#13;
&#13;
    emit Transfer(_from, _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Safely transfers the ownership of a given token ID to another address&#13;
   * If the target address is a contract, it must implement `onERC721Received`,&#13;
   * which is called upon a safe transfer, and return the magic value&#13;
   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,&#13;
   * the transfer is reverted.&#13;
   *&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
  */&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  )&#13;
    public&#13;
  {&#13;
    // solium-disable-next-line arg-overflow&#13;
    safeTransferFrom(_from, _to, _tokenId, "");&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Safely transfers the ownership of a given token ID to another address&#13;
   * If the target address is a contract, it must implement `onERC721Received`,&#13;
   * which is called upon a safe transfer, and return the magic value&#13;
   * `bytes4(keccak256("onERC721Received(address,address,uint256,bytes)"))`; otherwise,&#13;
   * the transfer is reverted.&#13;
   * Requires the msg sender to be the owner, approved, or operator&#13;
   * @param _from current owner of the token&#13;
   * @param _to address to receive the ownership of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @param _data bytes data to send along with a safe transfer check&#13;
   */&#13;
  function safeTransferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    public&#13;
  {&#13;
    transferFrom(_from, _to, _tokenId);&#13;
    // solium-disable-next-line arg-overflow&#13;
    require(checkAndCallSafeTransfer(_from, _to, _tokenId, _data));&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether the given spender can transfer a given token ID&#13;
   * @param _spender address of the spender to query&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @return bool whether the msg.sender is approved for the given token ID,&#13;
   *  is an operator of the owner, or is the owner of the token&#13;
   */&#13;
  function isApprovedOrOwner(&#13;
    address _spender,&#13;
    uint256 _tokenId&#13;
  )&#13;
    internal&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    address owner = ownerOf(_tokenId);&#13;
    // Disable solium check because of&#13;
    // https://github.com/duaraghav8/Solium/issues/175&#13;
    // solium-disable-next-line operator-whitespace&#13;
    return (&#13;
      _spender == owner ||&#13;
      getApproved(_tokenId) == _spender ||&#13;
      isApprovedForAll(owner, _spender)&#13;
    );&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to mint a new token&#13;
   * Reverts if the given token ID already exists&#13;
   * @param _to The address that will own the minted token&#13;
   * @param _tokenId uint256 ID of the token to be minted by the msg.sender&#13;
   */&#13;
  function _mint(address _to, uint256 _tokenId) internal {&#13;
    require(_to != address(0));&#13;
    addTokenTo(_to, _tokenId);&#13;
    emit Transfer(address(0), _to, _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to burn a specific token&#13;
   * Reverts if the token does not exist&#13;
   * @param _tokenId uint256 ID of the token being burned by the msg.sender&#13;
   */&#13;
  function _burn(address _owner, uint256 _tokenId) internal {&#13;
    clearApproval(_owner, _tokenId);&#13;
    removeTokenFrom(_owner, _tokenId);&#13;
    emit Transfer(_owner, address(0), _tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to clear current approval of a given token ID&#13;
   * Reverts if the given address is not indeed the owner of the token&#13;
   * @param _owner owner of the token&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   */&#13;
  function clearApproval(address _owner, uint256 _tokenId) internal {&#13;
    require(ownerOf(_tokenId) == _owner);&#13;
    if (tokenApprovals[_tokenId] != address(0)) {&#13;
      tokenApprovals[_tokenId] = address(0);&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to add a token ID to the list of a given address&#13;
   * @param _to address representing the new owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address&#13;
   */&#13;
  function addTokenTo(address _to, uint256 _tokenId) internal {&#13;
    require(tokenOwner[_tokenId] == address(0));&#13;
    tokenOwner[_tokenId] = _to;&#13;
    ownedTokensCount[_to] = ownedTokensCount[_to].add(1);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to remove a token ID from the list of a given address&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address&#13;
   */&#13;
  function removeTokenFrom(address _from, uint256 _tokenId) internal {&#13;
    require(ownerOf(_tokenId) == _from);&#13;
    ownedTokensCount[_from] = ownedTokensCount[_from].sub(1);&#13;
    tokenOwner[_tokenId] = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to invoke `onERC721Received` on a target address&#13;
   * The call is not executed if the target address is not a contract&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _to target address that will receive the tokens&#13;
   * @param _tokenId uint256 ID of the token to be transferred&#13;
   * @param _data bytes optional data to send along with the call&#13;
   * @return whether the call correctly returned the expected magic value&#13;
   */&#13;
  function checkAndCallSafeTransfer(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId,&#13;
    bytes _data&#13;
  )&#13;
    internal&#13;
    returns (bool)&#13;
  {&#13;
    if (!_to.isContract()) {&#13;
      return true;&#13;
    }&#13;
    bytes4 retval = ERC721Receiver(_to).onERC721Received(&#13;
      msg.sender, _from, _tokenId, _data);&#13;
    return (retval == ERC721_RECEIVED);&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title Full ERC721 Token&#13;
 * This implementation includes all the required and some optional functionality of the ERC721 standard&#13;
 * Moreover, it includes approve all functionality using operator terminology&#13;
 * @dev see https://github.com/ethereum/EIPs/blob/master/EIPS/eip-721.md&#13;
 */&#13;
contract ERC721Token is SupportsInterfaceWithLookup, ERC721BasicToken, ERC721 {&#13;
&#13;
  // Token name&#13;
  string internal name_;&#13;
&#13;
  // Token symbol&#13;
  string internal symbol_;&#13;
&#13;
  // Mapping from owner to list of owned token IDs&#13;
  mapping(address =&gt; uint256[]) internal ownedTokens;&#13;
&#13;
  // Mapping from token ID to index of the owner tokens list&#13;
  mapping(uint256 =&gt; uint256) internal ownedTokensIndex;&#13;
&#13;
  // Array with all token ids, used for enumeration&#13;
  uint256[] internal allTokens;&#13;
&#13;
  // Mapping from token id to position in the allTokens array&#13;
  mapping(uint256 =&gt; uint256) internal allTokensIndex;&#13;
&#13;
  // Optional mapping for token URIs&#13;
  mapping(uint256 =&gt; string) internal tokenURIs;&#13;
&#13;
  /**&#13;
   * @dev Constructor function&#13;
   */&#13;
  constructor(string _name, string _symbol) public {&#13;
    name_ = _name;&#13;
    symbol_ = _symbol;&#13;
&#13;
    // register the supported interfaces to conform to ERC721 via ERC165&#13;
    _registerInterface(InterfaceId_ERC721Enumerable);&#13;
    _registerInterface(InterfaceId_ERC721Metadata);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token name&#13;
   * @return string representing the token name&#13;
   */&#13;
  function name() external view returns (string) {&#13;
    return name_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token symbol&#13;
   * @return string representing the token symbol&#13;
   */&#13;
  function symbol() external view returns (string) {&#13;
    return symbol_;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns an URI for a given token ID&#13;
   * Throws if the token ID does not exist. May return an empty string.&#13;
   * @param _tokenId uint256 ID of the token to query&#13;
   */&#13;
  function tokenURI(uint256 _tokenId) public view returns (string) {&#13;
    require(exists(_tokenId));&#13;
    return tokenURIs[_tokenId];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token ID at a given index of the tokens list of the requested owner&#13;
   * @param _owner address owning the tokens list to be accessed&#13;
   * @param _index uint256 representing the index to be accessed of the requested tokens list&#13;
   * @return uint256 token ID at the given index of the tokens list owned by the requested address&#13;
   */&#13;
  function tokenOfOwnerByIndex(&#13;
    address _owner,&#13;
    uint256 _index&#13;
  )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    require(_index &lt; balanceOf(_owner));&#13;
    return ownedTokens[_owner][_index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the total amount of tokens stored by the contract&#13;
   * @return uint256 representing the total amount of tokens&#13;
   */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return allTokens.length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Gets the token ID at a given index of all the tokens in this contract&#13;
   * Reverts if the index is greater or equal to the total number of tokens&#13;
   * @param _index uint256 representing the index to be accessed of the tokens list&#13;
   * @return uint256 token ID at the given index of the tokens list&#13;
   */&#13;
  function tokenByIndex(uint256 _index) public view returns (uint256) {&#13;
    require(_index &lt; totalSupply());&#13;
    return allTokens[_index];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to set the token URI for a given token&#13;
   * Reverts if the token ID does not exist&#13;
   * @param _tokenId uint256 ID of the token to set its URI&#13;
   * @param _uri string URI to assign&#13;
   */&#13;
  function _setTokenURI(uint256 _tokenId, string _uri) internal {&#13;
    require(exists(_tokenId));&#13;
    tokenURIs[_tokenId] = _uri;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to add a token ID to the list of a given address&#13;
   * @param _to address representing the new owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be added to the tokens list of the given address&#13;
   */&#13;
  function addTokenTo(address _to, uint256 _tokenId) internal {&#13;
    super.addTokenTo(_to, _tokenId);&#13;
    uint256 length = ownedTokens[_to].length;&#13;
    ownedTokens[_to].push(_tokenId);&#13;
    ownedTokensIndex[_tokenId] = length;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to remove a token ID from the list of a given address&#13;
   * @param _from address representing the previous owner of the given token ID&#13;
   * @param _tokenId uint256 ID of the token to be removed from the tokens list of the given address&#13;
   */&#13;
  function removeTokenFrom(address _from, uint256 _tokenId) internal {&#13;
    super.removeTokenFrom(_from, _tokenId);&#13;
&#13;
    // To prevent a gap in the array, we store the last token in the index of the token to delete, and&#13;
    // then delete the last slot.&#13;
    uint256 tokenIndex = ownedTokensIndex[_tokenId];&#13;
    uint256 lastTokenIndex = ownedTokens[_from].length.sub(1);&#13;
    uint256 lastToken = ownedTokens[_from][lastTokenIndex];&#13;
&#13;
    ownedTokens[_from][tokenIndex] = lastToken;&#13;
    // This also deletes the contents at the last position of the array&#13;
    ownedTokens[_from].length--;&#13;
&#13;
    // Note that this will handle single-element arrays. In that case, both tokenIndex and lastTokenIndex are going to&#13;
    // be zero. Then we can make sure that we will remove _tokenId from the ownedTokens list since we are first swapping&#13;
    // the lastToken to the first position, and then dropping the element placed in the last position of the list&#13;
&#13;
    ownedTokensIndex[_tokenId] = 0;&#13;
    ownedTokensIndex[lastToken] = tokenIndex;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to mint a new token&#13;
   * Reverts if the given token ID already exists&#13;
   * @param _to address the beneficiary that will own the minted token&#13;
   * @param _tokenId uint256 ID of the token to be minted by the msg.sender&#13;
   */&#13;
  function _mint(address _to, uint256 _tokenId) internal {&#13;
    super._mint(_to, _tokenId);&#13;
&#13;
    allTokensIndex[_tokenId] = allTokens.length;&#13;
    allTokens.push(_tokenId);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function to burn a specific token&#13;
   * Reverts if the token does not exist&#13;
   * @param _owner owner of the token to burn&#13;
   * @param _tokenId uint256 ID of the token being burned by the msg.sender&#13;
   */&#13;
  function _burn(address _owner, uint256 _tokenId) internal {&#13;
    super._burn(_owner, _tokenId);&#13;
&#13;
    // Clear metadata (if any)&#13;
    if (bytes(tokenURIs[_tokenId]).length != 0) {&#13;
      delete tokenURIs[_tokenId];&#13;
    }&#13;
&#13;
    // Reorg all tokens array&#13;
    uint256 tokenIndex = allTokensIndex[_tokenId];&#13;
    uint256 lastTokenIndex = allTokens.length.sub(1);&#13;
    uint256 lastToken = allTokens[lastTokenIndex];&#13;
&#13;
    allTokens[tokenIndex] = lastToken;&#13;
    allTokens[lastTokenIndex] = 0;&#13;
&#13;
    allTokens.length--;&#13;
    allTokensIndex[_tokenId] = 0;&#13;
    allTokensIndex[lastToken] = tokenIndex;&#13;
  }&#13;
&#13;
}&#13;
&#13;
&#13;
/**&#13;
 * @title ERC20Basic&#13;
 * @dev Simpler version of ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/179&#13;
 */&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
&#13;
contract TokenPool {&#13;
    ERC20Basic public token;&#13;
&#13;
    modifier poolReady {&#13;
        require(token != address(0));&#13;
        _;&#13;
    }&#13;
&#13;
    function setToken(ERC20Basic newToken) public {&#13;
        require(token == address(0));&#13;
&#13;
        token = newToken;&#13;
    }&#13;
&#13;
    function balance() view public returns (uint256) {&#13;
        return token.balanceOf(this);&#13;
    }&#13;
&#13;
    function transferTo(address dst, uint256 amount) internal returns (bool) {&#13;
        return token.transfer(dst, amount);&#13;
    }&#13;
&#13;
    function getFrom() view public returns (address) {&#13;
        return this;&#13;
    }&#13;
}&#13;
&#13;
&#13;
contract CarToken is ERC721Token, Ownable {&#13;
    using strings for *;&#13;
    &#13;
    address factory;&#13;
&#13;
    /*&#13;
    * Car Types:&#13;
    * 0 - Unknown&#13;
    * 1 - SUV&#13;
    * 2 - Truck&#13;
    * 3 - Hovercraft&#13;
    * 4 - Tank&#13;
    * 5 - Lambo&#13;
    * 6 - Buggy&#13;
    * 7 - midgrade type 2&#13;
    * 8 - midgrade type 3&#13;
    * 9 - Hatchback&#13;
    * 10 - regular type 2&#13;
    * 11 - regular type 3&#13;
    */&#13;
    uint public constant UNKNOWN_TYPE = 0;&#13;
    uint public constant SUV_TYPE = 1;&#13;
    uint public constant TANKER_TYPE = 2;&#13;
    uint public constant HOVERCRAFT_TYPE = 3;&#13;
    uint public constant TANK_TYPE = 4;&#13;
    uint public constant LAMBO_TYPE = 5;&#13;
    uint public constant DUNE_BUGGY = 6;&#13;
    uint public constant MIDGRADE_TYPE2 = 7;&#13;
    uint public constant MIDGRADE_TYPE3 = 8;&#13;
    uint public constant HATCHBACK = 9;&#13;
    uint public constant REGULAR_TYPE2 = 10;&#13;
    uint public constant REGULAR_TYPE3 = 11;&#13;
    &#13;
    string public constant METADATA_URL = "https://vault.warriders.com/";&#13;
    &#13;
    //Number of premium type cars&#13;
    uint public PREMIUM_TYPE_COUNT = 5;&#13;
    //Number of midgrade type cars&#13;
    uint public MIDGRADE_TYPE_COUNT = 3;&#13;
    //Number of regular type cars&#13;
    uint public REGULAR_TYPE_COUNT = 3;&#13;
&#13;
    mapping(uint256 =&gt; uint256) public maxBznTankSizeOfPremiumCarWithIndex;&#13;
    mapping(uint256 =&gt; uint256) public maxBznTankSizeOfMidGradeCarWithIndex;&#13;
    mapping(uint256 =&gt; uint256) public maxBznTankSizeOfRegularCarWithIndex;&#13;
&#13;
    /**&#13;
     * Whether any given car (tokenId) is special&#13;
     */&#13;
    mapping(uint256 =&gt; bool) public isSpecial;&#13;
    /**&#13;
     * The type of any given car (tokenId)&#13;
     */&#13;
    mapping(uint256 =&gt; uint) public carType;&#13;
    /**&#13;
     * The total supply for any given type (int)&#13;
     */&#13;
    mapping(uint =&gt; uint256) public carTypeTotalSupply;&#13;
    /**&#13;
     * The current supply for any given type (int)&#13;
     */&#13;
    mapping(uint =&gt; uint256) public carTypeSupply;&#13;
    /**&#13;
     * Whether any given type (int) is special&#13;
     */&#13;
    mapping(uint =&gt; bool) public isTypeSpecial;&#13;
&#13;
    /**&#13;
    * How much BZN any given car (tokenId) can hold&#13;
    */&#13;
    mapping(uint256 =&gt; uint256) public tankSizes;&#13;
    &#13;
    /**&#13;
     * Given any car type (uint), get the max tank size for that type (uint256)&#13;
     */&#13;
    mapping(uint =&gt; uint256) public maxTankSizes;&#13;
    &#13;
    mapping (uint =&gt; uint[]) public premiumTotalSupplyForCar;&#13;
    mapping (uint =&gt; uint[]) public midGradeTotalSupplyForCar;&#13;
    mapping (uint =&gt; uint[]) public regularTotalSupplyForCar;&#13;
&#13;
    modifier onlyFactory {&#13;
        require(msg.sender == factory, "Not authorized");&#13;
        _;&#13;
    }&#13;
&#13;
    constructor(address factoryAddress) public ERC721Token("WarRiders", "WR") {&#13;
        factory = factoryAddress;&#13;
&#13;
        carTypeTotalSupply[UNKNOWN_TYPE] = 0; //Unknown&#13;
        carTypeTotalSupply[SUV_TYPE] = 20000; //SUV&#13;
        carTypeTotalSupply[TANKER_TYPE] = 9000; //Tanker&#13;
        carTypeTotalSupply[HOVERCRAFT_TYPE] = 600; //Hovercraft&#13;
        carTypeTotalSupply[TANK_TYPE] = 300; //Tank&#13;
        carTypeTotalSupply[LAMBO_TYPE] = 100; //Lambo&#13;
        carTypeTotalSupply[DUNE_BUGGY] = 40000; //migrade type 1&#13;
        carTypeTotalSupply[MIDGRADE_TYPE2] = 50000; //midgrade type 2&#13;
        carTypeTotalSupply[MIDGRADE_TYPE3] = 60000; //midgrade type 3&#13;
        carTypeTotalSupply[HATCHBACK] = 200000; //regular type 1&#13;
        carTypeTotalSupply[REGULAR_TYPE2] = 300000; //regular type 2&#13;
        carTypeTotalSupply[REGULAR_TYPE3] = 500000; //regular type 3&#13;
        &#13;
        maxTankSizes[SUV_TYPE] = 200; //SUV tank size&#13;
        maxTankSizes[TANKER_TYPE] = 450; //Tanker tank size&#13;
        maxTankSizes[HOVERCRAFT_TYPE] = 300; //Hovercraft tank size&#13;
        maxTankSizes[TANK_TYPE] = 200; //Tank tank size&#13;
        maxTankSizes[LAMBO_TYPE] = 250; //Lambo tank size&#13;
        maxTankSizes[DUNE_BUGGY] = 120; //migrade type 1 tank size&#13;
        maxTankSizes[MIDGRADE_TYPE2] = 110; //midgrade type 2 tank size&#13;
        maxTankSizes[MIDGRADE_TYPE3] = 100; //midgrade type 3 tank size&#13;
        maxTankSizes[HATCHBACK] = 90; //regular type 1 tank size&#13;
        maxTankSizes[REGULAR_TYPE2] = 70; //regular type 2 tank size&#13;
        maxTankSizes[REGULAR_TYPE3] = 40; //regular type 3 tank size&#13;
        &#13;
        maxBznTankSizeOfPremiumCarWithIndex[1] = 200; //SUV tank size&#13;
        maxBznTankSizeOfPremiumCarWithIndex[2] = 450; //Tanker tank size&#13;
        maxBznTankSizeOfPremiumCarWithIndex[3] = 300; //Hovercraft tank size&#13;
        maxBznTankSizeOfPremiumCarWithIndex[4] = 200; //Tank tank size&#13;
        maxBznTankSizeOfPremiumCarWithIndex[5] = 250; //Lambo tank size&#13;
        maxBznTankSizeOfMidGradeCarWithIndex[1] = 100; //migrade type 1 tank size&#13;
        maxBznTankSizeOfMidGradeCarWithIndex[2] = 110; //midgrade type 2 tank size&#13;
        maxBznTankSizeOfMidGradeCarWithIndex[3] = 120; //midgrade type 3 tank size&#13;
        maxBznTankSizeOfRegularCarWithIndex[1] = 40; //regular type 1 tank size&#13;
        maxBznTankSizeOfRegularCarWithIndex[2] = 70; //regular type 2 tank size&#13;
        maxBznTankSizeOfRegularCarWithIndex[3] = 90; //regular type 3 tank size&#13;
&#13;
        isTypeSpecial[HOVERCRAFT_TYPE] = true;&#13;
        isTypeSpecial[TANK_TYPE] = true;&#13;
        isTypeSpecial[LAMBO_TYPE] = true;&#13;
    }&#13;
&#13;
    function isCarSpecial(uint256 tokenId) public view returns (bool) {&#13;
        return isSpecial[tokenId];&#13;
    }&#13;
&#13;
    function getCarType(uint256 tokenId) public view returns (uint) {&#13;
        return carType[tokenId];&#13;
    }&#13;
&#13;
    function mint(uint256 _tokenId, string _metadata, uint cType, uint256 tankSize, address newOwner) public onlyFactory {&#13;
        //Since any invalid car type would have a total supply of 0 &#13;
        //This require will also enforce that a valid cType is given&#13;
        require(carTypeSupply[cType] &lt; carTypeTotalSupply[cType], "This type has reached total supply");&#13;
        &#13;
        //This will enforce the tank size is less than the max&#13;
        require(tankSize &lt;= maxTankSizes[cType], "Tank size provided bigger than max for this type");&#13;
        &#13;
        if (isPremium(cType)) {&#13;
            premiumTotalSupplyForCar[cType].push(_tokenId);&#13;
        } else if (isMidGrade(cType)) {&#13;
            midGradeTotalSupplyForCar[cType].push(_tokenId);&#13;
        } else {&#13;
            regularTotalSupplyForCar[cType].push(_tokenId);&#13;
        }&#13;
&#13;
        super._mint(newOwner, _tokenId);&#13;
        super._setTokenURI(_tokenId, _metadata);&#13;
&#13;
        carType[_tokenId] = cType;&#13;
        isSpecial[_tokenId] = isTypeSpecial[cType];&#13;
        carTypeSupply[cType] = carTypeSupply[cType] + 1;&#13;
        tankSizes[_tokenId] = tankSize;&#13;
    }&#13;
    &#13;
    function isPremium(uint cType) public pure returns (bool) {&#13;
        return cType == SUV_TYPE || cType == TANKER_TYPE || cType == HOVERCRAFT_TYPE || cType == TANK_TYPE || cType == LAMBO_TYPE;&#13;
    }&#13;
    &#13;
    function isMidGrade(uint cType) public pure returns (bool) {&#13;
        return cType == DUNE_BUGGY || cType == MIDGRADE_TYPE2 || cType == MIDGRADE_TYPE3;&#13;
    }&#13;
    &#13;
    function isRegular(uint cType) public pure returns (bool) {&#13;
        return cType == HATCHBACK || cType == REGULAR_TYPE2 || cType == REGULAR_TYPE3;&#13;
    }&#13;
    &#13;
    function getTotalSupplyForType(uint cType) public view returns (uint256) {&#13;
        return carTypeSupply[cType];&#13;
    }&#13;
    &#13;
    function getPremiumCarsForVariant(uint variant) public view returns (uint[]) {&#13;
        return premiumTotalSupplyForCar[variant];&#13;
    }&#13;
    &#13;
    function getMidgradeCarsForVariant(uint variant) public view returns (uint[]) {&#13;
        return midGradeTotalSupplyForCar[variant];&#13;
    }&#13;
&#13;
    function getRegularCarsForVariant(uint variant) public view returns (uint[]) {&#13;
        return regularTotalSupplyForCar[variant];&#13;
    }&#13;
&#13;
    function getPremiumCarSupply(uint variant) public view returns (uint) {&#13;
        return premiumTotalSupplyForCar[variant].length;&#13;
    }&#13;
    &#13;
    function getMidgradeCarSupply(uint variant) public view returns (uint) {&#13;
        return midGradeTotalSupplyForCar[variant].length;&#13;
    }&#13;
&#13;
    function getRegularCarSupply(uint variant) public view returns (uint) {&#13;
        return regularTotalSupplyForCar[variant].length;&#13;
    }&#13;
    &#13;
    function exists(uint256 _tokenId) public view returns (bool) {&#13;
        return super.exists(_tokenId);&#13;
    }&#13;
}&#13;
&#13;
&#13;
contract CarFactory is Ownable {&#13;
    uint256 public constant MAX_CARS = 30000 + 150000 + 1000000;&#13;
    uint256 public mintedCars = 0;&#13;
&#13;
    mapping(uint256 =&gt; uint256) public tankSizes;&#13;
    mapping(uint256 =&gt; uint) public savedTypes;&#13;
    mapping(uint256 =&gt; bool) public giveawayCar;&#13;
&#13;
    mapping(uint =&gt; uint256[]) public availableIds;&#13;
    mapping(uint =&gt; uint256) public idCursor;&#13;
}&#13;
&#13;
contract GamePool is Migratable, TokenPool, Ownable {&#13;
    &#13;
    mapping (uint256 =&gt; bool) public BZNclaimed;&#13;
    &#13;
    address internal factoryAdr;&#13;
    &#13;
&#13;
    CarToken public carToken;&#13;
    &#13;
    uint8 public constant decimals = 18;&#13;
    uint256 public constant FILL_LIMIT = 160;&#13;
    &#13;
    event Redeem(address indexed user, uint256 indexed _tokenId, uint256 amount);&#13;
    &#13;
    &#13;
    function initialize(address tokenAdr,&#13;
                        address carAdr,&#13;
                        address factory)&#13;
                        isInitializer("GamePool", "0.1") public {&#13;
        ERC20Basic token = ERC20Basic(tokenAdr);&#13;
        super.setToken(token);&#13;
        &#13;
        CarToken erc721Token = CarToken(carAdr);&#13;
        carToken = erc721Token;&#13;
        &#13;
        factoryAdr = factory;&#13;
    }&#13;
    &#13;
    function _preorderFill() public {&#13;
        CarFactory factory = CarFactory(factoryAdr);&#13;
        &#13;
        address user = msg.sender;&#13;
        uint256 carCount = carToken.balanceOf(user);&#13;
        &#13;
        uint256 total = 0;&#13;
        uint256 fillCount = 0;&#13;
        &#13;
        for (uint256 i = 0; i &lt; carCount; i++) {&#13;
            &#13;
            if (fillCount &gt;= FILL_LIMIT) break;&#13;
            &#13;
            uint256 currentCar = carToken.tokenOfOwnerByIndex(user, i);&#13;
            uint cType = carToken.getCarType(currentCar);&#13;
            &#13;
            if (BZNclaimed[currentCar]) continue;&#13;
            &#13;
            if (!carToken.isPremium(cType)) {&#13;
                if (!factory.giveawayCar(currentCar)) continue;&#13;
            }&#13;
            &#13;
            uint256 amount = carToken.tankSizes(currentCar) * (10 ** uint256(decimals));&#13;
            &#13;
            total = total + amount;&#13;
            BZNclaimed[currentCar] = true;&#13;
            fillCount++;&#13;
        }&#13;
        &#13;
        if (total &gt; 0) {&#13;
            transferTo(user, total);&#13;
            &#13;
            emit Redeem(user, currentCar, amount);&#13;
        }&#13;
    }&#13;
}
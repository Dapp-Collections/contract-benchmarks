pragma solidity ^0.4.21;

// File: @gnosis.pm/util-contracts/contracts/Math.sol

/// @title Math library - Allows calculation of logarithmic and exponential functions
/// @author Alan Lu - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8cede0ede2a2e0f9ccebe2e3ffe5ffa2fce1">[email protected]</a>&gt;&#13;
/// @author Stefan George - &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b5c6c1d0d3d4dbf5d2dbdac6dcc69bc5d8">[email protected]</a>&gt;&#13;
library Math {&#13;
&#13;
    /*&#13;
     *  Constants&#13;
     */&#13;
    // This is equal to 1 in our calculations&#13;
    uint public constant ONE =  0x10000000000000000;&#13;
    uint public constant LN2 = 0xb17217f7d1cf79ac;&#13;
    uint public constant LOG2_E = 0x171547652b82fe177;&#13;
&#13;
    /*&#13;
     *  Public functions&#13;
     */&#13;
    /// @dev Returns natural exponential function value of given x&#13;
    /// @param x x&#13;
    /// @return e**x&#13;
    function exp(int x)&#13;
        public&#13;
        pure&#13;
        returns (uint)&#13;
    {&#13;
        // revert if x is &gt; MAX_POWER, where&#13;
        // MAX_POWER = int(mp.floor(mp.log(mpf(2**256 - 1) / ONE) * ONE))&#13;
        require(x &lt;= 2454971259878909886679);&#13;
        // return 0 if exp(x) is tiny, using&#13;
        // MIN_POWER = int(mp.floor(mp.log(mpf(1) / ONE) * ONE))&#13;
        if (x &lt; -818323753292969962227)&#13;
            return 0;&#13;
        // Transform so that e^x -&gt; 2^x&#13;
        x = x * int(ONE) / int(LN2);&#13;
        // 2^x = 2^whole(x) * 2^frac(x)&#13;
        //       ^^^^^^^^^^ is a bit shift&#13;
        // so Taylor expand on z = frac(x)&#13;
        int shift;&#13;
        uint z;&#13;
        if (x &gt;= 0) {&#13;
            shift = x / int(ONE);&#13;
            z = uint(x % int(ONE));&#13;
        }&#13;
        else {&#13;
            shift = x / int(ONE) - 1;&#13;
            z = ONE - uint(-x % int(ONE));&#13;
        }&#13;
        // 2^x = 1 + (ln 2) x + (ln 2)^2/2! x^2 + ...&#13;
        //&#13;
        // Can generate the z coefficients using mpmath and the following lines&#13;
        // &gt;&gt;&gt; from mpmath import mp&#13;
        // &gt;&gt;&gt; mp.dps = 100&#13;
        // &gt;&gt;&gt; ONE =  0x10000000000000000&#13;
        // &gt;&gt;&gt; print('\n'.join(hex(int(mp.log(2)**i / mp.factorial(i) * ONE)) for i in range(1, 7)))&#13;
        // 0xb17217f7d1cf79ab&#13;
        // 0x3d7f7bff058b1d50&#13;
        // 0xe35846b82505fc5&#13;
        // 0x276556df749cee5&#13;
        // 0x5761ff9e299cc4&#13;
        // 0xa184897c363c3&#13;
        uint zpow = z;&#13;
        uint result = ONE;&#13;
        result += 0xb17217f7d1cf79ab * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x3d7f7bff058b1d50 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0xe35846b82505fc5 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x276556df749cee5 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x5761ff9e299cc4 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0xa184897c363c3 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0xffe5fe2c4586 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x162c0223a5c8 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1b5253d395e * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1e4cf5158b * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1e8cac735 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1c3bd650 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x1816193 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x131496 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0xe1b7 * zpow / ONE;&#13;
        zpow = zpow * z / ONE;&#13;
        result += 0x9c7 * zpow / ONE;&#13;
        if (shift &gt;= 0) {&#13;
            if (result &gt;&gt; (256-shift) &gt; 0)&#13;
                return (2**256-1);&#13;
            return result &lt;&lt; shift;&#13;
        }&#13;
        else&#13;
            return result &gt;&gt; (-shift);&#13;
    }&#13;
&#13;
    /// @dev Returns natural logarithm value of given x&#13;
    /// @param x x&#13;
    /// @return ln(x)&#13;
    function ln(uint x)&#13;
        public&#13;
        pure&#13;
        returns (int)&#13;
    {&#13;
        require(x &gt; 0);&#13;
        // binary search for floor(log2(x))&#13;
        int ilog2 = floorLog2(x);&#13;
        int z;&#13;
        if (ilog2 &lt; 0)&#13;
            z = int(x &lt;&lt; uint(-ilog2));&#13;
        else&#13;
            z = int(x &gt;&gt; uint(ilog2));&#13;
        // z = x * 2^-⌊log₂x⌋&#13;
        // so 1 &lt;= z &lt; 2&#13;
        // and ln z = ln x - ⌊log₂x⌋/log₂e&#13;
        // so just compute ln z using artanh series&#13;
        // and calculate ln x from that&#13;
        int term = (z - int(ONE)) * int(ONE) / (z + int(ONE));&#13;
        int halflnz = term;&#13;
        int termpow = term * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 3;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 5;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 7;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 9;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 11;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 13;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 15;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 17;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 19;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 21;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 23;&#13;
        termpow = termpow * term / int(ONE) * term / int(ONE);&#13;
        halflnz += termpow / 25;&#13;
        return (ilog2 * int(ONE)) * int(ONE) / int(LOG2_E) + 2 * halflnz;&#13;
    }&#13;
&#13;
    /// @dev Returns base 2 logarithm value of given x&#13;
    /// @param x x&#13;
    /// @return logarithmic value&#13;
    function floorLog2(uint x)&#13;
        public&#13;
        pure&#13;
        returns (int lo)&#13;
    {&#13;
        lo = -64;&#13;
        int hi = 193;&#13;
        // I use a shift here instead of / 2 because it floors instead of rounding towards 0&#13;
        int mid = (hi + lo) &gt;&gt; 1;&#13;
        while((lo + 1) &lt; hi) {&#13;
            if (mid &lt; 0 &amp;&amp; x &lt;&lt; uint(-mid) &lt; ONE || mid &gt;= 0 &amp;&amp; x &gt;&gt; uint(mid) &lt; ONE)&#13;
                hi = mid;&#13;
            else&#13;
                lo = mid;&#13;
            mid = (hi + lo) &gt;&gt; 1;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Returns maximum of an array&#13;
    /// @param nums Numbers to look through&#13;
    /// @return Maximum number&#13;
    function max(int[] nums)&#13;
        public&#13;
        pure&#13;
        returns (int maxNum)&#13;
    {&#13;
        require(nums.length &gt; 0);&#13;
        maxNum = -2**255;&#13;
        for (uint i = 0; i &lt; nums.length; i++)&#13;
            if (nums[i] &gt; maxNum)&#13;
                maxNum = nums[i];&#13;
    }&#13;
&#13;
    /// @dev Returns whether an add operation causes an overflow&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Did no overflow occur?&#13;
    function safeToAdd(uint a, uint b)&#13;
        internal&#13;
        pure&#13;
        returns (bool)&#13;
    {&#13;
        return a + b &gt;= a;&#13;
    }&#13;
&#13;
    /// @dev Returns whether a subtraction operation causes an underflow&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Did no underflow occur?&#13;
    function safeToSub(uint a, uint b)&#13;
        internal&#13;
        pure&#13;
        returns (bool)&#13;
    {&#13;
        return a &gt;= b;&#13;
    }&#13;
&#13;
    /// @dev Returns whether a multiply operation causes an overflow&#13;
    /// @param a First factor&#13;
    /// @param b Second factor&#13;
    /// @return Did no overflow occur?&#13;
    function safeToMul(uint a, uint b)&#13;
        internal&#13;
        pure&#13;
        returns (bool)&#13;
    {&#13;
        return b == 0 || a * b / b == a;&#13;
    }&#13;
&#13;
    /// @dev Returns sum if no overflow occurred&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Sum&#13;
    function add(uint a, uint b)&#13;
        internal&#13;
        pure&#13;
        returns (uint)&#13;
    {&#13;
        require(safeToAdd(a, b));&#13;
        return a + b;&#13;
    }&#13;
&#13;
    /// @dev Returns difference if no overflow occurred&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Difference&#13;
    function sub(uint a, uint b)&#13;
        internal&#13;
        pure&#13;
        returns (uint)&#13;
    {&#13;
        require(safeToSub(a, b));&#13;
        return a - b;&#13;
    }&#13;
&#13;
    /// @dev Returns product if no overflow occurred&#13;
    /// @param a First factor&#13;
    /// @param b Second factor&#13;
    /// @return Product&#13;
    function mul(uint a, uint b)&#13;
        internal&#13;
        pure&#13;
        returns (uint)&#13;
    {&#13;
        require(safeToMul(a, b));&#13;
        return a * b;&#13;
    }&#13;
&#13;
    /// @dev Returns whether an add operation causes an overflow&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Did no overflow occur?&#13;
    function safeToAdd(int a, int b)&#13;
        internal&#13;
        pure&#13;
        returns (bool)&#13;
    {&#13;
        return (b &gt;= 0 &amp;&amp; a + b &gt;= a) || (b &lt; 0 &amp;&amp; a + b &lt; a);&#13;
    }&#13;
&#13;
    /// @dev Returns whether a subtraction operation causes an underflow&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Did no underflow occur?&#13;
    function safeToSub(int a, int b)&#13;
        internal&#13;
        pure&#13;
        returns (bool)&#13;
    {&#13;
        return (b &gt;= 0 &amp;&amp; a - b &lt;= a) || (b &lt; 0 &amp;&amp; a - b &gt; a);&#13;
    }&#13;
&#13;
    /// @dev Returns whether a multiply operation causes an overflow&#13;
    /// @param a First factor&#13;
    /// @param b Second factor&#13;
    /// @return Did no overflow occur?&#13;
    function safeToMul(int a, int b)&#13;
        internal&#13;
        pure&#13;
        returns (bool)&#13;
    {&#13;
        return (b == 0) || (a * b / b == a);&#13;
    }&#13;
&#13;
    /// @dev Returns sum if no overflow occurred&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Sum&#13;
    function add(int a, int b)&#13;
        internal&#13;
        pure&#13;
        returns (int)&#13;
    {&#13;
        require(safeToAdd(a, b));&#13;
        return a + b;&#13;
    }&#13;
&#13;
    /// @dev Returns difference if no overflow occurred&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Difference&#13;
    function sub(int a, int b)&#13;
        internal&#13;
        pure&#13;
        returns (int)&#13;
    {&#13;
        require(safeToSub(a, b));&#13;
        return a - b;&#13;
    }&#13;
&#13;
    /// @dev Returns product if no overflow occurred&#13;
    /// @param a First factor&#13;
    /// @param b Second factor&#13;
    /// @return Product&#13;
    function mul(int a, int b)&#13;
        internal&#13;
        pure&#13;
        returns (int)&#13;
    {&#13;
        require(safeToMul(a, b));&#13;
        return a * b;&#13;
    }&#13;
}&#13;
&#13;
// File: @gnosis.pm/util-contracts/contracts/Proxy.sol&#13;
&#13;
/// @title Proxied - indicates that a contract will be proxied. Also defines storage requirements for Proxy.&#13;
/// @author Alan Lu - &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f7969b9699b7909998849e84d9879a">[email protected]</a>&gt;&#13;
contract Proxied {&#13;
    address public masterCopy;&#13;
}&#13;
&#13;
/// @title Proxy - Generic proxy contract allows to execute all transactions applying the code of a master contract.&#13;
/// @author Stefan George - &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d0a3a4b5b6b1be90b7bebfa3b9a3fea0bd">[email protected]</a>&gt;&#13;
contract Proxy is Proxied {&#13;
    /// @dev Constructor function sets address of master copy contract.&#13;
    /// @param _masterCopy Master copy address.&#13;
    function Proxy(address _masterCopy)&#13;
        public&#13;
    {&#13;
        require(_masterCopy != 0);&#13;
        masterCopy = _masterCopy;&#13;
    }&#13;
&#13;
    /// @dev Fallback function forwards all transactions and returns all received return data.&#13;
    function ()&#13;
        external&#13;
        payable&#13;
    {&#13;
        address _masterCopy = masterCopy;&#13;
        assembly {&#13;
            calldatacopy(0, 0, calldatasize())&#13;
            let success := delegatecall(not(0), _masterCopy, 0, calldatasize(), 0, 0)&#13;
            returndatacopy(0, 0, returndatasize())&#13;
            switch success&#13;
            case 0 { revert(0, returndatasize()) }&#13;
            default { return(0, returndatasize()) }&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
// File: @gnosis.pm/util-contracts/contracts/Token.sol&#13;
&#13;
/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20-token-standard.md&#13;
pragma solidity ^0.4.21;&#13;
&#13;
&#13;
/// @title Abstract token contract - Functions to be implemented by token contracts&#13;
contract Token {&#13;
&#13;
    /*&#13;
     *  Events&#13;
     */&#13;
    event Transfer(address indexed from, address indexed to, uint value);&#13;
    event Approval(address indexed owner, address indexed spender, uint value);&#13;
&#13;
    /*&#13;
     *  Public functions&#13;
     */&#13;
    function transfer(address to, uint value) public returns (bool);&#13;
    function transferFrom(address from, address to, uint value) public returns (bool);&#13;
    function approve(address spender, uint value) public returns (bool);&#13;
    function balanceOf(address owner) public view returns (uint);&#13;
    function allowance(address owner, address spender) public view returns (uint);&#13;
    function totalSupply() public view returns (uint);&#13;
}&#13;
&#13;
// File: @gnosis.pm/util-contracts/contracts/StandardToken.sol&#13;
&#13;
contract StandardTokenData {&#13;
&#13;
    /*&#13;
     *  Storage&#13;
     */&#13;
    mapping (address =&gt; uint) balances;&#13;
    mapping (address =&gt; mapping (address =&gt; uint)) allowances;&#13;
    uint totalTokens;&#13;
}&#13;
&#13;
/// @title Standard token contract with overflow protection&#13;
contract StandardToken is Token, StandardTokenData {&#13;
    using Math for *;&#13;
&#13;
    /*&#13;
     *  Public functions&#13;
     */&#13;
    /// @dev Transfers sender's tokens to a given address. Returns success&#13;
    /// @param to Address of token receiver&#13;
    /// @param value Number of tokens to transfer&#13;
    /// @return Was transfer successful?&#13;
    function transfer(address to, uint value)&#13;
        public&#13;
        returns (bool)&#13;
    {&#13;
        if (   !balances[msg.sender].safeToSub(value)&#13;
            || !balances[to].safeToAdd(value))&#13;
            return false;&#13;
        balances[msg.sender] -= value;&#13;
        balances[to] += value;&#13;
        emit Transfer(msg.sender, to, value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev Allows allowed third party to transfer tokens from one address to another. Returns success&#13;
    /// @param from Address from where tokens are withdrawn&#13;
    /// @param to Address to where tokens are sent&#13;
    /// @param value Number of tokens to transfer&#13;
    /// @return Was transfer successful?&#13;
    function transferFrom(address from, address to, uint value)&#13;
        public&#13;
        returns (bool)&#13;
    {&#13;
        if (   !balances[from].safeToSub(value)&#13;
            || !allowances[from][msg.sender].safeToSub(value)&#13;
            || !balances[to].safeToAdd(value))&#13;
            return false;&#13;
        balances[from] -= value;&#13;
        allowances[from][msg.sender] -= value;&#13;
        balances[to] += value;&#13;
        emit Transfer(from, to, value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev Sets approved amount of tokens for spender. Returns success&#13;
    /// @param spender Address of allowed account&#13;
    /// @param value Number of approved tokens&#13;
    /// @return Was approval successful?&#13;
    function approve(address spender, uint value)&#13;
        public&#13;
        returns (bool)&#13;
    {&#13;
        allowances[msg.sender][spender] = value;&#13;
        emit Approval(msg.sender, spender, value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev Returns number of allowed tokens for given address&#13;
    /// @param owner Address of token owner&#13;
    /// @param spender Address of token spender&#13;
    /// @return Remaining allowance for spender&#13;
    function allowance(address owner, address spender)&#13;
        public&#13;
        view&#13;
        returns (uint)&#13;
    {&#13;
        return allowances[owner][spender];&#13;
    }&#13;
&#13;
    /// @dev Returns number of tokens owned by given address&#13;
    /// @param owner Address of token owner&#13;
    /// @return Balance of owner&#13;
    function balanceOf(address owner)&#13;
        public&#13;
        view&#13;
        returns (uint)&#13;
    {&#13;
        return balances[owner];&#13;
    }&#13;
&#13;
    /// @dev Returns total supply of tokens&#13;
    /// @return Total supply&#13;
    function totalSupply()&#13;
        public&#13;
        view&#13;
        returns (uint)&#13;
    {&#13;
        return totalTokens;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/TokenFRT.sol&#13;
&#13;
/// @title Standard token contract with overflow protection&#13;
contract TokenFRT is StandardToken {&#13;
    string public constant symbol = "MGN";&#13;
    string public constant name = "Magnolia Token";&#13;
    uint8 public constant decimals = 18;&#13;
&#13;
    struct unlockedToken {&#13;
        uint amountUnlocked;&#13;
        uint withdrawalTime;&#13;
    }&#13;
&#13;
    /*&#13;
     *  Storage&#13;
     */&#13;
&#13;
    address public owner;&#13;
    address public minter;&#13;
&#13;
    // user =&gt; unlockedToken&#13;
    mapping (address =&gt; unlockedToken) public unlockedTokens;&#13;
&#13;
    // user =&gt; amount&#13;
    mapping (address =&gt; uint) public lockedTokenBalances;&#13;
&#13;
    /*&#13;
     *  Public functions&#13;
     */&#13;
&#13;
    function TokenFRT(&#13;
        address _owner&#13;
    )&#13;
        public&#13;
    {&#13;
        require(_owner != address(0));&#13;
        owner = _owner;&#13;
    }&#13;
&#13;
    // @dev allows to set the minter of Magnolia tokens once.&#13;
    // @param   _minter the minter of the Magnolia tokens, should be the DX-proxy&#13;
    function updateMinter(&#13;
        address _minter&#13;
    )&#13;
        public&#13;
    {&#13;
        require(msg.sender == owner);&#13;
        require(_minter != address(0));&#13;
&#13;
        minter = _minter;&#13;
    }&#13;
&#13;
    // @dev the intention is to set the owner as the DX-proxy, once it is deployed&#13;
    // Then only an update of the DX-proxy contract after a 30 days delay could change the minter again.&#13;
    function updateOwner(   &#13;
        address _owner&#13;
    )&#13;
        public&#13;
    {&#13;
        require(msg.sender == owner);&#13;
        require(_owner != address(0));&#13;
        owner = _owner;&#13;
    }&#13;
&#13;
    function mintTokens(&#13;
        address user,&#13;
        uint amount&#13;
    )&#13;
        public&#13;
    {&#13;
        require(msg.sender == minter);&#13;
&#13;
        lockedTokenBalances[user] = add(lockedTokenBalances[user], amount);&#13;
        totalTokens = add(totalTokens, amount);&#13;
    }&#13;
&#13;
    /// @dev Lock Token&#13;
    function lockTokens(&#13;
        uint amount&#13;
    )&#13;
        public&#13;
        returns (uint totalAmountLocked)&#13;
    {&#13;
        // Adjust amount by balance&#13;
        amount = min(amount, balances[msg.sender]);&#13;
        &#13;
        // Update state variables&#13;
        balances[msg.sender] = sub(balances[msg.sender], amount);&#13;
        lockedTokenBalances[msg.sender] = add(lockedTokenBalances[msg.sender], amount);&#13;
&#13;
        // Get return variable&#13;
        totalAmountLocked = lockedTokenBalances[msg.sender];&#13;
    }&#13;
&#13;
    function unlockTokens(&#13;
        uint amount&#13;
    )&#13;
        public&#13;
        returns (uint totalAmountUnlocked, uint withdrawalTime)&#13;
    {&#13;
        // Adjust amount by locked balances&#13;
        amount = min(amount, lockedTokenBalances[msg.sender]);&#13;
&#13;
        if (amount &gt; 0) {&#13;
            // Update state variables&#13;
            lockedTokenBalances[msg.sender] = sub(lockedTokenBalances[msg.sender], amount);&#13;
            unlockedTokens[msg.sender].amountUnlocked =  add(unlockedTokens[msg.sender].amountUnlocked, amount);&#13;
            unlockedTokens[msg.sender].withdrawalTime = now + 24 hours;&#13;
        }&#13;
&#13;
        // Get return variables&#13;
        totalAmountUnlocked = unlockedTokens[msg.sender].amountUnlocked;&#13;
        withdrawalTime = unlockedTokens[msg.sender].withdrawalTime;&#13;
    }&#13;
&#13;
    function withdrawUnlockedTokens()&#13;
        public&#13;
    {&#13;
        require(unlockedTokens[msg.sender].withdrawalTime &lt; now);&#13;
        balances[msg.sender] = add(balances[msg.sender], unlockedTokens[msg.sender].amountUnlocked);&#13;
        unlockedTokens[msg.sender].amountUnlocked = 0;&#13;
    }&#13;
&#13;
    function min(uint a, uint b) &#13;
        public&#13;
        pure&#13;
        returns (uint)&#13;
    {&#13;
        if (a &lt; b) {&#13;
            return a;&#13;
        } else {&#13;
            return b;&#13;
        }&#13;
    }&#13;
        /// @dev Returns whether an add operation causes an overflow&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Did no overflow occur?&#13;
    function safeToAdd(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        return a + b &gt;= a;&#13;
    }&#13;
&#13;
    /// @dev Returns whether a subtraction operation causes an underflow&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Did no underflow occur?&#13;
    function safeToSub(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (bool)&#13;
    {&#13;
        return a &gt;= b;&#13;
    }&#13;
&#13;
&#13;
    /// @dev Returns sum if no overflow occurred&#13;
    /// @param a First addend&#13;
    /// @param b Second addend&#13;
    /// @return Sum&#13;
    function add(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        require(safeToAdd(a, b));&#13;
        return a + b;&#13;
    }&#13;
&#13;
    /// @dev Returns difference if no overflow occurred&#13;
    /// @param a Minuend&#13;
    /// @param b Subtrahend&#13;
    /// @return Difference&#13;
    function sub(uint a, uint b)&#13;
        public&#13;
        constant&#13;
        returns (uint)&#13;
    {&#13;
        require(safeToSub(a, b));&#13;
        return a - b;&#13;
    }&#13;
}
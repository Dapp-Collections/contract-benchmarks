/* ==================================================================== */
/* Copyright (c) 2018 The ether.online Project.  All rights reserved.
/* 
/* https://ether.online  The first RPG game of blockchain 
/*  
/* authors <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bac8d3d9d1d2cfd4cedfc894c9d2dfd4faddd7dbd3d694d9d5d7">[email protected]</a>   &#13;
/*         <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5221213721273c363b3c3512353f333b3e7c313d3f">[email protected]</a>            &#13;
/* ==================================================================== */&#13;
&#13;
pragma solidity ^0.4.20;&#13;
&#13;
contract AccessAdmin {&#13;
    bool public isPaused = false;&#13;
    address public addrAdmin;  &#13;
&#13;
    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);&#13;
&#13;
    function AccessAdmin() public {&#13;
        addrAdmin = msg.sender;&#13;
    }  &#13;
&#13;
&#13;
    modifier onlyAdmin() {&#13;
        require(msg.sender == addrAdmin);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier whenNotPaused() {&#13;
        require(!isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier whenPaused {&#13;
        require(isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    function setAdmin(address _newAdmin) external onlyAdmin {&#13;
        require(_newAdmin != address(0));&#13;
        AdminTransferred(addrAdmin, _newAdmin);&#13;
        addrAdmin = _newAdmin;&#13;
    }&#13;
&#13;
    function doPause() external onlyAdmin whenNotPaused {&#13;
        isPaused = true;&#13;
    }&#13;
&#13;
    function doUnpause() external onlyAdmin whenPaused {&#13;
        isPaused = false;&#13;
    }&#13;
}&#13;
&#13;
contract AccessService is AccessAdmin {&#13;
    address public addrService;&#13;
    address public addrFinance;&#13;
&#13;
    modifier onlyService() {&#13;
        require(msg.sender == addrService);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyFinance() {&#13;
        require(msg.sender == addrFinance);&#13;
        _;&#13;
    }&#13;
&#13;
    function setService(address _newService) external {&#13;
        require(msg.sender == addrService || msg.sender == addrAdmin);&#13;
        require(_newService != address(0));&#13;
        addrService = _newService;&#13;
    }&#13;
&#13;
    function setFinance(address _newFinance) external {&#13;
        require(msg.sender == addrFinance || msg.sender == addrAdmin);&#13;
        require(_newFinance != address(0));&#13;
        addrFinance = _newFinance;&#13;
    }&#13;
&#13;
    function withdraw(address _target, uint256 _amount) &#13;
        external &#13;
    {&#13;
        require(msg.sender == addrFinance || msg.sender == addrAdmin);&#13;
        require(_amount &gt; 0);&#13;
        address receiver = _target == address(0) ? addrFinance : _target;&#13;
        uint256 balance = this.balance;&#13;
        if (_amount &lt; balance) {&#13;
            receiver.transfer(_amount);&#13;
        } else {&#13;
            receiver.transfer(this.balance);&#13;
        }      &#13;
    }&#13;
}&#13;
&#13;
interface IDataMining {&#13;
    function getRecommender(address _target) external view returns(address);&#13;
    function subFreeMineral(address _target) external returns(bool);&#13;
}&#13;
&#13;
interface IDataEquip {&#13;
    function isEquiped(address _target, uint256 _tokenId) external view returns(bool);&#13;
    function isEquipedAny2(address _target, uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);&#13;
    function isEquipedAny3(address _target, uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);&#13;
}&#13;
&#13;
interface IDataAuction {&#13;
    function isOnSale(uint256 _tokenId) external view returns(bool);&#13;
    function isOnSaleAny2(uint256 _tokenId1, uint256 _tokenId2) external view returns(bool);&#13;
    function isOnSaleAny3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool);&#13;
}&#13;
&#13;
contract DataAuction is IDataAuction, AccessAdmin {&#13;
    IDataAuction public ethAuction;&#13;
    IDataAuction public platAuction;&#13;
&#13;
    function DataAuction(address _ethAddr, address _platAddr) public {&#13;
        ethAuction = IDataAuction(_ethAddr);&#13;
        platAuction = IDataAuction(_platAddr);&#13;
    }&#13;
&#13;
    function setEthAuction(address _ethAddr) external onlyAdmin {&#13;
        ethAuction = IDataAuction(_ethAddr);&#13;
    }&#13;
&#13;
    function setPlatAuction(address _platAddr) external onlyAdmin {&#13;
        platAuction = IDataAuction(_platAddr);&#13;
    }&#13;
&#13;
    function isOnSale(uint256 _tokenId) external view returns(bool) {&#13;
        if (address(ethAuction) != address(0) &amp;&amp; ethAuction.isOnSale(_tokenId)) {&#13;
            return true;   &#13;
        }&#13;
        if (address(platAuction) != address(0) &amp;&amp; platAuction.isOnSale(_tokenId)) {&#13;
            return true;   &#13;
        }&#13;
    }&#13;
&#13;
    function isOnSaleAny2(uint256 _tokenId1, uint256 _tokenId2) external view returns(bool) {&#13;
        if (address(ethAuction) != address(0) &amp;&amp; ethAuction.isOnSaleAny2(_tokenId1, _tokenId2)) {&#13;
            return true;   &#13;
        }&#13;
        if (address(platAuction) != address(0) &amp;&amp; platAuction.isOnSaleAny2(_tokenId1, _tokenId2)) {&#13;
            return true;   &#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    function isOnSaleAny3(uint256 _tokenId1, uint256 _tokenId2, uint256 _tokenId3) external view returns(bool) {&#13;
        if (address(ethAuction) != address(0) &amp;&amp; ethAuction.isOnSaleAny3(_tokenId1, _tokenId2, _tokenId3)) {&#13;
            return true;   &#13;
        }&#13;
        if (address(platAuction) != address(0) &amp;&amp; platAuction.isOnSaleAny3(_tokenId1, _tokenId2, _tokenId3)) {&#13;
            return true;   &#13;
        }&#13;
        return false;&#13;
    }&#13;
}
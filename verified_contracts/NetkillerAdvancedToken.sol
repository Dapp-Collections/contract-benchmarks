pragma solidity ^0.4.24;

/******************************************/
/*       Netkiller ADVANCED TOKEN         */
/******************************************/
/* Author netkiller <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="8ee0ebfae5e7e2e2ebfccee3fde0a0ede1e3">[emailÂ protected]</a>&gt;   */&#13;
/* Home http://www.netkiller.cn           */&#13;
/* Version 2018-06-13 - SafeMatch         */&#13;
/******************************************/&#13;
library SafeMath {&#13;
&#13;
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
        if (a == 0) {&#13;
            return 0;&#13;
        }&#13;
        c = a * b;&#13;
        assert(c / a == b);&#13;
        return c;&#13;
    }&#13;
&#13;
    function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        return a / b;&#13;
    }&#13;
&#13;
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
    }&#13;
&#13;
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
        c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
}&#13;
&#13;
contract NetkillerAdvancedToken {&#13;
    &#13;
    using SafeMath for uint256;&#13;
    &#13;
    address public owner;&#13;
    string public name;&#13;
    string public symbol;&#13;
    uint public decimals;&#13;
    uint256 public totalSupply;&#13;
    &#13;
    mapping (address =&gt; uint256) internal balances;&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
    event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
    event Burn(address indexed from, uint256 value);&#13;
    &#13;
    mapping (address =&gt; bool) public frozenAccount;&#13;
    event FrozenFunds(address indexed target, bool frozen);&#13;
&#13;
    constructor(&#13;
        uint256 initialSupply,&#13;
        string tokenName,&#13;
        string tokenSymbol,&#13;
        uint decimalUnits&#13;
    ) public {&#13;
        owner = msg.sender;&#13;
        name = tokenName;&#13;
        symbol = tokenSymbol; &#13;
        decimals = decimalUnits;&#13;
        totalSupply = initialSupply * 10 ** uint256(decimals);&#13;
        balances[msg.sender] = totalSupply;&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    function transferOwnership(address _newOwner) onlyOwner public {&#13;
        if (_newOwner != address(0)) {&#13;
            owner = _newOwner;&#13;
        }&#13;
    }&#13;
    function balanceOf(address _address) view public returns (uint256 balance) {&#13;
        return balances[_address];&#13;
    }&#13;
    &#13;
    /* Internal transfer, only can be called by this contract */&#13;
    function _transfer(address _from, address _to, uint256 _value) internal {&#13;
        require (_to != address(0));                        // Prevent transfer to 0x0 address. Use burn() instead&#13;
        require (balances[_from] &gt;= _value);                // Check if the sender has enough&#13;
        require (balances[_to] + _value &gt; balances[_to]);   // Check for overflows&#13;
        require(!frozenAccount[_from]);                     // Check if sender is frozen&#13;
        require(!frozenAccount[_to]);                       // Check if recipient is frozen&#13;
        balances[_from] = balances[_from].sub(_value);      // Subtract from the sender&#13;
        balances[_to] = balances[_to].add(_value);          // Add the same to the recipient&#13;
        emit Transfer(_from, _to, _value);&#13;
    }&#13;
&#13;
    function transfer(address _to, uint256 _value) public returns (bool success) {&#13;
        _transfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {&#13;
        require(_value &lt;= balances[_from]);&#13;
        require(_value &lt;= allowed[_from][msg.sender]);     // Check allowance&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
        _transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function approve(address _spender, uint256 _value) public returns (bool success) {&#13;
        allowed[msg.sender][_spender] = _value;&#13;
        emit Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    function freezeAccount(address target, bool freeze) onlyOwner public {&#13;
        frozenAccount[target] = freeze;&#13;
        emit FrozenFunds(target, freeze);&#13;
    }&#13;
&#13;
    function transferBatch(address[] _to, uint256 _value) public returns (bool success) {&#13;
        for (uint i=0; i&lt;_to.length; i++) {&#13;
            _transfer(msg.sender, _to[i], _value);&#13;
        }&#13;
        return true;&#13;
    }&#13;
}
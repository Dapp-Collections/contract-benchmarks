pragma solidity ^0.4.11;
/// Implements ERC 20 Token standard: https://github.com/ethereum/EIPs/issues/20

/// @title Abstract token contract - Functions to be implemented by token contracts.
/// @author braziliex dev team - <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="17737261577565766d7e7b7e726f3974787a">[emailÂ protected]</a>&gt;&#13;
contract Token {&#13;
    uint256 public totalSupply;&#13;
    function balanceOf(address owner) constant returns (uint256 balance);&#13;
    function transfer(address to, uint256 value) returns (bool success);&#13;
    function transferFrom(address from, address to, uint256 value) returns (bool success);&#13;
    function approve(address spender, uint256 value) returns (bool success);&#13;
    function allowance(address owner, address spender) constant returns (uint256 remaining);&#13;
&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
    event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
&#13;
&#13;
contract StandardToken is Token {&#13;
&#13;
    mapping (address =&gt; uint256) balances;&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
&#13;
    function transfer(address _to, uint256 _value) returns (bool success) {&#13;
        if (balances[msg.sender] &gt;= _value &amp;&amp; _value &gt; 0) {&#13;
            balances[msg.sender] -= _value;&#13;
            balances[_to] += _value;&#13;
            Transfer(msg.sender, _to, _value);&#13;
            return true;&#13;
        }&#13;
        else {&#13;
            return false;&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {&#13;
        if (balances[_from] &gt;= _value &amp;&amp; allowed[_from][msg.sender] &gt;= _value &amp;&amp; _value &gt; 0) {&#13;
            balances[_to] += _value;&#13;
            balances[_from] -= _value;&#13;
            allowed[_from][msg.sender] -= _value;&#13;
            Transfer(_from, _to, _value);&#13;
            return true;&#13;
        }&#13;
        else {&#13;
            return false;&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    function balanceOf(address _owner) constant returns (uint256 balance) {&#13;
        return balances[_owner];&#13;
    }&#13;
&#13;
    function approve(address _spender, uint256 _value) returns (bool success) {&#13;
        allowed[msg.sender][_spender] = _value;&#13;
        Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function allowance(address _owner, address _spender) constant returns (uint256 remaining) {&#13;
      return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
contract BraziliexToken is StandardToken {&#13;
&#13;
    string constant public name = "BraziliexToken";&#13;
    string constant public symbol = "BZX";&#13;
    uint8 constant public decimals = 8;&#13;
&#13;
&#13;
    function () {&#13;
        //if ether is sent to this address, send it back.&#13;
        throw;&#13;
    }&#13;
&#13;
&#13;
    function BraziliexToken() {&#13;
        balances[msg.sender] = 2100000000000000;&#13;
        totalSupply = 2100000000000000; // 21M&#13;
    }&#13;
}
pragma solidity ^0.4.25;


/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address public owner;


  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  function Ownable() {
    owner = msg.sender;
  }


  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(msg.sender == owner);
    _;
  }


  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) onlyOwner {
    if (newOwner != address(0)) {
      owner = newOwner;
    }
  }

}



/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9df9f8e9f8ddfce5f4f2f0e7f8f3b3fef2">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
    // Required methods&#13;
    function totalSupply() public view returns (uint256 total);&#13;
    function balanceOf(address _owner) public view returns (uint256 balance);&#13;
    function ownerOf(uint256 _tokenId) external view returns (address owner);&#13;
    function approve(address _to, uint256 _tokenId) external;&#13;
    function transfer(address _to, uint256 _tokenId) external;&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
&#13;
    // Events&#13;
    event Transfer(address from, address to, uint256 tokenId);&#13;
    event Approval(address owner, address approved, uint256 tokenId);&#13;
&#13;
    // Optional&#13;
    // function name() public view returns (string name);&#13;
    // function symbol() public view returns (string symbol);&#13;
    // function tokensOfOwner(address _owner) external view returns (uint256[] tokenIds);&#13;
    // function tokenMetadata(uint256 _tokenId, string _preferredTransport) public view returns (string infoUrl);&#13;
&#13;
    // ERC-165 Compatibility (https://github.com/ethereum/EIPs/issues/165)&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool);&#13;
}&#13;
&#13;
&#13;
// // Auction wrapper functions&#13;
&#13;
&#13;
// Auction wrapper functions&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title A facet of ArtCore that manages special access privileges.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev See the ArtCore contract documentation to understand how the various contract facets are arranged.&#13;
contract ArtAccessControl {&#13;
    // This facet controls access control for CryptoKitties. There are four roles managed here:&#13;
    //&#13;
    //     - The CEO: The CEO can reassign other roles and change the addresses of our dependent smart&#13;
    //         contracts. It is also the only role that can unpause the smart contract. It is initially&#13;
    //         set to the address that created the smart contract in the ArtCore constructor.&#13;
    //&#13;
    //     - The CFO: The CFO can withdraw funds from ArtCore and its auction contracts.&#13;
    //&#13;
    //     - The COO: The COO can release gen0 kitties to auction, and mint promo cats.&#13;
    //&#13;
    // It should be noted that these roles are distinct without overlap in their access abilities, the&#13;
    // abilities listed for each role above are exhaustive. In particular, while the CEO can assign any&#13;
    // address to any role, the CEO address itself doesn't have the ability to act in those roles. This&#13;
    // restriction is intentional so that we aren't tempted to use the CEO address frequently out of&#13;
    // convenience. The less we use an address, the less likely it is that we somehow compromise the&#13;
    // account.&#13;
&#13;
    /// @dev Emited when contract is upgraded - See README.md for updgrade plan&#13;
    event ContractUpgrade(address newContract);&#13;
&#13;
    // The addresses of the accounts (or contracts) that can execute actions within each roles.&#13;
    address public ceoAddress;&#13;
    address public cfoAddress;&#13;
    address public cooAddress;&#13;
&#13;
    // @dev Keeps track whether the contract is paused. When that is true, most actions are blocked&#13;
    bool public paused = false;&#13;
&#13;
    /// @dev Access modifier for CEO-only functionality&#13;
    modifier onlyCEO() {&#13;
        require(msg.sender == ceoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access modifier for CFO-only functionality&#13;
    modifier onlyCFO() {&#13;
        require(msg.sender == cfoAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Access modifier for COO-only functionality&#13;
    modifier onlyCOO() {&#13;
        require(msg.sender == cooAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyCLevel() {&#13;
        require(&#13;
            msg.sender == cooAddress ||&#13;
            msg.sender == ceoAddress ||&#13;
            msg.sender == cfoAddress&#13;
        );&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.&#13;
    /// @param _newCEO The address of the new CEO&#13;
    function setCEO(address _newCEO) external onlyCEO {&#13;
        require(_newCEO != address(0));&#13;
&#13;
        ceoAddress = _newCEO;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the CFO. Only available to the current CEO.&#13;
    /// @param _newCFO The address of the new CFO&#13;
    function setCFO(address _newCFO) external onlyCEO {&#13;
        require(_newCFO != address(0));&#13;
&#13;
        cfoAddress = _newCFO;&#13;
    }&#13;
&#13;
    /// @dev Assigns a new address to act as the COO. Only available to the current CEO.&#13;
    /// @param _newCOO The address of the new COO&#13;
    function setCOO(address _newCOO) external onlyCEO {&#13;
        require(_newCOO != address(0));&#13;
&#13;
        cooAddress = _newCOO;&#13;
    }&#13;
&#13;
    /*** Pausable functionality adapted from OpenZeppelin ***/&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS NOT paused&#13;
    modifier whenNotPaused() {&#13;
        require(!paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Modifier to allow actions only when the contract IS paused&#13;
    modifier whenPaused {&#13;
        require(paused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Called by any "C-level" role to pause the contract. Used only when&#13;
    ///  a bug or exploit is detected and we need to limit damage.&#13;
    function pause() external onlyCLevel whenNotPaused {&#13;
        paused = true;&#13;
    }&#13;
&#13;
    /// @dev Unpauses the smart contract. Can only be called by the CEO, since&#13;
    ///  one reason we may pause the contract is when CFO or COO accounts are&#13;
    ///  compromised.&#13;
    /// @notice This is public rather than external so it can be called by&#13;
    ///  derived contracts.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        // can't unpause if contract was upgraded&#13;
        paused = false;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
/// @title Base contract for CryptoKitties. Holds all common structs, events and base variables.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev See the ArtCore contract documentation to understand how the various contract facets are arranged.&#13;
contract ArtBase is ArtAccessControl {&#13;
    /*** EVENTS ***/&#13;
&#13;
    /// @dev The Birth event is fired whenever a new kitten comes into existence. This obviously&#13;
    ///  includes any time a cat is created through the giveBirth method, but it is also called&#13;
    ///  when a new gen0 cat is created.&#13;
    event Create(address owner, uint256 artId, uint16 generator);&#13;
&#13;
    /// @dev Transfer event as defined in current draft of ERC721. Emitted every time a kitten&#13;
    ///  ownership is assigned, including births.&#13;
    event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
    event Vote(uint16 candidate, uint256 voteCount, uint16 currentGenerator, uint256 currentGeneratorVoteCount);&#13;
    event NewRecipient(address recipient, uint256 position);&#13;
    event NewGenerator(uint256 position);&#13;
&#13;
    /*** DATA TYPES ***/&#13;
&#13;
    /// @dev The main Art struct. Every cat in CryptoKitties is represented by a copy&#13;
    ///  of this structure, so great care was taken to ensure that it fits neatly into&#13;
    ///  exactly two 256-bit words. Note that the order of the members in this structure&#13;
    ///  is important because of the byte-packing rules used by Ethereum.&#13;
    ///  Ref: http://solidity.readthedocs.io/en/develop/miscellaneous.html&#13;
    struct ArtToken {&#13;
        // The timestamp from the block when this cat came into existence.&#13;
        uint64 birthTime;&#13;
        // The "generator" of this art token.&#13;
        uint16 generator;&#13;
    }&#13;
&#13;
    /*** STORAGE ***/&#13;
&#13;
    /// @dev An array containing the Art struct for all Kitties in existence. The ID&#13;
    ///  of each cat is actually an index into this array. Note that ID 0 is a negacat,&#13;
    ///  the unArt, the mythical beast that is the parent of all gen0 cats. A bizarre&#13;
    ///  creature that is both matron and sire... to itself! Has an invalid genetic code.&#13;
    ///  In other words, cat ID 0 is invalid... ;-)&#13;
    ArtToken[] artpieces;&#13;
&#13;
    /// @dev A mapping from cat IDs to the address that owns them. All cats have&#13;
    ///  some valid owner address, even gen0 cats are created with a non-zero owner.&#13;
    mapping (uint256 =&gt; address) public artIndexToOwner;&#13;
&#13;
    // @dev A mapping from owner address to count of tokens that address owns.&#13;
    //  Used internally inside balanceOf() to resolve ownership count.&#13;
    mapping (address =&gt; uint256) ownershipTokenCount;&#13;
&#13;
    /// @dev A mapping from ArtIDs to an address that has been approved to call&#13;
    ///  transferFrom(). Each Art can only have one approved address for transfer&#13;
    ///  at any time. A zero value means no approval is outstanding.&#13;
    mapping (uint256 =&gt; address) public artIndexToApproved;&#13;
&#13;
&#13;
    /// @dev Assigns ownership of a specific Art to an address.&#13;
    function _transfer(address _from, address _to, uint256 _tokenId) internal {&#13;
        // Since the number of kittens is capped to 2^32 we can't overflow this&#13;
        ownershipTokenCount[_to]++;&#13;
        // transfer ownership&#13;
        artIndexToOwner[_tokenId] = _to;&#13;
        // When creating new kittens _from is 0x0, but we can't account that address.&#13;
        if (_from != address(0)) {&#13;
            ownershipTokenCount[_from]--;&#13;
            // clear any previously approved ownership exchange&#13;
            delete artIndexToApproved[_tokenId];&#13;
        }&#13;
        // Emit the transfer event.&#13;
        Transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @dev An internal method that creates a new art and stores it. This&#13;
    ///  method doesn't do any checking and should only be called when the&#13;
    ///  input data is known to be valid. Will generate both a Birth event&#13;
    ///  and a Transfer event.&#13;
    /// @param _generator The generator number of this cat, must be computed by caller.&#13;
    /// @param _owner The inital owner of this cat, must be non-zero (except for the unArt, ID 0)&#13;
    function _createArt(&#13;
        uint256 _generator,&#13;
        address _owner&#13;
    )&#13;
        internal&#13;
        returns (uint)&#13;
    {&#13;
        // These requires are not strictly necessary, our calling code should make&#13;
        // sure that these conditions are never broken. However! _createArt() is already&#13;
        // an expensive call (for storage), and it doesn't hurt to be especially careful&#13;
        // to ensure our data structures are always valid.&#13;
        require(_generator == uint256(uint16(_generator)));&#13;
&#13;
        ArtToken memory _art = ArtToken({&#13;
            birthTime: uint64(now),&#13;
            generator: uint16(_generator)&#13;
        });&#13;
        uint256 newArtId = artpieces.push(_art) - 1;&#13;
&#13;
        // It's probably never going to happen, 4 billion cats is A LOT, but&#13;
        // let's just be 100% sure we never let this happen.&#13;
        require(newArtId == uint256(uint32(newArtId)));&#13;
&#13;
        // emit the birth event&#13;
        Create(&#13;
            _owner,&#13;
            newArtId,&#13;
            _art.generator&#13;
        );&#13;
&#13;
        // This will assign ownership, and also emit the Transfer event as&#13;
        // per ERC721 draft&#13;
        _transfer(0, _owner, newArtId);&#13;
&#13;
        return newArtId;&#13;
    }&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title The external contract that is responsible for generating metadata for the kitties,&#13;
///  it has one function that will return the data as bytes.&#13;
contract ERC721Metadata {&#13;
    /// @dev Given a token Id, returns a byte array that is supposed to be converted into string.&#13;
    function getMetadata(uint256 _tokenId, string) public view returns (bytes32[4] buffer, uint256 count) {&#13;
        if (_tokenId == 1) {&#13;
            buffer[0] = "Hello World! :D";&#13;
            count = 15;&#13;
        } else if (_tokenId == 2) {&#13;
            buffer[0] = "I would definitely choose a medi";&#13;
            buffer[1] = "um length string.";&#13;
            count = 49;&#13;
        } else if (_tokenId == 3) {&#13;
            buffer[0] = "Lorem ipsum dolor sit amet, mi e";&#13;
            buffer[1] = "st accumsan dapibus augue lorem,";&#13;
            buffer[2] = " tristique vestibulum id, libero";&#13;
            buffer[3] = " suscipit varius sapien aliquam.";&#13;
            count = 128;&#13;
        }&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title The facet of the CryptoKitties core contract that manages ownership, ERC-721 (draft) compliant.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev Ref: https://github.com/ethereum/EIPs/issues/721&#13;
///  See the ArtCore contract documentation to understand how the various contract facets are arranged.&#13;
contract ArtOwnership is ArtBase, ERC721 {&#13;
&#13;
    /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
    string public constant name = "Future of Trust 2018 Art Token";&#13;
    string public constant symbol = "FoT2018";&#13;
&#13;
    // The contract that will return art metadata&#13;
    ERC721Metadata public erc721Metadata;&#13;
&#13;
    bytes4 constant InterfaceSignature_ERC165 =&#13;
        bytes4(keccak256('supportsInterface(bytes4)'));&#13;
&#13;
    bytes4 constant InterfaceSignature_ERC721 =&#13;
        bytes4(keccak256('name()')) ^&#13;
        bytes4(keccak256('symbol()')) ^&#13;
        bytes4(keccak256('totalSupply()')) ^&#13;
        bytes4(keccak256('balanceOf(address)')) ^&#13;
        bytes4(keccak256('ownerOf(uint256)')) ^&#13;
        bytes4(keccak256('approve(address,uint256)')) ^&#13;
        bytes4(keccak256('transfer(address,uint256)')) ^&#13;
        bytes4(keccak256('transferFrom(address,address,uint256)')) ^&#13;
        bytes4(keccak256('tokensOfOwner(address)')) ^&#13;
        bytes4(keccak256('tokenMetadata(uint256,string)'));&#13;
&#13;
    /// @notice Introspection interface as per ERC-165 (https://github.com/ethereum/EIPs/issues/165).&#13;
    ///  Returns true for any standardized interfaces implemented by this contract. We implement&#13;
    ///  ERC-165 (obviously!) and ERC-721.&#13;
    function supportsInterface(bytes4 _interfaceID) external view returns (bool)&#13;
    {&#13;
        // DEBUG ONLY&#13;
        //require((InterfaceSignature_ERC165 == 0x01ffc9a7) &amp;&amp; (InterfaceSignature_ERC721 == 0x9a20483d));&#13;
&#13;
        return ((_interfaceID == InterfaceSignature_ERC165) || (_interfaceID == InterfaceSignature_ERC721));&#13;
    }&#13;
&#13;
    /// @dev Set the address of the sibling contract that tracks metadata.&#13;
    ///  CEO only.&#13;
    function setMetadataAddress(address _contractAddress) public onlyCEO {&#13;
        erc721Metadata = ERC721Metadata(_contractAddress);&#13;
    }&#13;
&#13;
    // Internal utility functions: These functions all assume that their input arguments&#13;
    // are valid. We leave it to public methods to sanitize their inputs and follow&#13;
    // the required logic.&#13;
&#13;
    /// @dev Checks if a given address is the current owner of a particular Art.&#13;
    /// @param _claimant the address we are validating against.&#13;
    /// @param _tokenId kitten id, only valid when &gt; 0&#13;
    function _owns(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return artIndexToOwner[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Checks if a given address currently has transferApproval for a particular Art.&#13;
    /// @param _claimant the address we are confirming kitten is approved for.&#13;
    /// @param _tokenId kitten id, only valid when &gt; 0&#13;
    function _approvedFor(address _claimant, uint256 _tokenId) internal view returns (bool) {&#13;
        return artIndexToApproved[_tokenId] == _claimant;&#13;
    }&#13;
&#13;
    /// @dev Marks an address as being approved for transferFrom(), overwriting any previous&#13;
    ///  approval. Setting _approved to address(0) clears all transfer approval.&#13;
    ///  NOTE: _approve() does NOT send the Approval event. This is intentional because&#13;
    ///  _approve() and transferFrom() are used together for putting Kitties on auction, and&#13;
    ///  there is no value in spamming the log with Approval events in that case.&#13;
    function _approve(uint256 _tokenId, address _approved) internal {&#13;
        artIndexToApproved[_tokenId] = _approved;&#13;
    }&#13;
&#13;
    /// @notice Returns the number of Kitties owned by a specific address.&#13;
    /// @param _owner The owner address to check.&#13;
    /// @dev Required for ERC-721 compliance&#13;
    function balanceOf(address _owner) public view returns (uint256 count) {&#13;
        return ownershipTokenCount[_owner];&#13;
    }&#13;
&#13;
    /// @notice Transfers a Art to another address. If transferring to a smart&#13;
    ///  contract be VERY CAREFUL to ensure that it is aware of ERC-721 (or&#13;
    ///  CryptoKitties specifically) or your Art may be lost forever. Seriously.&#13;
    /// @param _to The address of the recipient, can be a user or contract.&#13;
    /// @param _tokenId The ID of the Art to transfer.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function transfer(&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any kitties (except very briefly&#13;
        // after a gen0 cat is created and before it goes on auction).&#13;
        require(_to != address(this));&#13;
&#13;
        // You can only send your own cat.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Reassign ownership, clear pending approvals, emit Transfer event.&#13;
        _transfer(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Grant another address the right to transfer a specific Art via&#13;
    ///  transferFrom(). This is the preferred flow for transfering NFTs to contracts.&#13;
    /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
    ///  clear all approvals.&#13;
    /// @param _tokenId The ID of the Art that can be transferred if this call succeeds.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function approve(&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Only an owner can grant transfer approval.&#13;
        require(_owns(msg.sender, _tokenId));&#13;
&#13;
        // Register the approval (replacing any previous approval).&#13;
        _approve(_tokenId, _to);&#13;
&#13;
        // Emit approval event.&#13;
        Approval(msg.sender, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Transfer a Art owned by another address, for which the calling address&#13;
    ///  has previously been granted transfer approval by the owner.&#13;
    /// @param _from The address that owns the Art to be transfered.&#13;
    /// @param _to The address that should take ownership of the Art. Can be any address,&#13;
    ///  including the caller.&#13;
    /// @param _tokenId The ID of the Art to be transferred.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function transferFrom(&#13;
        address _from,&#13;
        address _to,&#13;
        uint256 _tokenId&#13;
    )&#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        // Safety check to prevent against an unexpected 0x0 default.&#13;
        require(_to != address(0));&#13;
        // Disallow transfers to this contract to prevent accidental misuse.&#13;
        // The contract should never own any kitties (except very briefly&#13;
        // after a gen0 cat is created and before it goes on auction).&#13;
        require(_to != address(this));&#13;
        // Check for approval and valid ownership&#13;
        require(_approvedFor(msg.sender, _tokenId));&#13;
        require(_owns(_from, _tokenId));&#13;
&#13;
        // Reassign ownership (also clears pending approvals and emits Transfer event).&#13;
        _transfer(_from, _to, _tokenId);&#13;
    }&#13;
&#13;
    /// @notice Returns the total number of Kitties currently in existence.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function totalSupply() public view returns (uint) {&#13;
        return artpieces.length - 1;&#13;
    }&#13;
&#13;
    /// @notice Returns the address currently assigned ownership of a given Art.&#13;
    /// @dev Required for ERC-721 compliance.&#13;
    function ownerOf(uint256 _tokenId)&#13;
        external&#13;
        view&#13;
        returns (address owner)&#13;
    {&#13;
        owner = artIndexToOwner[_tokenId];&#13;
&#13;
        require(owner != address(0));&#13;
    }&#13;
&#13;
    /// @notice Returns a list of all Art IDs assigned to an address.&#13;
    /// @param _owner The owner whose Kitties we are interested in.&#13;
    /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly&#13;
    ///  expensive (it walks the entire Art array looking for cats belonging to owner),&#13;
    ///  but it also returns a dynamic array, which is only supported for web3 calls, and&#13;
    ///  not contract-to-contract calls.&#13;
    function tokensOfOwner(address _owner) external view returns(uint256[] ownerTokens) {&#13;
        uint256 tokenCount = balanceOf(_owner);&#13;
&#13;
        if (tokenCount == 0) {&#13;
            // Return an empty array&#13;
            return new uint256[](0);&#13;
        } else {&#13;
            uint256[] memory result = new uint256[](tokenCount);&#13;
            uint256 totalCats = totalSupply();&#13;
            uint256 resultIndex = 0;&#13;
&#13;
            // We count on the fact that all cats have IDs starting at 1 and increasing&#13;
            // sequentially up to the totalCat count.&#13;
            uint256 catId;&#13;
&#13;
            for (catId = 1; catId &lt;= totalCats; catId++) {&#13;
                if (artIndexToOwner[catId] == _owner) {&#13;
                    result[resultIndex] = catId;&#13;
                    resultIndex++;&#13;
                }&#13;
            }&#13;
&#13;
            return result;&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Adapted from memcpy() by @arachnid (Nick Johnson &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="f8998a999b9096919cb896978c9c978cd6969d8c">[emailÂ protected]</a>&gt;)&#13;
    ///  This method is licenced under the Apache License.&#13;
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol&#13;
    function _memcpy(uint _dest, uint _src, uint _len) private view {&#13;
        // Copy word-length chunks while possible&#13;
        for(; _len &gt;= 32; _len -= 32) {&#13;
            assembly {&#13;
                mstore(_dest, mload(_src))&#13;
            }&#13;
            _dest += 32;&#13;
            _src += 32;&#13;
        }&#13;
&#13;
        // Copy remaining bytes&#13;
        uint256 mask = 256 ** (32 - _len) - 1;&#13;
        assembly {&#13;
            let srcpart := and(mload(_src), not(mask))&#13;
            let destpart := and(mload(_dest), mask)&#13;
            mstore(_dest, or(destpart, srcpart))&#13;
        }&#13;
    }&#13;
&#13;
    /// @dev Adapted from toString(slice) by @arachnid (Nick Johnson &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="13726172707b7d7a77537d7c67777c673d7d7667">[emailÂ protected]</a>&gt;)&#13;
    ///  This method is licenced under the Apache License.&#13;
    ///  Ref: https://github.com/Arachnid/solidity-stringutils/blob/2f6ca9accb48ae14c66f1437ec50ed19a0616f78/strings.sol&#13;
    function _toString(bytes32[4] _rawBytes, uint256 _stringLength) private view returns (string) {&#13;
        var outputString = new string(_stringLength);&#13;
        uint256 outputPtr;&#13;
        uint256 bytesPtr;&#13;
&#13;
        assembly {&#13;
            outputPtr := add(outputString, 32)&#13;
            bytesPtr := _rawBytes&#13;
        }&#13;
&#13;
        _memcpy(outputPtr, bytesPtr, _stringLength);&#13;
&#13;
        return outputString;&#13;
    }&#13;
&#13;
    /// @notice Returns a URI pointing to a metadata package for this token conforming to&#13;
    ///  ERC-721 (https://github.com/ethereum/EIPs/issues/721)&#13;
    /// @param _tokenId The ID number of the Art whose metadata should be returned.&#13;
    function tokenMetadata(uint256 _tokenId, string _preferredTransport) external view returns (string infoUrl) {&#13;
        require(erc721Metadata != address(0));&#13;
        bytes32[4] memory buffer;&#13;
        uint256 count;&#13;
        (buffer, count) = erc721Metadata.getMetadata(_tokenId, _preferredTransport);&#13;
&#13;
        return _toString(buffer, count);&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is Ownable {&#13;
  event Pause();&#13;
  event Unpause();&#13;
&#13;
  bool public paused = false;&#13;
&#13;
&#13;
  /**&#13;
   * @dev modifier to allow actions only when the contract IS paused&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev modifier to allow actions only when the contract IS NOT paused&#13;
   */&#13;
  modifier whenPaused {&#13;
    require(paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to pause, triggers stopped state&#13;
   */&#13;
  function pause() onlyOwner whenNotPaused returns (bool) {&#13;
    paused = true;&#13;
    Pause();&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to unpause, returns to normal state&#13;
   */&#13;
  function unpause() onlyOwner whenPaused returns (bool) {&#13;
    paused = false;&#13;
    Unpause();&#13;
    return true;&#13;
  }&#13;
}&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title all functions related to creating art tokens&#13;
contract ArtMinting is ArtOwnership {&#13;
&#13;
    // Limits the number of art tokens the contract owner can ever create.&#13;
    uint256 public constant PROMO_CREATION_LIMIT = 300;&#13;
&#13;
    // Counts the number of cats the contract owner has created.&#13;
    uint256 public promoCreatedCount;&#13;
&#13;
    /// @dev we can create promo kittens, up to a limit. Only callable by COO&#13;
    function createPromoArt() external onlyCOO {&#13;
        // address artOwner = recipients[promoCreatedCount];&#13;
        // if (artOwner == address(0)) {&#13;
        //      artOwner = cooAddress;&#13;
        // }&#13;
        // address artOwner = cooAddress;&#13;
        require(promoCreatedCount &lt; PROMO_CREATION_LIMIT);&#13;
&#13;
        promoCreatedCount++;&#13;
        _createArt(curGenerator, cooAddress);&#13;
    }&#13;
    &#13;
    uint256[] public votes;&#13;
    uint16 public curGenerator = 0;&#13;
    uint16 public maxGenerators = 3;&#13;
    &#13;
    function castVote(uint _generator) external {&#13;
        require(_generator &lt; votes.length);&#13;
        votes[_generator] = votes[_generator] + 1;&#13;
        if (votes[_generator] &gt; votes[curGenerator]) {&#13;
            curGenerator = uint16(_generator);&#13;
        }&#13;
        Vote(uint16(_generator), votes[_generator], curGenerator, votes[curGenerator]);&#13;
    }&#13;
    &#13;
    function addGenerator() external {&#13;
        require(votes.length &lt; maxGenerators);&#13;
        uint _id = votes.push(0);&#13;
        NewGenerator(_id);&#13;
    }&#13;
}&#13;
&#13;
&#13;
/// @title CryptoKitties: Collectible, breedable, and oh-so-adorable cats on the Ethereum blockchain.&#13;
/// @author Axiom Zen (https://www.axiomzen.co)&#13;
/// @dev The main CryptoKitties contract, keeps track of kittens so they don't wander around and get lost.&#13;
contract ArtCore is ArtMinting {&#13;
&#13;
    // This is the main CryptoKitties contract. In order to keep our code seperated into logical sections,&#13;
    // we've broken it up in two ways. First, we have several seperately-instantiated sibling contracts&#13;
    // that handle auctions and our super-top-secret genetic combination algorithm. The auctions are&#13;
    // seperate since their logic is somewhat complex and there's always a risk of subtle bugs. By keeping&#13;
    // them in their own contracts, we can upgrade them without disrupting the main contract that tracks&#13;
    // art ownership. The genetic combination algorithm is kept seperate so we can open-source all of&#13;
    // the rest of our code without making it _too_ easy for folks to figure out how the genetics work.&#13;
    // Don't worry, I'm sure someone will reverse engineer it soon enough!&#13;
    //&#13;
    // Secondly, we break the core contract into multiple files using inheritence, one for each major&#13;
    // facet of functionality of CK. This allows us to keep related code bundled together while still&#13;
    // avoiding a single giant file with everything in it. The breakdown is as follows:&#13;
    //&#13;
    //      - ArtBase: This is where we define the most fundamental code shared throughout the core&#13;
    //             functionality. This includes our main data storage, constants and data types, plus&#13;
    //             internal functions for managing these items.&#13;
    //&#13;
    //      - ArtAccessControl: This contract manages the various addresses and constraints for operations&#13;
    //             that can be executed only by specific roles. Namely CEO, CFO and COO.&#13;
    //&#13;
    //      - ArtOwnership: This provides the methods required for basic non-fungible token&#13;
    //             transactions, following the draft ERC-721 spec (https://github.com/ethereum/EIPs/issues/721).&#13;
    //&#13;
    //      - ArtBreeding: This file contains the methods necessary to breed cats together, including&#13;
    //             keeping track of siring offers, and relies on an external genetic combination contract.&#13;
    //&#13;
    //      - ArtAuctions: Here we have the public methods for auctioning or bidding on cats or siring&#13;
    //             services. The actual auction functionality is handled in two sibling contracts (one&#13;
    //             for sales and one for siring), while auction creation and bidding is mostly mediated&#13;
    //             through this facet of the core contract.&#13;
    //&#13;
    //      - ArtMinting: This final facet contains the functionality we use for creating new gen0 cats.&#13;
    //             We can make up to 5000 "promo" cats that can be given away (especially important when&#13;
    //             the community is new), and all others can only be created and then immediately put up&#13;
    //             for auction via an algorithmically determined starting price. Regardless of how they&#13;
    //             are created, there is a hard limit of 50k gen0 cats. After that, it's all up to the&#13;
    //             community to breed, breed, breed!&#13;
&#13;
    &#13;
    /// @notice Creates the main CryptoKitties smart contract instance.&#13;
    function ArtCore() public {&#13;
        // Starts paused.&#13;
        paused = true;&#13;
&#13;
        // the creator of the contract is the initial CEO&#13;
        ceoAddress = msg.sender;&#13;
&#13;
        // the creator of the contract is also the initial COO&#13;
        cooAddress = msg.sender;&#13;
&#13;
        // start with the mythical kitten 0 - so we don't have generator-0 parent issues&#13;
        _createArt(0, address(0));&#13;
    }&#13;
&#13;
&#13;
&#13;
    /// @notice No tipping!&#13;
    /// @dev Reject all Ether from being sent here, unless it's from one of the&#13;
    ///  two auction contracts. (Hopefully, we can prevent user accidents.)&#13;
    function() external payable {&#13;
        require(&#13;
            msg.sender == address(0)&#13;
        );&#13;
    }&#13;
&#13;
    /// @notice Returns all the relevant information about a specific art.&#13;
    /// @param _id The ID of the art of interest.&#13;
    function getArtToken(uint256 _id)&#13;
        external&#13;
        view&#13;
        returns (&#13;
        uint256 birthTime,&#13;
        uint256 generator&#13;
    ) {&#13;
        ArtToken storage art = artpieces[_id];&#13;
&#13;
        // if this variable is 0 then it's not gestating&#13;
        birthTime = uint256(art.birthTime);&#13;
        generator = uint256(art.generator);&#13;
    }&#13;
&#13;
    /// @dev Override unpause so it requires all external contract addresses&#13;
    ///  to be set before contract can be unpaused. Also, we can't have&#13;
    ///  newContractAddress set either, because then the contract was upgraded.&#13;
    /// @notice This is public rather than external so we can call super.unpause&#13;
    ///  without using an expensive CALL.&#13;
    function unpause() public onlyCEO whenPaused {&#13;
        // Actually unpause the contract.&#13;
        super.unpause();&#13;
    }&#13;
&#13;
    // @dev Allows the CFO to capture the balance available to the contract.&#13;
    function withdrawBalance() external onlyCFO {&#13;
        uint256 balance = this.balance;&#13;
        cfoAddress.send(balance);&#13;
    }&#13;
}
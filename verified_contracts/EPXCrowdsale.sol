pragma solidity ^0.4.18;
// -------------------------------------------------
// ethPoker.io EPX token - Presale & ICO token sale contract
// contact <span class="__cf_email__" data-cfemail="aacbcec7c3c4eacfdec2dac5c1cfd884c3c5">[emailÂ protected]</span> for queries&#13;
// Revision 20b&#13;
// Refunds integrated, full test suite 20r passed&#13;
// -------------------------------------------------&#13;
// ERC Token Standard #20 interface:&#13;
// https://github.com/ethereum/EIPs/issues/20&#13;
// EPX contract sources:&#13;
// https://github.com/EthPokerIO/ethpokerIO&#13;
// ------------------------------------------------&#13;
// 2018 improvements:&#13;
// - Updates to comply with latest Solidity versioning (0.4.18):&#13;
// -   Classification of internal/private vs public functions&#13;
// -   Specification of pure functions such as SafeMath integrated functions&#13;
// -   Conversion of all constant to view or pure dependant on state changed&#13;
// -   Full regression test of code updates&#13;
// -   Revision of block number timing for new Ethereum block times&#13;
// - Removed duplicate Buy/Transfer event call in buyEPXtokens function (ethScan output verified)&#13;
// - Burn event now records number of EPX tokens burned vs Refund event Eth&#13;
// - Transfer event now fired when beneficiaryWallet withdraws&#13;
// - Gas req optimisation for payable function to maximise compatibility&#13;
// - Going live for initial Presale round 02/03/2018&#13;
// -------------------------------------------------&#13;
// Security reviews passed - cycle 20r&#13;
// Functional reviews passed - cycle 20r&#13;
// Final code revision and regression test cycle passed - cycle 20r&#13;
// -------------------------------------------------&#13;
&#13;
contract owned {&#13;
  address public owner;&#13;
&#13;
  function owned() internal {&#13;
    owner = msg.sender;&#13;
  }&#13;
  modifier onlyOwner {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
}&#13;
&#13;
contract safeMath {&#13;
  function safeMul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a * b;&#13;
    safeAssert(a == 0 || c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function safeDiv(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    safeAssert(b &gt; 0);&#13;
    uint256 c = a / b;&#13;
    safeAssert(a == b * c + a % b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function safeSub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    safeAssert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function safeAdd(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    safeAssert(c&gt;=a &amp;&amp; c&gt;=b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function safeAssert(bool assertion) internal pure {&#13;
    if (!assertion) revert();&#13;
  }&#13;
}&#13;
&#13;
contract StandardToken is owned, safeMath {&#13;
  function balanceOf(address who) view public returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
contract EPXCrowdsale is owned, safeMath {&#13;
  // owner/admin &amp; token reward&#13;
  address        public admin                     = owner;    // admin address&#13;
  StandardToken  public tokenReward;                          // address of the token used as reward&#13;
&#13;
  // deployment variables for static supply sale&#13;
  uint256 private initialTokenSupply;&#13;
  uint256 private tokensRemaining;&#13;
&#13;
  // multi-sig addresses and price variable&#13;
  address private beneficiaryWallet;                           // beneficiaryMultiSig (founder group) or wallet account&#13;
&#13;
  // uint256 values for min,max,caps,tracking&#13;
  uint256 public amountRaisedInWei;                           //&#13;
  uint256 public fundingMinCapInWei;                          //&#13;
&#13;
  // loop control, ICO startup and limiters&#13;
  string  public CurrentStatus                    = "";        // current crowdsale status&#13;
  uint256 public fundingStartBlock;                           // crowdsale start block#&#13;
  uint256 public fundingEndBlock;                             // crowdsale end block#&#13;
  bool    public isCrowdSaleClosed               = false;     // crowdsale completion boolean&#13;
  bool    private areFundsReleasedToBeneficiary  = false;     // boolean for founder to receive Eth or not&#13;
  bool    public isCrowdSaleSetup                = false;     // boolean for crowdsale setup&#13;
&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
  event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
  event Buy(address indexed _sender, uint256 _eth, uint256 _EPX);&#13;
  event Refund(address indexed _refunder, uint256 _value);&#13;
  event Burn(address _from, uint256 _value);&#13;
  mapping(address =&gt; uint256) balancesArray;&#13;
  mapping(address =&gt; uint256) usersEPXfundValue;&#13;
&#13;
  // default function, map admin&#13;
  function EPXCrowdsale() public onlyOwner {&#13;
    admin = msg.sender;&#13;
    CurrentStatus = "Crowdsale deployed to chain";&#13;
  }&#13;
&#13;
  // total number of tokens initially&#13;
  function initialEPXSupply() public view returns (uint256 initialEPXtokenCount) {&#13;
    return safeDiv(initialTokenSupply,10000); // div by 10,000 for display normalisation (4 decimals)&#13;
  }&#13;
&#13;
  // remaining number of tokens&#13;
  function remainingEPXSupply() public view returns (uint256 remainingEPXtokenCount) {&#13;
    return safeDiv(tokensRemaining,10000); // div by 10,000 for display normalisation (4 decimals)&#13;
  }&#13;
&#13;
  // setup the CrowdSale parameters&#13;
  function SetupCrowdsale(uint256 _fundingStartBlock, uint256 _fundingEndBlock) public onlyOwner returns (bytes32 response) {&#13;
    if ((msg.sender == admin)&#13;
    &amp;&amp; (!(isCrowdSaleSetup))&#13;
    &amp;&amp; (!(beneficiaryWallet &gt; 0))) {&#13;
      // init addresses&#13;
      beneficiaryWallet                       = 0x7A29e1343c6a107ce78199F1b3a1d2952efd77bA;&#13;
      tokenReward                             = StandardToken(0x0C686Cd98F816bf63C037F39E73C1b7A35b51D4C);&#13;
&#13;
      // funding targets&#13;
      fundingMinCapInWei                      = 30000000000000000000;                       // ETH 300 + 000000000000000000 18 dec wei&#13;
&#13;
      // update values&#13;
      amountRaisedInWei                       = 0;&#13;
      initialTokenSupply                      = 200000000000;                               // 20,000,000 + 4 dec resolution&#13;
      tokensRemaining                         = initialTokenSupply;&#13;
      fundingStartBlock                       = _fundingStartBlock;&#13;
      fundingEndBlock                         = _fundingEndBlock;&#13;
&#13;
      // configure crowdsale&#13;
      isCrowdSaleSetup                        = true;&#13;
      isCrowdSaleClosed                       = false;&#13;
      CurrentStatus                           = "Crowdsale is setup";&#13;
      return "Crowdsale is setup";&#13;
    } else if (msg.sender != admin) {&#13;
      return "not authorised";&#13;
    } else  {&#13;
      return "campaign cannot be changed";&#13;
    }&#13;
  }&#13;
&#13;
  function checkPrice() internal view returns (uint256 currentPriceValue) {&#13;
    if (block.number &gt;= fundingStartBlock+177534) { // 30-day price change/final 30day change&#13;
      return (7600); //30days-end   =7600ARX:1ETH&#13;
    } else if (block.number &gt;= fundingStartBlock+124274) { //3 week mark/over 21days&#13;
      return (8200); //3w-30days    =8200ARX:1ETH&#13;
    } else if (block.number &gt;= fundingStartBlock) { // start [0 hrs]&#13;
      return (8800); //0-3weeks     =8800ARX:1ETH&#13;
    }&#13;
  }&#13;
&#13;
  // default payable function when sending ether to this contract&#13;
  function () public payable {&#13;
    // 0. conditions (length, crowdsale setup, zero check, exceed funding contrib check, contract valid check, within funding block range check, balance overflow check etc)&#13;
    require(!(msg.value == 0)&#13;
    &amp;&amp; (msg.data.length == 0)&#13;
    &amp;&amp; (block.number &lt;= fundingEndBlock)&#13;
    &amp;&amp; (block.number &gt;= fundingStartBlock)&#13;
    &amp;&amp; (tokensRemaining &gt; 0));&#13;
&#13;
    // 1. vars&#13;
    uint256 rewardTransferAmount    = 0;&#13;
&#13;
    // 2. effects&#13;
    amountRaisedInWei               = safeAdd(amountRaisedInWei, msg.value);&#13;
    rewardTransferAmount            = ((safeMul(msg.value, checkPrice())) / 100000000000000);&#13;
&#13;
    // 3. interaction&#13;
    tokensRemaining                 = safeSub(tokensRemaining, rewardTransferAmount);&#13;
    tokenReward.transfer(msg.sender, rewardTransferAmount);&#13;
&#13;
    // 4. events&#13;
    usersEPXfundValue[msg.sender]   = safeAdd(usersEPXfundValue[msg.sender], msg.value);&#13;
    Buy(msg.sender, msg.value, rewardTransferAmount);&#13;
  }&#13;
&#13;
  function beneficiaryMultiSigWithdraw(uint256 _amount) public onlyOwner {&#13;
    require(areFundsReleasedToBeneficiary &amp;&amp; (amountRaisedInWei &gt;= fundingMinCapInWei));&#13;
    beneficiaryWallet.transfer(_amount);&#13;
    Transfer(this, beneficiaryWallet, _amount);&#13;
  }&#13;
&#13;
  function checkGoalReached() public onlyOwner { // return crowdfund status to owner for each result case, update public vars&#13;
    // update state &amp; status variables&#13;
    require (isCrowdSaleSetup);&#13;
    if ((amountRaisedInWei &lt; fundingMinCapInWei) &amp;&amp; (block.number &lt;= fundingEndBlock &amp;&amp; block.number &gt;= fundingStartBlock)) { // ICO in progress, under softcap&#13;
      areFundsReleasedToBeneficiary = false;&#13;
      isCrowdSaleClosed = false;&#13;
      CurrentStatus = "In progress (Eth &lt; Softcap)";&#13;
    } else if ((amountRaisedInWei &lt; fundingMinCapInWei) &amp;&amp; (block.number &lt; fundingStartBlock)) { // ICO has not started&#13;
      areFundsReleasedToBeneficiary = false;&#13;
      isCrowdSaleClosed = false;&#13;
      CurrentStatus = "Crowdsale is setup";&#13;
    } else if ((amountRaisedInWei &lt; fundingMinCapInWei) &amp;&amp; (block.number &gt; fundingEndBlock)) { // ICO ended, under softcap&#13;
      areFundsReleasedToBeneficiary = false;&#13;
      isCrowdSaleClosed = true;&#13;
      CurrentStatus = "Unsuccessful (Eth &lt; Softcap)";&#13;
    } else if ((amountRaisedInWei &gt;= fundingMinCapInWei) &amp;&amp; (tokensRemaining == 0)) { // ICO ended, all tokens bought!&#13;
      areFundsReleasedToBeneficiary = true;&#13;
      isCrowdSaleClosed = true;&#13;
      CurrentStatus = "Successful (EPX &gt;= Hardcap)!";&#13;
    } else if ((amountRaisedInWei &gt;= fundingMinCapInWei) &amp;&amp; (block.number &gt; fundingEndBlock) &amp;&amp; (tokensRemaining &gt; 0)) { // ICO ended, over softcap!&#13;
      areFundsReleasedToBeneficiary = true;&#13;
      isCrowdSaleClosed = true;&#13;
      CurrentStatus = "Successful (Eth &gt;= Softcap)!";&#13;
    } else if ((amountRaisedInWei &gt;= fundingMinCapInWei) &amp;&amp; (tokensRemaining &gt; 0) &amp;&amp; (block.number &lt;= fundingEndBlock)) { // ICO in progress, over softcap!&#13;
      areFundsReleasedToBeneficiary = true;&#13;
      isCrowdSaleClosed = false;&#13;
      CurrentStatus = "In progress (Eth &gt;= Softcap)!";&#13;
    }&#13;
  }&#13;
&#13;
  function refund() public { // any contributor can call this to have their Eth returned. user's purchased EPX tokens are burned prior refund of Eth.&#13;
    //require minCap not reached&#13;
    require ((amountRaisedInWei &lt; fundingMinCapInWei)&#13;
    &amp;&amp; (isCrowdSaleClosed)&#13;
    &amp;&amp; (block.number &gt; fundingEndBlock)&#13;
    &amp;&amp; (usersEPXfundValue[msg.sender] &gt; 0));&#13;
&#13;
    //burn user's token EPX token balance, refund Eth sent&#13;
    uint256 ethRefund = usersEPXfundValue[msg.sender];&#13;
    balancesArray[msg.sender] = 0;&#13;
    usersEPXfundValue[msg.sender] = 0;&#13;
&#13;
    //record Burn event with number of EPX tokens burned&#13;
    Burn(msg.sender, usersEPXfundValue[msg.sender]);&#13;
&#13;
    //send Eth back&#13;
    msg.sender.transfer(ethRefund);&#13;
&#13;
    //record Refund event with number of Eth refunded in transaction&#13;
    Refund(msg.sender, ethRefund);&#13;
  }&#13;
}
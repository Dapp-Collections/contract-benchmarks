// CryptoIndex token smart contract.
// Developed by Phenom.Team <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2e474048416e5e464b404143005a4b4f43">[email protected]</a>&gt;&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address private _owner;&#13;
&#13;
&#13;
  event OwnershipRenounced(address indexed previousOwner);&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    _owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the address of the owner.&#13;
   */&#13;
  function owner() public view returns(address) {&#13;
    return _owner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(isOwner());&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return true if `msg.sender` is the owner of the contract.&#13;
   */&#13;
  function isOwner() public view returns(bool) {&#13;
    return msg.sender == _owner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   * @notice Renouncing to ownership will leave the contract without an owner.&#13;
   * It will not be possible to call the functions with the `onlyOwner`&#13;
   * modifier anymore.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipRenounced(_owner);&#13;
    _owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    _transferOwnership(newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address newOwner) internal {&#13;
    require(newOwner != address(0));&#13;
    emit OwnershipTransferred(_owner, newOwner);&#13;
    _owner = newOwner;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 *   @title ERC20&#13;
 *   @dev Standart ERC20 token interface&#13;
 */&#13;
&#13;
contract ERC20 {&#13;
    mapping(address =&gt; uint) balances;&#13;
    mapping(address =&gt; mapping (address =&gt; uint)) allowed;&#13;
&#13;
    function balanceOf(address _owner) public view returns (uint);&#13;
    function transfer(address _to, uint _value) public returns (bool);&#13;
    function transferFrom(address _from, address _to, uint _value) public returns (bool);&#13;
    function approve(address _spender, uint _value) public returns (bool);&#13;
    function allowance(address _owner, address _spender) public view returns (uint);&#13;
&#13;
    event Transfer(address indexed _from, address indexed _to, uint _value);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint _value);&#13;
&#13;
} &#13;
&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint a, uint b) internal pure returns (uint) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint a, uint b) internal pure returns (uint) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint a, uint b) internal pure returns (uint) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint a, uint b) internal pure returns (uint) {&#13;
    uint c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 *   @title CryptoIndexToken&#13;
 *   @dev СryptoIndexToken smart-contract&#13;
 */&#13;
contract CryptoIndexToken is ERC20, Ownable() {&#13;
    using SafeMath for uint;&#13;
&#13;
    string public name = "Cryptoindex 100";&#13;
    string public symbol = "CIX100";&#13;
    uint public decimals = 18;&#13;
&#13;
    uint public totalSupply = 300000000*1e18;&#13;
    uint public mintedAmount;&#13;
&#13;
    uint public advisorsFundPercent = 3; // 3% of private sale for advisors fund &#13;
    uint public teamFundPercent = 7; // 7% of private sale for team fund&#13;
&#13;
    uint public bonusFundValue;&#13;
    uint public forgetFundValue;&#13;
&#13;
    bool public mintingIsStarted;&#13;
    bool public mintingIsFinished;&#13;
&#13;
    address public teamFund;&#13;
    address public advisorsFund;&#13;
    address public bonusFund;&#13;
    address public forgetFund;&#13;
    address public reserveFund;&#13;
&#13;
    modifier onlyController() {&#13;
        require(controllers[msg.sender] == true);&#13;
        _;&#13;
    }&#13;
&#13;
    // controllers&#13;
    mapping(address =&gt; bool) public controllers;&#13;
&#13;
    //event&#13;
    event Burn(address indexed from, uint value);&#13;
    event MintingStarted(uint timestamp);&#13;
    event MintingFinished(uint timestamp);&#13;
    &#13;
&#13;
   /**&#13;
    *   @dev Contract constructor function sets Ico address&#13;
    *   @param _teamFund       team fund address&#13;
    */&#13;
    constructor(address _forgetFund, address _teamFund, address _advisorsFund, address _bonusFund, address _reserveFund) public {&#13;
        controllers[msg.sender] = true;&#13;
        forgetFund = _forgetFund;&#13;
        teamFund = _teamFund;&#13;
        advisorsFund = _advisorsFund;&#13;
        bonusFund = _bonusFund;&#13;
        reserveFund = _reserveFund;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Start minting&#13;
    *   @param _forgetFundValue        number of tokens for forgetFund&#13;
    *   @param _bonusFundValue         number of tokens for bonusFund&#13;
    */&#13;
    function startMinting(uint _forgetFundValue, uint _bonusFundValue) public onlyOwner {&#13;
        forgetFundValue = _forgetFundValue;&#13;
        bonusFundValue = _bonusFundValue;&#13;
        mintingIsStarted = true;&#13;
        emit MintingStarted(now);&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Finish minting&#13;
    */&#13;
    function finishMinting() public onlyOwner {&#13;
        require(mint(forgetFund, forgetFundValue));&#13;
        uint currentMintedAmount = mintedAmount;&#13;
        require(mint(teamFund, currentMintedAmount.mul(teamFundPercent).div(100)));&#13;
        require(mint(advisorsFund, currentMintedAmount.mul(advisorsFundPercent).div(100)));&#13;
        require(mint(bonusFund, bonusFundValue));&#13;
        require(mint(reserveFund, totalSupply.sub(mintedAmount)));&#13;
        mintingIsFinished = true;&#13;
        emit MintingFinished(now);&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Get balance of tokens holder&#13;
    *   @param _holder        holder's address&#13;
    *   @return               balance of investor&#13;
    */&#13;
    function balanceOf(address _holder) public view returns (uint) {&#13;
        return balances[_holder];&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev Send coins&#13;
    *   throws on any error rather then return a false flag to minimize&#13;
    *   user errors&#13;
    *   @param _to           target address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transfer(address _to, uint _amount) public returns (bool) {&#13;
        require(mintingIsFinished);&#13;
        require(_to != address(0) &amp;&amp; _to != address(this));&#13;
        balances[msg.sender] = balances[msg.sender].sub(_amount);&#13;
        balances[_to] = balances[_to].add(_amount);&#13;
        emit Transfer(msg.sender, _to, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Transfer token in batches&#13;
    *   &#13;
    *   @param _adresses     token holders' adresses&#13;
    *   @param _values       token holders' values&#13;
    */&#13;
    function batchTransfer(address[] _adresses, uint[] _values) public returns (bool) {&#13;
        require(_adresses.length == _values.length);&#13;
        for (uint i = 0; i &lt; _adresses.length; i++) {&#13;
            require(transfer(_adresses[i], _values[i]));&#13;
        }&#13;
        return true;&#13;
    }&#13;
&#13;
   /**&#13;
    *   @dev An account/contract attempts to get the coins&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   @param _from         source address&#13;
    *   @param _to           target address&#13;
    *   @param _amount       transfer amount&#13;
    *&#13;
    *   @return true if the transfer was successful&#13;
    */&#13;
    function transferFrom(address _from, address _to, uint _amount) public returns (bool) {&#13;
        require(mintingIsFinished);&#13;
&#13;
        require(_to != address(0) &amp;&amp; _to != address(this));&#13;
        balances[_from] = balances[_from].sub(_amount);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_amount);&#13;
        balances[_to] = balances[_to].add(_amount);&#13;
        emit Transfer(_from, _to, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
    *   @dev Add controller address&#13;
    *   &#13;
    *   @param _controller     controller's address&#13;
    */&#13;
    function addController(address _controller) public onlyOwner {&#13;
        require(mintingIsStarted);&#13;
        controllers[_controller] = true;&#13;
    }&#13;
    &#13;
    /**&#13;
    *   @dev Remove controller address&#13;
    *   &#13;
    *   @param _controller     controller's address&#13;
    */&#13;
    function removeController(address _controller) public onlyOwner {&#13;
        controllers[_controller] = false;&#13;
    }&#13;
    &#13;
    /**&#13;
    *   @dev Mint token in batches&#13;
    *   &#13;
    *   @param _adresses     token holders' adresses&#13;
    *   @param _values       token holders' values&#13;
    */&#13;
    function batchMint(address[] _adresses, uint[] _values) public onlyController {&#13;
        require(_adresses.length == _values.length);&#13;
        for (uint i = 0; i &lt; _adresses.length; i++) {&#13;
            require(mint(_adresses[i], _values[i]));&#13;
            emit Transfer(address(0), _adresses[i], _values[i]);&#13;
        }&#13;
    }&#13;
&#13;
    function burn(address _from, uint _value) public {&#13;
        if (msg.sender != _from) {&#13;
          require(!mintingIsFinished);&#13;
          // burn tokens from _from only if minting stage is not finished&#13;
          // allows owner to correct initial balance before finishing minting&#13;
          require(msg.sender == this.owner());&#13;
          mintedAmount = mintedAmount.sub(_value);          &#13;
        } else {&#13;
          require(mintingIsFinished);&#13;
          totalSupply = totalSupply.sub(_value);&#13;
        }&#13;
        balances[_from] = balances[_from].sub(_value);&#13;
        emit Burn(_from, _value);&#13;
    }&#13;
   /**&#13;
    *   @dev Allows another account/contract to spend some tokens on its behalf&#13;
    *   throws on any error rather then return a false flag to minimize user errors&#13;
    *&#13;
    *   also, to minimize the risk of the approve/transferFrom attack vector&#13;
    *   approve has to be called twice in 2 separate transactions - once to&#13;
    *   change the allowance to 0 and secondly to change it to the new allowance&#13;
    *   value&#13;
    *&#13;
    *   @param _spender      approved address&#13;
    *   @param _amount       allowance amount&#13;
    *&#13;
    *   @return true if the approval was successful&#13;
    */&#13;
    function approve(address _spender, uint _amount) public returns (bool) {&#13;
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));&#13;
        allowed[msg.sender][_spender] = _amount;&#13;
        emit Approval(msg.sender, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
   /**&#13;
    *   @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
    *&#13;
    *   @param _owner        the address which owns the funds&#13;
    *   @param _spender      the address which will spend the funds&#13;
    *&#13;
    *   @return              the amount of tokens still avaible for the spender&#13;
    */&#13;
    function allowance(address _owner, address _spender) public view returns (uint) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    /** &#13;
    *   @dev Allows to transfer out any accidentally sent ERC20 tokens&#13;
    *   @param _tokenAddress  token address&#13;
    *   @param _amount        transfer amount&#13;
    */&#13;
    function transferAnyTokens(address _tokenAddress, uint _amount) &#13;
        public&#13;
        returns (bool success) {&#13;
        return ERC20(_tokenAddress).transfer(this.owner(), _amount);&#13;
    }&#13;
&#13;
    function mint(address _to, uint _value) internal returns (bool) {&#13;
        // Mint tokens only if minting stage is not finished&#13;
        require(mintingIsStarted);&#13;
        require(!mintingIsFinished);&#13;
        require(mintedAmount.add(_value) &lt;= totalSupply);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
        mintedAmount = mintedAmount.add(_value);&#13;
        return true;&#13;
    }&#13;
}
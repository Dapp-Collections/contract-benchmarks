pragma solidity ^0.4.16;

// copyright <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="2c4f4342584d4f586c695844495e49414342024f4341">[emailÂ protected]</a>&#13;
&#13;
contract BasicAccessControl {&#13;
    address public owner;&#13;
    // address[] public moderators;&#13;
    uint16 public totalModerators = 0;&#13;
    mapping (address =&gt; bool) public moderators;&#13;
    bool public isMaintaining = false;&#13;
&#13;
    function BasicAccessControl() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyModerators() {&#13;
        require(msg.sender == owner || moderators[msg.sender] == true);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier isActive {&#13;
        require(!isMaintaining);&#13;
        _;&#13;
    }&#13;
&#13;
    function ChangeOwner(address _newOwner) onlyOwner public {&#13;
        if (_newOwner != address(0)) {&#13;
            owner = _newOwner;&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    function AddModerator(address _newModerator) onlyOwner public {&#13;
        if (moderators[_newModerator] == false) {&#13;
            moderators[_newModerator] = true;&#13;
            totalModerators += 1;&#13;
        }&#13;
    }&#13;
    &#13;
    function RemoveModerator(address _oldModerator) onlyOwner public {&#13;
        if (moderators[_oldModerator] == true) {&#13;
            moderators[_oldModerator] = false;&#13;
            totalModerators -= 1;&#13;
        }&#13;
    }&#13;
&#13;
    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {&#13;
        isMaintaining = _isMaintaining;&#13;
    }&#13;
}&#13;
&#13;
contract EtheremonTransformSetting is BasicAccessControl {&#13;
    &#13;
    uint32[] public randomClassIds = [32, 97, 80, 73, 79, 81, 101, 103, 105];&#13;
    mapping(uint32 =&gt; uint8) public layingEggLevels;&#13;
    mapping(uint32 =&gt; uint8) public layingEggDeductions;&#13;
    mapping(uint32 =&gt; uint8) public transformLevels;&#13;
    mapping(uint32 =&gt; uint32) public transformClasses;&#13;
    &#13;
    function setConfigClass(uint32 _classId, uint8 _layingLevel, uint8 _layingCost, uint8 _transformLevel, uint32 _tranformClass) onlyModerators public {&#13;
        layingEggLevels[_classId] = _layingLevel;&#13;
        layingEggDeductions[_classId] = _layingCost;&#13;
        transformLevels[_classId] = _transformLevel;&#13;
        transformClasses[_classId] = _tranformClass;&#13;
    }&#13;
    &#13;
    function addRandomClass(uint32 _newClassId) onlyModerators public {&#13;
        if (_newClassId &gt; 0) {&#13;
            for (uint index = 0; index &lt; randomClassIds.length; index++) {&#13;
                if (randomClassIds[index] == _newClassId) {&#13;
                    return;&#13;
                }&#13;
            }&#13;
            randomClassIds.push(_newClassId);&#13;
        }&#13;
    }&#13;
    &#13;
    function removeRandomClass(uint32 _oldClassId) onlyModerators public {&#13;
        uint foundIndex = 0;&#13;
        for (; foundIndex &lt; randomClassIds.length; foundIndex++) {&#13;
            if (randomClassIds[foundIndex] == _oldClassId) {&#13;
                break;&#13;
            }&#13;
        }&#13;
        if (foundIndex &lt; randomClassIds.length) {&#13;
            randomClassIds[foundIndex] = randomClassIds[randomClassIds.length-1];&#13;
            delete randomClassIds[randomClassIds.length-1];&#13;
            randomClassIds.length--;&#13;
        }&#13;
    }&#13;
    &#13;
    function initMonsterClassConfig() onlyModerators external {&#13;
        setConfigClass(1, 0, 0, 20, 38);&#13;
        setConfigClass(2, 0, 0, 20, 39);&#13;
        setConfigClass(3, 0, 0, 26, 40);&#13;
        setConfigClass(4, 0, 0, 20, 41);&#13;
        setConfigClass(5, 0, 0, 20, 42);&#13;
        setConfigClass(6, 0, 0, 25, 43);&#13;
        setConfigClass(7, 0, 0, 28, 44);&#13;
        setConfigClass(8, 0, 0, 25, 45);&#13;
        setConfigClass(9, 0, 0, 27, 46);&#13;
        setConfigClass(10, 0, 0, 29, 47);&#13;
        setConfigClass(11, 0, 0, 25, 48);&#13;
        setConfigClass(12, 0, 0, 26, 49);&#13;
        setConfigClass(18, 0, 0, 28, 50);&#13;
        setConfigClass(20, 0, 0, 20, 51);&#13;
        setConfigClass(24, 0, 0, 39, 89);&#13;
        setConfigClass(25, 0, 0, 20, 52);&#13;
        setConfigClass(26, 0, 0, 21, 53);&#13;
        setConfigClass(27, 0, 0, 28, 54);&#13;
        &#13;
        setConfigClass(28, 35, 5, 28, 55);&#13;
        setConfigClass(29, 35, 5, 27, 56);&#13;
        setConfigClass(30, 35, 5, 28, 57);&#13;
        setConfigClass(31, 34, 5, 27, 58);&#13;
        setConfigClass(32, 34, 5, 27, 59);&#13;
        setConfigClass(33, 33, 5, 28, 60);&#13;
        setConfigClass(34, 31, 5, 21, 61);&#13;
        &#13;
        setConfigClass(37, 34, 5, 26, 62);&#13;
        setConfigClass(38, 0, 0, 40, 64);&#13;
        setConfigClass(39, 0, 0, 40, 65);&#13;
        setConfigClass(41, 0, 0, 39, 66);&#13;
        setConfigClass(42, 0, 0, 42, 67);&#13;
        setConfigClass(51, 0, 0, 37, 68);&#13;
        setConfigClass(52, 0, 0, 39, 69);&#13;
        setConfigClass(53, 0, 0, 38, 70);&#13;
        setConfigClass(61, 0, 0, 39, 71);&#13;
        setConfigClass(62, 0, 0, 5, 63);&#13;
        &#13;
        setConfigClass(77, 36, 5, 32, 82);&#13;
        setConfigClass(78, 35, 5, 30, 83);&#13;
        setConfigClass(79, 32, 5, 23, 84);&#13;
        setConfigClass(80, 35, 5, 29, 85);&#13;
        setConfigClass(81, 34, 5, 24, 86);&#13;
        setConfigClass(84, 0, 0, 38, 87);&#13;
        &#13;
        setConfigClass(86, 0, 0, 41, 88);&#13;
        setConfigClass(89, 0, 0, 42, 158);&#13;
        setConfigClass(90, 0, 0, 28, 91);&#13;
        setConfigClass(91, 0, 0, 38, 92);&#13;
        setConfigClass(93, 0, 0, 28, 94);&#13;
        setConfigClass(94, 0, 0, 38, 95);&#13;
        &#13;
        setConfigClass(97, 35, 5, 32, 98);&#13;
        setConfigClass(99, 34, 5, 30, 100);&#13;
        setConfigClass(101, 36, 5, 31, 102);&#13;
        setConfigClass(103, 39, 7, 30, 104);&#13;
        setConfigClass(106, 34, 5, 31, 107);&#13;
        setConfigClass(107, 0, 0, 43, 108);&#13;
        &#13;
        setConfigClass(116, 0, 0, 27, 117);&#13;
        setConfigClass(117, 0, 0, 37, 118);&#13;
        setConfigClass(119, 0, 0, 28, 120);&#13;
        setConfigClass(120, 0, 0, 37, 121);&#13;
        setConfigClass(122, 0, 0, 29, 123);&#13;
        setConfigClass(123, 0, 0, 36, 124);&#13;
        setConfigClass(125, 0, 0, 26, 126);&#13;
        setConfigClass(126, 0, 0, 37, 127);&#13;
        setConfigClass(128, 0, 0, 26, 129);&#13;
        setConfigClass(129, 0, 0, 38, 130);&#13;
        setConfigClass(131, 0, 0, 27, 132);&#13;
        setConfigClass(132, 0, 0, 37, 133);&#13;
        setConfigClass(134, 0, 0, 35, 135);&#13;
        setConfigClass(136, 0, 0, 36, 137);&#13;
        setConfigClass(138, 0, 0, 36, 139);&#13;
        setConfigClass(140, 0, 0, 35, 141);&#13;
        setConfigClass(142, 0, 0, 36, 143);&#13;
        setConfigClass(144, 0, 0, 34, 145);&#13;
        setConfigClass(146, 0, 0, 36, 147);&#13;
        setConfigClass(148, 0, 0, 26, 149);&#13;
        setConfigClass(149, 0, 0, 37, 150);&#13;
        &#13;
        setConfigClass(151, 0, 0, 36, 152);&#13;
        setConfigClass(156, 0, 0, 38, 157);&#13;
    }&#13;
    &#13;
    // read access&#13;
    &#13;
    function getRandomClassId(uint _seed) constant external returns(uint32) {&#13;
        return randomClassIds[_seed % randomClassIds.length];&#13;
    }&#13;
    &#13;
    function getLayEggInfo(uint32 _classId) constant external returns(uint8 layingLevel, uint8 layingCost) {&#13;
        layingLevel = layingEggLevels[_classId];&#13;
        layingCost = layingEggDeductions[_classId];&#13;
    }&#13;
    &#13;
    function getTransformInfo(uint32 _classId) constant external returns(uint32 transformClassId, uint8 level) {&#13;
        transformClassId = transformClasses[_classId];&#13;
        level = transformLevels[_classId];&#13;
    }&#13;
    &#13;
    function getClassTransformInfo(uint32 _classId) constant external returns(uint8 layingLevel, uint8 layingCost, uint8 transformLevel, uint32 transformCLassId) {&#13;
        layingLevel = layingEggLevels[_classId];&#13;
        layingCost = layingEggDeductions[_classId];&#13;
        transformLevel = transformLevels[_classId];&#13;
        transformCLassId = transformClasses[_classId];&#13;
    }&#13;
}
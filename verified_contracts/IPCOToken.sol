pragma solidity 0.4.24;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1c787d6a795c7d7773717e7d327f7371">[emailÂ protected]</a>&#13;
// released under Apache 2.0 licence&#13;
// input  /root/code/solidity/xixoio-contracts/flat/IPCOToken.sol&#13;
// flattened :  Monday, 03-Dec-18 10:34:17 UTC&#13;
interface IERC20 {&#13;
  function totalSupply() external view returns (uint256);&#13;
&#13;
  function balanceOf(address who) external view returns (uint256);&#13;
&#13;
  function allowance(address owner, address spender)&#13;
    external view returns (uint256);&#13;
&#13;
  function transfer(address to, uint256 value) external returns (bool);&#13;
&#13;
  function approve(address spender, uint256 value)&#13;
    external returns (bool);&#13;
&#13;
  function transferFrom(address from, address to, uint256 value)&#13;
    external returns (bool);&#13;
&#13;
  event Transfer(&#13;
    address indexed from,&#13;
    address indexed to,&#13;
    uint256 value&#13;
  );&#13;
&#13;
  event Approval(&#13;
    address indexed owner,&#13;
    address indexed spender,&#13;
    uint256 value&#13;
  );&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, reverts on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    uint256 c = a * b;&#13;
    require(c / a == b);&#13;
&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    require(b &gt; 0); // Solidity only automatically asserts when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    require(b &lt;= a);&#13;
    uint256 c = a - b;&#13;
&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, reverts on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    require(c &gt;= a);&#13;
&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),&#13;
  * reverts when dividing by zero.&#13;
  */&#13;
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    require(b != 0);&#13;
    return a % b;&#13;
  }&#13;
}&#13;
&#13;
contract Ownable {&#13;
  address private _owner;&#13;
&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() internal {&#13;
    _owner = msg.sender;&#13;
    emit OwnershipTransferred(address(0), _owner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the address of the owner.&#13;
   */&#13;
  function owner() public view returns(address) {&#13;
    return _owner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(isOwner());&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return true if `msg.sender` is the owner of the contract.&#13;
   */&#13;
  function isOwner() public view returns(bool) {&#13;
    return msg.sender == _owner;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   * @notice Renouncing to ownership will leave the contract without an owner.&#13;
   * It will not be possible to call the functions with the `onlyOwner`&#13;
   * modifier anymore.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipTransferred(_owner, address(0));&#13;
    _owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) public onlyOwner {&#13;
    _transferOwnership(newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address newOwner) internal {&#13;
    require(newOwner != address(0));&#13;
    emit OwnershipTransferred(_owner, newOwner);&#13;
    _owner = newOwner;&#13;
  }&#13;
}&#13;
&#13;
contract ERC20 is IERC20 {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping (address =&gt; uint256) private _balances;&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) private _allowed;&#13;
&#13;
  uint256 private _totalSupply;&#13;
&#13;
  /**&#13;
  * @dev Total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return _totalSupply;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param owner The address to query the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address owner) public view returns (uint256) {&#13;
    return _balances[owner];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param owner address The address which owns the funds.&#13;
   * @param spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(&#13;
    address owner,&#13;
    address spender&#13;
   )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    return _allowed[owner][spender];&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified address&#13;
  * @param to The address to transfer to.&#13;
  * @param value The amount to be transferred.&#13;
  */&#13;
  function transfer(address to, uint256 value) public returns (bool) {&#13;
    _transfer(msg.sender, to, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address spender, uint256 value) public returns (bool) {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = value;&#13;
    emit Approval(msg.sender, spender, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param from address The address which you want to send tokens from&#13;
   * @param to address The address which you want to transfer to&#13;
   * @param value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(&#13;
    address from,&#13;
    address to,&#13;
    uint256 value&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(value &lt;= _allowed[from][msg.sender]);&#13;
&#13;
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);&#13;
    _transfer(from, to, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed_[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseAllowance(&#13;
    address spender,&#13;
    uint256 addedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = (&#13;
      _allowed[msg.sender][spender].add(addedValue));&#13;
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed_[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseAllowance(&#13;
    address spender,&#13;
    uint256 subtractedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = (&#13;
      _allowed[msg.sender][spender].sub(subtractedValue));&#13;
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified addresses&#13;
  * @param from The address to transfer from.&#13;
  * @param to The address to transfer to.&#13;
  * @param value The amount to be transferred.&#13;
  */&#13;
  function _transfer(address from, address to, uint256 value) internal {&#13;
    require(value &lt;= _balances[from]);&#13;
    require(to != address(0));&#13;
&#13;
    _balances[from] = _balances[from].sub(value);&#13;
    _balances[to] = _balances[to].add(value);&#13;
    emit Transfer(from, to, value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that mints an amount of the token and assigns it to&#13;
   * an account. This encapsulates the modification of balances such that the&#13;
   * proper events are emitted.&#13;
   * @param account The account that will receive the created tokens.&#13;
   * @param value The amount that will be created.&#13;
   */&#13;
  function _mint(address account, uint256 value) internal {&#13;
    require(account != 0);&#13;
    _totalSupply = _totalSupply.add(value);&#13;
    _balances[account] = _balances[account].add(value);&#13;
    emit Transfer(address(0), account, value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that burns an amount of the token of a given&#13;
   * account.&#13;
   * @param account The account whose tokens will be burnt.&#13;
   * @param value The amount that will be burnt.&#13;
   */&#13;
  function _burn(address account, uint256 value) internal {&#13;
    require(account != 0);&#13;
    require(value &lt;= _balances[account]);&#13;
&#13;
    _totalSupply = _totalSupply.sub(value);&#13;
    _balances[account] = _balances[account].sub(value);&#13;
    emit Transfer(account, address(0), value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that burns an amount of the token of a given&#13;
   * account, deducting from the sender's allowance for said account. Uses the&#13;
   * internal burn function.&#13;
   * @param account The account whose tokens will be burnt.&#13;
   * @param value The amount that will be burnt.&#13;
   */&#13;
  function _burnFrom(address account, uint256 value) internal {&#13;
    require(value &lt;= _allowed[account][msg.sender]);&#13;
&#13;
    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,&#13;
    // this function needs to emit an event with the updated approval.&#13;
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(&#13;
      value);&#13;
    _burn(account, value);&#13;
  }&#13;
}&#13;
&#13;
contract Pausable is Ownable {&#13;
&#13;
    bool public paused = false;&#13;
&#13;
    event Pause();&#13;
    event Unpause();&#13;
&#13;
    /**&#13;
     * @dev Modifier to make a function callable only when the contract is not paused.&#13;
     */&#13;
    modifier whenNotPaused() {&#13;
        require(!paused, "Has to be unpaused");&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Modifier to make a function callable only when the contract is paused.&#13;
     */&#13;
    modifier whenPaused() {&#13;
        require(paused, "Has to be paused");&#13;
        _;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev called by the owner to pause, triggers stopped state&#13;
     */&#13;
    function pause() public onlyOwner whenNotPaused {&#13;
        paused = true;&#13;
        emit Pause();&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev called by the owner to unpause, returns to normal state&#13;
     */&#13;
    function unpause() public onlyOwner whenPaused {&#13;
        paused = false;&#13;
        emit Unpause();&#13;
    }&#13;
}&#13;
&#13;
contract ERC20Detailed is IERC20 {&#13;
  string private _name;&#13;
  string private _symbol;&#13;
  uint8 private _decimals;&#13;
&#13;
  constructor(string name, string symbol, uint8 decimals) public {&#13;
    _name = name;&#13;
    _symbol = symbol;&#13;
    _decimals = decimals;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the name of the token.&#13;
   */&#13;
  function name() public view returns(string) {&#13;
    return _name;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the symbol of the token.&#13;
   */&#13;
  function symbol() public view returns(string) {&#13;
    return _symbol;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the number of decimals of the token.&#13;
   */&#13;
  function decimals() public view returns(uint8) {&#13;
    return _decimals;&#13;
  }&#13;
}&#13;
&#13;
contract PausableToken is ERC20, Pausable {&#13;
&#13;
    function transfer(address to, uint256 value) public whenNotPaused returns (bool) {&#13;
        return super.transfer(to, value);&#13;
    }&#13;
&#13;
    function transferFrom(address from, address to, uint256 value) public whenNotPaused returns (bool) {&#13;
        return super.transferFrom(from, to, value);&#13;
    }&#13;
&#13;
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {&#13;
        return super.approve(spender, value);&#13;
    }&#13;
&#13;
    function increaseAllowance(address spender, uint256 addedValue) public whenNotPaused returns (bool) {&#13;
        return super.increaseAllowance(spender, addedValue);&#13;
    }&#13;
&#13;
    function decreaseAllowance(address spender, uint256 subtractedValue) public whenNotPaused returns (bool) {&#13;
        return super.decreaseAllowance(spender, subtractedValue);&#13;
    }&#13;
}&#13;
&#13;
contract IPCOToken is PausableToken, ERC20Detailed {&#13;
    string public termsUrl = "http://xixoio.com/terms";&#13;
    uint256 public hardCap;&#13;
&#13;
    /**&#13;
     * Token constructor, newly created token is paused&#13;
     * @dev decimals are hardcoded to 18&#13;
     */&#13;
    constructor(string _name, string _symbol, uint256 _hardCap) ERC20Detailed(_name, _symbol, 18) public {&#13;
        require(_hardCap &gt; 0, "Hard cap can't be zero.");&#13;
        require(bytes(_name).length &gt; 0, "Name must be defined.");&#13;
        require(bytes(_symbol).length &gt; 0, "Symbol must be defined.");&#13;
        hardCap = _hardCap;&#13;
        pause();&#13;
    }&#13;
&#13;
    /**&#13;
     * Minting function&#13;
     * @dev doesn't allow minting of more tokens than hard cap&#13;
     */&#13;
    function mint(address to, uint256 value) public onlyOwner returns (bool) {&#13;
        require(totalSupply().add(value) &lt;= hardCap, "Mint of this amount would exceed the hard cap.");&#13;
        _mint(to, value);&#13;
        return true;&#13;
    }&#13;
}
/* ==================================================================== */
/* Copyright (c) 2018 The TokenTycoon Project.  All rights reserved.
/* 
/* https://tokentycoon.io
/*  
/* authors <span class="__cf_email__" data-cfemail="b3c1dad0d8dbc6ddc7d6c19dc0dbd6ddf3d4ded2dadf9dd0dcde">[email protected]</span>   &#13;
/*         <span class="__cf_email__" data-cfemail="087b7b6d7b7d666c61666f486f65696164266b6765">[email protected]</span>            &#13;
/* ==================================================================== */&#13;
&#13;
pragma solidity ^0.4.23;&#13;
&#13;
contract AccessAdmin {&#13;
    bool public isPaused = false;&#13;
    address public addrAdmin;  &#13;
&#13;
    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);&#13;
&#13;
    constructor() public {&#13;
        addrAdmin = msg.sender;&#13;
    }  &#13;
&#13;
&#13;
    modifier onlyAdmin() {&#13;
        require(msg.sender == addrAdmin);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier whenNotPaused() {&#13;
        require(!isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier whenPaused {&#13;
        require(isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    function setAdmin(address _newAdmin) external onlyAdmin {&#13;
        require(_newAdmin != address(0));&#13;
        emit AdminTransferred(addrAdmin, _newAdmin);&#13;
        addrAdmin = _newAdmin;&#13;
    }&#13;
&#13;
    function doPause() external onlyAdmin whenNotPaused {&#13;
        isPaused = true;&#13;
    }&#13;
&#13;
    function doUnpause() external onlyAdmin whenPaused {&#13;
        isPaused = false;&#13;
    }&#13;
}&#13;
&#13;
contract AccessService is AccessAdmin {&#13;
    address public addrService;&#13;
    address public addrFinance;&#13;
&#13;
    modifier onlyService() {&#13;
        require(msg.sender == addrService);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyFinance() {&#13;
        require(msg.sender == addrFinance);&#13;
        _;&#13;
    }&#13;
&#13;
    function setService(address _newService) external {&#13;
        require(msg.sender == addrService || msg.sender == addrAdmin);&#13;
        require(_newService != address(0));&#13;
        addrService = _newService;&#13;
    }&#13;
&#13;
    function setFinance(address _newFinance) external {&#13;
        require(msg.sender == addrFinance || msg.sender == addrAdmin);&#13;
        require(_newFinance != address(0));&#13;
        addrFinance = _newFinance;&#13;
    }&#13;
&#13;
    function withdraw(address _target, uint256 _amount) &#13;
        external &#13;
    {&#13;
        require(msg.sender == addrFinance || msg.sender == addrAdmin);&#13;
        require(_amount &gt; 0);&#13;
        address receiver = _target == address(0) ? addrFinance : _target;&#13;
        uint256 balance = address(this).balance;&#13;
        if (_amount &lt; balance) {&#13;
            receiver.transfer(_amount);&#13;
        } else {&#13;
            receiver.transfer(address(this).balance);&#13;
        }      &#13;
    }&#13;
}&#13;
&#13;
interface WonderTokenInterface {&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
    function safeGiveByContract(uint256 _tokenId, address _to) external;&#13;
    function getProtoIdByTokenId(uint256 _tokenId) external view returns(uint256); &#13;
}&#13;
&#13;
interface ManagerTokenInterface {&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
    function safeGiveByContract(uint256 _tokenId, address _to) external;&#13;
    function getProtoIdByTokenId(uint256 _tokenId) external view returns(uint256);&#13;
}&#13;
&#13;
interface TalentCardInterface {&#13;
    function safeSendCard(uint256 _amount, address _to) external;&#13;
}&#13;
&#13;
interface ERC20BaseInterface {&#13;
    function balanceOf(address _from) external view returns(uint256);&#13;
    function transfer(address _to, uint256 _value) external;&#13;
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);&#13;
    function approve(address _spender, uint256 _value) external; &#13;
}&#13;
&#13;
contract TTCInterface is ERC20BaseInterface {&#13;
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) external returns (bool);&#13;
}&#13;
&#13;
/// This Random is inspired by https://github.com/axiomzen/eth-random&#13;
contract Random {&#13;
    uint256 _seed;&#13;
&#13;
    function _rand() internal returns (uint256) {&#13;
        _seed = uint256(keccak256(abi.encodePacked(_seed, blockhash(block.number - 1), block.coinbase, block.difficulty)));&#13;
        return _seed;&#13;
    }&#13;
&#13;
    function _randBySeed(uint256 _outSeed) internal view returns (uint256) {&#13;
        return uint256(keccak256(abi.encodePacked(_outSeed, blockhash(block.number - 1), block.coinbase, block.difficulty)));&#13;
    }&#13;
}&#13;
&#13;
&#13;
contract TTLottery is AccessService, Random {&#13;
    TTCInterface ttcToken;&#13;
    ManagerTokenInterface ttmToken;&#13;
    WonderTokenInterface ttwToken;&#13;
    TalentCardInterface tttcToken;&#13;
&#13;
    event ManagerSold(&#13;
        address indexed buyer,&#13;
        address indexed buyTo,&#13;
        uint256 mgrId,&#13;
        uint256 nextTokenId&#13;
    );&#13;
&#13;
    event WonderSold(&#13;
        address indexed buyer,&#13;
        address indexed buyTo,&#13;
        uint256 wonderId,&#13;
        uint256 nextTokenId&#13;
    );&#13;
&#13;
    event LotteryResult(&#13;
        address indexed buyer,&#13;
        address indexed buyTo,&#13;
        uint256 lotteryCount,&#13;
        uint256 lotteryRet&#13;
    );&#13;
&#13;
    constructor() public {&#13;
        addrAdmin = msg.sender;&#13;
        addrFinance = msg.sender;&#13;
        addrService = msg.sender;&#13;
&#13;
        ttcToken = TTCInterface(0xfB673F08FC82807b4D0E139e794e3b328d63551f);&#13;
    }&#13;
&#13;
    function setTTMTokenAddress(address _addr) external onlyAdmin {&#13;
        require(_addr != address(0));&#13;
        ttmToken = ManagerTokenInterface(_addr);&#13;
    }&#13;
&#13;
    function setTTWTokenAddress(address _addr) external onlyAdmin {&#13;
        require(_addr != address(0));&#13;
        ttwToken = WonderTokenInterface(_addr);&#13;
    }&#13;
&#13;
    function setTTCTokenAddress(address _addr) external onlyAdmin {&#13;
        require(_addr != address(0));&#13;
        ttcToken = TTCInterface(_addr);&#13;
    }&#13;
&#13;
    function setTalentCardAddress(address _addr) external onlyAdmin {&#13;
        require(_addr != address(0));&#13;
        tttcToken = TalentCardInterface(_addr);&#13;
    }&#13;
    &#13;
    mapping (address =&gt; uint64) public lotteryHistory; &#13;
&#13;
    uint64 public nextLotteryTTMTokenId4 = 211;         // ManagerId: 4, tokenId: 211~285, lotteryRet:4 &#13;
    uint64 public nextLotteryTTMTokenId5 = 286;         // ManagerId: 5, tokenId: 286~360, lotteryRet:5&#13;
    uint64 public nextLotteryTTMTokenId9 = 511;         // ManagerId: 9, tokenId: 511~560, lotteryRet:6&#13;
    uint64 public nextLotteryTTMTokenId10 = 561;        // ManagerId:10, tokenId: 561~610, lotteryRet:7&#13;
&#13;
    uint64 public nextLotteryTTWTokenId3 = 91;          // WonderId:  3, tokenId:  91~150, lotteryRet:8&#13;
    uint64 public nextLotteryTTWTokenId4 = 151;         // WonderId:  4, tokenId: 151~180, lotteryRet:9&#13;
&#13;
    function setNextLotteryTTMTokenId4(uint64 _val) external onlyAdmin {&#13;
        require(nextLotteryTTMTokenId4 &gt;= 211 &amp;&amp; nextLotteryTTMTokenId4 &lt;= 286);&#13;
        nextLotteryTTMTokenId4 = _val;&#13;
    }&#13;
&#13;
    function setNextLotteryTTMTokenId5(uint64 _val) external onlyAdmin {&#13;
        require(nextLotteryTTMTokenId5 &gt;= 286 &amp;&amp; nextLotteryTTMTokenId5 &lt;= 361);&#13;
        nextLotteryTTMTokenId5 = _val;&#13;
    }&#13;
&#13;
    function setNextLotteryTTMTokenId9(uint64 _val) external onlyAdmin {&#13;
        require(nextLotteryTTMTokenId9 &gt;= 511 &amp;&amp; nextLotteryTTMTokenId9 &lt;= 561);&#13;
        nextLotteryTTMTokenId9 = _val;&#13;
    }&#13;
&#13;
    function setNextLotteryTTMTokenId10(uint64 _val) external onlyAdmin {&#13;
        require(nextLotteryTTMTokenId10 &gt;= 561 &amp;&amp; nextLotteryTTMTokenId10 &lt;= 611);&#13;
        nextLotteryTTMTokenId10 = _val;&#13;
    }&#13;
&#13;
    function setNextLotteryTTWTokenId3(uint64 _val) external onlyAdmin {&#13;
        require(nextLotteryTTWTokenId3 &gt;= 91 &amp;&amp; nextLotteryTTWTokenId3 &lt;= 151);&#13;
        nextLotteryTTWTokenId3 = _val;&#13;
    }&#13;
&#13;
    function setNextLotteryTTWTokenId4(uint64 _val) external onlyAdmin {&#13;
        require(nextLotteryTTWTokenId4 &gt;= 151 &amp;&amp; nextLotteryTTWTokenId4 &lt;= 181);&#13;
        nextLotteryTTWTokenId4 = _val;&#13;
    }&#13;
&#13;
    function _getExtraParam(bytes _extraData) &#13;
        private &#13;
        pure&#13;
        returns(address addr, uint256 lotteryCount) &#13;
    {&#13;
        assembly { addr := mload(add(_extraData, 20)) } &#13;
        lotteryCount = uint256(_extraData[20]);&#13;
    }&#13;
&#13;
    function receiveApproval(address _sender, uint256 _value, address _token, bytes _extraData) &#13;
        external&#13;
        whenNotPaused &#13;
    {&#13;
        require(msg.sender == address(ttcToken));&#13;
        require(_extraData.length == 21);&#13;
        (address toAddr, uint256 lotteryCount) = _getExtraParam(_extraData);&#13;
        require(ttcToken.transferFrom(_sender, address(this), _value));&#13;
        if (lotteryCount == 1) {&#13;
            _lottery(_value, toAddr, _sender);&#13;
        } else if(lotteryCount == 5) {&#13;
            _lottery5(_value, toAddr, _sender);&#13;
        } else {&#13;
            require(false, "Invalid lottery count");&#13;
        }&#13;
    }&#13;
&#13;
    function lotteryByETH(address _gameWalletAddr) &#13;
        external &#13;
        payable&#13;
        whenNotPaused &#13;
    {&#13;
        _lottery(msg.value, _gameWalletAddr, msg.sender);&#13;
    }&#13;
&#13;
    function lotteryByETH5(address _gameWalletAddr) &#13;
        external &#13;
        payable&#13;
        whenNotPaused &#13;
    {&#13;
        _lottery5(msg.value, _gameWalletAddr, msg.sender);&#13;
    }&#13;
&#13;
    function _lotteryCard(uint256 _seed, address _gameWalletAddr) &#13;
        private &#13;
        returns(uint256 lotteryRet)&#13;
    {&#13;
        uint256 rdm = _seed % 10000;&#13;
        if (rdm &lt; 6081) {&#13;
            tttcToken.safeSendCard(1, _gameWalletAddr);&#13;
            lotteryRet = 1;&#13;
        } else if (rdm &lt; 8108) {&#13;
            tttcToken.safeSendCard(3, _gameWalletAddr);&#13;
            lotteryRet = 2;&#13;
        } else if (rdm &lt; 9324) {&#13;
            tttcToken.safeSendCard(5, _gameWalletAddr);&#13;
            lotteryRet = 3;&#13;
        } else {&#13;
            tttcToken.safeSendCard(10, _gameWalletAddr);&#13;
            lotteryRet = 4;&#13;
        }&#13;
    }&#13;
&#13;
    function _lotteryCardNoSend(uint256 _seed)&#13;
        private&#13;
        pure &#13;
        returns(uint256 lotteryRet, uint256 cardCnt) &#13;
    {&#13;
        uint256 rdm = _seed % 10000;&#13;
        if (rdm &lt; 6081) {&#13;
            cardCnt = 1;&#13;
            lotteryRet = 1;&#13;
        } else if (rdm &lt; 8108) {&#13;
            cardCnt = 3;&#13;
            lotteryRet = 2;&#13;
        } else if (rdm &lt; 9324) {&#13;
            cardCnt = 5;&#13;
            lotteryRet = 3;&#13;
        } else {&#13;
            cardCnt = 10;&#13;
            lotteryRet = 4;&#13;
        }&#13;
    }&#13;
&#13;
    function _lotteryToken(uint256 _seed, address _gameWalletAddr, address _buyer) &#13;
        private &#13;
        returns(uint256 lotteryRet) &#13;
    {&#13;
        uint256[6] memory weightArray;&#13;
        uint256 totalWeight = 0;&#13;
        if (nextLotteryTTMTokenId4 &lt;= 285) {&#13;
            totalWeight += 2020;&#13;
            weightArray[0] = totalWeight;&#13;
        }&#13;
        if (nextLotteryTTMTokenId5 &lt;= 360) {&#13;
            totalWeight += 2020;&#13;
            weightArray[1] = totalWeight;&#13;
        }&#13;
        if (nextLotteryTTMTokenId9 &lt;= 560) {&#13;
            totalWeight += 1340;&#13;
            weightArray[2] = totalWeight;&#13;
        }&#13;
        if (nextLotteryTTMTokenId10 &lt;= 610) {&#13;
            totalWeight += 1340;&#13;
            weightArray[3] = totalWeight;&#13;
        }&#13;
        if (nextLotteryTTWTokenId3 &lt;= 150) {&#13;
            totalWeight += 2220;&#13;
            weightArray[4] = totalWeight;&#13;
        }&#13;
        if (nextLotteryTTWTokenId4 &lt;= 180) {&#13;
            totalWeight += 1000;&#13;
            weightArray[5] = totalWeight;&#13;
        }&#13;
&#13;
        if (totalWeight &gt; 0) {&#13;
            uint256 rdm = _seed % totalWeight;&#13;
            for (uint32 i = 0; i &lt; 6; ++i) {&#13;
                if (weightArray[i] == 0 || rdm &gt;= weightArray[i]) {&#13;
                    continue;&#13;
                }&#13;
                if (i == 0) {&#13;
                    nextLotteryTTMTokenId4 += 1;&#13;
                    ttmToken.safeGiveByContract(nextLotteryTTMTokenId4 - 1, _gameWalletAddr);&#13;
                    emit ManagerSold(_buyer, _gameWalletAddr, 4, nextLotteryTTMTokenId4);&#13;
                } else if (i == 1) {&#13;
                    nextLotteryTTMTokenId5 += 1;&#13;
                    ttmToken.safeGiveByContract(nextLotteryTTMTokenId5 - 1, _gameWalletAddr);&#13;
                    emit ManagerSold(_buyer, _gameWalletAddr, 5, nextLotteryTTMTokenId5);&#13;
                } else if (i == 2) {&#13;
                    nextLotteryTTMTokenId9 += 1;&#13;
                    ttmToken.safeGiveByContract(nextLotteryTTMTokenId9 - 1, _gameWalletAddr);&#13;
                    emit ManagerSold(_buyer, _gameWalletAddr, 9, nextLotteryTTMTokenId9);&#13;
                } else if (i == 3) {&#13;
                    nextLotteryTTMTokenId10 += 1;&#13;
                    ttmToken.safeGiveByContract(nextLotteryTTMTokenId10 - 1, _gameWalletAddr);&#13;
                    emit ManagerSold(_buyer, _gameWalletAddr, 10, nextLotteryTTMTokenId10);&#13;
                } else if (i == 4) {&#13;
                    nextLotteryTTWTokenId3 += 1;&#13;
                    ttwToken.safeGiveByContract(nextLotteryTTWTokenId3 - 1, _gameWalletAddr);&#13;
                    emit WonderSold(_buyer, _gameWalletAddr, 3, nextLotteryTTWTokenId3);&#13;
                } else {&#13;
                    nextLotteryTTWTokenId4 += 1;&#13;
                    ttwToken.safeGiveByContract(nextLotteryTTWTokenId4 - 1, _gameWalletAddr);&#13;
                    emit WonderSold(_buyer, _gameWalletAddr, 4, nextLotteryTTWTokenId4);&#13;
                }&#13;
                lotteryRet = i + 5;&#13;
                break;&#13;
            } &#13;
        }&#13;
    }&#13;
&#13;
    function _lottery(uint256 _value, address _gameWalletAddr, address _buyer) &#13;
        private &#13;
    {&#13;
        require(_value == 0.039 ether);&#13;
        require(_gameWalletAddr != address(0));&#13;
&#13;
        uint256 lotteryRet;&#13;
        uint256 seed = _rand();&#13;
        uint256 rdm = seed % 10000;&#13;
        seed /= 10000;&#13;
        if (rdm &lt; 400) {&#13;
            lotteryRet = _lotteryToken(seed, _gameWalletAddr, _buyer);&#13;
            if (lotteryRet == 0) {&#13;
                lotteryRet = _lotteryCard(seed, _gameWalletAddr);&#13;
            }&#13;
        } else {&#13;
            lotteryRet = _lotteryCard(seed, _gameWalletAddr);&#13;
        }&#13;
        lotteryHistory[_gameWalletAddr] = uint64(lotteryRet);&#13;
        emit LotteryResult(_buyer, _gameWalletAddr, 1, lotteryRet);&#13;
    }&#13;
&#13;
    function _lottery5(uint256 _value, address _gameWalletAddr, address _buyer) &#13;
        private &#13;
    {&#13;
        require(_value == 0.1755 ether);&#13;
        require(_gameWalletAddr != address(0));&#13;
&#13;
        uint256 seed = _rand();&#13;
        uint256 lotteryRet = 0;&#13;
        uint256 lRet;&#13;
        uint256 cardCountTotal = 0;&#13;
        uint256 cardCount;&#13;
        for (uint256 i = 0; i &lt; 5; ++i) {&#13;
            if (i &gt; 0) {&#13;
                seed = _randBySeed(seed);&#13;
            }&#13;
            uint256 rdm = seed % 10000;&#13;
            seed /= 10000;&#13;
            if (rdm &lt; 400) {&#13;
                lRet = _lotteryToken(seed, _gameWalletAddr, _buyer);&#13;
                if (lRet == 0) {&#13;
                    (lRet, cardCount) = _lotteryCardNoSend(seed);&#13;
                    cardCountTotal += cardCount;&#13;
                }&#13;
                lotteryRet += (lRet * (100 ** i));&#13;
            } else {&#13;
                (lRet, cardCount) = _lotteryCardNoSend(seed);&#13;
                cardCountTotal += cardCount;&#13;
                lotteryRet += (lRet * (100 ** i));&#13;
            }&#13;
        }&#13;
&#13;
        require(cardCountTotal &lt;= 50);&#13;
&#13;
        if (cardCountTotal &gt; 0) {&#13;
            tttcToken.safeSendCard(cardCountTotal, _gameWalletAddr);&#13;
        }&#13;
        lotteryHistory[_gameWalletAddr] = uint64(lotteryRet);&#13;
&#13;
        emit LotteryResult(_buyer, _gameWalletAddr, 5, lotteryRet);&#13;
    }&#13;
&#13;
    function withdrawERC20(address _erc20, address _target, uint256 _amount)&#13;
        external&#13;
    {&#13;
        require(msg.sender == addrFinance || msg.sender == addrAdmin);&#13;
        require(_amount &gt; 0);&#13;
        address receiver = _target == address(0) ? addrFinance : _target;&#13;
        ERC20BaseInterface erc20Contract = ERC20BaseInterface(_erc20);&#13;
        uint256 balance = erc20Contract.balanceOf(address(this));&#13;
        require(balance &gt; 0);&#13;
        if (_amount &lt; balance) {&#13;
            erc20Contract.transfer(receiver, _amount);&#13;
        } else {&#13;
            erc20Contract.transfer(receiver, balance);&#13;
        }   &#13;
    }&#13;
&#13;
    function getLotteryInfo(address _walletAddr)&#13;
        external&#13;
        view &#13;
        returns(&#13;
           uint64 ttmCnt4,&#13;
           uint64 ttmCnt5,&#13;
           uint64 ttmCnt9,&#13;
           uint64 ttmCnt10,&#13;
           uint64 ttWCnt3,&#13;
           uint64 ttwCnt4, &#13;
           uint64 lastLottery&#13;
        )&#13;
    {&#13;
        ttmCnt4 = 286 - nextLotteryTTMTokenId4;&#13;
        ttmCnt5 = 361 - nextLotteryTTMTokenId5;&#13;
        ttmCnt9 = 561 - nextLotteryTTMTokenId9;&#13;
        ttmCnt10 = 611 - nextLotteryTTMTokenId10;&#13;
        ttWCnt3 = 151 - nextLotteryTTWTokenId3;&#13;
        ttwCnt4 = 181 - nextLotteryTTWTokenId4;&#13;
        lastLottery = lotteryHistory[_walletAddr];&#13;
    }&#13;
}
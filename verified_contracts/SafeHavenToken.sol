pragma solidity ^0.4.24;

// Safe Haven Token Sale
//
// @authors:
// Davy Van Roy <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="076366717e297166692975687e47606a666e6b2964686a">[email protected]</a>&gt;&#13;
// Quinten De Swaef &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6617130f0812030848020348151107030026010b070f0a4805090b">[email protected]</a>&gt;&#13;
// &#13;
// Jurgen Schouppe &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="6309161104060d4d100c0f17110c0d0a001023040e020a0f4d000c0e">[email protected]</a>&gt;&#13;
// Andy Demeulemeester &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="02636c667b66676f67776e676f67677176677042656f636b6e2c616d6f">[email protected]</a>&gt;&#13;
//&#13;
// The SafeHaven contracts are based on our friends of Fundrequest Token and crowdsale contracts.&#13;
//&#13;
// By sending ETH to this contract, you agree to the terms and purchase agreement for participating in the Safe Haven Token Sale:&#13;
// https://safehaven.io/terms.php&#13;
// https://safehaven.io/purchase.php&#13;
// &#13;
// Security audit performed by LeastAuthority:&#13;
// https://github.com/FundRequest/audit-reports/raw/master/2018-02-06 - Least Authority - ICO Contracts Audit Report.pdf&#13;
&#13;
contract Controlled {&#13;
&#13;
    /// @notice The address of the controller is the only address that can call&#13;
    ///  a function with this modifier&#13;
    modifier onlyController {&#13;
        require(msg.sender == controller);&#13;
        _;&#13;
    }&#13;
&#13;
    address public controller;&#13;
&#13;
    constructor() public {controller = msg.sender;}&#13;
&#13;
    /// @notice Changes the controller of the contract&#13;
    /// @param _newController The new controller of the contract&#13;
    function changeController(address _newController) public onlyController {&#13;
        controller = _newController;&#13;
    }&#13;
}&#13;
&#13;
/// @dev `Owned` is a base level contract that assigns an `owner` that can be&#13;
///  later changed&#13;
contract Owned {&#13;
&#13;
    /// @dev `owner` is the only address that can call a function with this&#13;
    /// modifier&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    address public owner;&#13;
&#13;
    /// @notice The Constructor assigns the message sender to be `owner`&#13;
    constructor() public {owner = msg.sender;}&#13;
&#13;
    /// @notice `owner` can step down and assign some other address to this role&#13;
    /// @param _newOwner The address of the new owner. 0x0 can be used to create&#13;
    ///  an unowned neutral vault, however that cannot be undone&#13;
    function changeOwner(address _newOwner) public onlyOwner {&#13;
        owner = _newOwner;&#13;
    }&#13;
}&#13;
&#13;
&#13;
&#13;
/// @dev The token controller contract must implement these functions&#13;
contract TokenController {&#13;
  /// @notice Called when `_owner` sends ether to the MiniMe Token contract&#13;
  /// @param _owner The address that sent the ether to create tokens&#13;
  /// @return True if the ether is accepted, false if it throws&#13;
  function proxyPayment(address _owner) public payable returns(bool);&#13;
&#13;
  /// @notice Notifies the controller about a token transfer allowing the&#13;
  ///  controller to react if desired&#13;
  /// @param _from The origin of the transfer&#13;
  /// @param _to The destination of the transfer&#13;
  /// @param _amount The amount of the transfer&#13;
  /// @return False if the controller does not authorize the transfer&#13;
  function onTransfer(address _from, address _to, uint _amount) public returns(bool);&#13;
&#13;
  /// @notice Notifies the controller about an approval allowing the&#13;
  ///  controller to react if desired&#13;
  /// @param _owner The address that calls `approve()`&#13;
  /// @param _spender The spender in the `approve()` call&#13;
  /// @param _amount The amount in the `approve()` call&#13;
  /// @return False if the controller does not authorize the approval&#13;
  function onApprove(address _owner, address _spender, uint _amount)&#13;
  public&#13;
  returns(bool);&#13;
}&#13;
&#13;
&#13;
contract ApproveAndCallFallBack {&#13;
  function receiveApproval(address from, uint256 _amount, address _token, bytes _data) public;&#13;
}&#13;
&#13;
contract ERC20 {&#13;
  function totalSupply() constant public returns (uint);&#13;
&#13;
  function balanceOf(address who) constant public returns (uint256);&#13;
&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
&#13;
  function allowance(address owner, address spender) public constant returns (uint256);&#13;
&#13;
  function transferFrom(address from, address to, uint256 value) public returns (bool);&#13;
&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
&#13;
  event Approval(address indexed _owner, address indexed _spender, uint256 _value);&#13;
&#13;
  event Transfer(address indexed _from, address indexed _to, uint256 _value);&#13;
}&#13;
&#13;
&#13;
/*&#13;
    Copyright 2016, Jordi Baylina&#13;
&#13;
    This program is free software: you can redistribute it and/or modify&#13;
    it under the terms of the GNU General Public License as published by&#13;
    the Free Software Foundation, either version 3 of the License, or&#13;
    (at your option) any later version.&#13;
&#13;
    This program is distributed in the hope that it will be useful,&#13;
    but WITHOUT ANY WARRANTY; without even the implied warranty of&#13;
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the&#13;
    GNU General Public License for more details.&#13;
&#13;
    You should have received a copy of the GNU General Public License&#13;
    along with this program.  If not, see &lt;http://www.gnu.org/licenses/&gt;.&#13;
 */&#13;
&#13;
/// @title MiniMeToken Contract&#13;
/// @author Jordi Baylina&#13;
/// @dev This token contract's goal is to make it easy for anyone to clone this&#13;
///  token using the token distribution at a given block, this will allow DAO's&#13;
///  and DApps to upgrade their features in a decentralized manner without&#13;
///  affecting the original token&#13;
/// @dev It is ERC20 compliant, but still needs to under go further testing.&#13;
&#13;
&#13;
&#13;
/// @dev The actual token contract, the default controller is the msg.sender&#13;
///  that deploys the contract, so usually this token will be deployed by a&#13;
///  token controller contract, which Giveth will call a "Campaign"&#13;
contract MiniMeToken is Controlled {&#13;
&#13;
    string public name;                //The Token's name: e.g. DigixDAO Tokens&#13;
    uint8 public decimals;             //Number of decimals of the smallest unit&#13;
    string public symbol;              //An identifier: e.g. REP&#13;
    string public version = "1.0.0"; &#13;
&#13;
    /// @dev `Checkpoint` is the structure that attaches a block number to a&#13;
    ///  given value, the block number attached is the one that last changed the&#13;
    ///  value&#13;
    struct Checkpoint {&#13;
&#13;
        // `fromBlock` is the block number that the value was generated from&#13;
        uint128 fromBlock;&#13;
&#13;
        // `value` is the amount of tokens at a specific block number&#13;
        uint128 value;&#13;
    }&#13;
&#13;
    // `parentToken` is the Token address that was cloned to produce this token;&#13;
    //  it will be 0x0 for a token that was not cloned&#13;
    MiniMeToken public parentToken;&#13;
&#13;
    // `parentSnapShotBlock` is the block number from the Parent Token that was&#13;
    //  used to determine the initial distribution of the Clone Token&#13;
    uint public parentSnapShotBlock;&#13;
&#13;
    // `creationBlock` is the block number that the Clone Token was created&#13;
    uint public creationBlock;&#13;
&#13;
    // `balances` is the map that tracks the balance of each address, in this&#13;
    //  contract when the balance changes the block number that the change&#13;
    //  occurred is also included in the map&#13;
    mapping (address =&gt; Checkpoint[]) balances;&#13;
&#13;
    // `allowed` tracks any extra transfer rights as in all ERC20 tokens&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
&#13;
    // Tracks the history of the `totalSupply` of the token&#13;
    Checkpoint[] totalSupplyHistory;&#13;
&#13;
    // Flag that determines if the token is transferable or not.&#13;
    bool public transfersEnabled;&#13;
&#13;
    // The factory used to create new clone tokens&#13;
    MiniMeTokenFactory public tokenFactory;&#13;
&#13;
////////////////&#13;
// Constructor&#13;
////////////////&#13;
&#13;
    /// @notice Constructor to create a MiniMeToken&#13;
    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that&#13;
    ///  will create the Clone token contracts, the token factory needs to be&#13;
    ///  deployed first&#13;
    /// @param _parentToken Address of the parent token, set to 0x0 if it is a&#13;
    ///  new token&#13;
    /// @param _parentSnapShotBlock Block of the parent token that will&#13;
    ///  determine the initial distribution of the clone token, set to 0 if it&#13;
    ///  is a new token&#13;
    /// @param _tokenName Name of the new token&#13;
    /// @param _decimalUnits Number of decimals of the new token&#13;
    /// @param _tokenSymbol Token Symbol for the new token&#13;
    /// @param _transfersEnabled If true, tokens will be able to be transferred&#13;
    constructor(&#13;
        address _tokenFactory,&#13;
        address _parentToken,&#13;
        uint _parentSnapShotBlock,&#13;
        string _tokenName,&#13;
        uint8 _decimalUnits,&#13;
        string _tokenSymbol,&#13;
        bool _transfersEnabled&#13;
    ) public &#13;
    {&#13;
        tokenFactory = MiniMeTokenFactory(_tokenFactory);&#13;
        name = _tokenName;                                 // Set the name&#13;
        decimals = _decimalUnits;                          // Set the decimals&#13;
        symbol = _tokenSymbol;                             // Set the symbol&#13;
        parentToken = MiniMeToken(_parentToken);&#13;
        parentSnapShotBlock = _parentSnapShotBlock;&#13;
        transfersEnabled = _transfersEnabled;&#13;
        creationBlock = block.number;&#13;
    }&#13;
&#13;
&#13;
///////////////////&#13;
// ERC20 Methods&#13;
///////////////////&#13;
&#13;
    /// @notice Send `_amount` tokens to `_to` from `msg.sender`&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return Whether the transfer was successful or not&#13;
    function transfer(address _to, uint256 _amount) public returns (bool success) {&#13;
        require(transfersEnabled);&#13;
        return doTransfer(msg.sender, _to, _amount);&#13;
    }&#13;
&#13;
    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it&#13;
    ///  is approved by `_from`&#13;
    /// @param _from The address holding the tokens being transferred&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return True if the transfer was successful&#13;
    function transferFrom(address _from, address _to, uint256 _amount) &#13;
        public returns (bool success) &#13;
        {&#13;
        // The controller of this contract can move tokens around at will,&#13;
        //  this is important to recognize! Confirm that you trust the&#13;
        //  controller of this contract, which in most situations should be&#13;
        //  another open source smart contract or 0x0&#13;
        if (msg.sender != controller) {&#13;
            require(transfersEnabled);&#13;
&#13;
            // The standard ERC 20 transferFrom functionality&#13;
            if (allowed[_from][msg.sender] &lt; _amount) {&#13;
                return false;&#13;
            }&#13;
            allowed[_from][msg.sender] -= _amount;&#13;
        }&#13;
        return doTransfer(_from, _to, _amount);&#13;
    }&#13;
&#13;
    /// @dev This is the actual transfer function in the token contract, it can&#13;
    ///  only be called by other functions in this contract.&#13;
    /// @param _from The address holding the tokens being transferred&#13;
    /// @param _to The address of the recipient&#13;
    /// @param _amount The amount of tokens to be transferred&#13;
    /// @return True if the transfer was successful&#13;
    function doTransfer(address _from, address _to, uint _amount&#13;
    ) internal returns(bool) &#13;
    {&#13;
&#13;
           if (_amount == 0) {&#13;
               return true;&#13;
           }&#13;
&#13;
           require(parentSnapShotBlock &lt; block.number);&#13;
&#13;
           // Do not allow transfer to 0x0 or the token contract itself&#13;
           require((_to != 0) &amp;&amp; (_to != address(this)));&#13;
&#13;
           // If the amount being transfered is more than the balance of the&#13;
           //  account the transfer returns false&#13;
           uint256 previousBalanceFrom = balanceOfAt(_from, block.number);&#13;
           if (previousBalanceFrom &lt; _amount) {&#13;
               return false;&#13;
           }&#13;
&#13;
           // Alerts the token controller of the transfer&#13;
           if (isContract(controller)) {&#13;
               require(TokenController(controller).onTransfer(_from, _to, _amount));&#13;
           }&#13;
&#13;
           // First update the balance array with the new value for the address&#13;
           //  sending the tokens&#13;
           updateValueAtNow(balances[_from], previousBalanceFrom - _amount);&#13;
&#13;
           // Then update the balance array with the new value for the address&#13;
           //  receiving the tokens&#13;
           uint256 previousBalanceTo = balanceOfAt(_to, block.number);&#13;
           require(previousBalanceTo + _amount &gt;= previousBalanceTo); // Check for overflow&#13;
           updateValueAtNow(balances[_to], previousBalanceTo + _amount);&#13;
&#13;
           // An event to make the transfer easy to find on the blockchain&#13;
           emit Transfer(_from, _to, _amount);&#13;
&#13;
           return true;&#13;
    }&#13;
&#13;
    /// @param _owner The address that's balance is being requested&#13;
    /// @return The balance of `_owner` at the current block&#13;
    function balanceOf(address _owner) public constant returns (uint256 balance) {&#13;
        return balanceOfAt(_owner, block.number);&#13;
    }&#13;
&#13;
    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on&#13;
    ///  its behalf. This is a modified version of the ERC20 approve function&#13;
    ///  to be a little bit safer&#13;
    /// @param _spender The address of the account able to transfer the tokens&#13;
    /// @param _amount The amount of tokens to be approved for transfer&#13;
    /// @return True if the approval was successful&#13;
    function approve(address _spender, uint256 _amount) public returns (bool success) {&#13;
        require(transfersEnabled);&#13;
&#13;
        // To change the approve amount you first have to reduce the addresses`&#13;
        //  allowance to zero by calling `approve(_spender,0)` if it is not&#13;
        //  already 0 to mitigate the race condition described here:&#13;
        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));&#13;
        return doApprove(_spender, _amount);&#13;
    }&#13;
&#13;
    function doApprove(address _spender, uint256 _amount) internal returns (bool success) {&#13;
        require(transfersEnabled);&#13;
        if (isContract(controller)) {&#13;
            require(TokenController(controller).onApprove(msg.sender, _spender, _amount));&#13;
        }&#13;
        allowed[msg.sender][_spender] = _amount;&#13;
        emit Approval(msg.sender, _spender, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev This function makes it easy to read the `allowed[]` map&#13;
    /// @param _owner The address of the account that owns the token&#13;
    /// @param _spender The address of the account able to transfer the tokens&#13;
    /// @return Amount of remaining tokens of _owner that _spender is allowed&#13;
    ///  to spend&#13;
    function allowance(address _owner, address _spender&#13;
    ) public constant returns (uint256 remaining) &#13;
    {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on&#13;
    ///  its behalf, and then a function is triggered in the contract that is&#13;
    ///  being approved, `_spender`. This allows users to use their tokens to&#13;
    ///  interact with contracts in one function call instead of two&#13;
    /// @param _spender The address of the contract able to transfer the tokens&#13;
    /// @param _amount The amount of tokens to be approved for transfer&#13;
    /// @return True if the function call was successful&#13;
    function approveAndCall(address _spender, uint256 _amount, bytes _extraData&#13;
    ) public returns (bool success) &#13;
    {&#13;
        require(approve(_spender, _amount));&#13;
&#13;
        ApproveAndCallFallBack(_spender).receiveApproval(&#13;
            msg.sender,&#13;
            _amount,&#13;
            this,&#13;
            _extraData&#13;
        );&#13;
&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @dev This function makes it easy to get the total number of tokens&#13;
    /// @return The total number of tokens&#13;
    function totalSupply() public constant returns (uint) {&#13;
        return totalSupplyAt(block.number);&#13;
    }&#13;
&#13;
&#13;
////////////////&#13;
// Query balance and totalSupply in History&#13;
////////////////&#13;
&#13;
    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`&#13;
    /// @param _owner The address from which the balance will be retrieved&#13;
    /// @param _blockNumber The block number when the balance is queried&#13;
    /// @return The balance at `_blockNumber`&#13;
    function balanceOfAt(address _owner, uint _blockNumber) public constant&#13;
        returns (uint) &#13;
    {&#13;
        // These next few lines are used when the balance of the token is&#13;
        //  requested before a check point was ever created for this token, it&#13;
        //  requires that the `parentToken.balanceOfAt` be queried at the&#13;
        //  genesis block for that token as this contains initial balance of&#13;
        //  this token&#13;
        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock &gt; _blockNumber)) {&#13;
            if (address(parentToken) != 0) {&#13;
                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));&#13;
            } else {&#13;
                // Has no parent&#13;
                return 0;&#13;
            }&#13;
&#13;
        // This will return the expected balance during normal situations&#13;
        } else {&#13;
            return getValueAt(balances[_owner], _blockNumber);&#13;
        }&#13;
    }&#13;
&#13;
    /// @notice Total amount of tokens at a specific `_blockNumber`.&#13;
    /// @param _blockNumber The block number when the totalSupply is queried&#13;
    /// @return The total amount of tokens at `_blockNumber`&#13;
    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {&#13;
&#13;
        // These next few lines are used when the totalSupply of the token is&#13;
        //  requested before a check point was ever created for this token, it&#13;
        //  requires that the `parentToken.totalSupplyAt` be queried at the&#13;
        //  genesis block for this token as that contains totalSupply of this&#13;
        //  token at this block number.&#13;
        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock &gt; _blockNumber)) {&#13;
            if (address(parentToken) != 0) {&#13;
                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));&#13;
            } else {&#13;
                return 0;&#13;
            }&#13;
&#13;
        // This will return the expected totalSupply during normal situations&#13;
        } else {&#13;
            return getValueAt(totalSupplyHistory, _blockNumber);&#13;
        }&#13;
    }&#13;
&#13;
////////////////&#13;
// Clone Token Method&#13;
////////////////&#13;
&#13;
    /// @notice Creates a new clone token with the initial distribution being&#13;
    ///  this token at `_snapshotBlock`&#13;
    /// @param _cloneTokenName Name of the clone token&#13;
    /// @param _cloneDecimalUnits Number of decimals of the smallest unit&#13;
    /// @param _cloneTokenSymbol Symbol of the clone token&#13;
    /// @param _snapshotBlock Block when the distribution of the parent token is&#13;
    ///  copied to set the initial distribution of the new clone token;&#13;
    ///  if the block is zero than the actual block, the current block is used&#13;
    /// @param _transfersEnabled True if transfers are allowed in the clone&#13;
    /// @return The address of the new MiniMeToken Contract&#13;
    function createCloneToken(&#13;
        string _cloneTokenName,&#13;
        uint8 _cloneDecimalUnits,&#13;
        string _cloneTokenSymbol,&#13;
        uint _snapshotBlock,&#13;
        bool _transfersEnabled&#13;
        ) public returns(address) &#13;
    {&#13;
        if (_snapshotBlock == 0) {&#13;
            _snapshotBlock = block.number;&#13;
        }&#13;
&#13;
        MiniMeToken cloneToken = tokenFactory.createCloneToken(&#13;
            this,&#13;
            _snapshotBlock,&#13;
            _cloneTokenName,&#13;
            _cloneDecimalUnits,&#13;
            _cloneTokenSymbol,&#13;
            _transfersEnabled&#13;
            );&#13;
&#13;
        cloneToken.changeController(msg.sender);&#13;
&#13;
        // An event to make the token easy to find on the blockchain&#13;
        emit NewCloneToken(address(cloneToken), _snapshotBlock);&#13;
        return address(cloneToken);&#13;
    }&#13;
&#13;
////////////////&#13;
// Generate and destroy tokens&#13;
////////////////&#13;
&#13;
    /// @notice Generates `_amount` tokens that are assigned to `_owner`&#13;
    /// @param _owner The address that will be assigned the new tokens&#13;
    /// @param _amount The quantity of tokens generated&#13;
    /// @return True if the tokens are generated correctly&#13;
    function generateTokens(address _owner, uint _amount) &#13;
        public onlyController returns (bool) &#13;
    {&#13;
        uint curTotalSupply = totalSupply();&#13;
        require(curTotalSupply + _amount &gt;= curTotalSupply); // Check for overflow&#13;
        uint previousBalanceTo = balanceOf(_owner);&#13;
        require(previousBalanceTo + _amount &gt;= previousBalanceTo); // Check for overflow&#13;
        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);&#13;
        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);&#13;
        emit Transfer(0, _owner, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    /// @notice Burns `_amount` tokens from `_owner`&#13;
    /// @param _owner The address that will lose the tokens&#13;
    /// @param _amount The quantity of tokens to burn&#13;
    /// @return True if the tokens are burned correctly&#13;
    function destroyTokens(address _owner, uint _amount&#13;
    ) onlyController public returns (bool) &#13;
    {&#13;
        uint curTotalSupply = totalSupply();&#13;
        require(curTotalSupply &gt;= _amount);&#13;
        uint previousBalanceFrom = balanceOf(_owner);&#13;
        require(previousBalanceFrom &gt;= _amount);&#13;
        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);&#13;
        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);&#13;
        emit Transfer(_owner, 0, _amount);&#13;
        return true;&#13;
    }&#13;
&#13;
////////////////&#13;
// Enable tokens transfers&#13;
////////////////&#13;
&#13;
&#13;
    /// @notice Enables token holders to transfer their tokens freely if true&#13;
    /// @param _transfersEnabled True if transfers are allowed in the clone&#13;
    function enableTransfers(bool _transfersEnabled) public onlyController {&#13;
        transfersEnabled = _transfersEnabled;&#13;
    }&#13;
&#13;
////////////////&#13;
// Internal helper functions to query and set a value in a snapshot array&#13;
////////////////&#13;
&#13;
    /// @dev `getValueAt` retrieves the number of tokens at a given block number&#13;
    /// @param checkpoints The history of values being queried&#13;
    /// @param _block The block number to retrieve the value at&#13;
    /// @return The number of tokens being queried&#13;
    function getValueAt(Checkpoint[] storage checkpoints, uint _block) &#13;
        constant internal returns (uint) &#13;
    {&#13;
        if (checkpoints.length == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        // Shortcut for the actual value&#13;
        if (_block &gt;= checkpoints[checkpoints.length-1].fromBlock) {&#13;
            return checkpoints[checkpoints.length-1].value;&#13;
        }&#13;
            &#13;
        if (_block &lt; checkpoints[0].fromBlock) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        // Binary search of the value in the array&#13;
        uint min = 0;&#13;
        uint max = checkpoints.length - 1;&#13;
        while (max &gt; min) {&#13;
            uint mid = (max + min + 1) / 2;&#13;
            if (checkpoints[mid].fromBlock&lt;=_block) {&#13;
                min = mid;&#13;
            } else {&#13;
                max = mid-1;&#13;
            }&#13;
        }&#13;
        return checkpoints[min].value;&#13;
    }&#13;
&#13;
    /// @dev `updateValueAtNow` used to update the `balances` map and the&#13;
    ///  `totalSupplyHistory`&#13;
    /// @param checkpoints The history of data being updated&#13;
    /// @param _value The new number of tokens&#13;
    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value&#13;
    ) internal  &#13;
    {&#13;
        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length-1].fromBlock &lt; block.number)) {&#13;
               Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];&#13;
               newCheckPoint.fromBlock = uint128(block.number);&#13;
               newCheckPoint.value = uint128(_value);&#13;
           } else {&#13;
               Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length-1];&#13;
               oldCheckPoint.value = uint128(_value);&#13;
           }&#13;
    }&#13;
&#13;
    /// @dev Internal function to determine if an address is a contract&#13;
    /// @param _addr The address being queried&#13;
    /// @return True if `_addr` is a contract&#13;
    function isContract(address _addr) constant internal returns(bool) {&#13;
        uint size;&#13;
        if (_addr == 0) {&#13;
            return false;&#13;
        }&#13;
        assembly {&#13;
            size := extcodesize(_addr)&#13;
        }&#13;
        return size&gt;0;&#13;
    }&#13;
&#13;
    /// @dev Helper function to return a min betwen the two uints&#13;
    function min(uint a, uint b) pure internal returns (uint) {&#13;
        return a &lt; b ? a : b;&#13;
    }&#13;
&#13;
    /// @notice The fallback function: If the contract's controller has not been&#13;
    ///  set to 0, then the `proxyPayment` method is called which relays the&#13;
    ///  ether and creates tokens as described in the token controller contract&#13;
    function () public payable {&#13;
        require(isContract(controller));&#13;
        require(TokenController(controller).proxyPayment.value(msg.value)(msg.sender));&#13;
    }&#13;
&#13;
//////////&#13;
// Safety Methods&#13;
//////////&#13;
&#13;
    /// @notice This method can be used by the controller to extract mistakenly&#13;
    ///  sent tokens to this contract.&#13;
    /// @param _token The address of the token contract that you want to recover&#13;
    ///  set to 0 in case you want to extract ether.&#13;
    function claimTokens(address _token) public onlyController {&#13;
        if (_token == 0x0) {&#13;
            controller.transfer(address(this).balance);&#13;
            return;&#13;
        }&#13;
&#13;
        MiniMeToken token = MiniMeToken(_token);&#13;
        uint balance = token.balanceOf(this);&#13;
        token.transfer(controller, balance);&#13;
        emit ClaimedTokens(_token, controller, balance);&#13;
    }&#13;
&#13;
////////////////&#13;
// Events&#13;
////////////////&#13;
    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _amount);&#13;
    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);&#13;
    event Approval(&#13;
        address indexed _owner,&#13;
        address indexed _spender,&#13;
        uint256 _amount&#13;
        );&#13;
&#13;
}&#13;
&#13;
&#13;
&#13;
contract SafeHavenToken is MiniMeToken {&#13;
&#13;
  constructor(&#13;
    address _tokenFactory,&#13;
    address _parentToken, &#13;
    uint _parentSnapShotBlock, &#13;
    string _tokenName, &#13;
    uint8 _decimalUnits, &#13;
    string _tokenSymbol, &#13;
    bool _transfersEnabled) &#13;
    public &#13;
    MiniMeToken(&#13;
      _tokenFactory,&#13;
      _parentToken, &#13;
      _parentSnapShotBlock, &#13;
      _tokenName, &#13;
      _decimalUnits, &#13;
      _tokenSymbol, &#13;
      _transfersEnabled) &#13;
  {&#13;
    //constructor&#13;
  }&#13;
&#13;
  function safeApprove(address _spender, uint256 _currentValue, uint256 _amount) public returns (bool success) {&#13;
    require(allowed[msg.sender][_spender] == _currentValue);&#13;
    return doApprove(_spender, _amount);&#13;
  }&#13;
&#13;
  function isSafeHavenToken() public pure returns (bool) {&#13;
    return true;&#13;
  }&#13;
}&#13;
&#13;
/// @dev This contract is used to generate clone contracts from a contract.&#13;
///  In solidity this is the way to create a contract from a contract of the&#13;
///  same class&#13;
contract MiniMeTokenFactory {&#13;
&#13;
    /// @notice Update the DApp by creating a new token with new functionalities&#13;
    ///  the msg.sender becomes the controller of this clone token&#13;
    /// @param _parentToken Address of the token being cloned&#13;
    /// @param _snapshotBlock Block of the parent token that will&#13;
    ///  determine the initial distribution of the clone token&#13;
    /// @param _tokenName Name of the new token&#13;
    /// @param _decimalUnits Number of decimals of the new token&#13;
    /// @param _tokenSymbol Token Symbol for the new token&#13;
    /// @param _transfersEnabled If true, tokens will be able to be transferred&#13;
    /// @return The address of the new token contract&#13;
    function createCloneToken(&#13;
        address _parentToken,&#13;
        uint _snapshotBlock,&#13;
        string _tokenName,&#13;
        uint8 _decimalUnits,&#13;
        string _tokenSymbol,&#13;
        bool _transfersEnabled&#13;
    ) public returns (MiniMeToken)&#13;
    {&#13;
        MiniMeToken newToken = new MiniMeToken(&#13;
            this,&#13;
            _parentToken,&#13;
            _snapshotBlock,&#13;
            _tokenName,&#13;
            _decimalUnits,&#13;
            _tokenSymbol,&#13;
            _transfersEnabled&#13;
        );&#13;
&#13;
        newToken.changeController(msg.sender);&#13;
        return newToken;&#13;
    }&#13;
}
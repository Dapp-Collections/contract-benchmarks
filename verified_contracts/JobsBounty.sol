pragma solidity ^0.4.24;

/**
 * @title Helps contracts guard agains reentrancy attacks.
 * @author Remco Bloemen <<span class="__cf_email__" data-cfemail="2b594e4648446b19">[email protected]</span>π.com&gt;&#13;
 * @notice If you mark a function `nonReentrant`, you should also&#13;
 * mark it `external`.&#13;
 */&#13;
contract ReentrancyGuard {&#13;
&#13;
  /**&#13;
   * @dev We use a single lock for the whole contract.&#13;
   */&#13;
  bool private reentrancyLock = false;&#13;
&#13;
  /**&#13;
   * @dev Prevents a contract from calling itself, directly or indirectly.&#13;
   * @notice If you mark a function `nonReentrant`, you should also&#13;
   * mark it `external`. Calling one nonReentrant function from&#13;
   * another is not supported. Instead, you can implement a&#13;
   * `private` function doing the actual work, and a `external`&#13;
   * wrapper marked as `nonReentrant`.&#13;
   */&#13;
  modifier nonReentrant() {&#13;
    require(!reentrancyLock);&#13;
    reentrancyLock = true;&#13;
    _;&#13;
    reentrancyLock = false;&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
  event OwnershipRenounced(address indexed previousOwner);&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   * @notice Renouncing to ownership will leave the contract without an owner.&#13;
   * It will not be possible to call the functions with the `onlyOwner`&#13;
   * modifier anymore.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipRenounced(owner);&#13;
    owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address _newOwner) public onlyOwner {&#13;
    _transferOwnership(_newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address _newOwner) internal {&#13;
    require(_newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, _newOwner);&#13;
    owner = _newOwner;&#13;
  }&#13;
}&#13;
&#13;
interface ERC20 {&#13;
    function totalSupply() external view returns (uint supply);&#13;
    function balanceOf(address _owner) external view returns (uint balance);&#13;
    function transfer(address _to, uint _value) external returns (bool success);&#13;
    function transferFrom(address _from, address _to, uint _value) external returns (bool success);&#13;
    function approve(address _spender, uint _value) external returns (bool success);&#13;
    function allowance(address _owner, address _spender) external view returns (uint remaining);&#13;
    function decimals() external view returns(uint digits);&#13;
    event Approval(address indexed _owner, address indexed _spender, uint _value);&#13;
}&#13;
&#13;
/*&#13;
* There are 4 entities in this contract - &#13;
#1 `company` - This is the company which is going to place a bounty of tokens&#13;
#2 `referrer` - This is the referrer who refers a candidate that gets a job finally&#13;
#3 `candidate` - This is the candidate who gets a job finally&#13;
#4 `owner` - Indorse as a company will be the owner of this contract&#13;
*&#13;
*/&#13;
&#13;
contract JobsBounty is Ownable, ReentrancyGuard {&#13;
    using SafeMath for uint256;&#13;
    string public companyName; //Name of the company who is putting the bounty&#13;
    string public jobPost; //Link to the job post for this Smart Contract&#13;
    uint public endDate; //Unix timestamp of the end date of this contract when the bounty can be released&#13;
    &#13;
    // On Rinkeby&#13;
    // address public INDToken = 0x656c7da9501bB3e4A5a544546230D74c154A42eb;&#13;
    // On Mainnet&#13;
    address public INDToken = 0xf8e386eda857484f5a12e4b5daa9984e06e73705;&#13;
    &#13;
    constructor(string _companyName,&#13;
                string _jobPost,&#13;
                uint _endDate&#13;
                ) public{&#13;
        companyName = _companyName;&#13;
        jobPost = _jobPost ;&#13;
        endDate = _endDate;&#13;
    }&#13;
    &#13;
    //Helper function, not really needed, but good to have for the sake of posterity&#13;
    function ownBalance() public view returns(uint256) {&#13;
        return ERC20(INDToken).balanceOf(this);&#13;
    }&#13;
    &#13;
    function payOutBounty(address _referrerAddress, address _candidateAddress) public onlyOwner nonReentrant returns(bool){&#13;
        uint256 amountCandidate = (ERC20(INDToken).balanceOf(this) / 100) * 50;&#13;
        uint256 amountReferrer = (ERC20(INDToken).balanceOf(this) / 100) * 50;&#13;
        &#13;
        assert(block.timestamp &gt;= endDate);&#13;
        // Tranferring to the candidate first&#13;
        assert(ERC20(INDToken).transfer(_candidateAddress, amountCandidate));&#13;
        assert(ERC20(INDToken).transfer(_referrerAddress, amountReferrer));&#13;
        return true;    &#13;
    }&#13;
    &#13;
    //This function can be used in 2 instances - &#13;
    // 1st one if to withdraw tokens that are accidentally send to this Contract&#13;
    // 2nd is to actually withdraw the tokens and return it to the company in case they don't find a candidate&#13;
    function withdrawERC20Token(address anyToken) public onlyOwner nonReentrant returns(bool){&#13;
        if( anyToken != address(0x0) ) {&#13;
            assert(block.timestamp &gt;= endDate);&#13;
            assert(ERC20(anyToken).transfer(owner, ERC20(anyToken).balanceOf(this)));        &#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
    &#13;
    //ETH cannot get locked in this contract. If it does, this can be used to withdraw&#13;
    //the locked ether.&#13;
    function withdrawEther() public nonReentrant returns(bool){&#13;
        if(address(this).balance &gt; 0){&#13;
            owner.transfer(address(this).balance);&#13;
        }        &#13;
        return true;&#13;
    }&#13;
}
pragma solidity ^0.4.17;

/*

 * source       https://github.com/blockbitsio/

 * @name        Application Entity Generic Contract
 * @package     BlockBitsIO
 * @author      Micky Socaci <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b3dedad0d8caf3dddcc4dfdac5d69dc1dc">[email protected]</a>&gt;&#13;
&#13;
    Used for the ABI interface when assets need to call Application Entity.&#13;
&#13;
    This is required, otherwise we end up loading the assets themselves when we load the ApplicationEntity contract&#13;
    and end up in a loop&#13;
*/&#13;
&#13;
&#13;
&#13;
contract ApplicationEntityABI {&#13;
&#13;
    address public ProposalsEntity;&#13;
    address public FundingEntity;&#13;
    address public MilestonesEntity;&#13;
    address public MeetingsEntity;&#13;
    address public BountyManagerEntity;&#13;
    address public TokenManagerEntity;&#13;
    address public ListingContractEntity;&#13;
    address public FundingManagerEntity;&#13;
    address public NewsContractEntity;&#13;
&#13;
    bool public _initialized = false;&#13;
    bool public _locked = false;&#13;
    uint8 public CurrentEntityState;&#13;
    uint8 public AssetCollectionNum;&#13;
    address public GatewayInterfaceAddress;&#13;
    address public deployerAddress;&#13;
    address testAddressAllowUpgradeFrom;&#13;
    mapping (bytes32 =&gt; uint8) public EntityStates;&#13;
    mapping (bytes32 =&gt; address) public AssetCollection;&#13;
    mapping (uint8 =&gt; bytes32) public AssetCollectionIdToName;&#13;
    mapping (bytes32 =&gt; uint256) public BylawsUint256;&#13;
    mapping (bytes32 =&gt; bytes32) public BylawsBytes32;&#13;
&#13;
    function ApplicationEntity() public;&#13;
    function getEntityState(bytes32 name) public view returns (uint8);&#13;
    function linkToGateway( address _GatewayInterfaceAddress, bytes32 _sourceCodeUrl ) external;&#13;
    function setUpgradeState(uint8 state) public ;&#13;
    function addAssetProposals(address _assetAddresses) external;&#13;
    function addAssetFunding(address _assetAddresses) external;&#13;
    function addAssetMilestones(address _assetAddresses) external;&#13;
    function addAssetMeetings(address _assetAddresses) external;&#13;
    function addAssetBountyManager(address _assetAddresses) external;&#13;
    function addAssetTokenManager(address _assetAddresses) external;&#13;
    function addAssetFundingManager(address _assetAddresses) external;&#13;
    function addAssetListingContract(address _assetAddresses) external;&#13;
    function addAssetNewsContract(address _assetAddresses) external;&#13;
    function getAssetAddressByName(bytes32 _name) public view returns (address);&#13;
    function setBylawUint256(bytes32 name, uint256 value) public;&#13;
    function getBylawUint256(bytes32 name) public view returns (uint256);&#13;
    function setBylawBytes32(bytes32 name, bytes32 value) public;&#13;
    function getBylawBytes32(bytes32 name) public view returns (bytes32);&#13;
    function initialize() external returns (bool);&#13;
    function getParentAddress() external view returns(address);&#13;
    function createCodeUpgradeProposal( address _newAddress, bytes32 _sourceCodeUrl ) external returns (uint256);&#13;
    function acceptCodeUpgradeProposal(address _newAddress) external;&#13;
    function initializeAssetsToThisApplication() external returns (bool);&#13;
    function transferAssetsToNewApplication(address _newAddress) external returns (bool);&#13;
    function lock() external returns (bool);&#13;
    function canInitiateCodeUpgrade(address _sender) public view returns(bool);&#13;
    function doStateChanges() public;&#13;
    function hasRequiredStateChanges() public view returns (bool);&#13;
    function anyAssetHasChanges() public view returns (bool);&#13;
    function extendedAnyAssetHasChanges() internal view returns (bool);&#13;
    function getRequiredStateChanges() public view returns (uint8, uint8);&#13;
    function getTimestamp() view public returns (uint256);&#13;
&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
&#13;
 * @name        Application Asset Contract&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="87eaeee4ecfec7e9e8f0ebeef1e2a9f5e8">[email protected]</a>&gt;&#13;
&#13;
 Any contract inheriting this will be usable as an Asset in the Application Entity&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
contract ApplicationAsset {&#13;
&#13;
    event EventAppAssetOwnerSet(bytes32 indexed _name, address indexed _owner);&#13;
    event EventRunBeforeInit(bytes32 indexed _name);&#13;
    event EventRunBeforeApplyingSettings(bytes32 indexed _name);&#13;
&#13;
&#13;
    mapping (bytes32 =&gt; uint8) public EntityStates;&#13;
    mapping (bytes32 =&gt; uint8) public RecordStates;&#13;
    uint8 public CurrentEntityState;&#13;
&#13;
    event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);&#13;
    event DebugEntityRequiredChanges( bytes32 _assetName, uint8 indexed _current, uint8 indexed _required );&#13;
&#13;
    bytes32 public assetName;&#13;
&#13;
    /* Asset records */&#13;
    uint8 public RecordNum = 0;&#13;
&#13;
    /* Asset initialised or not */&#13;
    bool public _initialized = false;&#13;
&#13;
    /* Asset settings present or not */&#13;
    bool public _settingsApplied = false;&#13;
&#13;
    /* Asset owner ( ApplicationEntity address ) */&#13;
    address public owner = address(0x0) ;&#13;
    address public deployerAddress;&#13;
&#13;
    function ApplicationAsset() public {&#13;
        deployerAddress = msg.sender;&#13;
    }&#13;
&#13;
    function setInitialApplicationAddress(address _ownerAddress) public onlyDeployer requireNotInitialised {&#13;
        owner = _ownerAddress;&#13;
    }&#13;
&#13;
    function setInitialOwnerAndName(bytes32 _name) external&#13;
        requireNotInitialised&#13;
        onlyOwner&#13;
        returns (bool)&#13;
    {&#13;
        // init states&#13;
        setAssetStates();&#13;
        assetName = _name;&#13;
        // set initial state&#13;
        CurrentEntityState = getEntityState("NEW");&#13;
        runBeforeInitialization();&#13;
        _initialized = true;&#13;
        EventAppAssetOwnerSet(_name, owner);&#13;
        return true;&#13;
    }&#13;
&#13;
    function setAssetStates() internal {&#13;
        // Asset States&#13;
        EntityStates["__IGNORED__"]     = 0;&#13;
        EntityStates["NEW"]             = 1;&#13;
        // Funding Stage States&#13;
        RecordStates["__IGNORED__"]     = 0;&#13;
    }&#13;
&#13;
    function getRecordState(bytes32 name) public view returns (uint8) {&#13;
        return RecordStates[name];&#13;
    }&#13;
&#13;
    function getEntityState(bytes32 name) public view returns (uint8) {&#13;
        return EntityStates[name];&#13;
    }&#13;
&#13;
    function runBeforeInitialization() internal requireNotInitialised  {&#13;
        EventRunBeforeInit(assetName);&#13;
    }&#13;
&#13;
    function applyAndLockSettings()&#13;
        public&#13;
        onlyDeployer&#13;
        requireInitialised&#13;
        requireSettingsNotApplied&#13;
        returns(bool)&#13;
    {&#13;
        runBeforeApplyingSettings();&#13;
        _settingsApplied = true;&#13;
        return true;&#13;
    }&#13;
&#13;
    function runBeforeApplyingSettings() internal requireInitialised requireSettingsNotApplied  {&#13;
        EventRunBeforeApplyingSettings(assetName);&#13;
    }&#13;
&#13;
    function transferToNewOwner(address _newOwner) public requireInitialised onlyOwner returns (bool) {&#13;
        require(owner != address(0x0) &amp;&amp; _newOwner != address(0x0));&#13;
        owner = _newOwner;&#13;
        EventAppAssetOwnerSet(assetName, owner);&#13;
        return true;&#13;
    }&#13;
&#13;
    function getApplicationAssetAddressByName(bytes32 _name)&#13;
        public&#13;
        view&#13;
        returns(address)&#13;
    {&#13;
        address asset = ApplicationEntityABI(owner).getAssetAddressByName(_name);&#13;
        if( asset != address(0x0) ) {&#13;
            return asset;&#13;
        } else {&#13;
            revert();&#13;
        }&#13;
    }&#13;
&#13;
    function getApplicationState() public view returns (uint8) {&#13;
        return ApplicationEntityABI(owner).CurrentEntityState();&#13;
    }&#13;
&#13;
    function getApplicationEntityState(bytes32 name) public view returns (uint8) {&#13;
        return ApplicationEntityABI(owner).getEntityState(name);&#13;
    }&#13;
&#13;
    function getAppBylawUint256(bytes32 name) public view requireInitialised returns (uint256) {&#13;
        ApplicationEntityABI CurrentApp = ApplicationEntityABI(owner);&#13;
        return CurrentApp.getBylawUint256(name);&#13;
    }&#13;
&#13;
    function getAppBylawBytes32(bytes32 name) public view requireInitialised returns (bytes32) {&#13;
        ApplicationEntityABI CurrentApp = ApplicationEntityABI(owner);&#13;
        return CurrentApp.getBylawBytes32(name);&#13;
    }&#13;
&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyApplicationEntity() {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier requireInitialised() {&#13;
        require(_initialized == true);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier requireNotInitialised() {&#13;
        require(_initialized == false);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier requireSettingsApplied() {&#13;
        require(_settingsApplied == true);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier requireSettingsNotApplied() {&#13;
        require(_settingsApplied == false);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyDeployer() {&#13;
        require(msg.sender == deployerAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyAsset(bytes32 _name) {&#13;
        address AssetAddress = getApplicationAssetAddressByName(_name);&#13;
        require( msg.sender == AssetAddress);&#13;
        _;&#13;
    }&#13;
&#13;
    function getTimestamp() view public returns (uint256) {&#13;
        return now;&#13;
    }&#13;
&#13;
&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
&#13;
 * @name        Application Asset Contract ABI&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="cba6a2a8a0b28ba5a4bca7a2bdaee5b9a4">[email protected]</a>&gt;&#13;
&#13;
 Any contract inheriting this will be usable as an Asset in the Application Entity&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
contract ABIApplicationAsset {&#13;
&#13;
    bytes32 public assetName;&#13;
    uint8 public CurrentEntityState;&#13;
    uint8 public RecordNum;&#13;
    bool public _initialized;&#13;
    bool public _settingsApplied;&#13;
    address public owner;&#13;
    address public deployerAddress;&#13;
    mapping (bytes32 =&gt; uint8) public EntityStates;&#13;
    mapping (bytes32 =&gt; uint8) public RecordStates;&#13;
&#13;
    function setInitialApplicationAddress(address _ownerAddress) public;&#13;
    function setInitialOwnerAndName(bytes32 _name) external returns (bool);&#13;
    function getRecordState(bytes32 name) public view returns (uint8);&#13;
    function getEntityState(bytes32 name) public view returns (uint8);&#13;
    function applyAndLockSettings() public returns(bool);&#13;
    function transferToNewOwner(address _newOwner) public returns (bool);&#13;
    function getApplicationAssetAddressByName(bytes32 _name) public returns(address);&#13;
    function getApplicationState() public view returns (uint8);&#13;
    function getApplicationEntityState(bytes32 name) public view returns (uint8);&#13;
    function getAppBylawUint256(bytes32 name) public view returns (uint256);&#13;
    function getAppBylawBytes32(bytes32 name) public view returns (bytes32);&#13;
    function getTimestamp() view public returns (uint256);&#13;
&#13;
&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
&#13;
 * @name        Funding Contract ABI&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="1d70747e76645d73726a71746b78336f72">[email protected]</a>&gt;&#13;
&#13;
 Contains the Funding Contract code deployed and linked to the Application Entity&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
contract ABIFundingManager is ABIApplicationAsset {&#13;
&#13;
    bool public fundingProcessed;&#13;
    bool FundingPoolBalancesAllocated;&#13;
    uint8 public VaultCountPerProcess;&#13;
    uint256 public lastProcessedVaultId;&#13;
    uint256 public vaultNum;&#13;
    uint256 public LockedVotingTokens;&#13;
    bytes32 public currentTask;&#13;
    mapping (bytes32 =&gt; bool) public taskByHash;&#13;
    mapping  (address =&gt; address) public vaultList;&#13;
    mapping  (uint256 =&gt; address) public vaultById;&#13;
&#13;
    function receivePayment(address _sender, uint8 _payment_method, uint8 _funding_stage) payable public returns(bool);&#13;
    function getMyVaultAddress(address _sender) public view returns (address);&#13;
    function setVaultCountPerProcess(uint8 _perProcess) external;&#13;
    function getHash(bytes32 actionType, bytes32 arg1) public pure returns ( bytes32 );&#13;
    function getCurrentMilestoneProcessed() public view returns (bool);&#13;
    function processFundingFailedFinished() public view returns (bool);&#13;
    function processFundingSuccessfulFinished() public view returns (bool);&#13;
    function getCurrentMilestoneIdHash() internal view returns (bytes32);&#13;
    function processMilestoneFinished() public view returns (bool);&#13;
    function processEmergencyFundReleaseFinished() public view returns (bool);&#13;
    function getAfterTransferLockedTokenBalances(address vaultAddress, bool excludeCurrent) public view returns (uint256);&#13;
    function VaultRequestedUpdateForLockedVotingTokens(address owner) public;&#13;
    function doStateChanges() public;&#13;
    function hasRequiredStateChanges() public view returns (bool);&#13;
    function getRequiredStateChanges() public view returns (uint8, uint8);&#13;
    function ApplicationInFundingOrDevelopment() public view returns(bool);&#13;
&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
&#13;
 * @name        Meetings Contract ABI&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="432e2a20283a032d2c342f2a35266d312c">[email protected]</a>&gt;&#13;
&#13;
 Contains the Meetings Contract code deployed and linked to the Application Entity&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
contract ABIMeetings is ABIApplicationAsset {&#13;
    struct Record {&#13;
        bytes32 hash;&#13;
        bytes32 name;&#13;
        uint8 state;&#13;
        uint256 time_start;                     // start at unixtimestamp&#13;
        uint256 duration;&#13;
        uint8 index;&#13;
    }&#13;
    mapping (uint8 =&gt; Record) public Collection;&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
&#13;
 * @name        Proposals Contract&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b2dfdbd1d9cbf2dcddc5dedbc4d79cc0dd">[email protected]</a>&gt;&#13;
&#13;
 Contains the Proposals Contract code deployed and linked to the Application Entity&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
contract ABIProposals is ABIApplicationAsset {&#13;
&#13;
    address public Application;&#13;
    address public ListingContractEntity;&#13;
    address public FundingEntity;&#13;
    address public FundingManagerEntity;&#13;
    address public TokenManagerEntity;&#13;
    address public TokenEntity;&#13;
    address public MilestonesEntity;&#13;
&#13;
    struct ProposalRecord {&#13;
        address creator;&#13;
        bytes32 name;&#13;
        uint8 actionType;&#13;
        uint8 state;&#13;
        bytes32 hash;                       // action name + args hash&#13;
        address addr;&#13;
        bytes32 sourceCodeUrl;&#13;
        uint256 extra;&#13;
        uint256 time_start;&#13;
        uint256 time_end;&#13;
        uint256 index;&#13;
    }&#13;
&#13;
    struct VoteStruct {&#13;
        address voter;&#13;
        uint256 time;&#13;
        bool    vote;&#13;
        uint256 power;&#13;
        bool    annulled;&#13;
        uint256 index;&#13;
    }&#13;
&#13;
    struct ResultRecord {&#13;
        uint256 totalAvailable;&#13;
        uint256 requiredForResult;&#13;
        uint256 totalSoFar;&#13;
        uint256 yes;&#13;
        uint256 no;&#13;
        bool    requiresCounting;&#13;
    }&#13;
&#13;
    uint8 public ActiveProposalNum;&#13;
    uint256 public VoteCountPerProcess;&#13;
    bool public EmergencyFundingReleaseApproved;&#13;
&#13;
    mapping (bytes32 =&gt; uint8) public ActionTypes;&#13;
    mapping (uint8 =&gt; uint256) public ActiveProposalIds;&#13;
    mapping (uint256 =&gt; bool) public ExpiredProposalIds;&#13;
    mapping (uint256 =&gt; ProposalRecord) public ProposalsById;&#13;
    mapping (bytes32 =&gt; uint256) public ProposalIdByHash;&#13;
    mapping (uint256 =&gt; mapping (uint256 =&gt; VoteStruct) ) public VotesByProposalId;&#13;
    mapping (uint256 =&gt; mapping (address =&gt; VoteStruct) ) public VotesByCaster;&#13;
    mapping (uint256 =&gt; uint256) public VotesNumByProposalId;&#13;
    mapping (uint256 =&gt; ResultRecord ) public ResultsByProposalId;&#13;
    mapping (uint256 =&gt; uint256) public lastProcessedVoteIdByProposal;&#13;
    mapping (uint256 =&gt; uint256) public ProcessedVotesByProposal;&#13;
    mapping (uint256 =&gt; uint256) public VoteCountAtProcessingStartByProposal;&#13;
&#13;
    function getRecordState(bytes32 name) public view returns (uint8);&#13;
    function getActionType(bytes32 name) public view returns (uint8);&#13;
    function getProposalState(uint256 _proposalId) public view returns (uint8);&#13;
    function getBylawsProposalVotingDuration() public view returns (uint256);&#13;
    function getBylawsMilestoneMinPostponing() public view returns (uint256);&#13;
    function getBylawsMilestoneMaxPostponing() public view returns (uint256);&#13;
    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 );&#13;
    function process() public;&#13;
    function hasRequiredStateChanges() public view returns (bool);&#13;
    function getRequiredStateChanges() public view returns (uint8);&#13;
    function addCodeUpgradeProposal(address _addr, bytes32 _sourceCodeUrl) external returns (uint256);&#13;
    function createMilestoneAcceptanceProposal() external returns (uint256);&#13;
    function createMilestonePostponingProposal(uint256 _duration) external returns (uint256);&#13;
    function getCurrentMilestonePostponingProposalDuration() public view returns (uint256);&#13;
    function getCurrentMilestoneProposalStatusForType(uint8 _actionType ) public view returns (uint8);&#13;
    function createEmergencyFundReleaseProposal() external returns (uint256);&#13;
    function createDelistingProposal(uint256 _projectId) external returns (uint256);&#13;
    function RegisterVote(uint256 _proposalId, bool _myVote) public;&#13;
    function hasPreviousVote(uint256 _proposalId, address _voter) public view returns (bool);&#13;
    function getTotalTokenVotingPower(address _voter) public view returns ( uint256 );&#13;
    function getVotingPower(uint256 _proposalId, address _voter) public view returns ( uint256 );&#13;
    function setVoteCountPerProcess(uint256 _perProcess) external;&#13;
    function ProcessVoteTotals(uint256 _proposalId, uint256 length) public;&#13;
    function canEndVoting(uint256 _proposalId) public view returns (bool);&#13;
    function getProposalType(uint256 _proposalId) public view returns (uint8);&#13;
    function expiryChangesState(uint256 _proposalId) public view returns (bool);&#13;
    function needsProcessing(uint256 _proposalId) public view returns (bool);&#13;
    function getMyVoteForCurrentMilestoneRelease(address _voter) public view returns (bool);&#13;
    function getHasVoteForCurrentMilestoneRelease(address _voter) public view returns (bool);&#13;
    function getMyVote(uint256 _proposalId, address _voter) public view returns (bool);&#13;
&#13;
}&#13;
&#13;
/*&#13;
&#13;
 * source       https://github.com/blockbitsio/&#13;
&#13;
 * @name        Milestones Contract&#13;
 * @package     BlockBitsIO&#13;
 * @author      Micky Socaci &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="3855515b53417856574f54514e5d164a57">[email protected]</a>&gt;&#13;
&#13;
 Contains the Milestones Contract code deployed and linked to the Application Entity&#13;
&#13;
*/&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
contract Milestones is ApplicationAsset {&#13;
&#13;
    ABIFundingManager FundingManagerEntity;&#13;
    ABIProposals ProposalsEntity;&#13;
    ABIMeetings MeetingsEntity;&#13;
&#13;
    struct Record {&#13;
        bytes32 name;&#13;
        string description;                     // will change to hash pointer ( external storage )&#13;
        uint8 state;&#13;
        uint256 duration;&#13;
        uint256 time_start;                     // start at unixtimestamp&#13;
        uint256 last_state_change_time;         // time of last state change&#13;
        uint256 time_end;                       // estimated end time &gt;&gt; can be increased by proposal&#13;
        uint256 time_ended;                     // actual end time&#13;
        uint256 meeting_time;&#13;
        uint8 funding_percentage;&#13;
        uint8 index;&#13;
    }&#13;
&#13;
    mapping (uint8 =&gt; Record) public Collection;&#13;
    uint8 public currentRecord = 1;&#13;
&#13;
    event DebugRecordRequiredChanges( bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required );&#13;
    event DebugCallAgain(uint8 indexed _who);&#13;
&#13;
    event EventEntityProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);&#13;
    event EventRecordProcessor(bytes32 indexed _assetName, uint8 indexed _current, uint8 indexed _required);&#13;
&#13;
    event DebugAction(bytes32 indexed _name, bool indexed _allowed);&#13;
&#13;
&#13;
    function setAssetStates() internal {&#13;
&#13;
        // Contract States&#13;
        EntityStates["__IGNORED__"]                  = 0;&#13;
        EntityStates["NEW"]                          = 1;&#13;
        EntityStates["WAITING"]                      = 2;&#13;
&#13;
        EntityStates["IN_DEVELOPMENT"]               = 5;&#13;
&#13;
        EntityStates["WAITING_MEETING_TIME"]         = 10;&#13;
        EntityStates["DEADLINE_MEETING_TIME_YES"]    = 11;&#13;
        EntityStates["DEADLINE_MEETING_TIME_FAILED"] = 12;&#13;
&#13;
        EntityStates["VOTING_IN_PROGRESS"]           = 20;&#13;
        // EntityStates["VOTING_ENDED"]              = 21;&#13;
        EntityStates["VOTING_ENDED_YES"]             = 22;&#13;
        EntityStates["VOTING_ENDED_NO"]              = 23;&#13;
        EntityStates["VOTING_ENDED_NO_FINAL"]        = 25;&#13;
&#13;
        EntityStates["VOTING_FUNDS_PROCESSED"]       = 30;&#13;
        EntityStates["FINAL"]                        = 50;&#13;
&#13;
        EntityStates["CASHBACK_OWNER_MIA"]           = 99;&#13;
        EntityStates["DEVELOPMENT_COMPLETE"]         = 250;&#13;
&#13;
        // Funding Stage States&#13;
        RecordStates["__IGNORED__"]     = 0;&#13;
        RecordStates["NEW"]             = 1;&#13;
        RecordStates["IN_PROGRESS"]     = 2;&#13;
        RecordStates["FINAL"]           = 3;&#13;
    }&#13;
&#13;
    function runBeforeInitialization() internal requireNotInitialised {&#13;
        FundingManagerEntity = ABIFundingManager( getApplicationAssetAddressByName('FundingManager') );&#13;
        MeetingsEntity = ABIMeetings( getApplicationAssetAddressByName('Meetings') );&#13;
        ProposalsEntity = ABIProposals( getApplicationAssetAddressByName('Proposals') );&#13;
        EventRunBeforeInit(assetName);&#13;
    }&#13;
&#13;
    function runBeforeApplyingSettings() internal requireInitialised requireSettingsNotApplied  {&#13;
        // setup first milestone&#13;
        Record storage rec = Collection[currentRecord];&#13;
            rec.time_start = getBylawsProjectDevelopmentStart();&#13;
            rec.time_end = rec.time_start + rec.duration;&#13;
        EventRunBeforeApplyingSettings(assetName);&#13;
    }&#13;
&#13;
    function getBylawsProjectDevelopmentStart() public view returns (uint256) {&#13;
        return getAppBylawUint256("development_start");&#13;
    }&#13;
&#13;
    function getBylawsMinTimeInTheFutureForMeetingCreation() public view returns (uint256) {&#13;
        return getAppBylawUint256("meeting_time_set_req");&#13;
    }&#13;
&#13;
    function getBylawsCashBackVoteRejectedDuration() public view returns (uint256) {&#13;
        return getAppBylawUint256("cashback_investor_no");&#13;
    }&#13;
&#13;
    /*&#13;
    * Add Record&#13;
    *&#13;
    * @param        bytes32 _name&#13;
    * @param        string _description&#13;
    * @param        uint256 _duration&#13;
    * @param        uint256 _funding_percentage&#13;
    *&#13;
    * @access       public&#13;
    * @type         method&#13;
    * @modifiers    onlyDeployer, requireNotInitialised&#13;
    */&#13;
    function addRecord(&#13;
        bytes32 _name,&#13;
        string _description,&#13;
        uint256 _duration,&#13;
        uint8   _perc&#13;
    )&#13;
        public&#13;
        onlyDeployer&#13;
        requireSettingsNotApplied&#13;
    {&#13;
&#13;
        Record storage rec = Collection[++RecordNum];&#13;
&#13;
        rec.name                = _name;&#13;
        rec.description         = _description;&#13;
        rec.duration            = _duration;&#13;
        rec.funding_percentage  = _perc;&#13;
        rec.state               = getRecordState("NEW");&#13;
        rec.index               = RecordNum;&#13;
    }&#13;
&#13;
    function getMilestoneFundingPercentage(uint8 recordId) public view returns (uint8){&#13;
        return Collection[recordId].funding_percentage;&#13;
    }&#13;
&#13;
    function doStateChanges() public {&#13;
&#13;
        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();&#13;
        bool callAgain = false;&#13;
&#13;
        DebugRecordRequiredChanges( assetName, CurrentRecordState, RecordStateRequired );&#13;
        DebugEntityRequiredChanges( assetName, CurrentEntityState, EntityStateRequired );&#13;
&#13;
        if( RecordStateRequired != getRecordState("__IGNORED__") ) {&#13;
            // process record changes.&#13;
            RecordProcessor(CurrentRecordState, RecordStateRequired);&#13;
            DebugCallAgain(2);&#13;
            callAgain = true;&#13;
        }&#13;
&#13;
        if(EntityStateRequired != getEntityState("__IGNORED__") ) {&#13;
            // process entity changes.&#13;
            EntityProcessor(EntityStateRequired);&#13;
            DebugCallAgain(1);&#13;
            callAgain = true;&#13;
        }&#13;
&#13;
&#13;
    }&#13;
&#13;
    function MilestonesCanChange() internal view returns (bool) {&#13;
        if(&#13;
            CurrentEntityState == getEntityState("WAITING") ||&#13;
            CurrentEntityState == getEntityState("IN_DEVELOPMENT") ||&#13;
            CurrentEntityState == getEntityState("VOTING_FUNDS_PROCESSED")&#13;
        ) {&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
&#13;
    /*&#13;
     * Method: Get Record Required State Changes&#13;
     *&#13;
     * @access       public&#13;
     * @type         method&#13;
     *&#13;
     * @return       uint8 RecordStateRequired&#13;
     */&#13;
    function getRecordStateRequiredChanges() public view returns (uint8) {&#13;
        Record memory record = Collection[currentRecord];&#13;
        uint8 RecordStateRequired = getRecordState("__IGNORED__");&#13;
&#13;
        if( ApplicationIsInDevelopment() &amp;&amp; MilestonesCanChange() ) {&#13;
&#13;
            if( record.state == getRecordState("NEW") ) {&#13;
&#13;
                if( getTimestamp() &gt;= record.time_start ) {&#13;
                    RecordStateRequired = getRecordState("IN_PROGRESS");&#13;
                }&#13;
&#13;
            } else if( record.state == getRecordState("IN_PROGRESS") ) {&#13;
&#13;
                if( getTimestamp() &gt;= record.time_end || ( getTimestamp() &gt;= record.meeting_time &amp;&amp; record.meeting_time &gt; 0 ) ) {&#13;
                    RecordStateRequired = getRecordState("FINAL");&#13;
                }&#13;
            }&#13;
&#13;
            if( record.state == RecordStateRequired ) {&#13;
                RecordStateRequired = getRecordState("__IGNORED__");&#13;
            }&#13;
        }&#13;
        return RecordStateRequired;&#13;
    }&#13;
&#13;
&#13;
    function hasRequiredStateChanges() public view returns (bool) {&#13;
        bool hasChanges = false;&#13;
        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();&#13;
        CurrentRecordState = 0;&#13;
&#13;
        if( RecordStateRequired != getRecordState("__IGNORED__") ) {&#13;
            hasChanges = true;&#13;
        }&#13;
        if(EntityStateRequired != getEntityState("__IGNORED__") ) {&#13;
            hasChanges = true;&#13;
        }&#13;
&#13;
        return hasChanges;&#13;
    }&#13;
&#13;
    // view methods decide if changes are to be made&#13;
    // in case of tasks, we do them in the Processors.&#13;
&#13;
    function RecordProcessor(uint8 CurrentRecordState, uint8 RecordStateRequired) internal {&#13;
        EventRecordProcessor( assetName, CurrentRecordState, RecordStateRequired );&#13;
        updateRecord( RecordStateRequired );&#13;
    }&#13;
&#13;
&#13;
    function EntityProcessor(uint8 EntityStateRequired) internal {&#13;
        EventEntityProcessor( assetName, CurrentEntityState, EntityStateRequired );&#13;
&#13;
        // Do State Specific Updates&#13;
        // Update our Entity State&#13;
        CurrentEntityState = EntityStateRequired;&#13;
&#13;
        if ( CurrentEntityState == getEntityState("DEADLINE_MEETING_TIME_YES") ) {&#13;
            // create meeting&#13;
            // Meetings.create("internal", "MILESTONE_END", "");&#13;
&#13;
        } else if( CurrentEntityState == getEntityState("VOTING_IN_PROGRESS") ) {&#13;
            // create proposal and start voting on it&#13;
            createMilestoneAcceptanceProposal();&#13;
&#13;
        } else if( CurrentEntityState == getEntityState("WAITING_MEETING_TIME") ) {&#13;
&#13;
            PostponeMeetingIfApproved();&#13;
&#13;
        } else if( CurrentEntityState == getEntityState("VOTING_ENDED_YES") ) {&#13;
&#13;
        } else if( CurrentEntityState == getEntityState("VOTING_ENDED_NO") ) {&#13;
&#13;
            // possible cashback time starts from now&#13;
            MilestoneCashBackTime = getTimestamp();&#13;
&#13;
        } else if( CurrentEntityState == getEntityState("VOTING_FUNDS_PROCESSED") ) {&#13;
            MilestoneCashBackTime = 0;&#13;
            startNextMilestone();&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    mapping (bytes32 =&gt; bool) public MilestonePostponingHash;&#13;
&#13;
    function PostponeMeetingIfApproved() internal {&#13;
        if(MilestonePostponingHash[ bytes32(currentRecord) ] == false ) {&#13;
            if(PostponeForCurrentMilestoneIsApproved()) {&#13;
                uint256 time = ProposalsEntity.getCurrentMilestonePostponingProposalDuration();&#13;
                Record storage record = Collection[currentRecord];&#13;
                record.time_end = record.time_end + time;&#13;
                MilestonePostponingHash[ bytes32(currentRecord) ] = true;&#13;
            }&#13;
        }&#13;
    }&#13;
&#13;
    function PostponeForCurrentMilestoneIsApproved() internal view returns ( bool ) {&#13;
        uint8 ProposalActionType = ProposalsEntity.getActionType("MILESTONE_POSTPONING");&#13;
        uint8 ProposalRecordState = ProposalsEntity.getCurrentMilestoneProposalStatusForType( ProposalActionType  );&#13;
        if(ProposalRecordState == ProposalsEntity.getRecordState("VOTING_RESULT_YES") ) {&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    uint256 public MilestoneCashBackTime = 0;&#13;
&#13;
    function afterVoteNoCashBackTime() public view returns ( bool ) {&#13;
        uint256 time =  MilestoneCashBackTime + getBylawsCashBackVoteRejectedDuration();&#13;
        // after cash back time&#13;
        if(getTimestamp() &gt; time) {&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    function getHash(uint8 actionType, bytes32 arg1, bytes32 arg2) public pure returns ( bytes32 ) {&#13;
        return keccak256(actionType, arg1, arg2);&#13;
    }&#13;
&#13;
    function getCurrentHash() public view returns ( bytes32 ) {&#13;
        return getHash(1, bytes32(currentRecord), 0);&#13;
    }&#13;
&#13;
    mapping (bytes32 =&gt; uint256) public ProposalIdByHash;&#13;
    function createMilestoneAcceptanceProposal() internal {&#13;
        if(ProposalIdByHash[ getCurrentHash() ] == 0x0 ) {&#13;
            ProposalIdByHash[ getCurrentHash() ] = ProposalsEntity.createMilestoneAcceptanceProposal();&#13;
        }&#13;
    }&#13;
&#13;
    function getCurrentProposalId() internal view returns ( uint256 ) {&#13;
        return ProposalIdByHash[ getCurrentHash() ];&#13;
    }&#13;
&#13;
    function setCurrentMilestoneMeetingTime(uint256 _meeting_time) public onlyDeployer {&#13;
        if ( CurrentEntityState == getEntityState("WAITING_MEETING_TIME") ) {&#13;
            if(MeetingTimeSetFailure() == false ) {&#13;
                Record storage record = Collection[currentRecord];&#13;
                // minimum x days into the future&#13;
                uint256 min = getTimestamp() + getBylawsMinTimeInTheFutureForMeetingCreation();&#13;
                // minimum days before end date&#13;
                uint256 max = record.time_end + 24 * 3600;&#13;
                if(_meeting_time &gt; min &amp;&amp; _meeting_time &lt; max ) {&#13;
                    record.meeting_time = _meeting_time;&#13;
                }&#13;
            } else {&#13;
                revert();&#13;
            }&#13;
        } else {&#13;
            revert();&#13;
        }&#13;
    }&#13;
&#13;
    function startNextMilestone() internal {&#13;
        Record storage rec = Collection[currentRecord];&#13;
&#13;
        // set current record end date etc&#13;
        rec.time_ended = getTimestamp();&#13;
        rec.state = getRecordState("FINAL");&#13;
&#13;
        if(currentRecord &lt; RecordNum) {&#13;
            // jump to next milestone&#13;
            currentRecord++;&#13;
&#13;
            Record storage nextRec = Collection[currentRecord];&#13;
                nextRec.time_start = rec.time_ended;&#13;
                nextRec.time_end = rec.time_ended + nextRec.duration;&#13;
        }&#13;
&#13;
    }&#13;
&#13;
    /*&#13;
    * Update Existing Record&#13;
    *&#13;
    * @param        uint8 _record_id&#13;
    * @param        uint8 _new_state&#13;
    * @param        uint8 _duration&#13;
    *&#13;
    * @access       public&#13;
    * @type         method&#13;
    * @modifiers    onlyOwner, requireInitialised, RecordUpdateAllowed&#13;
    *&#13;
    * @return       void&#13;
    */&#13;
&#13;
    function updateRecord( uint8 _new_state )&#13;
        internal&#13;
        requireInitialised&#13;
        RecordUpdateAllowed(_new_state)&#13;
        returns (bool)&#13;
    {&#13;
        Record storage rec = Collection[currentRecord];&#13;
        rec.state       = _new_state;&#13;
        return true;&#13;
    }&#13;
&#13;
&#13;
    /*&#13;
    * Modifier: Validate if record updates are allowed&#13;
    *&#13;
    * @type         modifier&#13;
    *&#13;
    * @param        uint8 _record_id&#13;
    * @param        uint8 _new_state&#13;
    * @param        uint256 _duration&#13;
    *&#13;
    * @return       bool&#13;
    */&#13;
&#13;
    modifier RecordUpdateAllowed(uint8 _new_state) {&#13;
        require( isRecordUpdateAllowed( _new_state )  );&#13;
        _;&#13;
    }&#13;
&#13;
    /*&#13;
     * Method: Validate if record can be updated to requested state&#13;
     *&#13;
     * @access       public&#13;
     * @type         method&#13;
     *&#13;
     * @param        uint8 _record_id&#13;
     * @param        uint8 _new_state&#13;
     *&#13;
     * @return       bool&#13;
     */&#13;
    function isRecordUpdateAllowed(uint8 _new_state ) public view returns (bool) {&#13;
&#13;
        var (CurrentRecordState, RecordStateRequired, EntityStateRequired) = getRequiredStateChanges();&#13;
&#13;
        CurrentRecordState = 0;&#13;
        EntityStateRequired = 0;&#13;
&#13;
        if(_new_state == uint8(RecordStateRequired)) {&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    /*&#13;
     * Method: Get Record and Entity State Changes&#13;
     *&#13;
     * @access       public&#13;
     * @type         method&#13;
     *&#13;
     * @return       ( uint8 CurrentRecordState, uint8 RecordStateRequired, uint8 EntityStateRequired)&#13;
     */&#13;
    function getRequiredStateChanges() public view returns (uint8, uint8, uint8) {&#13;
&#13;
        Record memory record = Collection[currentRecord];&#13;
&#13;
        uint8 CurrentRecordState = record.state;&#13;
        uint8 RecordStateRequired = getRecordStateRequiredChanges();&#13;
        uint8 EntityStateRequired = getEntityState("__IGNORED__");&#13;
&#13;
        if( ApplicationIsInDevelopment() ) {&#13;
&#13;
            // Do Entity Checks&#13;
&#13;
            if ( CurrentEntityState == getEntityState("WAITING") ) {&#13;
&#13;
                if(RecordStateRequired == getRecordState("IN_PROGRESS") ) {&#13;
                    // both record and entity states need to move to IN_PROGRESS&#13;
                    EntityStateRequired = getEntityState("IN_DEVELOPMENT");&#13;
                }&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("IN_DEVELOPMENT") ) {&#13;
&#13;
                EntityStateRequired = getEntityState("WAITING_MEETING_TIME");&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("WAITING_MEETING_TIME") ) {&#13;
&#13;
                if(record.meeting_time &gt; 0) {&#13;
&#13;
                    EntityStateRequired = getEntityState("DEADLINE_MEETING_TIME_YES");&#13;
&#13;
                } else {&#13;
&#13;
                    if(MilestonePostponingHash[ bytes32(currentRecord) ] == false) {&#13;
                        if(PostponeForCurrentMilestoneIsApproved()) {&#13;
                            EntityStateRequired = getEntityState("WAITING_MEETING_TIME");&#13;
                        }&#13;
                    }&#13;
&#13;
                    if(MeetingTimeSetFailure()) {&#13;
                        // Force Owner Missing in Action - Cash Back Procedure&#13;
                        EntityStateRequired = getEntityState("DEADLINE_MEETING_TIME_FAILED");&#13;
                    }&#13;
                }&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("DEADLINE_MEETING_TIME_FAILED") ) {&#13;
&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("DEADLINE_MEETING_TIME_YES") ) {&#13;
&#13;
                // create proposal&#13;
                // start voting if time passed&#13;
                if(getTimestamp() &gt;= record.meeting_time ) {&#13;
                    EntityStateRequired = getEntityState("VOTING_IN_PROGRESS");&#13;
                }&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("VOTING_IN_PROGRESS") ) {&#13;
&#13;
                uint8 ProposalRecordState = ProposalsEntity.getProposalState( getCurrentProposalId() );&#13;
&#13;
                if ( ProposalRecordState == ProposalsEntity.getRecordState("VOTING_RESULT_YES") ) {&#13;
                    EntityStateRequired = getEntityState("VOTING_ENDED_YES");&#13;
                }&#13;
&#13;
                if (ProposalRecordState == ProposalsEntity.getRecordState("VOTING_RESULT_NO") ) {&#13;
                    EntityStateRequired = getEntityState("VOTING_ENDED_NO");&#13;
                }&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("VOTING_ENDED_YES") ) {&#13;
&#13;
                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState("MILESTONE_PROCESS_DONE")) {&#13;
                    EntityStateRequired = getEntityState("VOTING_FUNDS_PROCESSED");&#13;
                }&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("VOTING_ENDED_NO") ) {&#13;
&#13;
                // check if milestone cashout period has passed and if so process fund releases&#13;
                if(afterVoteNoCashBackTime()) {&#13;
                    EntityStateRequired = getEntityState("VOTING_ENDED_NO_FINAL");&#13;
                }&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("VOTING_ENDED_NO_FINAL") ) {&#13;
&#13;
                if( FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState("MILESTONE_PROCESS_DONE")) {&#13;
                    EntityStateRequired = getEntityState("VOTING_FUNDS_PROCESSED");&#13;
                }&#13;
&#13;
            } else if ( CurrentEntityState == getEntityState("VOTING_FUNDS_PROCESSED") ) {&#13;
&#13;
&#13;
                if(currentRecord &lt; RecordNum) {&#13;
                    EntityStateRequired = getEntityState("IN_DEVELOPMENT");&#13;
                } else {&#13;
&#13;
                    if(FundingManagerEntity.getCurrentMilestoneProcessed() == true) {&#13;
                        if(FundingManagerEntity.CurrentEntityState() == FundingManagerEntity.getEntityState("COMPLETE_PROCESS_DONE")) {&#13;
                            EntityStateRequired = getEntityState("DEVELOPMENT_COMPLETE");&#13;
                        } else {&#13;
                            EntityStateRequired = getEntityState("VOTING_FUNDS_PROCESSED");&#13;
                        }&#13;
                    } else {&#13;
                        EntityStateRequired = getEntityState("IN_DEVELOPMENT");&#13;
                    }&#13;
                }&#13;
&#13;
            }&#13;
            /*&#13;
            else if ( CurrentEntityState == getEntityState("DEVELOPMENT_COMPLETE") ) {&#13;
&#13;
            }&#13;
            */&#13;
&#13;
        } else {&#13;
&#13;
            if( CurrentEntityState == getEntityState("NEW") ) {&#13;
                EntityStateRequired = getEntityState("WAITING");&#13;
            }&#13;
        }&#13;
&#13;
        return (CurrentRecordState, RecordStateRequired, EntityStateRequired);&#13;
    }&#13;
&#13;
    function ApplicationIsInDevelopment() public view returns(bool) {&#13;
        if( getApplicationState() == getApplicationEntityState("IN_DEVELOPMENT") ) {&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
    function MeetingTimeSetFailure() public view returns (bool) {&#13;
        Record memory record = Collection[currentRecord];&#13;
        uint256 meetingCreationMaxTime = record.time_end - getBylawsMinTimeInTheFutureForMeetingCreation();&#13;
        if(getTimestamp() &gt;= meetingCreationMaxTime ) {&#13;
            return true;&#13;
        }&#13;
        return false;&#13;
    }&#13;
&#13;
}
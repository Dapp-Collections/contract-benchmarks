pragma solidity 0.4.25;

// File: openzeppelin-solidity/contracts/ownership/Ownable.sol

/**
 * @title Ownable
 * @dev The Ownable contract has an owner address, and provides basic authorization control
 * functions, this simplifies the implementation of "user permissions".
 */
contract Ownable {
  address private _owner;

  event OwnershipTransferred(
    address indexed previousOwner,
    address indexed newOwner
  );

  /**
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender
   * account.
   */
  constructor() internal {
    _owner = msg.sender;
    emit OwnershipTransferred(address(0), _owner);
  }

  /**
   * @return the address of the owner.
   */
  function owner() public view returns(address) {
    return _owner;
  }

  /**
   * @dev Throws if called by any account other than the owner.
   */
  modifier onlyOwner() {
    require(isOwner());
    _;
  }

  /**
   * @return true if `msg.sender` is the owner of the contract.
   */
  function isOwner() public view returns(bool) {
    return msg.sender == _owner;
  }

  /**
   * @dev Allows the current owner to relinquish control of the contract.
   * @notice Renouncing to ownership will leave the contract without an owner.
   * It will not be possible to call the functions with the `onlyOwner`
   * modifier anymore.
   */
  function renounceOwnership() public onlyOwner {
    emit OwnershipTransferred(_owner, address(0));
    _owner = address(0);
  }

  /**
   * @dev Allows the current owner to transfer control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function transferOwnership(address newOwner) public onlyOwner {
    _transferOwnership(newOwner);
  }

  /**
   * @dev Transfers control of the contract to a newOwner.
   * @param newOwner The address to transfer ownership to.
   */
  function _transferOwnership(address newOwner) internal {
    require(newOwner != address(0));
    emit OwnershipTransferred(_owner, newOwner);
    _owner = newOwner;
  }
}

// File: contracts/MultiOwnable.sol

/**
 * @title MultiOwnable.sol
 * @dev Provide multi-ownable functionality to a smart contract.
 * @dev Note this contract preserves the idea of a master owner where this owner
 * cannot be removed or deleted. Master owner's are the only owner's who can add
 * and remove other owner's. Transfer of master ownership is supported and can 
 * also only be transferred by the current master owner
 * @dev When master ownership is transferred the original master owner is not
 * removed from the additional owners list
 */
pragma solidity 0.4.25;

/**
 * @dev OpenZeppelin Solidity v2.0.0 imports (Using: npm <span class="__cf_email__" data-cfemail="c4abb4a1aabea1b4b4a1a8adaae9b7aba8ada0adb0bd84f6eaf4eaf4">[emailÂ protected]</span>)&#13;
 */&#13;
&#13;
&#13;
contract MultiOwnable is Ownable {&#13;
	/**&#13;
	 * @dev Mapping of additional addresses that are considered owners&#13;
	 */&#13;
	mapping (address =&gt; bool) additionalOwners;&#13;
&#13;
	/**&#13;
	 * @dev Modifier that overrides 'Ownable' to support multiple owners&#13;
	 */&#13;
	modifier onlyOwner() {&#13;
		// Ensure that msg.sender is an owner or revert&#13;
		require(isOwner(msg.sender), "Permission denied [owner].");&#13;
		_;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Modifier that provides additional testing to ensure msg.sender&#13;
	 * is master owner, or first address to deploy contract&#13;
	 */&#13;
	modifier onlyMaster() {&#13;
		// Ensure that msg.sender is the master user&#13;
		require(super.isOwner(), "Permission denied [master].");&#13;
		_;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Ownership added event for Dapps interested in this event&#13;
	 */&#13;
	event OwnershipAdded (&#13;
		address indexed addedOwner&#13;
	);&#13;
	&#13;
	/**&#13;
	 * @dev Ownership removed event for Dapps interested in this event&#13;
	 */&#13;
	event OwnershipRemoved (&#13;
		address indexed removedOwner&#13;
	);&#13;
&#13;
  	/**&#13;
	 * @dev MultiOwnable .cTor responsible for initialising the masterOwner&#13;
	 * or contract super-user&#13;
	 * @dev The super user cannot be deleted from the ownership mapping and&#13;
	 * can only be transferred&#13;
	 */&#13;
	constructor() &#13;
	Ownable()&#13;
	public&#13;
	{&#13;
		// Obtain owner of the contract (msg.sender)&#13;
		address masterOwner = owner();&#13;
		// Add the master owner to the additional owners list&#13;
		additionalOwners[masterOwner] = true;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Returns the owner status of the specified address&#13;
	 */&#13;
	function isOwner(address _ownerAddressToLookup)&#13;
	public&#13;
	view&#13;
	returns (bool)&#13;
	{&#13;
		// Return the ownership state of the specified owner address&#13;
		return additionalOwners[_ownerAddressToLookup];&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Returns the master status of the specfied address&#13;
	 */&#13;
	function isMaster(address _masterAddressToLookup)&#13;
	public&#13;
	view&#13;
	returns (bool)&#13;
	{&#13;
		return (super.owner() == _masterAddressToLookup);&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Add a new owner address to additional owners mapping&#13;
	 * @dev Only the master owner can add additional owner addresses&#13;
	 */&#13;
	function addOwner(address _ownerToAdd)&#13;
	onlyMaster&#13;
	public&#13;
	returns (bool)&#13;
	{&#13;
		// Ensure the new owner address is not address(0)&#13;
		require(_ownerToAdd != address(0), "Invalid address specified (0x0)");&#13;
		// Ensure that new owner address is not already in the owners list&#13;
		require(!isOwner(_ownerToAdd), "Address specified already in owners list.");&#13;
		// Add new owner to additional owners mapping&#13;
		additionalOwners[_ownerToAdd] = true;&#13;
		emit OwnershipAdded(_ownerToAdd);&#13;
		return true;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Add a new owner address to additional owners mapping&#13;
	 * @dev Only the master owner can add additional owner addresses&#13;
	 */&#13;
	function removeOwner(address _ownerToRemove)&#13;
	onlyMaster&#13;
	public&#13;
	returns (bool)&#13;
	{&#13;
		// Ensure that the address to remove is not the master owner&#13;
		require(_ownerToRemove != super.owner(), "Permission denied [master].");&#13;
		// Ensure that owner address to remove is actually an owner&#13;
		require(isOwner(_ownerToRemove), "Address specified not found in owners list.");&#13;
		// Add remove ownership from address in the additional owners mapping&#13;
		additionalOwners[_ownerToRemove] = false;&#13;
		emit OwnershipRemoved(_ownerToRemove);&#13;
		return true;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Transfer ownership of this contract to another address&#13;
	 * @dev Only the master owner can transfer ownership to another address&#13;
	 * @dev Only existing owners can have ownership transferred to them&#13;
	 */&#13;
	function transferOwnership(address _newOwnership) &#13;
	onlyMaster &#13;
	public &#13;
	{&#13;
		// Ensure the new ownership is not address(0)&#13;
		require(_newOwnership != address(0), "Invalid address specified (0x0)");&#13;
		// Ensure the new ownership address is not the current ownership addressess&#13;
		require(_newOwnership != owner(), "Address specified must not match current owner address.");		&#13;
		// Ensure that the new ownership is promoted from existing owners&#13;
		require(isOwner(_newOwnership), "Master ownership can only be transferred to an existing owner address.");&#13;
		// Call into the parent class and transfer ownership&#13;
		super.transferOwnership(_newOwnership);&#13;
		// If we get here, then add the new ownership address to the additional owners mapping&#13;
		// Note that the original master owner address was not removed and is still an owner until removed&#13;
		additionalOwners[_newOwnership] = true;&#13;
	}&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/access/Roles.sol&#13;
&#13;
/**&#13;
 * @title Roles&#13;
 * @dev Library for managing addresses assigned to a Role.&#13;
 */&#13;
library Roles {&#13;
  struct Role {&#13;
    mapping (address =&gt; bool) bearer;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev give an account access to this role&#13;
   */&#13;
  function add(Role storage role, address account) internal {&#13;
    require(account != address(0));&#13;
    require(!has(role, account));&#13;
&#13;
    role.bearer[account] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove an account's access to this role&#13;
   */&#13;
  function remove(Role storage role, address account) internal {&#13;
    require(account != address(0));&#13;
    require(has(role, account));&#13;
&#13;
    role.bearer[account] = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev check if an account has this role&#13;
   * @return bool&#13;
   */&#13;
  function has(Role storage role, address account)&#13;
    internal&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    require(account != address(0));&#13;
    return role.bearer[account];&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol&#13;
&#13;
contract PauserRole {&#13;
  using Roles for Roles.Role;&#13;
&#13;
  event PauserAdded(address indexed account);&#13;
  event PauserRemoved(address indexed account);&#13;
&#13;
  Roles.Role private pausers;&#13;
&#13;
  constructor() internal {&#13;
    _addPauser(msg.sender);&#13;
  }&#13;
&#13;
  modifier onlyPauser() {&#13;
    require(isPauser(msg.sender));&#13;
    _;&#13;
  }&#13;
&#13;
  function isPauser(address account) public view returns (bool) {&#13;
    return pausers.has(account);&#13;
  }&#13;
&#13;
  function addPauser(address account) public onlyPauser {&#13;
    _addPauser(account);&#13;
  }&#13;
&#13;
  function renouncePauser() public {&#13;
    _removePauser(msg.sender);&#13;
  }&#13;
&#13;
  function _addPauser(address account) internal {&#13;
    pausers.add(account);&#13;
    emit PauserAdded(account);&#13;
  }&#13;
&#13;
  function _removePauser(address account) internal {&#13;
    pausers.remove(account);&#13;
    emit PauserRemoved(account);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is PauserRole {&#13;
  event Paused(address account);&#13;
  event Unpaused(address account);&#13;
&#13;
  bool private _paused;&#13;
&#13;
  constructor() internal {&#13;
    _paused = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return true if the contract is paused, false otherwise.&#13;
   */&#13;
  function paused() public view returns(bool) {&#13;
    return _paused;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is not paused.&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!_paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is paused.&#13;
   */&#13;
  modifier whenPaused() {&#13;
    require(_paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to pause, triggers stopped state&#13;
   */&#13;
  function pause() public onlyPauser whenNotPaused {&#13;
    _paused = true;&#13;
    emit Paused(msg.sender);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to unpause, returns to normal state&#13;
   */&#13;
  function unpause() public onlyPauser whenPaused {&#13;
    _paused = false;&#13;
    emit Unpaused(msg.sender);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
interface IERC20 {&#13;
  function totalSupply() external view returns (uint256);&#13;
&#13;
  function balanceOf(address who) external view returns (uint256);&#13;
&#13;
  function allowance(address owner, address spender)&#13;
    external view returns (uint256);&#13;
&#13;
  function transfer(address to, uint256 value) external returns (bool);&#13;
&#13;
  function approve(address spender, uint256 value)&#13;
    external returns (bool);&#13;
&#13;
  function transferFrom(address from, address to, uint256 value)&#13;
    external returns (bool);&#13;
&#13;
  event Transfer(&#13;
    address indexed from,&#13;
    address indexed to,&#13;
    uint256 value&#13;
  );&#13;
&#13;
  event Approval(&#13;
    address indexed owner,&#13;
    address indexed spender,&#13;
    uint256 value&#13;
  );&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/math/SafeMath.sol&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that revert on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, reverts on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    uint256 c = a * b;&#13;
    require(c / a == b);&#13;
&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    require(b &gt; 0); // Solidity only automatically asserts when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    require(b &lt;= a);&#13;
    uint256 c = a - b;&#13;
&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, reverts on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    require(c &gt;= a);&#13;
&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),&#13;
  * reverts when dividing by zero.&#13;
  */&#13;
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    require(b != 0);&#13;
    return a % b;&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol&#13;
&#13;
/**&#13;
 * @title Standard ERC20 token&#13;
 *&#13;
 * @dev Implementation of the basic standard token.&#13;
 * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md&#13;
 * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol&#13;
 */&#13;
contract ERC20 is IERC20 {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping (address =&gt; uint256) private _balances;&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) private _allowed;&#13;
&#13;
  uint256 private _totalSupply;&#13;
&#13;
  /**&#13;
  * @dev Total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return _totalSupply;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param owner The address to query the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address owner) public view returns (uint256) {&#13;
    return _balances[owner];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param owner address The address which owns the funds.&#13;
   * @param spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(&#13;
    address owner,&#13;
    address spender&#13;
   )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    return _allowed[owner][spender];&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified address&#13;
  * @param to The address to transfer to.&#13;
  * @param value The amount to be transferred.&#13;
  */&#13;
  function transfer(address to, uint256 value) public returns (bool) {&#13;
    _transfer(msg.sender, to, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address spender, uint256 value) public returns (bool) {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = value;&#13;
    emit Approval(msg.sender, spender, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param from address The address which you want to send tokens from&#13;
   * @param to address The address which you want to transfer to&#13;
   * @param value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(&#13;
    address from,&#13;
    address to,&#13;
    uint256 value&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(value &lt;= _allowed[from][msg.sender]);&#13;
&#13;
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);&#13;
    _transfer(from, to, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed_[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseAllowance(&#13;
    address spender,&#13;
    uint256 addedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = (&#13;
      _allowed[msg.sender][spender].add(addedValue));&#13;
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed_[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseAllowance(&#13;
    address spender,&#13;
    uint256 subtractedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = (&#13;
      _allowed[msg.sender][spender].sub(subtractedValue));&#13;
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified addresses&#13;
  * @param from The address to transfer from.&#13;
  * @param to The address to transfer to.&#13;
  * @param value The amount to be transferred.&#13;
  */&#13;
  function _transfer(address from, address to, uint256 value) internal {&#13;
    require(value &lt;= _balances[from]);&#13;
    require(to != address(0));&#13;
&#13;
    _balances[from] = _balances[from].sub(value);&#13;
    _balances[to] = _balances[to].add(value);&#13;
    emit Transfer(from, to, value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that mints an amount of the token and assigns it to&#13;
   * an account. This encapsulates the modification of balances such that the&#13;
   * proper events are emitted.&#13;
   * @param account The account that will receive the created tokens.&#13;
   * @param value The amount that will be created.&#13;
   */&#13;
  function _mint(address account, uint256 value) internal {&#13;
    require(account != 0);&#13;
    _totalSupply = _totalSupply.add(value);&#13;
    _balances[account] = _balances[account].add(value);&#13;
    emit Transfer(address(0), account, value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that burns an amount of the token of a given&#13;
   * account.&#13;
   * @param account The account whose tokens will be burnt.&#13;
   * @param value The amount that will be burnt.&#13;
   */&#13;
  function _burn(address account, uint256 value) internal {&#13;
    require(account != 0);&#13;
    require(value &lt;= _balances[account]);&#13;
&#13;
    _totalSupply = _totalSupply.sub(value);&#13;
    _balances[account] = _balances[account].sub(value);&#13;
    emit Transfer(account, address(0), value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that burns an amount of the token of a given&#13;
   * account, deducting from the sender's allowance for said account. Uses the&#13;
   * internal burn function.&#13;
   * @param account The account whose tokens will be burnt.&#13;
   * @param value The amount that will be burnt.&#13;
   */&#13;
  function _burnFrom(address account, uint256 value) internal {&#13;
    require(value &lt;= _allowed[account][msg.sender]);&#13;
&#13;
    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,&#13;
    // this function needs to emit an event with the updated approval.&#13;
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(&#13;
      value);&#13;
    _burn(account, value);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol&#13;
&#13;
/**&#13;
 * @title SafeERC20&#13;
 * @dev Wrappers around ERC20 operations that throw on failure.&#13;
 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,&#13;
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.&#13;
 */&#13;
library SafeERC20 {&#13;
&#13;
  using SafeMath for uint256;&#13;
&#13;
  function safeTransfer(&#13;
    IERC20 token,&#13;
    address to,&#13;
    uint256 value&#13;
  )&#13;
    internal&#13;
  {&#13;
    require(token.transfer(to, value));&#13;
  }&#13;
&#13;
  function safeTransferFrom(&#13;
    IERC20 token,&#13;
    address from,&#13;
    address to,&#13;
    uint256 value&#13;
  )&#13;
    internal&#13;
  {&#13;
    require(token.transferFrom(from, to, value));&#13;
  }&#13;
&#13;
  function safeApprove(&#13;
    IERC20 token,&#13;
    address spender,&#13;
    uint256 value&#13;
  )&#13;
    internal&#13;
  {&#13;
    // safeApprove should only be called when setting an initial allowance, &#13;
    // or when resetting it to zero. To increase and decrease it, use &#13;
    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'&#13;
    require((value == 0) || (token.allowance(msg.sender, spender) == 0));&#13;
    require(token.approve(spender, value));&#13;
  }&#13;
&#13;
  function safeIncreaseAllowance(&#13;
    IERC20 token,&#13;
    address spender,&#13;
    uint256 value&#13;
  )&#13;
    internal&#13;
  {&#13;
    uint256 newAllowance = token.allowance(address(this), spender).add(value);&#13;
    require(token.approve(spender, newAllowance));&#13;
  }&#13;
&#13;
  function safeDecreaseAllowance(&#13;
    IERC20 token,&#13;
    address spender,&#13;
    uint256 value&#13;
  )&#13;
    internal&#13;
  {&#13;
    uint256 newAllowance = token.allowance(address(this), spender).sub(value);&#13;
    require(token.approve(spender, newAllowance));&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol&#13;
&#13;
/**&#13;
 * @title Helps contracts guard against reentrancy attacks.&#13;
 * @author Remco Bloemen &lt;<span class="__cf_email__" data-cfemail="d6a4b3bbb5b996e4">[emailÂ protected]</span>Ï.com&gt;, Eenae &lt;<span class="__cf_email__" data-cfemail="d1b0bdb4a9b4a891bcb8a9b3a8a5b4a2ffb8be">[emailÂ protected]</span>&gt;&#13;
 * @dev If you mark a function `nonReentrant`, you should also&#13;
 * mark it `external`.&#13;
 */&#13;
contract ReentrancyGuard {&#13;
&#13;
  /// @dev counter to allow mutex lock with only one SSTORE operation&#13;
  uint256 private _guardCounter;&#13;
&#13;
  constructor() internal {&#13;
    // The counter starts at one to prevent changing it from zero to a non-zero&#13;
    // value, which is a more expensive operation.&#13;
    _guardCounter = 1;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Prevents a contract from calling itself, directly or indirectly.&#13;
   * Calling a `nonReentrant` function from another `nonReentrant`&#13;
   * function is not supported. It is possible to prevent this from happening&#13;
   * by making the `nonReentrant` function external, and make it call a&#13;
   * `private` function that does the actual work.&#13;
   */&#13;
  modifier nonReentrant() {&#13;
    _guardCounter += 1;&#13;
    uint256 localCounter = _guardCounter;&#13;
    _;&#13;
    require(localCounter == _guardCounter);&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol&#13;
&#13;
/**&#13;
 * @title Crowdsale&#13;
 * @dev Crowdsale is a base contract for managing a token crowdsale,&#13;
 * allowing investors to purchase tokens with ether. This contract implements&#13;
 * such functionality in its most fundamental form and can be extended to provide additional&#13;
 * functionality and/or custom behavior.&#13;
 * The external interface represents the basic interface for purchasing tokens, and conform&#13;
 * the base architecture for crowdsales. They are *not* intended to be modified / overridden.&#13;
 * The internal interface conforms the extensible and modifiable surface of crowdsales. Override&#13;
 * the methods to add functionality. Consider using 'super' where appropriate to concatenate&#13;
 * behavior.&#13;
 */&#13;
contract Crowdsale is ReentrancyGuard {&#13;
  using SafeMath for uint256;&#13;
  using SafeERC20 for IERC20;&#13;
&#13;
  // The token being sold&#13;
  IERC20 private _token;&#13;
&#13;
  // Address where funds are collected&#13;
  address private _wallet;&#13;
&#13;
  // How many token units a buyer gets per wei.&#13;
  // The rate is the conversion between wei and the smallest and indivisible token unit.&#13;
  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK&#13;
  // 1 wei will give you 1 unit, or 0.001 TOK.&#13;
  uint256 private _rate;&#13;
&#13;
  // Amount of wei raised&#13;
  uint256 private _weiRaised;&#13;
&#13;
  /**&#13;
   * Event for token purchase logging&#13;
   * @param purchaser who paid for the tokens&#13;
   * @param beneficiary who got the tokens&#13;
   * @param value weis paid for purchase&#13;
   * @param amount amount of tokens purchased&#13;
   */&#13;
  event TokensPurchased(&#13;
    address indexed purchaser,&#13;
    address indexed beneficiary,&#13;
    uint256 value,&#13;
    uint256 amount&#13;
  );&#13;
&#13;
  /**&#13;
   * @param rate Number of token units a buyer gets per wei&#13;
   * @dev The rate is the conversion between wei and the smallest and indivisible&#13;
   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token&#13;
   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.&#13;
   * @param wallet Address where collected funds will be forwarded to&#13;
   * @param token Address of the token being sold&#13;
   */&#13;
  constructor(uint256 rate, address wallet, IERC20 token) internal {&#13;
    require(rate &gt; 0);&#13;
    require(wallet != address(0));&#13;
    require(token != address(0));&#13;
&#13;
    _rate = rate;&#13;
    _wallet = wallet;&#13;
    _token = token;&#13;
  }&#13;
&#13;
  // -----------------------------------------&#13;
  // Crowdsale external interface&#13;
  // -----------------------------------------&#13;
&#13;
  /**&#13;
   * @dev fallback function ***DO NOT OVERRIDE***&#13;
   * Note that other contracts will transfer fund with a base gas stipend&#13;
   * of 2300, which is not enough to call buyTokens. Consider calling&#13;
   * buyTokens directly when purchasing tokens from a contract.&#13;
   */&#13;
  function () external payable {&#13;
    buyTokens(msg.sender);&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the token being sold.&#13;
   */&#13;
  function token() public view returns(IERC20) {&#13;
    return _token;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the address where funds are collected.&#13;
   */&#13;
  function wallet() public view returns(address) {&#13;
    return _wallet;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the number of token units a buyer gets per wei.&#13;
   */&#13;
  function rate() public view returns(uint256) {&#13;
    return _rate;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the amount of wei raised.&#13;
   */&#13;
  function weiRaised() public view returns (uint256) {&#13;
    return _weiRaised;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev low level token purchase ***DO NOT OVERRIDE***&#13;
   * This function has a non-reentrancy guard, so it shouldn't be called by&#13;
   * another `nonReentrant` function.&#13;
   * @param beneficiary Recipient of the token purchase&#13;
   */&#13;
  function buyTokens(address beneficiary) public nonReentrant payable {&#13;
&#13;
    uint256 weiAmount = msg.value;&#13;
    _preValidatePurchase(beneficiary, weiAmount);&#13;
&#13;
    // calculate token amount to be created&#13;
    uint256 tokens = _getTokenAmount(weiAmount);&#13;
&#13;
    // update state&#13;
    _weiRaised = _weiRaised.add(weiAmount);&#13;
&#13;
    _processPurchase(beneficiary, tokens);&#13;
    emit TokensPurchased(&#13;
      msg.sender,&#13;
      beneficiary,&#13;
      weiAmount,&#13;
      tokens&#13;
    );&#13;
&#13;
    _updatePurchasingState(beneficiary, weiAmount);&#13;
&#13;
    _forwardFunds();&#13;
    _postValidatePurchase(beneficiary, weiAmount);&#13;
  }&#13;
&#13;
  // -----------------------------------------&#13;
  // Internal interface (extensible)&#13;
  // -----------------------------------------&#13;
&#13;
  /**&#13;
   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.&#13;
   * Example from CappedCrowdsale.sol's _preValidatePurchase method:&#13;
   *   super._preValidatePurchase(beneficiary, weiAmount);&#13;
   *   require(weiRaised().add(weiAmount) &lt;= cap);&#13;
   * @param beneficiary Address performing the token purchase&#13;
   * @param weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _preValidatePurchase(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
    view&#13;
  {&#13;
    require(beneficiary != address(0));&#13;
    require(weiAmount != 0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.&#13;
   * @param beneficiary Address performing the token purchase&#13;
   * @param weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _postValidatePurchase(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
    view&#13;
  {&#13;
    // optional override&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.&#13;
   * @param beneficiary Address performing the token purchase&#13;
   * @param tokenAmount Number of tokens to be emitted&#13;
   */&#13;
  function _deliverTokens(&#13;
    address beneficiary,&#13;
    uint256 tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    _token.safeTransfer(beneficiary, tokenAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send tokens.&#13;
   * @param beneficiary Address receiving the tokens&#13;
   * @param tokenAmount Number of tokens to be purchased&#13;
   */&#13;
  function _processPurchase(&#13;
    address beneficiary,&#13;
    uint256 tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    _deliverTokens(beneficiary, tokenAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)&#13;
   * @param beneficiary Address receiving the tokens&#13;
   * @param weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _updatePurchasingState(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    // optional override&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Override to extend the way in which ether is converted to tokens.&#13;
   * @param weiAmount Value in wei to be converted into tokens&#13;
   * @return Number of tokens that can be purchased with the specified _weiAmount&#13;
   */&#13;
  function _getTokenAmount(uint256 weiAmount)&#13;
    internal view returns (uint256)&#13;
  {&#13;
    return weiAmount.mul(_rate);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Determines how ETH is stored/forwarded on purchases.&#13;
   */&#13;
  function _forwardFunds() internal {&#13;
    _wallet.transfer(msg.value);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol&#13;
&#13;
/**&#13;
 * @title TimedCrowdsale&#13;
 * @dev Crowdsale accepting contributions only within a time frame.&#13;
 */&#13;
contract TimedCrowdsale is Crowdsale {&#13;
  using SafeMath for uint256;&#13;
&#13;
  uint256 private _openingTime;&#13;
  uint256 private _closingTime;&#13;
&#13;
  /**&#13;
   * @dev Reverts if not in crowdsale time range.&#13;
   */&#13;
  modifier onlyWhileOpen {&#13;
    require(isOpen());&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Constructor, takes crowdsale opening and closing times.&#13;
   * @param openingTime Crowdsale opening time&#13;
   * @param closingTime Crowdsale closing time&#13;
   */&#13;
  constructor(uint256 openingTime, uint256 closingTime) internal {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    require(openingTime &gt;= block.timestamp);&#13;
    require(closingTime &gt; openingTime);&#13;
&#13;
    _openingTime = openingTime;&#13;
    _closingTime = closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the crowdsale opening time.&#13;
   */&#13;
  function openingTime() public view returns(uint256) {&#13;
    return _openingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the crowdsale closing time.&#13;
   */&#13;
  function closingTime() public view returns(uint256) {&#13;
    return _closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return true if the crowdsale is open, false otherwise.&#13;
   */&#13;
  function isOpen() public view returns (bool) {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    return block.timestamp &gt;= _openingTime &amp;&amp; block.timestamp &lt;= _closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether the period in which the crowdsale is open has already elapsed.&#13;
   * @return Whether crowdsale period has elapsed&#13;
   */&#13;
  function hasClosed() public view returns (bool) {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    return block.timestamp &gt; _closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Extend parent behavior requiring to be within contributing period&#13;
   * @param beneficiary Token purchaser&#13;
   * @param weiAmount Amount of wei contributed&#13;
   */&#13;
  function _preValidatePurchase(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
    onlyWhileOpen&#13;
    view&#13;
  {&#13;
    super._preValidatePurchase(beneficiary, weiAmount);&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: contracts/SparkleBaseCrowdsale.sol&#13;
&#13;
/**&#13;
 * @dev SparkelBaseCrowdsale: Core crowdsale functionality&#13;
 */&#13;
contract SparkleBaseCrowdsale is MultiOwnable, Pausable, TimedCrowdsale {&#13;
	using SafeMath for uint256;&#13;
&#13;
	/**&#13;
	 * @dev CrowdsaleStage enumeration indicating which operational stage this contract is running&#13;
	 */&#13;
	enum CrowdsaleStage { &#13;
		preICO, &#13;
		bonusICO, &#13;
		mainICO&#13;
	}&#13;
&#13;
 	/**&#13;
 	 * @dev Internal contract variable stored&#13;
 	 */&#13;
	ERC20   public tokenAddress;&#13;
	uint256 public tokenRate;&#13;
	uint256 public tokenCap;&#13;
	uint256 public startTime;&#13;
	uint256 public endTime;&#13;
	address public depositWallet;&#13;
	bool    public kycRequired;	&#13;
	bool	public refundRemainingOk;&#13;
&#13;
	uint256 public tokensSold;&#13;
&#13;
	/**&#13;
	 * @dev Contribution structure representing a token purchase &#13;
	 */&#13;
	struct OrderBook {&#13;
		uint256 weiAmount;   // Amount of Wei that has been contributed towards tokens by this address&#13;
		uint256 pendingTokens; // Total pending tokens held by this address waiting for KYC verification, and user to claim their tokens(pending restrictions)&#13;
		bool    kycVerified;   // Has this address been kyc validated&#13;
	}&#13;
&#13;
	// Contributions mapping to user addresses&#13;
	mapping(address =&gt; OrderBook) private orders;&#13;
&#13;
	// Initialize the crowdsale stage to preICO (this stage will change)&#13;
	CrowdsaleStage public crowdsaleStage = CrowdsaleStage.preICO;&#13;
&#13;
	/**&#13;
	 * @dev Event signaling that a number of addresses have been approved for KYC&#13;
	 */&#13;
	event ApprovedKYCAddresses (address indexed _appovedByAddress, uint256 _numberOfApprovals);&#13;
&#13;
	/**&#13;
	 * @dev Event signaling that a number of addresses have been revoked from KYC&#13;
	 */&#13;
	event RevokedKYCAddresses (address indexed _revokedByAddress, uint256 _numberOfRevokals);&#13;
&#13;
	/**&#13;
	 * @dev Event signalling that tokens have been claimed from the crowdsale&#13;
	 */&#13;
	event TokensClaimed (address indexed _claimingAddress, uint256 _tokensClaimed);&#13;
&#13;
	/**&#13;
	 * @dev Event signaling that tokens were sold and how many were sold&#13;
	 */&#13;
	event TokensSold(address indexed _beneficiary, uint256 _tokensSold);&#13;
&#13;
	/**&#13;
	 * @dev Event signaling that toke burn approval has been changed&#13;
	 */&#13;
	event TokenRefundApprovalChanged(address indexed _approvingAddress, bool tokenBurnApproved);&#13;
&#13;
	/**&#13;
	 * @dev Event signaling that token burn approval has been changed&#13;
	 */&#13;
	event CrowdsaleStageChanged(address indexed _changingAddress, uint _newStageValue);&#13;
&#13;
	/**&#13;
	 * @dev Event signaling that crowdsale tokens have been burned&#13;
	 */&#13;
	event CrowdsaleTokensRefunded(address indexed _refundingToAddress, uint256 _numberOfTokensBurned);&#13;
&#13;
	/**&#13;
	 * @dev SparkleTokenCrowdsale Contract contructor&#13;
	 */&#13;
	constructor(ERC20 _tokenAddress, uint256 _tokenRate, uint256 _tokenCap, uint256 _startTime, uint256 _endTime, address _depositWallet, bool _kycRequired)&#13;
	public&#13;
	Crowdsale(_tokenRate, _depositWallet, _tokenAddress)&#13;
	TimedCrowdsale(_startTime, _endTime)&#13;
	MultiOwnable()&#13;
	Pausable()&#13;
	{ &#13;
		tokenAddress      = _tokenAddress;&#13;
		tokenRate         = _tokenRate;&#13;
		tokenCap          = _tokenCap;&#13;
		startTime         = _startTime;&#13;
		endTime           = _endTime;&#13;
		depositWallet     = _depositWallet;&#13;
		kycRequired       = _kycRequired;&#13;
		refundRemainingOk = false;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev claimPendingTokens() provides users with a function to receive their purchase tokens&#13;
	 * after their KYC Verification&#13;
	 */&#13;
	function claimTokens()&#13;
	whenNotPaused&#13;
	onlyWhileOpen&#13;
	public&#13;
	{&#13;
		// Ensure calling address is not address(0)&#13;
		require(msg.sender != address(0), "Invalid address specified: address(0)");&#13;
		// Obtain a copy of the caller's order record&#13;
		OrderBook storage order = orders[msg.sender];&#13;
		// Ensure caller has been KYC Verified&#13;
		require(order.kycVerified, "Address attempting to claim tokens is not KYC Verified.");&#13;
		// Ensure caller has pending tokens to claim&#13;
		require(order.pendingTokens &gt; 0, "Address does not have any pending tokens to claim.");&#13;
		// For security sake grab the pending token value&#13;
		uint256 localPendingTokens = order.pendingTokens;&#13;
		// zero out pendingTokens to prevent potential re-entrancy vulnverability&#13;
		order.pendingTokens = 0;&#13;
		// Deliver the callers tokens&#13;
		_deliverTokens(msg.sender, localPendingTokens);&#13;
		// Emit event&#13;
		emit TokensClaimed(msg.sender, localPendingTokens);&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev getExchangeRate() provides a public facing manner in which to &#13;
	 * determine the current rate of exchange in the crowdsale&#13;
	 * @param _weiAmount is the amount of wei to purchase tokens with&#13;
	 * @return number of tokens the specified wei amount would purchase&#13;
	 */&#13;
	function getExchangeRate(uint256 _weiAmount)&#13;
	whenNotPaused&#13;
	onlyWhileOpen&#13;
	public&#13;
	view&#13;
	returns (uint256)&#13;
	{&#13;
		if (crowdsaleStage == CrowdsaleStage.preICO) {&#13;
			// Ensure _weiAmount is &gt; than current stage minimum&#13;
			require(_weiAmount &gt;= 1 ether, "PreICO minimum ether required: 1 ETH.");&#13;
		}&#13;
		else if (crowdsaleStage == CrowdsaleStage.bonusICO || crowdsaleStage == CrowdsaleStage.mainICO) {&#13;
			// Ensure _weiAmount is &gt; than current stage minimum&#13;
			require(_weiAmount &gt;= 500 finney, "bonusICO/mainICO minimum ether required: 0.5 ETH.");&#13;
		}&#13;
&#13;
		// Calculate the number of tokens this amount of wei is worth&#13;
		uint256 tokenAmount = _getTokenAmount(_weiAmount);&#13;
		// Ensure the number of tokens requests will not exceed available tokens&#13;
		require(getRemainingTokens() &gt;= tokenAmount, "Specified wei value woudld exceed amount of tokens remaining.");&#13;
		// Calculate and return the token amount this amount of wei is worth (includes bonus factor)&#13;
		return tokenAmount;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev getRemainingTokens() provides function to return the current remaining token count&#13;
	 * @return number of tokens remaining in the crowdsale to be sold&#13;
	 */&#13;
	function getRemainingTokens()&#13;
	whenNotPaused&#13;
	public&#13;
	view&#13;
	returns (uint256)&#13;
	{&#13;
		// Return the balance of the contract (IE: tokenCap - tokensSold)&#13;
		return tokenCap.sub(tokensSold);&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev refundRemainingTokens provides functionn to refund remaining tokens to the specified address&#13;
	 * @param _addressToRefund is the address in which the remaining tokens will be refunded to&#13;
	 */&#13;
	function refundRemainingTokens(address _addressToRefund)&#13;
	onlyOwner&#13;
	whenNotPaused&#13;
	public&#13;
	{&#13;
		// Ensure the specified address is not address(0)&#13;
		require(_addressToRefund != address(0), "Specified address is invalid [0x0]");&#13;
		// Ensure the crowdsale has closed before burning tokens&#13;
		require(hasClosed(), "Crowdsale must be finished to burn tokens.");&#13;
		// Ensure that step-1 of the burning process is satisfied (owner set to true)&#13;
		require(refundRemainingOk, "Crowdsale remaining token refund is disabled.");&#13;
		uint256 tempBalance = token().balanceOf(this);&#13;
		// Transfer the remaining tokens to specified address&#13;
		_deliverTokens(_addressToRefund, tempBalance);&#13;
		// Emit event&#13;
		emit CrowdsaleTokensRefunded(_addressToRefund, tempBalance);&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev approveRemainingTokenRefund approves the function to withdraw any remaining tokens&#13;
	 * after the crowdsale ends&#13;
	 * @dev This was put in place as a two-step process to burn tokens so burning was secure&#13;
	 */&#13;
	function approveRemainingTokenRefund()&#13;
	onlyOwner&#13;
	whenNotPaused&#13;
	public&#13;
	{&#13;
		// Ensure calling address is not address(0)&#13;
		require(msg.sender != address(0), "Calling address invalid [0x0]");&#13;
		// Ensure the crowdsale has closed before approving token burning&#13;
		require(hasClosed(), "Token burn approval can only be set after crowdsale closes");&#13;
		refundRemainingOk = true;&#13;
		emit TokenRefundApprovalChanged(msg.sender, refundRemainingOk);&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev setStage() sets the current crowdsale stage to the specified value&#13;
	 * @param _newStageValue is the new stage to be changed to&#13;
	 */&#13;
	function changeCrowdsaleStage(uint _newStageValue)&#13;
	onlyOwner&#13;
	whenNotPaused&#13;
	onlyWhileOpen&#13;
	public&#13;
	{&#13;
		// Create temporary stage variable&#13;
		CrowdsaleStage _stage;&#13;
		// Determine if caller is trying to set: preICO&#13;
		if (uint(CrowdsaleStage.preICO) == _newStageValue) {&#13;
			// Set the internal stage to the new value&#13;
			_stage = CrowdsaleStage.preICO;&#13;
		}&#13;
		// Determine if caller is trying to set: bonusICO&#13;
		else if (uint(CrowdsaleStage.bonusICO) == _newStageValue) {&#13;
			// Set the internal stage to the new value&#13;
			_stage = CrowdsaleStage.bonusICO;&#13;
		}&#13;
		// Determine if caller is trying to set: mainICO&#13;
		else if (uint(CrowdsaleStage.mainICO) == _newStageValue) {&#13;
			// Set the internal stage to the new value&#13;
			_stage = CrowdsaleStage.mainICO;&#13;
		}&#13;
		else {&#13;
			revert("Invalid stage selected");&#13;
		}&#13;
&#13;
		// Update the internal crowdsale stage to the new stage&#13;
		crowdsaleStage = _stage;&#13;
		// Emit event&#13;
		emit CrowdsaleStageChanged(msg.sender, uint(_stage));&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev isAddressKYCVerified() checks the KYV Verification status of the specified address&#13;
	 * @param _addressToLookuo address to check status of KYC Verification&#13;
	 * @return kyc status of the specified address &#13;
	 */&#13;
	function isKYCVerified(address _addressToLookuo) &#13;
	whenNotPaused&#13;
	onlyWhileOpen&#13;
	public&#13;
	view&#13;
	returns (bool)&#13;
	{&#13;
		// Ensure _addressToLookuo is not address(0)&#13;
		require(_addressToLookuo != address(0), "Invalid address specified: address(0)");&#13;
		// Obtain the addresses order record&#13;
		OrderBook storage order = orders[_addressToLookuo];&#13;
		// Return the JYC Verification status for the specified address&#13;
		return order.kycVerified;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Approve in bulk the specified addfresses indicating they were KYC Verified&#13;
	 * @param _addressesForApproval is a list of addresses that are to be KYC Verified&#13;
	 */&#13;
	function bulkApproveKYCAddresses(address[] _addressesForApproval) &#13;
	onlyOwner&#13;
	whenNotPaused&#13;
	onlyWhileOpen&#13;
	public&#13;
	{&#13;
&#13;
		// Ensure that there are any address(es) in the provided array&#13;
		require(_addressesForApproval.length &gt; 0, "Specified address array is empty");&#13;
		// Interate through all addresses provided&#13;
		for (uint i = 0; i &lt;_addressesForApproval.length; i++) {&#13;
			// Approve this address using the internal function&#13;
			_approveKYCAddress(_addressesForApproval[i]);&#13;
		}&#13;
&#13;
		// Emit event indicating address(es) have been approved for KYC Verification&#13;
		emit ApprovedKYCAddresses(msg.sender, _addressesForApproval.length);&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Revoke in bulk the specified addfresses indicating they were denied KYC Verified&#13;
	 * @param _addressesToRevoke is a list of addresses that are to be KYC Verified&#13;
	 */&#13;
	function bulkRevokeKYCAddresses(address[] _addressesToRevoke) &#13;
	onlyOwner&#13;
	whenNotPaused&#13;
	onlyWhileOpen&#13;
	public&#13;
	{&#13;
		// Ensure that there are any address(es) in the provided array&#13;
		require(_addressesToRevoke.length &gt; 0, "Specified address array is empty");&#13;
		// Interate through all addresses provided&#13;
		for (uint i = 0; i &lt;_addressesToRevoke.length; i++) {&#13;
			// Approve this address using the internal function&#13;
			_revokeKYCAddress(_addressesToRevoke[i]);&#13;
		}&#13;
&#13;
		// Emit event indicating address(es) have been revoked for KYC Verification&#13;
		emit RevokedKYCAddresses(msg.sender, _addressesToRevoke.length);&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev tokensPending() provides owners the function to retrieve an addresses pending&#13;
	 * token amount&#13;
	 * @param _addressToLookup is the address to return the pending token value for&#13;
	 * @return the number of pending tokens waiting to be claimed from specified address&#13;
	 */&#13;
	function tokensPending(address _addressToLookup)&#13;
	onlyOwner&#13;
	whenNotPaused&#13;
	onlyWhileOpen&#13;
	public&#13;
	view&#13;
	returns (uint256)&#13;
	{&#13;
		// Ensure specified address is not address(0)&#13;
		require(_addressToLookup != address(0), "Specified address is invalid [0x0]");&#13;
		// Obtain the order for specified address&#13;
		OrderBook storage order = orders[_addressToLookup];&#13;
		// Return the pendingTokens amount&#13;
		return order.pendingTokens;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev contributionAmount() provides owners the function to retrieve an addresses total&#13;
	 * contribution amount in eth&#13;
	 * @param _addressToLookup is the address to return the contribution amount value for&#13;
	 * @return the number of ether contribured to the crowdsale by specified address&#13;
	 */&#13;
	function contributionAmount(address _addressToLookup)&#13;
	onlyOwner&#13;
	whenNotPaused&#13;
	onlyWhileOpen&#13;
	public&#13;
	view&#13;
	returns (uint256)&#13;
	{&#13;
		// Ensure specified address is not address(0)&#13;
		require(_addressToLookup != address(0), "Specified address is Invalid [0x0]");&#13;
		// Obtain the order for specified address&#13;
		OrderBook storage order = orders[_addressToLookup];&#13;
		// Return the contribution amount in wei&#13;
		return order.weiAmount;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev _approveKYCAddress provides the function to approve the specified address &#13;
	 * indicating KYC Verified&#13;
	 * @param _addressToApprove of the user that is being verified&#13;
	 */&#13;
	function _approveKYCAddress(address _addressToApprove) &#13;
	onlyOwner&#13;
	internal&#13;
	{&#13;
		// Ensure that _addressToApprove is not address(0)&#13;
		require(_addressToApprove != address(0), "Invalid address specified: address(0)");&#13;
		// Get this addesses contribution record&#13;
		OrderBook storage order = orders[_addressToApprove];&#13;
		// Set the contribution record to indicate address has been kyc verified&#13;
		order.kycVerified = true;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev _revokeKYCAddress() provides the function to revoke previously&#13;
	 * granted KYC verification in cases of fraud or false/invalid KYC data&#13;
	 * @param _addressToRevoke is the address to remove KYC verification from&#13;
	 */&#13;
	function _revokeKYCAddress(address _addressToRevoke)&#13;
	onlyOwner&#13;
	internal&#13;
	{&#13;
		// Ensure address is not address(0)&#13;
		require(_addressToRevoke != address(0), "Invalid address specified: address(0)");&#13;
		// Obtain a copy of this addresses contribution record&#13;
		OrderBook storage order = orders[_addressToRevoke];&#13;
		// Revoke this addresses KYC verification&#13;
		order.kycVerified = false;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev _rate() provides the function of calcualting the rate based on crowdsale stage&#13;
	 * @param _weiAmount indicated the amount of ether intended to use for purchase&#13;
	 * @return number of tokens worth based on specified Wei value&#13;
	 */&#13;
	function _rate(uint _weiAmount)&#13;
	internal&#13;
	view&#13;
	returns (uint256)&#13;
	{&#13;
		require(_weiAmount &gt; 0, "Specified wei amoount must be &gt; 0");&#13;
&#13;
		// Determine if the current operation stage of the crowdsale is preICO&#13;
		if (crowdsaleStage == CrowdsaleStage.preICO)&#13;
		{&#13;
			// Determine if the purchase is &gt;= 21 ether&#13;
			if (_weiAmount &gt;= 21 ether) { // 20% bonus&#13;
				return 480e8;&#13;
			}&#13;
			&#13;
			// Determine if the purchase is &gt;= 11 ether&#13;
			if (_weiAmount &gt;= 11 ether) { // 15% bonus&#13;
				return 460e8;&#13;
			}&#13;
			&#13;
			// Determine if the purchase is &gt;= 5 ether&#13;
			if (_weiAmount &gt;= 5 ether) { // 10% bonus&#13;
				return 440e8;&#13;
			}&#13;
&#13;
		}&#13;
		else&#13;
		// Determine if the current operation stage of the crowdsale is bonusICO&#13;
		if (crowdsaleStage == CrowdsaleStage.bonusICO)&#13;
		{&#13;
			// Determine if the purchase is &gt;= 21 ether&#13;
			if (_weiAmount &gt;= 21 ether) { // 10% bonus&#13;
				return 440e8;&#13;
			}&#13;
			else if (_weiAmount &gt;= 11 ether) { // 7% bonus&#13;
				return 428e8;&#13;
			}&#13;
			else&#13;
			if (_weiAmount &gt;= 5 ether) { // 5% bonus&#13;
				return 420e8;&#13;
			}&#13;
&#13;
		}&#13;
&#13;
		// Rate is either &lt; bounus or is main sale so return base rate only&#13;
		return rate();&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev Performs token to wei converstion calculations based on crowdsale specification&#13;
	 * @param _weiAmount to spend&#13;
	 * @return number of tokens purchasable for the specified _weiAmount at crowdsale stage rates&#13;
	 */&#13;
	function _getTokenAmount(uint256 _weiAmount)&#13;
	whenNotPaused&#13;
	internal&#13;
	view&#13;
	returns (uint256)&#13;
	{&#13;
		// Get the current rate set in the constructor and calculate token units per wei&#13;
		uint256 currentRate = _rate(_weiAmount);&#13;
		// Calculate the total number of tokens buyable at based rate (before adding bonus)&#13;
		uint256 sparkleToBuy = currentRate.mul(_weiAmount).div(10e17);&#13;
		// Return proposed token amount&#13;
		return sparkleToBuy;&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev _preValidatePurchase provides the functionality of pre validating a potential purchase&#13;
	 * @param _beneficiary is the address that is currently purchasing tokens&#13;
	 * @param _weiAmount is the number of tokens this address is attempting to purchase&#13;
	 */&#13;
	function _preValidatePurchase(address _beneficiary, uint256 _weiAmount) &#13;
	whenNotPaused&#13;
	internal&#13;
	view&#13;
	{&#13;
		// Call into the parent validation to ensure _beneficiary and _weiAmount are valid&#13;
		super._preValidatePurchase(_beneficiary, _weiAmount);&#13;
		// Calculate amount of tokens for the specified _weiAmount&#13;
		uint256 requestedTokens = getExchangeRate(_weiAmount);&#13;
		// Calculate the currently sold tokens&#13;
		uint256 tempTotalTokensSold = tokensSold;&#13;
		// Incrememt total tokens		&#13;
		tempTotalTokensSold.add(requestedTokens);&#13;
		// Ensure total max token cap is &gt; tempTotalTokensSold&#13;
		require(tempTotalTokensSold &lt;= tokenCap, "Requested wei amount will exceed the max token cap and was not accepted.");&#13;
		// Ensure that requested tokens will not go over the remaining token balance&#13;
		require(requestedTokens &lt;= getRemainingTokens(), "Requested tokens would exceed tokens available and was not accepted.");&#13;
		// Obtain the order record for _beneficiary if one exists&#13;
		OrderBook storage order = orders[_beneficiary];&#13;
		// Ensure this address has been kyc validated&#13;
		require(order.kycVerified, "Address attempting to purchase is not KYC Verified.");&#13;
		// Update this addresses order to reflect the purchase and ether spent&#13;
		order.weiAmount = order.weiAmount.add(_weiAmount);&#13;
		order.pendingTokens = order.pendingTokens.add(requestedTokens);&#13;
		// increment totalTokens sold&#13;
		tokensSold = tokensSold.add(requestedTokens);&#13;
		// Emit event&#13;
		emit TokensSold(_beneficiary, requestedTokens);&#13;
	}&#13;
&#13;
	/**&#13;
	 * @dev _processPurchase() is overridden and will be called by OpenZep v2.0 internally&#13;
	 * @param _beneficiary is the address that is currently purchasing tokens&#13;
	 * @param _tokenAmount is the number of tokens this address is attempting to purchase&#13;
	 */&#13;
	function _processPurchase(address _beneficiary, uint256 _tokenAmount)&#13;
	whenNotPaused&#13;
	internal&#13;
	{&#13;
		// We do not call the base class _processPurchase() functions. This is needed here or the base&#13;
		// classes function will be called.&#13;
	}&#13;
&#13;
}&#13;
&#13;
&#13;
// File: contracts/SparkleCrowdsale.sol&#13;
&#13;
contract SparkleCrowdsale is SparkleBaseCrowdsale {&#13;
&#13;
  // Token contract address &#13;
  address public initTokenAddress = 0x4b7aD3a56810032782Afce12d7d27122bDb96efF;&#13;
  // Crowdsale specification&#13;
  uint256 public initTokenRate     = 400e8;&#13;
  uint256 public initTokenCap      = 19698000e8;&#13;
  uint256 public initStartTime     = now;&#13;
  uint256 public initEndTime       = now + 12 weeks; // Set this accordingly as it cannot be changed&#13;
  address public initDepositWallet = 0x0926a84C83d7B88338588Dca2729b590D787FA34;&#13;
  bool public initKYCRequired      = true;&#13;
&#13;
  constructor() &#13;
	SparkleBaseCrowdsale(ERC20(initTokenAddress), initTokenRate, initTokenCap, initStartTime, initEndTime, initDepositWallet, initKYCRequired)&#13;
	public&#13;
	{&#13;
	}&#13;
&#13;
}
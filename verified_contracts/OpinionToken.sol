pragma solidity ^0.4.18; // solhint-disable-line



/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="7c181908193c1d04151311061912521f13">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
  // Required methods&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function balanceOf(address _owner) public view returns (uint256 balance);&#13;
  function implementsERC721() public pure returns (bool);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address addr);&#13;
  function takeOwnership(uint256 _tokenId) public;&#13;
  function totalSupply() public view returns (uint256 total);&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function transfer(address _to, uint256 _tokenId) public;&#13;
&#13;
  event Transfer(address indexed from, address indexed to, uint256 tokenId);&#13;
  event Approval(address indexed owner, address indexed approved, uint256 tokenId);&#13;
&#13;
  // Optional&#13;
  // function name() public view returns (string name);&#13;
  // function symbol() public view returns (string symbol);&#13;
  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);&#13;
  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);&#13;
}&#13;
&#13;
&#13;
contract OpinionToken is ERC721 {&#13;
&#13;
  /*** EVENTS ***/&#13;
&#13;
  /// @dev The Birth event is fired whenever a new opinion comes into existence.&#13;
  event Birth(uint256 tokenId, string name, address owner);&#13;
&#13;
  /// @dev The TokenSold event is fired whenever a token is sold.&#13;
  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);&#13;
&#13;
  /// @dev Transfer event as defined in current draft of ERC721. &#13;
  ///  ownership is assigned, including births.&#13;
  event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
  /*** CONSTANTS ***/&#13;
&#13;
  /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
  string public constant NAME = "Cryptopinions"; // solhint-disable-line&#13;
  string public constant SYMBOL = "OpinionToken"; // solhint-disable-line&#13;
  string public constant DEFAULT_TEXT = "";&#13;
&#13;
  uint256 private firstStepLimit =  0.053613 ether;&#13;
  uint256 private secondStepLimit = 0.564957 ether;&#13;
  uint256 private numIssued=5; //number of tokens issued initially&#13;
  uint256 private constant stepMultiplier=2;//multiplier for initial opinion registration cost, not sponsorship&#13;
  uint256 private startingPrice = 0.001 ether; //will increase every token issued by stepMultiplier times&#13;
  uint256 private sponsorStartingCost=0.01 ether;//initial cost to sponsor an opinion&#13;
  //uint256 private currentIssueRemaining;&#13;
  /*** STORAGE ***/&#13;
&#13;
  /// @dev A mapping from opinion IDs to the address that owns them. All opinions have&#13;
  ///  some valid owner address.&#13;
  mapping (uint256 =&gt; address) public opinionIndexToOwner;&#13;
&#13;
  // @dev A mapping from owner address to count of tokens that address owns.&#13;
  //  Used internally inside balanceOf() to resolve ownership count.&#13;
  mapping (address =&gt; uint256) private ownershipTokenCount;&#13;
&#13;
  /// @dev A mapping from opinionIDs to an address that has been approved to call&#13;
  ///  transferFrom(). Each opinion can only have one approved address for transfer&#13;
  ///  at any time. A zero value means no approval is outstanding.&#13;
  mapping (uint256 =&gt; address) public opinionIndexToApproved;&#13;
&#13;
  // @dev A mapping from opinionIDs to the price of the token.&#13;
  mapping (uint256 =&gt; uint256) private opinionIndexToPrice;&#13;
  &#13;
  // The addresses of the accounts (or contracts) that can execute actions within each roles.&#13;
  address public ceoAddress;&#13;
  address public cooAddress;&#13;
&#13;
  /*** DATATYPES ***/&#13;
  struct Opinion {&#13;
    string text;&#13;
    bool claimed;&#13;
    bool deleted;&#13;
    uint8 comment;&#13;
    address sponsor;&#13;
    address antisponsor;&#13;
    uint256 totalsponsored;&#13;
    uint256 totalantisponsored;&#13;
    uint256 timestamp;&#13;
  }&#13;
&#13;
  Opinion[] private opinions;&#13;
&#13;
  /*** ACCESS MODIFIERS ***/&#13;
  /// @dev Access modifier for CEO-only functionality&#13;
  modifier onlyCEO() {&#13;
    require(msg.sender == ceoAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /// @dev Access modifier for COO-only functionality&#13;
  modifier onlyCOO() {&#13;
    require(msg.sender == cooAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /// Access modifier for contract owner only functionality&#13;
  modifier onlyCLevel() {&#13;
    require(&#13;
      msg.sender == ceoAddress ||&#13;
      msg.sender == cooAddress&#13;
    );&#13;
    _;&#13;
  }&#13;
&#13;
  /*** CONSTRUCTOR ***/&#13;
  function OpinionToken() public {&#13;
    ceoAddress = msg.sender;&#13;
    cooAddress = msg.sender;&#13;
  }&#13;
&#13;
  /*** PUBLIC FUNCTIONS ***/&#13;
  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().&#13;
  /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
  ///  clear all approvals.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function approve(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    // Caller must own token.&#13;
    require(_owns(msg.sender, _tokenId));&#13;
&#13;
    opinionIndexToApproved[_tokenId] = _to;&#13;
&#13;
    Approval(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  /// For querying balance of a particular account&#13;
  /// @param _owner The address for balance query&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return ownershipTokenCount[_owner];&#13;
  }&#13;
  /// @dev Creates initial set of opinions. Can only be called once.&#13;
  function createInitialItems() public onlyCOO {&#13;
    require(opinions.length==0);&#13;
    _createOpinionSet();&#13;
  }&#13;
&#13;
  /// @notice Returns all the relevant information about a specific opinion.&#13;
  /// @param _tokenId The tokenId of the opinion of interest.&#13;
  function getOpinion(uint256 _tokenId) public view returns (&#13;
    uint256 sellingPrice,&#13;
    address owner,&#13;
    address sponsor,&#13;
    address antisponsor,&#13;
    uint256 amountsponsored,&#13;
    uint256 amountantisponsored,&#13;
    uint8 acomment,&#13;
    uint256 timestamp,&#13;
    string opinionText&#13;
  ) {&#13;
    Opinion storage opinion = opinions[_tokenId];&#13;
    opinionText = opinion.text;&#13;
    sellingPrice = opinionIndexToPrice[_tokenId];&#13;
    owner = opinionIndexToOwner[_tokenId];&#13;
    acomment=opinion.comment;&#13;
    sponsor=opinion.sponsor;&#13;
    antisponsor=opinion.antisponsor;&#13;
    amountsponsored=opinion.totalsponsored;&#13;
    amountantisponsored=opinion.totalantisponsored;&#13;
    timestamp=opinion.timestamp;&#13;
  }&#13;
&#13;
  function compareStrings (string a, string b) public pure returns (bool){&#13;
       return keccak256(a) == keccak256(b);&#13;
   }&#13;
  &#13;
  function hasDuplicate(string _tocheck) public view returns (bool){&#13;
    return hasPriorDuplicate(_tocheck,opinions.length);&#13;
  }&#13;
  &#13;
  function hasPriorDuplicate(string _tocheck,uint256 index) public view returns (bool){&#13;
    for(uint i = 0; i&lt;index; i++){&#13;
        if(compareStrings(_tocheck,opinions[i].text)){&#13;
            return true;&#13;
        }&#13;
    }&#13;
    return false;&#13;
  }&#13;
  &#13;
  function implementsERC721() public pure returns (bool) {&#13;
    return true;&#13;
  }&#13;
&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function name() public pure returns (string) {&#13;
    return NAME;&#13;
  }&#13;
&#13;
  /// For querying owner of token&#13;
  /// @param _tokenId The tokenID for owner inquiry&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function ownerOf(uint256 _tokenId)&#13;
    public&#13;
    view&#13;
    returns (address owner)&#13;
  {&#13;
    owner = opinionIndexToOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
  }&#13;
&#13;
  function payout(address _to) public onlyCLevel {&#13;
    _payout(_to);&#13;
  }&#13;
&#13;
  function sponsorOpinion(uint256 _tokenId,uint8 comment,bool _likesOpinion) public payable {&#13;
      //ensure comment corresponds to status of token. Tokens with a comment of 0 are unregistered.&#13;
      require(comment!=0);&#13;
      require((_likesOpinion &amp;&amp; comment&lt;100) || (!_likesOpinion &amp;&amp; comment&gt;100));&#13;
      address sponsorAdr = msg.sender;&#13;
      require(_addressNotNull(sponsorAdr));&#13;
      // Making sure sent amount is greater than or equal to the sellingPrice&#13;
      uint256 sellingPrice = opinionIndexToPrice[_tokenId];&#13;
      address currentOwner=opinionIndexToOwner[_tokenId];&#13;
      address newOwner = msg.sender;&#13;
      require(_addressNotNull(newOwner));&#13;
      require(_addressNotNull(currentOwner));&#13;
      require(msg.value &gt;= sellingPrice);&#13;
      uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 90), 100));&#13;
      uint256 ownerTake=uint256(SafeMath.div(SafeMath.mul(sellingPrice, 10), 100));&#13;
      uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);&#13;
          // Update prices&#13;
    if (sellingPrice &lt; firstStepLimit) {&#13;
      // first stage&#13;
      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 90);&#13;
    } else if (sellingPrice &lt; secondStepLimit) {&#13;
      // second stage&#13;
      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 120), 90);&#13;
    } else {&#13;
      // third stage&#13;
      opinionIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 90);&#13;
    }&#13;
    Opinion storage opinion = opinions[_tokenId];&#13;
    require(opinion.claimed);&#13;
    require(sponsorAdr!=opinion.sponsor);&#13;
    require(sponsorAdr!=opinion.antisponsor);&#13;
    require(sponsorAdr!=currentOwner);&#13;
    opinion.comment=comment;&#13;
    if(_likesOpinion){&#13;
        if(_addressNotNull(opinion.sponsor)){&#13;
            opinion.sponsor.transfer(payment);&#13;
            currentOwner.transfer(ownerTake);&#13;
        }&#13;
        else{&#13;
            currentOwner.transfer(sellingPrice);&#13;
        }&#13;
        opinion.sponsor=sponsorAdr;&#13;
        opinion.totalsponsored=SafeMath.add(opinion.totalsponsored,sellingPrice);&#13;
    }&#13;
    else{&#13;
        if(_addressNotNull(opinion.sponsor)){&#13;
            opinion.antisponsor.transfer(payment);&#13;
            ceoAddress.transfer(ownerTake);&#13;
        }&#13;
        else{&#13;
            ceoAddress.transfer(sellingPrice); //eth for initial antisponsor goes to Cryptopinions, because you wouldn't want it to go to the creator of an opinion you don't like&#13;
        }&#13;
        opinion.antisponsor=sponsorAdr;&#13;
        opinion.totalantisponsored=SafeMath.add(opinion.totalantisponsored,sellingPrice);&#13;
    }&#13;
    msg.sender.transfer(purchaseExcess);&#13;
  }&#13;
  &#13;
  //lets you permanently delete someone elses opinion.&#13;
  function deleteThis(uint256 _tokenId) public payable{&#13;
    //Cost is 1 eth or five times the current valuation of the opinion, whichever is higher.&#13;
    uint256 sellingPrice = SafeMath.mul(opinionIndexToPrice[_tokenId],5);&#13;
    if(sellingPrice&lt;1 ether){&#13;
        sellingPrice=1 ether;&#13;
    }&#13;
    require(msg.value &gt;= sellingPrice);&#13;
    ceoAddress.transfer(sellingPrice);&#13;
    Opinion storage opinion = opinions[_tokenId];&#13;
    opinion.deleted=true;&#13;
    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);&#13;
    msg.sender.transfer(purchaseExcess);&#13;
  }&#13;
  &#13;
  // Allows someone to send ether and obtain the (unclaimed only) token&#13;
  function registerOpinion(uint256 _tokenId,string _newOpinion) public payable {&#13;
    &#13;
    //Set opinion to the new opinion&#13;
    _initOpinion(_tokenId,_newOpinion);&#13;
    &#13;
    address oldOwner = opinionIndexToOwner[_tokenId];&#13;
    address newOwner = msg.sender;&#13;
&#13;
    uint256 sellingPrice = opinionIndexToPrice[_tokenId];&#13;
&#13;
    // Making sure token owner is not sending to self&#13;
    require(oldOwner != newOwner);&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure sent amount is greater than or equal to the sellingPrice&#13;
    require(msg.value &gt;= sellingPrice);&#13;
    &#13;
    uint256 payment = sellingPrice;&#13;
    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);&#13;
    opinionIndexToPrice[_tokenId] = sponsorStartingCost; //initial cost to sponsor&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
&#13;
    ceoAddress.transfer(payment);&#13;
&#13;
    TokenSold(_tokenId, sellingPrice, opinionIndexToPrice[_tokenId], oldOwner, newOwner, opinions[_tokenId].text);&#13;
&#13;
    msg.sender.transfer(purchaseExcess);&#13;
  }&#13;
&#13;
  function priceOf(uint256 _tokenId) public view returns (uint256 price) {&#13;
    return opinionIndexToPrice[_tokenId];&#13;
  }&#13;
&#13;
  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.&#13;
  /// @param _newCEO The address of the new CEO&#13;
  function setCEO(address _newCEO) public onlyCEO {&#13;
    _setCEO(_newCEO);&#13;
  }&#13;
   function _setCEO(address _newCEO) private{&#13;
         require(_newCEO != address(0));&#13;
         ceoAddress = _newCEO;&#13;
   }&#13;
  /// @dev Assigns a new address to act as the COO. Only available to the current COO.&#13;
  /// @param _newCOO The address of the new COO&#13;
  function setCOO(address _newCOO) public onlyCEO {&#13;
    require(_newCOO != address(0));&#13;
&#13;
    cooAddress = _newCOO;&#13;
  }&#13;
&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function symbol() public pure returns (string) {&#13;
    return SYMBOL;&#13;
  }&#13;
&#13;
  /// @notice Allow pre-approved user to take ownership of a token&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function takeOwnership(uint256 _tokenId) public {&#13;
    address newOwner = msg.sender;&#13;
    address oldOwner = opinionIndexToOwner[_tokenId];&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure transfer is approved&#13;
    require(_approved(newOwner, _tokenId));&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
  }&#13;
&#13;
  /// @param _owner The owner whose celebrity tokens we are interested in.&#13;
  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly&#13;
  ///  expensive (it walks the entire opinions array looking for opinions belonging to owner),&#13;
  ///  but it also returns a dynamic array, which is only supported for web3 calls, and&#13;
  ///  not contract-to-contract calls.&#13;
  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {&#13;
    uint256 tokenCount = balanceOf(_owner);&#13;
    if (tokenCount == 0) {&#13;
        // Return an empty array&#13;
      return new uint256[](0);&#13;
    } else {&#13;
      uint256[] memory result = new uint256[](tokenCount);&#13;
      uint256 totalOpinions = totalSupply();&#13;
      uint256 resultIndex = 0;&#13;
&#13;
      uint256 opinionId;&#13;
      for (opinionId = 0; opinionId &lt;= totalOpinions; opinionId++) {&#13;
        if (opinionIndexToOwner[opinionId] == _owner) {&#13;
          result[resultIndex] = opinionId;&#13;
          resultIndex++;&#13;
        }&#13;
      }&#13;
      return result;&#13;
    }&#13;
  }&#13;
&#13;
  /// For querying totalSupply of token&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function totalSupply() public view returns (uint256 total) {&#13;
    return opinions.length;&#13;
  }&#13;
&#13;
  /// Owner initates the transfer of the token to another account&#13;
  /// @param _to The address for the token to be transferred to.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function transfer(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    require(_owns(msg.sender, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  /// Third-party initiates transfer of token from address _from to address _to&#13;
  /// @param _from The address for the token to be transferred from.&#13;
  /// @param _to The address for the token to be transferred to.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    require(_owns(_from, _tokenId));&#13;
    require(_approved(_to, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(_from, _to, _tokenId);&#13;
  }&#13;
  &#13;
//Allows purchase of the entire contract. All revenue provisioned to ceoAddress will go to the new address specified.&#13;
//If you contact us following purchase we will transfer domain, website source code etc. to you free of charge, otherwise we will continue to maintain the frontend site for 1 year.&#13;
uint256 contractPrice=300 ether;&#13;
function buyCryptopinions(address _newCEO) payable public{&#13;
    require(msg.value &gt;= contractPrice);&#13;
    ceoAddress.transfer(msg.value);&#13;
    _setCEO(_newCEO);&#13;
    _setPrice(9999999 ether);&#13;
}&#13;
function setPrice(uint256 newprice) public onlyCEO{&#13;
    _setPrice(newprice);&#13;
}&#13;
function _setPrice(uint256 newprice) private{&#13;
    contractPrice=newprice;&#13;
}&#13;
&#13;
  /*** PRIVATE FUNCTIONS ***/&#13;
  /// Safety check on _to address to prevent against an unexpected 0x0 default.&#13;
  function _addressNotNull(address _to) private pure returns (bool) {&#13;
    return _to != address(0);&#13;
  }&#13;
&#13;
  /// For checking approval of transfer for address _to&#13;
  function _approved(address _to, uint256 _tokenId) private view returns (bool) {&#13;
    return opinionIndexToApproved[_tokenId] == _to;&#13;
  }&#13;
  &#13;
  function _createOpinionSet() private {&#13;
      for(uint i = 0; i&lt;numIssued; i++){&#13;
        _createOpinion(DEFAULT_TEXT,ceoAddress,startingPrice);&#13;
      }&#13;
      //startingPrice = SafeMath.mul(startingPrice,stepMultiplier); //increase the price for the next set of tokens&#13;
      //currentIssueRemaining=numIssued;&#13;
      &#13;
  }&#13;
  &#13;
  //for registering an Opinion&#13;
  function _initOpinion(uint256 _tokenId,string _newOpinion) private {&#13;
      Opinion storage opinion = opinions[_tokenId];&#13;
      opinion.timestamp=now;&#13;
      opinion.text=_newOpinion;&#13;
      opinion.comment=1;&#13;
      require(!opinion.claimed);&#13;
        uint256 newprice=SafeMath.mul(stepMultiplier,opinionIndexToPrice[_tokenId]);&#13;
        //max price 1 eth&#13;
        if(newprice &gt; 0.1 ether){ //max price for a new opinion, 1 ether&#13;
            newprice=0.1 ether;&#13;
        }&#13;
        _createOpinion("",ceoAddress,newprice); //make a new opinion for someone else to buy&#13;
        opinion.claimed=true;&#13;
      &#13;
          //currentIssueRemaining=SafeMath.sub(currentIssueRemaining,1);&#13;
          //if this is the last remaining token for sale, issue more&#13;
          //if(currentIssueRemaining == 0){&#13;
          //    _createOpinionSet();&#13;
          //}&#13;
      &#13;
      &#13;
  }&#13;
  &#13;
  /// For creating Opinion&#13;
  function _createOpinion(string _name, address _owner, uint256 _price) private {&#13;
    Opinion memory _opinion = Opinion({&#13;
      text: _name,&#13;
      claimed: false,&#13;
      deleted: false,&#13;
      comment: 0,&#13;
      sponsor: _owner,&#13;
      antisponsor: ceoAddress,&#13;
      totalsponsored:0,&#13;
      totalantisponsored:0,&#13;
      timestamp:now&#13;
    });&#13;
    uint256 newOpinionId = opinions.push(_opinion) - 1;&#13;
&#13;
    // It's probably never going to happen, 4 billion tokens are A LOT, but&#13;
    // let's just be 100% sure we never let this happen.&#13;
    require(newOpinionId == uint256(uint32(newOpinionId)));&#13;
&#13;
    Birth(newOpinionId, _name, _owner);&#13;
&#13;
    opinionIndexToPrice[newOpinionId] = _price;&#13;
&#13;
    // This will assign ownership, and also emit the Transfer event as&#13;
    // per ERC721 draft&#13;
    _transfer(address(0), _owner, newOpinionId);&#13;
  }&#13;
&#13;
  /// Check for token ownership&#13;
  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {&#13;
    return claimant == opinionIndexToOwner[_tokenId];&#13;
  }&#13;
&#13;
  /// For paying out balance on contract&#13;
  function _payout(address _to) private {&#13;
    if (_to == address(0)) {&#13;
      ceoAddress.transfer(this.balance);&#13;
    } else {&#13;
      _to.transfer(this.balance);&#13;
    }&#13;
  }&#13;
&#13;
  /// @dev Assigns ownership of a specific opinion to an address.&#13;
  function _transfer(address _from, address _to, uint256 _tokenId) private {&#13;
    // Since the number of opinions is capped to 2^32 we can't overflow this&#13;
    ownershipTokenCount[_to]++;&#13;
    //transfer ownership&#13;
    opinionIndexToOwner[_tokenId] = _to;&#13;
&#13;
    // When creating new opinions _from is 0x0, but we can't account that address.&#13;
    if (_from != address(0)) {&#13;
      ownershipTokenCount[_from]--;&#13;
      // clear any previously approved ownership exchange&#13;
      delete opinionIndexToApproved[_tokenId];&#13;
    }&#13;
&#13;
    // Emit the transfer event.&#13;
    Transfer(_from, _to, _tokenId);&#13;
  }&#13;
}&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}
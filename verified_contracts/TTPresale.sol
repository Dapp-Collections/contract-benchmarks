/* ==================================================================== */
/* Copyright (c) 2018 The TokenTycoon Project.  All rights reserved.
/* 
/* https://tokentycoon.io
/*  
/* authors <span class="__cf_email__" data-cfemail="deacb7bdb5b6abb0aabbacf0adb6bbb09eb9b3bfb7b2f0bdb1b3">[email protected]</span>   &#13;
/*         <span class="__cf_email__" data-cfemail="6211110711170c060b0c0522050f030b0e4c010d0f">[email protected]</span>            &#13;
/* ==================================================================== */&#13;
&#13;
pragma solidity ^0.4.23;&#13;
&#13;
contract AccessAdmin {&#13;
    bool public isPaused = false;&#13;
    address public addrAdmin;  &#13;
&#13;
    event AdminTransferred(address indexed preAdmin, address indexed newAdmin);&#13;
&#13;
    constructor() public {&#13;
        addrAdmin = msg.sender;&#13;
    }  &#13;
&#13;
&#13;
    modifier onlyAdmin() {&#13;
        require(msg.sender == addrAdmin);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier whenNotPaused() {&#13;
        require(!isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier whenPaused {&#13;
        require(isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    function setAdmin(address _newAdmin) external onlyAdmin {&#13;
        require(_newAdmin != address(0));&#13;
        emit AdminTransferred(addrAdmin, _newAdmin);&#13;
        addrAdmin = _newAdmin;&#13;
    }&#13;
&#13;
    function doPause() external onlyAdmin whenNotPaused {&#13;
        isPaused = true;&#13;
    }&#13;
&#13;
    function doUnpause() external onlyAdmin whenPaused {&#13;
        isPaused = false;&#13;
    }&#13;
}&#13;
&#13;
contract AccessService is AccessAdmin {&#13;
    address public addrService;&#13;
    address public addrFinance;&#13;
&#13;
    modifier onlyService() {&#13;
        require(msg.sender == addrService);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyFinance() {&#13;
        require(msg.sender == addrFinance);&#13;
        _;&#13;
    }&#13;
&#13;
    function setService(address _newService) external {&#13;
        require(msg.sender == addrService || msg.sender == addrAdmin);&#13;
        require(_newService != address(0));&#13;
        addrService = _newService;&#13;
    }&#13;
&#13;
    function setFinance(address _newFinance) external {&#13;
        require(msg.sender == addrFinance || msg.sender == addrAdmin);&#13;
        require(_newFinance != address(0));&#13;
        addrFinance = _newFinance;&#13;
    }&#13;
&#13;
    function withdraw(address _target, uint256 _amount) &#13;
        external &#13;
    {&#13;
        require(msg.sender == addrFinance || msg.sender == addrAdmin);&#13;
        require(_amount &gt; 0);&#13;
        address receiver = _target == address(0) ? addrFinance : _target;&#13;
        uint256 balance = address(this).balance;&#13;
        if (_amount &lt; balance) {&#13;
            receiver.transfer(_amount);&#13;
        } else {&#13;
            receiver.transfer(address(this).balance);&#13;
        }      &#13;
    }&#13;
}&#13;
&#13;
interface WarTokenInterface {&#13;
    function getFashion(uint256 _tokenId) external view returns(uint16[12]);&#13;
    function ownerOf(uint256 _tokenId) external view returns (address);&#13;
    function safeTransferByContract(uint256 _tokenId, address _to) external;&#13;
} &#13;
&#13;
interface WonderTokenInterface {&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
    function safeGiveByContract(uint256 _tokenId, address _to) external;&#13;
    function getProtoIdByTokenId(uint256 _tokenId) external view returns(uint256); &#13;
}&#13;
&#13;
interface ManagerTokenInterface {&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) external;&#13;
    function safeGiveByContract(uint256 _tokenId, address _to) external;&#13;
    function getProtoIdByTokenId(uint256 _tokenId) external view returns(uint256);&#13;
}&#13;
&#13;
interface TalentCardInterface {&#13;
    function safeSendCard(uint256 _amount, address _to) external;&#13;
}&#13;
&#13;
interface ERC20BaseInterface {&#13;
    function balanceOf(address _from) external view returns(uint256);&#13;
    function transfer(address _to, uint256 _value) external;&#13;
    function transferFrom(address _from, address _to, uint256 _value) external returns (bool);&#13;
    function approve(address _spender, uint256 _value) external; &#13;
}&#13;
&#13;
contract TTCInterface is ERC20BaseInterface {&#13;
    function approveAndCall(address _spender, uint256 _value, bytes _extraData) external returns (bool);&#13;
}&#13;
&#13;
contract TTPresale is AccessService {&#13;
    TTCInterface ttcToken;&#13;
    WarTokenInterface warToken;&#13;
    ManagerTokenInterface ttmToken;&#13;
    WonderTokenInterface ttwToken;&#13;
&#13;
    event ManagerSold(&#13;
        address indexed buyer,&#13;
        address indexed buyTo,&#13;
        uint256 mgrId,&#13;
        uint256 nextTokenId&#13;
    );&#13;
&#13;
    event WonderSold(&#13;
        address indexed buyer,&#13;
        address indexed buyTo,&#13;
        uint256 wonderId,&#13;
        uint256 nextTokenId&#13;
    );&#13;
&#13;
    constructor() public {&#13;
        addrAdmin = msg.sender;&#13;
        addrFinance = msg.sender;&#13;
        addrService = msg.sender;&#13;
&#13;
        ttcToken = TTCInterface(0xfB673F08FC82807b4D0E139e794e3b328d63551f);&#13;
        warToken = WarTokenInterface(0xDA9c03dFd4D137F926c3cF6953cb951832Eb08b2);&#13;
    }&#13;
&#13;
    function() external payable {&#13;
&#13;
    }&#13;
&#13;
    uint64 public nextDiscountTTMTokenId1 = 1;      // ManagerId: 1, tokenId:   1~50&#13;
    uint64 public nextDiscountTTMTokenId6 = 361;    // ManagerId: 6, tokenId: 361~390&#13;
    uint64 public nextCommonTTMTokenId2 = 51;       // ManagerId: 2, tokenId:  51~130&#13;
    uint64 public nextCommonTTMTokenId3 = 131;      // ManagerId: 3, tokenId: 131~210&#13;
    uint64 public nextCommonTTMTokenId7 = 391;      // ManagerId: 7, tokenId: 391~450&#13;
    uint64 public nextCommonTTMTokenId8 = 451;      // ManagerId: 8, tokenId: 451~510&#13;
    uint64 public nextDiscountTTWTokenId1 = 1;      // WonderId:  1, tokenId:   1~30&#13;
    uint64 public nextCommonTTWTokenId2 = 31;       // WonderId:  2, tokenId:  31-90&#13;
&#13;
    function setNextDiscountTTMTokenId1(uint64 _val) external onlyAdmin {&#13;
        require(nextDiscountTTMTokenId1 &gt;= 1 &amp;&amp; nextDiscountTTMTokenId1 &lt;= 51);&#13;
        nextDiscountTTMTokenId1 = _val;&#13;
    }&#13;
&#13;
    function setNextDiscountTTMTokenId6(uint64 _val) external onlyAdmin {&#13;
        require(nextDiscountTTMTokenId6 &gt;= 361 &amp;&amp; nextDiscountTTMTokenId6 &lt;= 391);&#13;
        nextDiscountTTMTokenId6 = _val;&#13;
    }&#13;
&#13;
    function setNextCommonTTMTokenId2(uint64 _val) external onlyAdmin {&#13;
        require(nextCommonTTMTokenId2 &gt;= 51 &amp;&amp; nextCommonTTMTokenId2 &lt;= 131);&#13;
        nextCommonTTMTokenId2 = _val;&#13;
    }&#13;
&#13;
    function setNextCommonTTMTokenId3(uint64 _val) external onlyAdmin {&#13;
        require(nextCommonTTMTokenId3 &gt;= 131 &amp;&amp; nextCommonTTMTokenId3 &lt;= 211);&#13;
        nextCommonTTMTokenId3 = _val;&#13;
    }&#13;
&#13;
    function setNextCommonTTMTokenId7(uint64 _val) external onlyAdmin {&#13;
        require(nextCommonTTMTokenId7 &gt;= 391 &amp;&amp; nextCommonTTMTokenId7 &lt;= 451);&#13;
        nextCommonTTMTokenId7 = _val;&#13;
    }&#13;
&#13;
    function setNextCommonTTMTokenId8(uint64 _val) external onlyAdmin {&#13;
        require(nextCommonTTMTokenId8 &gt;= 451 &amp;&amp; nextCommonTTMTokenId8 &lt;= 511);&#13;
        nextCommonTTMTokenId8 = _val;&#13;
    }&#13;
&#13;
    function setNextDiscountTTWTokenId1(uint64 _val) external onlyAdmin {&#13;
        require(nextDiscountTTWTokenId1 &gt;= 1 &amp;&amp; nextDiscountTTWTokenId1 &lt;= 31);&#13;
        nextDiscountTTWTokenId1 = _val;&#13;
    }&#13;
&#13;
    function setNextCommonTTWTokenId2(uint64 _val) external onlyAdmin {&#13;
        require(nextCommonTTWTokenId2 &gt;= 31 &amp;&amp; nextCommonTTWTokenId2 &lt;= 91);&#13;
        nextCommonTTWTokenId2 = _val;&#13;
    }&#13;
&#13;
    uint64 public endDiscountTime = 0;&#13;
&#13;
    function setDiscountTime(uint64 _endTime) external onlyAdmin {&#13;
        require(_endTime &gt; block.timestamp);&#13;
        endDiscountTime = _endTime;&#13;
    }&#13;
&#13;
    function setWARTokenAddress(address _addr) external onlyAdmin {&#13;
        require(_addr != address(0));&#13;
        warToken = WarTokenInterface(_addr);&#13;
    }&#13;
&#13;
    function setTTMTokenAddress(address _addr) external onlyAdmin {&#13;
        require(_addr != address(0));&#13;
        ttmToken = ManagerTokenInterface(_addr);&#13;
    }&#13;
&#13;
    function setTTWTokenAddress(address _addr) external onlyAdmin {&#13;
        require(_addr != address(0));&#13;
        ttwToken = WonderTokenInterface(_addr);&#13;
    }&#13;
&#13;
    function setTTCTokenAddress(address _addr) external onlyAdmin {&#13;
        require(_addr != address(0));&#13;
        ttcToken = TTCInterface(_addr);&#13;
    }&#13;
&#13;
    function _getExtraParam(bytes _extraData) &#13;
        private &#13;
        pure&#13;
        returns(address addr, uint64 f, uint256 protoId) &#13;
    {&#13;
        assembly { addr := mload(add(_extraData, 20)) } &#13;
        f = uint64(_extraData[20]);&#13;
        protoId = uint256(_extraData[21]) * 256 + uint256(_extraData[22]);&#13;
    }&#13;
&#13;
    function receiveApproval(address _sender, uint256 _value, address _token, bytes _extraData) &#13;
        external&#13;
        whenNotPaused &#13;
    {&#13;
        require(msg.sender == address(ttcToken));&#13;
        require(_extraData.length == 23);&#13;
        (address toAddr, uint64 f, uint256 protoId) = _getExtraParam(_extraData);&#13;
        require(ttcToken.transferFrom(_sender, address(this), _value));&#13;
        if (f == 0) {&#13;
            _buyDiscountTTM(_value, protoId, toAddr, _sender);&#13;
        } else if (f == 1) {&#13;
            _buyDiscountTTW(_value, protoId, toAddr, _sender);&#13;
        } else if (f == 2) {&#13;
            _buyCommonTTM(_value, protoId, toAddr, _sender);&#13;
        } else if (f == 3) {&#13;
            _buyCommonTTW(_value, protoId, toAddr, _sender);&#13;
        } else {&#13;
            require(false, "Invalid func id");&#13;
        }&#13;
    }&#13;
&#13;
    function exchangeByPet(uint256 _warTokenId, uint256 _mgrId, address _gameWalletAddr)  &#13;
        external&#13;
        whenNotPaused&#13;
    {&#13;
        require(warToken.ownerOf(_warTokenId) == msg.sender);&#13;
        uint16[12] memory warData = warToken.getFashion(_warTokenId);&#13;
        uint16 protoId = warData[0];&#13;
        if (_mgrId == 2) {&#13;
            require(protoId == 10001 || protoId == 10003);&#13;
            require(nextCommonTTMTokenId2 &lt;= 130);&#13;
            warToken.safeTransferByContract(_warTokenId, address(this));&#13;
            nextCommonTTMTokenId2 += 1;&#13;
            ttmToken.safeGiveByContract(nextCommonTTMTokenId2 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(msg.sender, _gameWalletAddr, 2, nextCommonTTMTokenId2);&#13;
        } else if (_mgrId == 3) {&#13;
            require(protoId == 10001 || protoId == 10003);&#13;
            require(nextCommonTTMTokenId3 &lt;= 210);&#13;
            warToken.safeTransferByContract(_warTokenId, address(this));&#13;
            nextCommonTTMTokenId3 += 1;&#13;
            ttmToken.safeGiveByContract(nextCommonTTMTokenId3 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(msg.sender, _gameWalletAddr, 3, nextCommonTTMTokenId3);&#13;
        } else if (_mgrId == 7) {&#13;
            require(protoId == 10002 || protoId == 10004 || protoId == 10005);&#13;
            require(nextCommonTTMTokenId7 &lt;= 450);&#13;
            warToken.safeTransferByContract(_warTokenId, address(this));&#13;
            nextCommonTTMTokenId7 += 1;&#13;
            ttmToken.safeGiveByContract(nextCommonTTMTokenId7 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(msg.sender, _gameWalletAddr, 7, nextCommonTTMTokenId7);&#13;
        } else if (_mgrId == 8) {&#13;
            require(protoId == 10002 || protoId == 10004 || protoId == 10005);&#13;
            require(nextCommonTTMTokenId8 &lt;= 510);&#13;
            warToken.safeTransferByContract(_warTokenId, address(this));&#13;
            nextCommonTTMTokenId8 += 1;&#13;
            ttmToken.safeGiveByContract(nextCommonTTMTokenId8 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(msg.sender, _gameWalletAddr, 8, nextCommonTTMTokenId8);&#13;
        } else {&#13;
            require(false);&#13;
        }&#13;
    }&#13;
&#13;
    function buyDiscountTTMByETH(uint256 _mgrId, address _gameWalletAddr) &#13;
        external &#13;
        payable&#13;
        whenNotPaused &#13;
    {&#13;
        _buyDiscountTTM(msg.value, _mgrId, _gameWalletAddr, msg.sender);&#13;
    }&#13;
&#13;
    function buyDiscountTTWByETH(uint256 _wonderId, address _gameWalletAddr) &#13;
        external &#13;
        payable&#13;
        whenNotPaused &#13;
    {&#13;
        _buyDiscountTTW(msg.value, _wonderId, _gameWalletAddr, msg.sender);&#13;
    }&#13;
    &#13;
    function buyCommonTTMByETH(uint256 _mgrId, address _gameWalletAddr) &#13;
        external&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        _buyCommonTTM(msg.value, _mgrId, _gameWalletAddr, msg.sender);&#13;
    }&#13;
&#13;
    function buyCommonTTWByETH(uint256 _wonderId, address _gameWalletAddr) &#13;
        external&#13;
        payable&#13;
        whenNotPaused&#13;
    {&#13;
        _buyCommonTTW(msg.value, _wonderId, _gameWalletAddr, msg.sender);&#13;
    }&#13;
&#13;
    function _buyDiscountTTM(uint256 _value, uint256 _mgrId, address _gameWalletAddr, address _buyer) &#13;
        private  &#13;
    {&#13;
        require(_gameWalletAddr != address(0));&#13;
        if (_mgrId == 1) {&#13;
            require(nextDiscountTTMTokenId1 &lt;= 50, "This Manager is sold out");&#13;
            if (block.timestamp &lt;= endDiscountTime) {&#13;
                require(_value == 0.64 ether);&#13;
            } else {&#13;
                require(_value == 0.99 ether);&#13;
            }&#13;
            nextDiscountTTMTokenId1 += 1;&#13;
            ttmToken.safeGiveByContract(nextDiscountTTMTokenId1 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(_buyer, _gameWalletAddr, 1, nextDiscountTTMTokenId1);&#13;
        } else if (_mgrId == 6) {&#13;
            require(nextDiscountTTMTokenId6 &lt;= 390, "This Manager is sold out");&#13;
            if (block.timestamp &lt;= endDiscountTime) {&#13;
                require(_value == 0.97 ether);&#13;
            } else {&#13;
                require(_value == 1.49 ether);&#13;
            }&#13;
            nextDiscountTTMTokenId6 += 1;&#13;
            ttmToken.safeGiveByContract(nextDiscountTTMTokenId6 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(_buyer, _gameWalletAddr, 6, nextDiscountTTMTokenId6);&#13;
        } else {&#13;
            require(false);&#13;
        }&#13;
    }&#13;
&#13;
    function _buyDiscountTTW(uint256 _value, uint256 _wonderId, address _gameWalletAddr, address _buyer) &#13;
        private &#13;
    {&#13;
        require(_gameWalletAddr != address(0));&#13;
        require(_wonderId == 1); &#13;
&#13;
        require(nextDiscountTTWTokenId1 &lt;= 30, "This Manager is sold out");&#13;
        if (block.timestamp &lt;= endDiscountTime) {&#13;
            require(_value == 0.585 ether);&#13;
        } else {&#13;
            require(_value == 0.90 ether);&#13;
        }&#13;
        nextDiscountTTWTokenId1 += 1;&#13;
        ttwToken.safeGiveByContract(nextDiscountTTWTokenId1 - 1, _gameWalletAddr);&#13;
        emit WonderSold(_buyer, _gameWalletAddr, 1, nextDiscountTTWTokenId1);&#13;
    }&#13;
    &#13;
    function _buyCommonTTM(uint256 _value, uint256 _mgrId, address _gameWalletAddr, address _buyer) &#13;
        private&#13;
    {&#13;
        require(_gameWalletAddr != address(0));&#13;
        if (_mgrId == 2) {&#13;
            require(nextCommonTTMTokenId2 &lt;= 130);&#13;
            require(_value == 0.99 ether);&#13;
            nextCommonTTMTokenId2 += 1;&#13;
            ttmToken.safeGiveByContract(nextCommonTTMTokenId2 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(_buyer, _gameWalletAddr, 2, nextCommonTTMTokenId2);&#13;
        } else if (_mgrId == 3) {&#13;
            require(nextCommonTTMTokenId3 &lt;= 210);&#13;
            require(_value == 0.99 ether);&#13;
            nextCommonTTMTokenId3 += 1;&#13;
            ttmToken.safeGiveByContract(nextCommonTTMTokenId3 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(_buyer, _gameWalletAddr, 3, nextCommonTTMTokenId3);&#13;
        } else if (_mgrId == 7) {&#13;
            require(nextCommonTTMTokenId7 &lt;= 450);&#13;
            require(_value == 1.49 ether);&#13;
            nextCommonTTMTokenId7 += 1;&#13;
            ttmToken.safeGiveByContract(nextCommonTTMTokenId7 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(_buyer, _gameWalletAddr, 7, nextCommonTTMTokenId7);&#13;
        } else if (_mgrId == 8) {&#13;
            require(nextCommonTTMTokenId8 &lt;= 510);&#13;
            require(_value == 1.49 ether);&#13;
            nextCommonTTMTokenId8 += 1;&#13;
            ttmToken.safeGiveByContract(nextCommonTTMTokenId8 - 1, _gameWalletAddr);&#13;
            emit ManagerSold(_buyer, _gameWalletAddr, 8, nextCommonTTMTokenId8);&#13;
        } else {&#13;
            require(false);&#13;
        }&#13;
    }&#13;
&#13;
    function _buyCommonTTW(uint256 _value, uint256 _wonderId, address _gameWalletAddr, address _buyer) &#13;
        private&#13;
    {&#13;
        require(_gameWalletAddr != address(0));&#13;
        require(_wonderId == 2); &#13;
        require(nextCommonTTWTokenId2 &lt;= 90);&#13;
        require(_value == 0.50 ether);&#13;
        nextCommonTTWTokenId2 += 1;&#13;
        ttwToken.safeGiveByContract(nextCommonTTWTokenId2 - 1, _gameWalletAddr);&#13;
        emit WonderSold(_buyer, _gameWalletAddr, 2, nextCommonTTWTokenId2);&#13;
    }&#13;
&#13;
    function withdrawERC20(address _erc20, address _target, uint256 _amount)&#13;
        external&#13;
    {&#13;
        require(msg.sender == addrFinance || msg.sender == addrAdmin);&#13;
        require(_amount &gt; 0);&#13;
        address receiver = _target == address(0) ? addrFinance : _target;&#13;
        ERC20BaseInterface erc20Contract = ERC20BaseInterface(_erc20);&#13;
        uint256 balance = erc20Contract.balanceOf(address(this));&#13;
        require(balance &gt; 0);&#13;
        if (_amount &lt; balance) {&#13;
            erc20Contract.transfer(receiver, _amount);&#13;
        } else {&#13;
            erc20Contract.transfer(receiver, balance);&#13;
        }   &#13;
    }&#13;
&#13;
    function getPresaleInfo() &#13;
        external &#13;
        view &#13;
        returns(&#13;
            uint64 ttmCnt1,&#13;
            uint64 ttmCnt2,&#13;
            uint64 ttmCnt3,&#13;
            uint64 ttmCnt6,&#13;
            uint64 ttmCnt7,&#13;
            uint64 ttmCnt8,&#13;
            uint64 ttwCnt1,&#13;
            uint64 ttwCnt2,&#13;
            uint64 discountEnd&#13;
        )&#13;
    {&#13;
        ttmCnt1 = 51 - nextDiscountTTMTokenId1;&#13;
        ttmCnt2 = 131 - nextCommonTTMTokenId2;&#13;
        ttmCnt3 = 211 - nextCommonTTMTokenId3;&#13;
        ttmCnt6 = 391 - nextDiscountTTMTokenId6;&#13;
        ttmCnt7 = 451 - nextCommonTTMTokenId7;&#13;
        ttmCnt8 = 511 - nextCommonTTMTokenId8;&#13;
        ttwCnt1 = 31 - nextDiscountTTWTokenId1;&#13;
        ttwCnt2 = 91 - nextCommonTTWTokenId2;&#13;
        discountEnd = endDiscountTime;&#13;
    }&#13;
}
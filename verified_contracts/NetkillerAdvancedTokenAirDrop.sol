pragma solidity ^0.4.21;

/******************************************/
/*       Netkiller ADVANCED TOKEN         */
/******************************************/
/* Author netkiller <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="89e7ecfde2e0e5e5ecfbc9e4fae7a7eae6e4">[emailÂ protected]</a>&gt;   */&#13;
/* Home http://www.netkiller.cn           */&#13;
/* Version 2018-05-16 - Add Global lock   */&#13;
/******************************************/&#13;
&#13;
contract NetkillerAdvancedTokenAirDrop {&#13;
    address public owner;&#13;
    // Public variables of the token&#13;
    string public name;&#13;
    string public symbol;&#13;
    uint public decimals;&#13;
    // 18 decimals is the strongly suggested default, avoid changing it&#13;
    uint256 public totalSupply;&#13;
    &#13;
    // This creates an array with all balances&#13;
    mapping (address =&gt; uint256) internal balances;&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
    // This generates a public event on the blockchain that will notify clients&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
&#13;
    // This notifies clients about the amount burnt&#13;
    event Burn(address indexed from, uint256 value);&#13;
    event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
    &#13;
    mapping (address =&gt; bool) public frozenAccount;&#13;
&#13;
    /* This generates a public event on the blockchain that will notify clients */&#13;
    event FrozenFunds(address indexed target, bool frozen);&#13;
&#13;
    bool public lock = false;                   // Global lock&#13;
    bool public airdropStatus = false;          // Airdrop Status&#13;
    uint256 public airdropTotalSupply;          // Airdrop Total Supply&#13;
    uint256 public airdropCurrentTotal;    	    // Airdrop Current Total &#13;
    uint256 public airdropAmount;        		// Airdrop amount&#13;
    mapping(address =&gt; bool) public touched;    // Airdrop history account&#13;
    &#13;
    event AirDrop(address indexed target, uint256 value);&#13;
&#13;
    /**&#13;
     * Constrctor function&#13;
     *&#13;
     * Initializes contract with initial supply tokens to the creator of the contract&#13;
     */&#13;
    function NetkillerAdvancedTokenAirDrop(&#13;
        uint256 initialSupply,&#13;
        string tokenName,&#13;
        string tokenSymbol,&#13;
        uint decimalUnits&#13;
    ) public {&#13;
        owner = msg.sender;&#13;
        name = tokenName;                                   // Set the name for display purposes&#13;
        symbol = tokenSymbol; &#13;
        decimals = decimalUnits;&#13;
        totalSupply = initialSupply * 10 ** uint256(decimals);  // Update total supply with the decimal amount&#13;
        balances[msg.sender] = totalSupply;                // Give the creator all initial token&#13;
        airdropAmount = 1 * 10 ** uint256(decimals);&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier isLock {&#13;
        require(!lock);&#13;
        _;&#13;
    }&#13;
    &#13;
    function setLock(bool _lock) onlyOwner public returns (bool status){&#13;
        lock = _lock;&#13;
        return lock;&#13;
    }&#13;
&#13;
    function transferOwnership(address newOwner) onlyOwner public {&#13;
        if (newOwner != address(0)) {&#13;
            owner = newOwner;&#13;
        }&#13;
    }&#13;
    function balanceOf(address _address) public returns (uint256 balance) {&#13;
        return getBalance(_address);&#13;
    }&#13;
    &#13;
    /* Internal transfer, only can be called by this contract */&#13;
    function _transfer(address _from, address _to, uint _value) isLock internal {&#13;
        initialize(_from);&#13;
&#13;
        require (_to != 0x0);                               // Prevent transfer to 0x0 address. Use burn() instead&#13;
        require (balances[_from] &gt;= _value);               // Check if the sender has enough&#13;
        require (balances[_to] + _value &gt; balances[_to]); // Check for overflows&#13;
        require(!frozenAccount[_from]);                     // Check if sender is frozen&#13;
        require(!frozenAccount[_to]);                       // Check if recipient is frozen&#13;
        balances[_from] -= _value;                         // Subtract from the sender&#13;
        balances[_to] += _value;                           // Add the same to the recipient&#13;
        emit Transfer(_from, _to, _value);&#13;
    }&#13;
&#13;
    /**&#13;
     * Transfer tokens&#13;
     *&#13;
     * Send `_value` tokens to `_to` from your account&#13;
     *&#13;
     * @param _to The address of the recipient&#13;
     * @param _value the amount to send&#13;
     */&#13;
    function transfer(address _to, uint256 _value) public {&#13;
        _transfer(msg.sender, _to, _value);&#13;
    }&#13;
&#13;
    /**&#13;
     * Transfer tokens from other address&#13;
     *&#13;
     * Send `_value` tokens to `_to` in behalf of `_from`&#13;
     *&#13;
     * @param _from The address of the sender&#13;
     * @param _to The address of the recipient&#13;
     * @param _value the amount to send&#13;
     */&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {&#13;
        require(_value &lt;= allowed[_from][msg.sender]);     // Check allowance&#13;
        allowed[_from][msg.sender] -= _value;&#13;
        _transfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Set allowance for other address&#13;
     *&#13;
     * Allows `_spender` to spend no more than `_value` tokens in your behalf&#13;
     *&#13;
     * @param _spender The address authorized to spend&#13;
     * @param _value the max amount they can spend&#13;
     */&#13;
    function approve(address _spender, uint256 _value) public returns (bool success) {&#13;
        allowed[msg.sender][_spender] = _value;&#13;
        emit Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
    function allowance(address _owner, address _spender) view public returns (uint256 remaining) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
    /**&#13;
     * Destroy tokens&#13;
     *&#13;
     * Remove `_value` tokens from the system irreversibly&#13;
     *&#13;
     * @param _value the amount of money to burn&#13;
     */&#13;
    function burn(uint256 _value) onlyOwner public returns (bool success) {&#13;
        require(balances[msg.sender] &gt;= _value);   // Check if the sender has enough&#13;
        balances[msg.sender] -= _value;            // Subtract from the sender&#13;
        totalSupply -= _value;                      // Updates totalSupply&#13;
        emit Burn(msg.sender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /**&#13;
     * Destroy tokens from other account&#13;
     *&#13;
     * Remove `_value` tokens from the system irreversibly on behalf of `_from`.&#13;
     *&#13;
     * @param _from the address of the sender&#13;
     * @param _value the amount of money to burn&#13;
     */&#13;
    function burnFrom(address _from, uint256 _value) onlyOwner public returns (bool success) {&#13;
        require(balances[_from] &gt;= _value);                // Check if the targeted balance is enough&#13;
        require(_value &lt;= allowed[_from][msg.sender]);    // Check allowance&#13;
        balances[_from] -= _value;                         // Subtract from the targeted balance&#13;
        allowed[_from][msg.sender] -= _value;             // Subtract from the sender's allowance&#13;
        totalSupply -= _value;                              // Update totalSupply&#13;
        emit Burn(_from, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    /// @notice Create `mintedAmount` tokens and send it to `target`&#13;
    /// @param target Address to receive the tokens&#13;
    /// @param mintedAmount the amount of tokens it will receive&#13;
    function mintToken(address target, uint256 mintedAmount) onlyOwner public {&#13;
        uint256 _amount = mintedAmount * 10 ** uint256(decimals);&#13;
        balances[target] += _amount;&#13;
        totalSupply += _amount;&#13;
        emit Transfer(this, target, _amount);&#13;
    }&#13;
&#13;
    /// @notice `freeze? Prevent | Allow` `target` from sending &amp; receiving tokens&#13;
    /// @param target Address to be frozen&#13;
    /// @param freeze either to freeze it or not&#13;
    function freezeAccount(address target, bool freeze) onlyOwner public {&#13;
        frozenAccount[target] = freeze;&#13;
        emit FrozenFunds(target, freeze);&#13;
    }&#13;
    // mint airdrop &#13;
    function mintAirdropToken(uint256 _mintedAmount) onlyOwner public {&#13;
        uint256 _amount = _mintedAmount * 10 ** uint256(decimals);&#13;
        totalSupply += _amount;&#13;
        airdropTotalSupply += _amount;&#13;
    }&#13;
&#13;
    function setAirdropStatus(bool _status) onlyOwner public returns (bool status){&#13;
        require(airdropTotalSupply &gt; 0);&#13;
        airdropStatus = _status;&#13;
        return airdropStatus;&#13;
    }&#13;
    function setAirdropAmount(uint256 _amount) onlyOwner public{&#13;
        airdropAmount = _amount * 10 ** uint256(decimals);&#13;
    }&#13;
    // internal private functions&#13;
    function initialize(address _address) internal returns (bool success) {&#13;
        if (airdropStatus &amp;&amp; !touched[_address] &amp;&amp; airdropCurrentTotal &lt; airdropTotalSupply) {&#13;
            touched[_address] = true;&#13;
            airdropCurrentTotal += airdropAmount;&#13;
            balances[_address] += airdropAmount;&#13;
            emit AirDrop(_address, airdropAmount);&#13;
        }&#13;
        return true;&#13;
    }&#13;
&#13;
    function getBalance(address _address) internal returns (uint256) {&#13;
        if (airdropStatus &amp;&amp; !touched[_address] &amp;&amp; airdropCurrentTotal &lt; airdropTotalSupply) {&#13;
            balances[_address] += airdropAmount;&#13;
        }&#13;
        return balances[_address];&#13;
    }&#13;
}
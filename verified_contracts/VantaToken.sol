pragma solidity ^0.5.1;

// Made By Tom - <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="91e5fefcd1f5f4e7e5fefee5f9bff2fefc">[emailÂ protected]</a>&#13;
&#13;
library SafeMath&#13;
{&#13;
  	function mul(uint256 a, uint256 b) internal pure returns (uint256)&#13;
    {&#13;
		uint256 c = a * b;&#13;
		assert(a == 0 || c / a == b);&#13;
&#13;
		return c;&#13;
  	}&#13;
&#13;
  	function div(uint256 a, uint256 b) internal pure returns (uint256)&#13;
	{&#13;
		uint256 c = a / b;&#13;
&#13;
		return c;&#13;
  	}&#13;
&#13;
  	function sub(uint256 a, uint256 b) internal pure returns (uint256)&#13;
	{&#13;
		assert(b &lt;= a);&#13;
&#13;
		return a - b;&#13;
  	}&#13;
&#13;
  	function add(uint256 a, uint256 b) internal pure returns (uint256)&#13;
	{&#13;
		uint256 c = a + b;&#13;
		assert(c &gt;= a);&#13;
&#13;
		return c;&#13;
  	}&#13;
}&#13;
&#13;
contract OwnerHelper&#13;
{&#13;
  	address public owner1;&#13;
  	address public owner2;&#13;
&#13;
  	event OwnerTransferPropose(address indexed _from, address indexed _to);&#13;
&#13;
  	modifier onlyOwner&#13;
	{&#13;
		require(msg.sender == owner1 || msg.sender == owner2);&#13;
		_;&#13;
  	}&#13;
&#13;
  	constructor() public&#13;
	{&#13;
		owner1 = msg.sender;&#13;
  	}&#13;
&#13;
  	function transferOwner1(address _to) onlyOwner public&#13;
	{&#13;
        require(_to != owner1);&#13;
        require(_to != owner2);&#13;
        require(_to != address(0x0));&#13;
    	owner1 = _to;&#13;
        &#13;
    	emit OwnerTransferPropose(msg.sender, _to);&#13;
  	}&#13;
&#13;
  	function transferOwner2(address _to) onlyOwner public&#13;
	{&#13;
        require(_to != owner1);&#13;
        require(_to != owner2);&#13;
        require(_to != address(0x0));&#13;
    	owner2 = _to;&#13;
        &#13;
    	emit OwnerTransferPropose(msg.sender, _to);&#13;
  	}&#13;
}&#13;
&#13;
contract ERC20Interface&#13;
{&#13;
    event Transfer( address indexed _from, address indexed _to, uint _value);&#13;
    event Approval( address indexed _owner, address indexed _spender, uint _value);&#13;
    &#13;
    function totalSupply() view public returns (uint _supply);&#13;
    function balanceOf( address _who ) public view returns (uint _value);&#13;
    function transfer( address _to, uint _value) public returns (bool _success);&#13;
    function approve( address _spender, uint _value ) public returns (bool _success);&#13;
    function allowance( address _owner, address _spender ) public view returns (uint _allowance);&#13;
    function transferFrom( address _from, address _to, uint _value) public returns (bool _success);&#13;
}&#13;
&#13;
contract VantaToken is ERC20Interface, OwnerHelper&#13;
{&#13;
    using SafeMath for uint;&#13;
&#13;
    address private creator;&#13;
    &#13;
    string public name;&#13;
    uint public decimals;&#13;
    string public symbol;&#13;
    &#13;
    uint constant private E18 = 1000000000000000000;&#13;
    uint private constant month = 2592000;&#13;
    &#13;
    uint constant public maxTotalSupply     = 56200000000 * E18;&#13;
    uint constant public maxSaleSupply      = 19670000000 * E18;&#13;
    uint constant public maxBdevSupply      =  8430000000 * E18;&#13;
    uint constant public maxMktSupply       =  8430000000 * E18;&#13;
    uint constant public maxRndSupply       =  8430000000 * E18;&#13;
    uint constant public maxTeamSupply      =  5620000000 * E18;&#13;
    uint constant public maxReserveSupply   =  2810000000 * E18;&#13;
    uint constant public maxAdvisorSupply   =  2810000000 * E18;&#13;
    &#13;
    &#13;
    uint public totalTokenSupply;&#13;
    &#13;
    uint public tokenIssuedSale;&#13;
    uint public apIssuedSale;&#13;
    uint public bpIssuedSale;&#13;
    uint public pbIssuedSale;&#13;
    uint public tokenIssuedBdev;&#13;
    uint public tokenIssuedMkt;&#13;
    uint public tokenIssuedRnd;&#13;
    uint public tokenIssuedTeam;&#13;
    uint public tokenIssuedReserve;&#13;
    uint public tokenIssuedAdvisor;&#13;
    &#13;
    uint public burnTokenSupply;&#13;
    &#13;
    &#13;
    mapping (address =&gt; uint) public balances;&#13;
    mapping (address =&gt; mapping ( address =&gt; uint )) public approvals;&#13;
    &#13;
    &#13;
    mapping (address =&gt; uint) public ap1;&#13;
    uint public apLock_1 = 1514818800;&#13;
    &#13;
    mapping (address =&gt; uint) public ap2;&#13;
    uint public apLock_2 = 1514818800;&#13;
    &#13;
    mapping (address =&gt; uint) public ap3;&#13;
    uint public apLock_3 = 1514818800;&#13;
&#13;
&#13;
    mapping (address =&gt; uint) public bp1;&#13;
    uint public bpLock_1 = 1514818800;&#13;
    &#13;
    mapping (address =&gt; uint) public bp2;&#13;
    uint public bpLock_2 = 1514818800;&#13;
&#13;
    &#13;
    bool public tokenLock = true;&#13;
    bool public saleTime = true;&#13;
    &#13;
    event Burn(address indexed _from, uint _value);&#13;
    &#13;
    event SaleIssue(address indexed _to, uint _tokens);&#13;
    event BdevIssue(address indexed _to, uint _tokens);&#13;
    event MktIssue(address indexed _to, uint _tokens);&#13;
    event RndIssue(address indexed _to, uint _tokens);&#13;
    event TeamIssue(address indexed _to, uint _tokens);&#13;
    event ReserveIssue(address indexed _to, uint _tokens);&#13;
    event AdvisorIssue(address indexed _to, uint _tokens);&#13;
    &#13;
    event TokenUnLock(address indexed _to, uint _tokens);&#13;
    &#13;
    constructor() public&#13;
    {&#13;
        name        = "VANTA Token";&#13;
        decimals    = 18;&#13;
        symbol      = "VNT";&#13;
        creator     = msg.sender;&#13;
        &#13;
        totalTokenSupply = 0;&#13;
        &#13;
        tokenIssuedSale     = 0;&#13;
        tokenIssuedBdev     = 0;&#13;
        tokenIssuedMkt      = 0;&#13;
        tokenIssuedRnd      = 0;&#13;
        tokenIssuedTeam     = 0;&#13;
        tokenIssuedReserve  = 0;&#13;
        tokenIssuedAdvisor  = 0;&#13;
        &#13;
        require(maxTotalSupply == maxSaleSupply + maxBdevSupply + maxMktSupply + maxRndSupply + maxTeamSupply + maxReserveSupply + maxAdvisorSupply);&#13;
    }&#13;
    &#13;
    // ERC - 20 Interface -----&#13;
&#13;
    function totalSupply() view public returns (uint) &#13;
    {&#13;
        return totalTokenSupply;&#13;
    }&#13;
    &#13;
    function balanceOf(address _who) view public returns (uint) &#13;
    {&#13;
        uint balance = balances[_who];&#13;
        balance = balance.add(ap1[_who] + ap2[_who] + ap3[_who]);&#13;
        balance = balance.add(bp1[_who] + bp2[_who]);&#13;
        &#13;
        return balance;&#13;
    }&#13;
    &#13;
    function transfer(address _to, uint _value) public returns (bool) &#13;
    {&#13;
        require(isTransferable() == true);&#13;
        require(balances[msg.sender] &gt;= _value);&#13;
        &#13;
        balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
        &#13;
        emit Transfer(msg.sender, _to, _value);&#13;
        &#13;
        return true;&#13;
    }&#13;
    &#13;
    function approve(address _spender, uint _value) public returns (bool)&#13;
    {&#13;
        require(isTransferable() == true);&#13;
        require(balances[msg.sender] &gt;= _value);&#13;
        &#13;
        approvals[msg.sender][_spender] = _value;&#13;
        &#13;
        emit Approval(msg.sender, _spender, _value);&#13;
        &#13;
        return true; &#13;
    }&#13;
    &#13;
    function allowance(address _owner, address _spender) view public returns (uint) &#13;
    {&#13;
        return approvals[_owner][_spender];&#13;
    }&#13;
&#13;
    function transferFrom(address _from, address _to, uint _value) public returns (bool) &#13;
    {&#13;
        require(isTransferable() == true);&#13;
        require(balances[_from] &gt;= _value);&#13;
        require(approvals[_from][msg.sender] &gt;= _value);&#13;
        &#13;
        approvals[_from][msg.sender] = approvals[_from][msg.sender].sub(_value);&#13;
        balances[_from] = balances[_from].sub(_value);&#13;
        balances[_to]  = balances[_to].add(_value);&#13;
        &#13;
        emit Transfer(_from, _to, _value);&#13;
        &#13;
        return true;&#13;
    }&#13;
    &#13;
    // -----&#13;
    &#13;
    // Issue Function -----&#13;
    &#13;
    function apSaleIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxSaleSupply &gt;= tokenIssuedSale.add(tokens));&#13;
        &#13;
        balances[_to]   = balances[_to].add( tokens.mul(385)/1000 );&#13;
        ap1[_to]        = ap1[_to].add( tokens.mul(385)/1000 );&#13;
        ap2[_to]        = ap2[_to].add( tokens.mul(115)/1000 );&#13;
        ap3[_to]        = ap3[_to].add( tokens.mul(115)/1000 );&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedSale = tokenIssuedSale.add(tokens);&#13;
        apIssuedSale = apIssuedSale.add(tokens);&#13;
        &#13;
        emit SaleIssue(_to, tokens);&#13;
    }&#13;
    &#13;
    function bpSaleIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxSaleSupply &gt;= tokenIssuedSale.add(tokens));&#13;
        &#13;
        balances[_to]   = balances[_to].add( tokens.mul(435)/1000 );&#13;
        bp1[_to]        = bp1[_to].add( tokens.mul(435)/1000 );&#13;
        bp2[_to]        = bp2[_to].add( tokens.mul(130)/1000 );&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedSale = tokenIssuedSale.add(tokens);&#13;
        bpIssuedSale = bpIssuedSale.add(tokens);&#13;
        &#13;
        emit SaleIssue(_to, tokens);&#13;
        &#13;
    }&#13;
    &#13;
    function saleIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxSaleSupply &gt;= tokenIssuedSale.add(tokens));&#13;
        &#13;
        balances[_to] = balances[_to].add(tokens);&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedSale = tokenIssuedSale.add(tokens);&#13;
        pbIssuedSale = pbIssuedSale.add(tokens);&#13;
        &#13;
        emit SaleIssue(_to, tokens);&#13;
    }&#13;
    &#13;
    function bdevIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxBdevSupply &gt;= tokenIssuedBdev.add(tokens));&#13;
        &#13;
        balances[_to] = balances[_to].add(tokens);&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedBdev = tokenIssuedBdev.add(tokens);&#13;
        &#13;
        emit BdevIssue(_to, tokens);&#13;
    }&#13;
    &#13;
    function mktIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxMktSupply &gt;= tokenIssuedMkt.add(tokens));&#13;
        &#13;
        balances[_to] = balances[_to].add(tokens);&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedMkt = tokenIssuedMkt.add(tokens);&#13;
        &#13;
        emit MktIssue(_to, tokens);&#13;
    }&#13;
    &#13;
    function rndIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxRndSupply &gt;= tokenIssuedRnd.add(tokens));&#13;
        &#13;
        balances[_to] = balances[_to].add(tokens);&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedRnd = tokenIssuedRnd.add(tokens);&#13;
        &#13;
        emit RndIssue(_to, tokens);&#13;
    }&#13;
    &#13;
    function reserveIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxReserveSupply &gt;= tokenIssuedReserve.add(tokens));&#13;
        &#13;
        balances[_to] = balances[_to].add(tokens);&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedReserve = tokenIssuedReserve.add(tokens);&#13;
        &#13;
        emit ReserveIssue(_to, tokens);&#13;
    }&#13;
    &#13;
    function teamIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxTeamSupply &gt;= tokenIssuedTeam.add(tokens));&#13;
        &#13;
        balances[_to] = balances[_to].add(tokens);&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedTeam = tokenIssuedTeam.add(tokens);&#13;
        &#13;
        emit TeamIssue(_to, tokens);&#13;
    }&#13;
    &#13;
    function advisorIssue(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        require(maxAdvisorSupply &gt;= tokenIssuedAdvisor.add(tokens));&#13;
        &#13;
        balances[_to] = balances[_to].add(tokens);&#13;
        &#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        tokenIssuedAdvisor = tokenIssuedAdvisor.add(tokens);&#13;
        &#13;
        emit AdvisorIssue(_to, tokens);&#13;
    }&#13;
    &#13;
    // -----&#13;
    &#13;
    // Lock Function -----&#13;
    &#13;
    function isTransferable() private view returns (bool)&#13;
    {&#13;
        if(tokenLock == false)&#13;
        {&#13;
            return true;&#13;
        }&#13;
        else if(msg.sender == owner1 || msg.sender == owner2)&#13;
        {&#13;
            return true;&#13;
        }&#13;
        &#13;
        return false;&#13;
    }&#13;
    &#13;
    function setTokenLockUp() onlyOwner public&#13;
    {&#13;
        require(tokenLock == true);&#13;
        &#13;
        tokenLock = false;&#13;
    }&#13;
    &#13;
    function setTokenLock() onlyOwner public&#13;
    {&#13;
        require(tokenLock == false);&#13;
        &#13;
        tokenLock = true;&#13;
    }&#13;
    &#13;
    function apLockUp(address _to) onlyOwner public&#13;
    {&#13;
        require(tokenLock == false);&#13;
        require(saleTime == false);&#13;
        &#13;
        uint time = now;&#13;
        uint unlockTokens = 0;&#13;
&#13;
        if( (time &gt;= apLock_1) &amp;&amp; (ap1[_to] &gt; 0) )&#13;
        {&#13;
            balances[_to] = balances[_to].add(ap1[_to]);&#13;
            unlockTokens = unlockTokens.add(ap1[_to]);&#13;
            ap1[_to] = 0;&#13;
        }&#13;
        &#13;
        if( (time &gt;= apLock_2) &amp;&amp; (ap2[_to] &gt; 0) )&#13;
        {&#13;
            balances[_to] = balances[_to].add(ap2[_to]);&#13;
            unlockTokens = unlockTokens.add(ap2[_to]);&#13;
            ap2[_to] = 0;&#13;
        }&#13;
        &#13;
        if( (time &gt;= apLock_3) &amp;&amp; (ap3[_to] &gt; 0) )&#13;
        {&#13;
            balances[_to] = balances[_to].add(ap3[_to]);&#13;
            unlockTokens = unlockTokens.add(ap3[_to]);&#13;
            ap3[_to] = 0;&#13;
        }&#13;
        &#13;
        emit TokenUnLock(_to, unlockTokens);&#13;
    }&#13;
    &#13;
    function bpLockUp(address _to) onlyOwner public&#13;
    {&#13;
        require(tokenLock == false);&#13;
        require(saleTime == false);&#13;
        &#13;
        uint time = now;&#13;
        uint unlockTokens = 0;&#13;
&#13;
        if( (time &gt;= bpLock_1) &amp;&amp; (bp1[_to] &gt; 0) )&#13;
        {&#13;
            balances[_to] = balances[_to].add(bp1[_to]);&#13;
            unlockTokens = unlockTokens.add(bp1[_to]);&#13;
            bp1[_to] = 0;&#13;
        }&#13;
        &#13;
        if( (time &gt;= bpLock_2) &amp;&amp; (bp2[_to] &gt; 0) )&#13;
        {&#13;
            balances[_to] = balances[_to].add(bp2[_to]);&#13;
            unlockTokens = unlockTokens.add(bp2[_to]);&#13;
            bp2[_to] = 0;&#13;
        }&#13;
        &#13;
        emit TokenUnLock(_to, unlockTokens);&#13;
    }&#13;
    &#13;
    // -----&#13;
    &#13;
    // ETC / Burn Function -----&#13;
    &#13;
    function () payable external&#13;
    {&#13;
        revert();&#13;
    }&#13;
    &#13;
    function endSale() onlyOwner public&#13;
    {&#13;
        require(saleTime == true);&#13;
        &#13;
        saleTime = false;&#13;
    }&#13;
    &#13;
    function withdrawTokens(address _to, uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        &#13;
        balances[_to] = balances[_to].add(tokens);&#13;
        totalTokenSupply = totalTokenSupply.add(tokens);&#13;
        &#13;
        emit Transfer(address(0x0), _to, tokens);&#13;
    }&#13;
    &#13;
    function setApTime(uint _time) onlyOwner public&#13;
    {&#13;
        require(tokenLock == true);&#13;
        require(saleTime == true);&#13;
        apLock_1 = _time;&#13;
        apLock_2 = _time.add(month);&#13;
        apLock_3 = apLock_2.add(month);&#13;
    }&#13;
    &#13;
    function setBpTime(uint _time) onlyOwner public&#13;
    {&#13;
        require(tokenLock == true);&#13;
        require(saleTime == true);&#13;
        bpLock_1 = _time;&#13;
        bpLock_2 = _time.add(month);&#13;
    }&#13;
    &#13;
    function burnToken(uint _value) onlyOwner public&#13;
    {&#13;
        uint tokens = _value * E18;&#13;
        &#13;
        require(balances[msg.sender] &gt;= tokens);&#13;
        &#13;
        balances[msg.sender] = balances[msg.sender].sub(tokens);&#13;
        &#13;
        burnTokenSupply = burnTokenSupply.add(tokens);&#13;
        totalTokenSupply = totalTokenSupply.sub(tokens);&#13;
        &#13;
        emit Burn(msg.sender, tokens);&#13;
        emit Transfer( msg.sender, address(0x0), tokens);&#13;
    }&#13;
    &#13;
    function close() public&#13;
    {&#13;
        require(msg.sender == creator);&#13;
        selfdestruct(msg.sender);&#13;
    }&#13;
    &#13;
    // -----&#13;
}
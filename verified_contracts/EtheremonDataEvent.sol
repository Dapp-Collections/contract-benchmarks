pragma solidity ^0.4.16;

// copyright <span class="__cf_email__" data-cfemail="bfdcd0d1cbdedccbfffacbd7dacddad2d0d191dcd0d2">[emailÂ protected]</span>&#13;
&#13;
contract SafeMath {&#13;
&#13;
    /* function assert(bool assertion) internal { */&#13;
    /*   if (!assertion) { */&#13;
    /*     throw; */&#13;
    /*   } */&#13;
    /* }      // assert no longer needed once solidity is on 0.4.10 */&#13;
&#13;
    function safeAdd(uint256 x, uint256 y) pure internal returns(uint256) {&#13;
      uint256 z = x + y;&#13;
      assert((z &gt;= x) &amp;&amp; (z &gt;= y));&#13;
      return z;&#13;
    }&#13;
&#13;
    function safeSubtract(uint256 x, uint256 y) pure internal returns(uint256) {&#13;
      assert(x &gt;= y);&#13;
      uint256 z = x - y;&#13;
      return z;&#13;
    }&#13;
&#13;
    function safeMult(uint256 x, uint256 y) pure internal returns(uint256) {&#13;
      uint256 z = x * y;&#13;
      assert((x == 0)||(z/x == y));&#13;
      return z;&#13;
    }&#13;
&#13;
}&#13;
&#13;
contract BasicAccessControl {&#13;
    address public owner;&#13;
    // address[] public moderators;&#13;
    uint16 public totalModerators = 0;&#13;
    mapping (address =&gt; bool) public moderators;&#13;
    bool public isMaintaining = false;&#13;
&#13;
    function BasicAccessControl() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    modifier onlyOwner {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyModerators() {&#13;
        require(moderators[msg.sender] == true);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier isActive {&#13;
        require(!isMaintaining);&#13;
        _;&#13;
    }&#13;
&#13;
    function ChangeOwner(address _newOwner) onlyOwner public {&#13;
        if (_newOwner != address(0)) {&#13;
            owner = _newOwner;&#13;
        }&#13;
    }&#13;
&#13;
&#13;
    function AddModerator(address _newModerator) onlyOwner public {&#13;
        if (moderators[_newModerator] == false) {&#13;
            moderators[_newModerator] = true;&#13;
            totalModerators += 1;&#13;
        }&#13;
    }&#13;
    &#13;
    function RemoveModerator(address _oldModerator) onlyOwner public {&#13;
        if (moderators[_oldModerator] == true) {&#13;
            moderators[_oldModerator] = false;&#13;
            totalModerators -= 1;&#13;
        }&#13;
    }&#13;
&#13;
    function UpdateMaintaining(bool _isMaintaining) onlyOwner public {&#13;
        isMaintaining = _isMaintaining;&#13;
    }&#13;
}&#13;
&#13;
contract EtheremonEnum {&#13;
&#13;
    enum ResultCode {&#13;
        SUCCESS,&#13;
        ERROR_CLASS_NOT_FOUND,&#13;
        ERROR_LOW_BALANCE,&#13;
        ERROR_SEND_FAIL,&#13;
        ERROR_NOT_TRAINER,&#13;
        ERROR_NOT_ENOUGH_MONEY,&#13;
        ERROR_INVALID_AMOUNT,&#13;
        ERROR_OBJ_NOT_FOUND,&#13;
        ERROR_OBJ_INVALID_OWNERSHIP&#13;
    }&#13;
    &#13;
    enum ArrayType {&#13;
        CLASS_TYPE,&#13;
        STAT_STEP,&#13;
        STAT_START,&#13;
        STAT_BASE,&#13;
        OBJ_SKILL&#13;
    }&#13;
}&#13;
&#13;
contract EtheremonDataBase is EtheremonEnum, BasicAccessControl, SafeMath {&#13;
    &#13;
    uint64 public totalMonster;&#13;
    uint32 public totalClass;&#13;
    &#13;
    // write&#13;
    function addElementToArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);&#13;
    function removeElementOfArrayType(ArrayType _type, uint64 _id, uint8 _value) onlyModerators public returns(uint);&#13;
    function setMonsterClass(uint32 _classId, uint256 _price, uint256 _returnPrice, bool _catchable) onlyModerators public returns(uint32);&#13;
    function addMonsterObj(uint32 _classId, address _trainer, string _name) onlyModerators public returns(uint64);&#13;
    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators public;&#13;
    function increaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;&#13;
    function decreaseMonsterExp(uint64 _objId, uint32 amount) onlyModerators public;&#13;
    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;&#13;
    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public;&#13;
    function clearMonsterReturnBalance(uint64 _monsterId) onlyModerators public returns(uint256 amount);&#13;
    function collectAllReturnBalance(address _trainer) onlyModerators public returns(uint256 amount);&#13;
    function transferMonster(address _from, address _to, uint64 _monsterId) onlyModerators public returns(ResultCode);&#13;
    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);&#13;
    function deductExtraBalance(address _trainer, uint256 _amount) onlyModerators public returns(uint256);&#13;
    function setExtraBalance(address _trainer, uint256 _amount) onlyModerators public;&#13;
    &#13;
    // read&#13;
    function getSizeArrayType(ArrayType _type, uint64 _id) constant public returns(uint);&#13;
    function getElementInArrayType(ArrayType _type, uint64 _id, uint _index) constant public returns(uint8);&#13;
    function getMonsterClass(uint32 _classId) constant public returns(uint32 classId, uint256 price, uint256 returnPrice, uint32 total, bool catchable);&#13;
    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime);&#13;
    function getMonsterName(uint64 _objId) constant public returns(string name);&#13;
    function getExtraBalance(address _trainer) constant public returns(uint256);&#13;
    function getMonsterDexSize(address _trainer) constant public returns(uint);&#13;
    function getMonsterObjId(address _trainer, uint index) constant public returns(uint64);&#13;
    function getExpectedBalance(address _trainer) constant public returns(uint256);&#13;
    function getMonsterReturn(uint64 _objId) constant public returns(uint256 current, uint256 total);&#13;
}&#13;
&#13;
contract EtheremonDataEvent is BasicAccessControl {&#13;
    &#13;
    // data contract&#13;
    address public dataContract;&#13;
    &#13;
    // event&#13;
    event Transfer(address indexed _from, address indexed _to, uint256 _tokenId);&#13;
    &#13;
     // constructor&#13;
    function EtheremonDataEvent(address _dataContract) public {&#13;
        dataContract = _dataContract;&#13;
    }&#13;
    &#13;
    function setContract(address _dataContract) onlyModerators public {&#13;
        dataContract = _dataContract;&#13;
    }&#13;
    &#13;
    // write action&#13;
    &#13;
    function addExtraBalance(address _trainer, uint256 _amount) onlyModerators external returns(uint256) {&#13;
        EtheremonDataBase data = EtheremonDataBase(dataContract);&#13;
        return data.addExtraBalance(_trainer, _amount);&#13;
    }&#13;
    &#13;
    function setMonsterObj(uint64 _objId, string _name, uint32 _exp, uint32 _createIndex, uint32 _lastClaimIndex) onlyModerators external {&#13;
        EtheremonDataBase data = EtheremonDataBase(dataContract);&#13;
        data.setMonsterObj(_objId, _name, _exp, _createIndex, _lastClaimIndex);&#13;
    }&#13;
    &#13;
    function removeMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public {&#13;
        EtheremonDataBase data = EtheremonDataBase(dataContract);&#13;
        data.removeMonsterIdMapping(_trainer, _monsterId);&#13;
        Transfer(_trainer, address(0), _monsterId);&#13;
    }&#13;
    &#13;
    function addMonsterIdMapping(address _trainer, uint64 _monsterId) onlyModerators public {&#13;
        EtheremonDataBase data = EtheremonDataBase(dataContract);&#13;
        data.addMonsterIdMapping(_trainer, _monsterId);&#13;
        Transfer(address(0), _trainer, _monsterId);&#13;
    }&#13;
    &#13;
    &#13;
    // read action&#13;
    function getMonsterObj(uint64 _objId) constant public returns(uint64 objId, uint32 classId, address trainer, uint32 exp, uint32 createIndex, uint32 lastClaimIndex, uint createTime) {&#13;
        EtheremonDataBase data = EtheremonDataBase(dataContract);&#13;
        return data.getMonsterObj(_objId);&#13;
    }&#13;
}
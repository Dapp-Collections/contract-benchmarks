pragma solidity ^0.4.24;
// produced by the Solididy File Flattener (c) David Appleton 2018
// contact : <span class="__cf_email__" data-cfemail="442025322104252f2b2926256a272b29">[emailÂ protected]</span>&#13;
// released under Apache 2.0 licence&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  event OwnershipRenounced(address indexed previousOwner);&#13;
  event OwnershipTransferred(&#13;
    address indexed previousOwner,&#13;
    address indexed newOwner&#13;
  );&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  constructor() public {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   * @notice Renouncing to ownership will leave the contract without an owner.&#13;
   * It will not be possible to call the functions with the `onlyOwner`&#13;
   * modifier anymore.&#13;
   */&#13;
  function renounceOwnership() public onlyOwner {&#13;
    emit OwnershipRenounced(owner);&#13;
    owner = address(0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address _newOwner) public onlyOwner {&#13;
    _transferOwnership(_newOwner);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
  function _transferOwnership(address _newOwner) internal {&#13;
    require(_newOwner != address(0));&#13;
    emit OwnershipTransferred(owner, _newOwner);&#13;
    owner = _newOwner;&#13;
  }&#13;
}&#13;
&#13;
contract ERC20Basic {&#13;
  function totalSupply() public view returns (uint256);&#13;
  function balanceOf(address who) public view returns (uint256);&#13;
  function transfer(address to, uint256 value) public returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
    // benefit is lost if 'b' is also tested.&#13;
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
&#13;
    c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    // uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return a / b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
    c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
&#13;
&#13;
library SafeERC20 {&#13;
  function safeTransfer(ERC20Basic token, address to, uint256 value) internal {&#13;
    require(token.transfer(to, value));&#13;
  }&#13;
&#13;
  function safeTransferFrom(&#13;
    ERC20 token,&#13;
    address from,&#13;
    address to,&#13;
    uint256 value&#13;
  )&#13;
    internal&#13;
  {&#13;
    require(token.transferFrom(from, to, value));&#13;
  }&#13;
&#13;
  function safeApprove(ERC20 token, address spender, uint256 value) internal {&#13;
    require(token.approve(spender, value));&#13;
  }&#13;
}&#13;
&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender)&#13;
    public view returns (uint256);&#13;
&#13;
  function transferFrom(address from, address to, uint256 value)&#13;
    public returns (bool);&#13;
&#13;
  function approve(address spender, uint256 value) public returns (bool);&#13;
  event Approval(&#13;
    address indexed owner,&#13;
    address indexed spender,&#13;
    uint256 value&#13;
  );&#13;
}&#13;
&#13;
contract BasicToken is ERC20Basic {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  uint256 totalSupply_;&#13;
&#13;
  /**&#13;
  * @dev Total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return totalSupply_;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) public returns (bool) {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[msg.sender]);&#13;
&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    emit Transfer(msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) public view returns (uint256) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract BurnableToken is BasicToken {&#13;
&#13;
  event Burn(address indexed burner, uint256 value);&#13;
&#13;
  /**&#13;
   * @dev Burns a specific amount of tokens.&#13;
   * @param _value The amount of token to be burned.&#13;
   */&#13;
  function burn(uint256 _value) public {&#13;
    _burn(msg.sender, _value);&#13;
  }&#13;
&#13;
  function _burn(address _who, uint256 _value) internal {&#13;
    require(_value &lt;= balances[_who]);&#13;
    // no need to require value &lt;= totalSupply, since that would imply the&#13;
    // sender's balance is greater than the totalSupply, which *should* be an assertion failure&#13;
&#13;
    balances[_who] = balances[_who].sub(_value);&#13;
    totalSupply_ = totalSupply_.sub(_value);&#13;
    emit Burn(_who, _value);&#13;
    emit Transfer(_who, address(0), _value);&#13;
  }&#13;
}&#13;
&#13;
contract StandardToken is ERC20, BasicToken {&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _value&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(_to != address(0));&#13;
    require(_value &lt;= balances[_from]);&#13;
    require(_value &lt;= allowed[_from][msg.sender]);&#13;
&#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
    emit Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address _spender, uint256 _value) public returns (bool) {&#13;
    allowed[msg.sender][_spender] = _value;&#13;
    emit Approval(msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(&#13;
    address _owner,&#13;
    address _spender&#13;
   )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    return allowed[_owner][_spender];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseApproval(&#13;
    address _spender,&#13;
    uint256 _addedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    allowed[msg.sender][_spender] = (&#13;
      allowed[msg.sender][_spender].add(_addedValue));&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseApproval(&#13;
    address _spender,&#13;
    uint256 _subtractedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    uint256 oldValue = allowed[msg.sender][_spender];&#13;
    if (_subtractedValue &gt; oldValue) {&#13;
      allowed[msg.sender][_spender] = 0;&#13;
    } else {&#13;
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);&#13;
    }&#13;
    emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract StrayToken is StandardToken, BurnableToken, Ownable {&#13;
	using SafeERC20 for ERC20;&#13;
	&#13;
	uint256 public INITIAL_SUPPLY = 1000000000;&#13;
	&#13;
	string public name = "Stray";&#13;
	string public symbol = "ST";&#13;
	uint8 public decimals = 18;&#13;
&#13;
	address public companyWallet;&#13;
	address public privateWallet;&#13;
	address public fund;&#13;
	&#13;
	/**&#13;
	 * @param _companyWallet The company wallet which reserves 15% of the token.&#13;
	 * @param _privateWallet Private wallet which reservers 25% of the token.&#13;
	 */&#13;
	constructor(address _companyWallet, address _privateWallet) public {&#13;
		require(_companyWallet != address(0));&#13;
		require(_privateWallet != address(0));&#13;
		&#13;
		totalSupply_ = INITIAL_SUPPLY * (10 ** uint256(decimals));&#13;
		companyWallet = _companyWallet;&#13;
		privateWallet = _privateWallet;&#13;
		&#13;
		// 15% of tokens for company reserved.&#13;
		_preSale(companyWallet, totalSupply_.mul(15).div(100));&#13;
		&#13;
		// 25% of tokens for private funding.&#13;
		_preSale(privateWallet, totalSupply_.mul(25).div(100));&#13;
		&#13;
		// 60% of tokens for crowdsale.&#13;
		uint256 sold = balances[companyWallet].add(balances[privateWallet]);&#13;
	    balances[msg.sender] = balances[msg.sender].add(totalSupply_.sub(sold));&#13;
	    emit Transfer(address(0), msg.sender, balances[msg.sender]);&#13;
	}&#13;
	&#13;
	/**&#13;
	 * @param _fund The DAICO fund contract address.&#13;
	 */&#13;
	function setFundContract(address _fund) onlyOwner public {&#13;
	    require(_fund != address(0));&#13;
	    //require(_fund != owner);&#13;
	    //require(_fund != msg.sender);&#13;
	    require(_fund != address(this));&#13;
	    &#13;
	    fund = _fund;&#13;
	}&#13;
	&#13;
	/**&#13;
	 * @dev The DAICO fund contract calls this function to burn the user's token&#13;
	 * to avoid over refund.&#13;
	 * @param _from The address which just took its refund.&#13;
	 */&#13;
	function burnAll(address _from) public {&#13;
	    require(fund == msg.sender);&#13;
	    require(0 != balances[_from]);&#13;
	    &#13;
	    _burn(_from, balances[_from]);&#13;
	}&#13;
	&#13;
	/**&#13;
	 * @param _to The address which will get the token.&#13;
	 * @param _value The token amount.&#13;
	 */&#13;
	function _preSale(address _to, uint256 _value) internal onlyOwner {&#13;
		balances[_to] = _value;&#13;
		emit Transfer(address(0), _to, _value);&#13;
	}&#13;
	&#13;
}&#13;
&#13;
contract Crowdsale {&#13;
  using SafeMath for uint256;&#13;
  using SafeERC20 for ERC20;&#13;
&#13;
  // The token being sold&#13;
  ERC20 public token;&#13;
&#13;
  // Address where funds are collected&#13;
  address public wallet;&#13;
&#13;
  // How many token units a buyer gets per wei.&#13;
  // The rate is the conversion between wei and the smallest and indivisible token unit.&#13;
  // So, if you are using a rate of 1 with a DetailedERC20 token with 3 decimals called TOK&#13;
  // 1 wei will give you 1 unit, or 0.001 TOK.&#13;
  uint256 public rate;&#13;
&#13;
  // Amount of wei raised&#13;
  uint256 public weiRaised;&#13;
&#13;
  /**&#13;
   * Event for token purchase logging&#13;
   * @param purchaser who paid for the tokens&#13;
   * @param beneficiary who got the tokens&#13;
   * @param value weis paid for purchase&#13;
   * @param amount amount of tokens purchased&#13;
   */&#13;
  event TokenPurchase(&#13;
    address indexed purchaser,&#13;
    address indexed beneficiary,&#13;
    uint256 value,&#13;
    uint256 amount&#13;
  );&#13;
&#13;
  /**&#13;
   * @param _rate Number of token units a buyer gets per wei&#13;
   * @param _wallet Address where collected funds will be forwarded to&#13;
   * @param _token Address of the token being sold&#13;
   */&#13;
  constructor(uint256 _rate, address _wallet, ERC20 _token) public {&#13;
    require(_rate &gt; 0);&#13;
    require(_wallet != address(0));&#13;
    require(_token != address(0));&#13;
&#13;
    rate = _rate;&#13;
    wallet = _wallet;&#13;
    token = _token;&#13;
  }&#13;
&#13;
  // -----------------------------------------&#13;
  // Crowdsale external interface&#13;
  // -----------------------------------------&#13;
&#13;
  /**&#13;
   * @dev fallback function ***DO NOT OVERRIDE***&#13;
   */&#13;
  function () external payable {&#13;
    buyTokens(msg.sender);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev low level token purchase ***DO NOT OVERRIDE***&#13;
   * @param _beneficiary Address performing the token purchase&#13;
   */&#13;
  function buyTokens(address _beneficiary) public payable {&#13;
&#13;
    uint256 weiAmount = msg.value;&#13;
    _preValidatePurchase(_beneficiary, weiAmount);&#13;
&#13;
    // calculate token amount to be created&#13;
    uint256 tokens = _getTokenAmount(weiAmount);&#13;
&#13;
    // update state&#13;
    weiRaised = weiRaised.add(weiAmount);&#13;
&#13;
    _processPurchase(_beneficiary, tokens);&#13;
    emit TokenPurchase(&#13;
      msg.sender,&#13;
      _beneficiary,&#13;
      weiAmount,&#13;
      tokens&#13;
    );&#13;
&#13;
    _updatePurchasingState(_beneficiary, weiAmount);&#13;
&#13;
    _forwardFunds();&#13;
    _postValidatePurchase(_beneficiary, weiAmount);&#13;
  }&#13;
&#13;
  // -----------------------------------------&#13;
  // Internal interface (extensible)&#13;
  // -----------------------------------------&#13;
&#13;
  /**&#13;
   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use super to concatenate validations.&#13;
   * @param _beneficiary Address performing the token purchase&#13;
   * @param _weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _preValidatePurchase(&#13;
    address _beneficiary,&#13;
    uint256 _weiAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    require(_beneficiary != address(0));&#13;
    require(_weiAmount != 0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.&#13;
   * @param _beneficiary Address performing the token purchase&#13;
   * @param _weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _postValidatePurchase(&#13;
    address _beneficiary,&#13;
    uint256 _weiAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    // optional override&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.&#13;
   * @param _beneficiary Address performing the token purchase&#13;
   * @param _tokenAmount Number of tokens to be emitted&#13;
   */&#13;
  function _deliverTokens(&#13;
    address _beneficiary,&#13;
    uint256 _tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    token.safeTransfer(_beneficiary, _tokenAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.&#13;
   * @param _beneficiary Address receiving the tokens&#13;
   * @param _tokenAmount Number of tokens to be purchased&#13;
   */&#13;
  function _processPurchase(&#13;
    address _beneficiary,&#13;
    uint256 _tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    _deliverTokens(_beneficiary, _tokenAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)&#13;
   * @param _beneficiary Address receiving the tokens&#13;
   * @param _weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _updatePurchasingState(&#13;
    address _beneficiary,&#13;
    uint256 _weiAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    // optional override&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Override to extend the way in which ether is converted to tokens.&#13;
   * @param _weiAmount Value in wei to be converted into tokens&#13;
   * @return Number of tokens that can be purchased with the specified _weiAmount&#13;
   */&#13;
  function _getTokenAmount(uint256 _weiAmount)&#13;
    internal view returns (uint256)&#13;
  {&#13;
    return _weiAmount.mul(rate);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Determines how ETH is stored/forwarded on purchases.&#13;
   */&#13;
  function _forwardFunds() internal {&#13;
    wallet.transfer(msg.value);&#13;
  }&#13;
}&#13;
contract RefundVault is Ownable {&#13;
  using SafeMath for uint256;&#13;
&#13;
  enum State { Active, Refunding, Closed }&#13;
&#13;
  mapping (address =&gt; uint256) public deposited;&#13;
  address public wallet;&#13;
  State public state;&#13;
&#13;
  event Closed();&#13;
  event RefundsEnabled();&#13;
  event Refunded(address indexed beneficiary, uint256 weiAmount);&#13;
&#13;
  /**&#13;
   * @param _wallet Vault address&#13;
   */&#13;
  constructor(address _wallet) public {&#13;
    require(_wallet != address(0));&#13;
    wallet = _wallet;&#13;
    state = State.Active;&#13;
  }&#13;
&#13;
  /**&#13;
   * @param investor Investor address&#13;
   */&#13;
  function deposit(address investor) onlyOwner public payable {&#13;
    require(state == State.Active);&#13;
    deposited[investor] = deposited[investor].add(msg.value);&#13;
  }&#13;
&#13;
  function close() onlyOwner public {&#13;
    require(state == State.Active);&#13;
    state = State.Closed;&#13;
    emit Closed();&#13;
    wallet.transfer(address(this).balance);&#13;
  }&#13;
&#13;
  function enableRefunds() onlyOwner public {&#13;
    require(state == State.Active);&#13;
    state = State.Refunding;&#13;
    emit RefundsEnabled();&#13;
  }&#13;
&#13;
  /**&#13;
   * @param investor Investor address&#13;
   */&#13;
  function refund(address investor) public {&#13;
    require(state == State.Refunding);&#13;
    uint256 depositedValue = deposited[investor];&#13;
    deposited[investor] = 0;&#13;
    investor.transfer(depositedValue);&#13;
    emit Refunded(investor, depositedValue);&#13;
  }&#13;
}&#13;
&#13;
contract TimedCrowdsale is Crowdsale {&#13;
  using SafeMath for uint256;&#13;
&#13;
  uint256 public openingTime;&#13;
  uint256 public closingTime;&#13;
&#13;
  /**&#13;
   * @dev Reverts if not in crowdsale time range.&#13;
   */&#13;
  modifier onlyWhileOpen {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    require(block.timestamp &gt;= openingTime &amp;&amp; block.timestamp &lt;= closingTime);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Constructor, takes crowdsale opening and closing times.&#13;
   * @param _openingTime Crowdsale opening time&#13;
   * @param _closingTime Crowdsale closing time&#13;
   */&#13;
  constructor(uint256 _openingTime, uint256 _closingTime) public {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    require(_openingTime &gt;= block.timestamp);&#13;
    require(_closingTime &gt;= _openingTime);&#13;
&#13;
    openingTime = _openingTime;&#13;
    closingTime = _closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether the period in which the crowdsale is open has already elapsed.&#13;
   * @return Whether crowdsale period has elapsed&#13;
   */&#13;
  function hasClosed() public view returns (bool) {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    return block.timestamp &gt; closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Extend parent behavior requiring to be within contributing period&#13;
   * @param _beneficiary Token purchaser&#13;
   * @param _weiAmount Amount of wei contributed&#13;
   */&#13;
  function _preValidatePurchase(&#13;
    address _beneficiary,&#13;
    uint256 _weiAmount&#13;
  )&#13;
    internal&#13;
    onlyWhileOpen&#13;
  {&#13;
    super._preValidatePurchase(_beneficiary, _weiAmount);&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract FinalizableCrowdsale is TimedCrowdsale, Ownable {&#13;
  using SafeMath for uint256;&#13;
&#13;
  bool public isFinalized = false;&#13;
&#13;
  event Finalized();&#13;
&#13;
  /**&#13;
   * @dev Must be called after crowdsale ends, to do some extra finalization&#13;
   * work. Calls the contract's finalization function.&#13;
   */&#13;
  function finalize() onlyOwner public {&#13;
    require(!isFinalized);&#13;
    require(hasClosed());&#13;
&#13;
    finalization();&#13;
    emit Finalized();&#13;
&#13;
    isFinalized = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Can be overridden to add finalization logic. The overriding function&#13;
   * should call super.finalization() to ensure the chain of finalization is&#13;
   * executed entirely.&#13;
   */&#13;
  function finalization() internal {&#13;
  }&#13;
&#13;
}&#13;
&#13;
contract StrayCrowdsale is FinalizableCrowdsale {&#13;
    using SafeMath for uint256;&#13;
    &#13;
    // Soft cap and hard cap in distributed token.&#13;
    uint256 public softCapInToken;&#13;
    uint256 public hardCapInToken;&#13;
    uint256 public soldToken = 0;&#13;
    &#13;
    // Bouns stage time.&#13;
    uint256 public bonusClosingTime0;&#13;
    uint256 public bonusClosingTime1;&#13;
    &#13;
    // Bouns rate.&#13;
    uint256 public bonusRateInPercent0 = 33;&#13;
    uint256 public bonusRateInPercent1 = 20;&#13;
    &#13;
    // Mininum contribute: 100 USD.&#13;
    uint256 public mininumContributeUSD = 100;&#13;
    &#13;
    // The floating exchange rate from external API.&#13;
    uint256 public decimalsETHToUSD;&#13;
    uint256 public exchangeRateETHToUSD;&#13;
   &#13;
   // The mininum purchase token quantity.&#13;
    uint256 public mininumPurchaseTokenQuantity;&#13;
    &#13;
    // The calculated mininum contribute Wei.&#13;
    uint256 public mininumContributeWei;&#13;
    &#13;
    // The exchange rate from USD to Token.&#13;
    // 1 USD =&gt; 100 Token (0.01 USD =&gt; 1 Token).&#13;
    uint256 public exchangeRateUSDToToken = 100;&#13;
    &#13;
    // Stray token contract.&#13;
    StrayToken public strayToken;&#13;
    &#13;
    // Refund vault used to hold funds while crowdsale is running&#13;
    RefundVault public vault;&#13;
    &#13;
    // Event &#13;
    event RateUpdated(uint256 rate, uint256 mininumContributeWei);&#13;
    &#13;
    /**&#13;
     * @param _softCapInUSD Minimal funds to be collected.&#13;
     * @param _hardCapInUSD Maximal funds to be collected.&#13;
     * @param _fund The Stray DAICO fund contract address.&#13;
     * @param _token Stray ERC20 contract.&#13;
     * @param _openingTime Crowdsale opening time.&#13;
     * @param _closingTime Crowdsale closing time.&#13;
     * @param _bonusClosingTime0 Bonus stage0 closing time.&#13;
     * @param _bonusClosingTime1 Bonus stage1 closing time.&#13;
     */&#13;
    constructor(uint256 _softCapInUSD&#13;
        , uint256 _hardCapInUSD&#13;
        , address _fund&#13;
        , ERC20 _token&#13;
        , uint256 _openingTime&#13;
        , uint256 _closingTime&#13;
        , uint256 _bonusClosingTime0&#13;
        , uint256 _bonusClosingTime1&#13;
        ) &#13;
        Crowdsale(1, _fund, _token)&#13;
        TimedCrowdsale(_openingTime, _closingTime)&#13;
        public &#13;
    {&#13;
        // Validate ico stage time.&#13;
        require(_bonusClosingTime0 &gt;= _openingTime);&#13;
        require(_bonusClosingTime1 &gt;= _bonusClosingTime0);&#13;
        require(_closingTime &gt;= _bonusClosingTime1);&#13;
        &#13;
        bonusClosingTime0 = _bonusClosingTime0;&#13;
        bonusClosingTime1 = _bonusClosingTime1;&#13;
        &#13;
        // Create the token.&#13;
        strayToken = StrayToken(token);&#13;
        &#13;
        // Set soft cap and hard cap.&#13;
        require(_softCapInUSD &gt; 0 &amp;&amp; _softCapInUSD &lt;= _hardCapInUSD);&#13;
        &#13;
        softCapInToken = _softCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals()));&#13;
        hardCapInToken = _hardCapInUSD * exchangeRateUSDToToken * (10 ** uint256(strayToken.decimals()));&#13;
        &#13;
        require(strayToken.balanceOf(owner) &gt;= hardCapInToken);&#13;
        &#13;
        // Create the refund vault.&#13;
        vault = new RefundVault(_fund);&#13;
        &#13;
        // Calculate mininum purchase token.&#13;
        mininumPurchaseTokenQuantity = exchangeRateUSDToToken * mininumContributeUSD &#13;
            * (10 ** (uint256(strayToken.decimals())));&#13;
        &#13;
        // Set default exchange rate ETH =&gt; USD: 400.00&#13;
        setExchangeRateETHToUSD(40000, 2);&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Set the exchange rate from ETH to USD.&#13;
     * @param _rate The exchange rate.&#13;
     * @param _decimals The decimals of input rate.&#13;
     */&#13;
    function setExchangeRateETHToUSD(uint256 _rate, uint256 _decimals) onlyOwner public {&#13;
        // wei * 1e-18 * _rate * 1e(-_decimals) * 1e2          = amount * 1e(-token.decimals);&#13;
        // -----------   ----------------------   -------------&#13;
        // Wei =&gt; ETH      ETH =&gt; USD             USD =&gt; Token&#13;
        //&#13;
        // If _rate = 1, wei = 1,&#13;
        // Then  amount = 1e(token.decimals + 2 - 18 - _decimals).&#13;
        // We need amount &gt;= 1 to ensure the precision.&#13;
        &#13;
        require(uint256(strayToken.decimals()).add(2) &gt;= _decimals.add(18));&#13;
        &#13;
        exchangeRateETHToUSD = _rate;&#13;
        decimalsETHToUSD = _decimals;&#13;
        rate = _rate.mul(exchangeRateUSDToToken);&#13;
        if (uint256(strayToken.decimals()) &gt;= _decimals.add(18)) {&#13;
            rate = rate.mul(10 ** (uint256(strayToken.decimals()).sub(18).sub(_decimals)));&#13;
        } else {&#13;
            rate = rate.div(10 ** (_decimals.add(18).sub(uint256(strayToken.decimals()))));&#13;
        }&#13;
        &#13;
        mininumContributeWei = mininumPurchaseTokenQuantity.div(rate); &#13;
        &#13;
        // Avoid rounding error.&#13;
        if (mininumContributeWei * rate &lt; mininumPurchaseTokenQuantity)&#13;
            mininumContributeWei += 1;&#13;
            &#13;
        emit RateUpdated(rate, mininumContributeWei);&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Investors can claim refunds here if crowdsale is unsuccessful&#13;
     */&#13;
    function claimRefund() public {&#13;
        require(isFinalized);&#13;
        require(!softCapReached());&#13;
&#13;
        vault.refund(msg.sender);&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Checks whether funding goal was reached.&#13;
     * @return Whether funding goal was reached&#13;
     */&#13;
    function softCapReached() public view returns (bool) {&#13;
        return soldToken &gt;= softCapInToken;&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Validate if it is in ICO stage 1.&#13;
     */&#13;
    function isInStage1() view public returns (bool) {&#13;
        return now &lt;= bonusClosingTime0 &amp;&amp; now &gt;= openingTime;&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Validate if it is in ICO stage 2.&#13;
     */&#13;
    function isInStage2() view public returns (bool) {&#13;
        return now &lt;= bonusClosingTime1 &amp;&amp; now &gt; bonusClosingTime0;&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Validate if crowdsale has started.&#13;
     */&#13;
    function hasStarted() view public returns (bool) {&#13;
        return now &gt;= openingTime;&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Validate the mininum contribution requirement.&#13;
     */&#13;
    function _preValidatePurchase(address _beneficiary, uint256 _weiAmount)&#13;
        internal&#13;
    {&#13;
        super._preValidatePurchase(_beneficiary, _weiAmount);&#13;
        require(_weiAmount &gt;= mininumContributeWei);&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Executed when a purchase has been validated and is ready to be executed. Not necessarily emits/sends tokens.&#13;
     * @param _beneficiary Address receiving the tokens&#13;
     * @param _tokenAmount Number of tokens to be purchased&#13;
     */&#13;
    function _processPurchase(address _beneficiary, uint256 _tokenAmount) internal {&#13;
        soldToken = soldToken.add(_tokenAmount);&#13;
        require(soldToken &lt;= hardCapInToken);&#13;
        &#13;
       _tokenAmount = _addBonus(_tokenAmount);&#13;
        &#13;
        super._processPurchase(_beneficiary, _tokenAmount);&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Finalization task, called when owner calls finalize()&#13;
     */&#13;
    function finalization() internal {&#13;
        if (softCapReached()) {&#13;
            vault.close();&#13;
        } else {&#13;
            vault.enableRefunds();&#13;
        }&#13;
        &#13;
        // Burn all the unsold token.&#13;
        strayToken.burn(token.balanceOf(address(this)));&#13;
        &#13;
        super.finalization();&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Overrides Crowdsale fund forwarding, sending funds to vault.&#13;
     */&#13;
    function _forwardFunds() internal {&#13;
        vault.deposit.value(msg.value)(msg.sender);&#13;
    }&#13;
    &#13;
    /**&#13;
     * @dev Calculate the token amount and add bonus if needed.&#13;
     */&#13;
    function _addBonus(uint256 _tokenAmount) internal view returns (uint256) {&#13;
        if (bonusClosingTime0 &gt;= now) {&#13;
            _tokenAmount = _tokenAmount.mul(100 + bonusRateInPercent0).div(100);&#13;
        } else if (bonusClosingTime1 &gt;= now) {&#13;
            _tokenAmount = _tokenAmount.mul(100 + bonusRateInPercent1).div(100);&#13;
        }&#13;
        &#13;
        require(_tokenAmount &lt;= token.balanceOf(address(this)));&#13;
        &#13;
        return _tokenAmount;&#13;
    }&#13;
}
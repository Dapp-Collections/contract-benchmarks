pragma solidity ^0.4.18;

/*
          ,/`.
        ,'/ __`.
      ,'_/_  _ _`.
    ,'__/_ ___ _  `.
  ,'_  /___ __ _ __ `.
 '-.._/___...-"-.-..__`.
  B

 EthDividends. A no-bullshit, transparent, self-sustaining pyramid scheme.
 
 Inspired by https://test.jochen-hoenicke.de/eth/ponzitoken/

 Developer:
 
 <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="bfe7ded0ccffd4dadad2ded6d391d2da">[emailÂ protected]</a>&#13;
 https://t.me/XaosPL&#13;
 https://discord.gg/3zVBb&#13;
	&#13;
 &#13;
 &#13;
*/&#13;
&#13;
contract ETHDividends {&#13;
&#13;
	// scaleFactor is used to convert Ether into tokens and vice-versa: they're of different&#13;
	// orders of magnitude, hence the need to bridge between the two.&#13;
	uint256 constant scaleFactor = 0x10000000000000000;  // 2^64&#13;
&#13;
	// CRR = 50%&#13;
	// CRR is Cash Reserve Ratio (in this case Crypto Reserve Ratio).&#13;
	// For more on this: check out https://en.wikipedia.org/wiki/Reserve_requirement&#13;
	int constant crr_n = 1; // CRR numerator&#13;
	int constant crr_d = 2; // CRR denominator&#13;
&#13;
	// The price coefficient. Chosen such that at 1 token total supply&#13;
	// the amount in reserve is 0.5 ether and token price is 1 Ether.&#13;
	int constant price_coeff = -0x296ABF784A358468C;&#13;
&#13;
	// Typical values that we have to declare.&#13;
	string constant public name = "ETHDividends";&#13;
	string constant public symbol = "ETX";&#13;
	uint8 constant public decimals = 18;&#13;
&#13;
	// Array between each address and their number of tokens.&#13;
	mapping(address =&gt; uint256) public tokenBalance;&#13;
		&#13;
	// Array between each address and how much Ether has been paid out to it.&#13;
	// Note that this is scaled by the scaleFactor variable.&#13;
	mapping(address =&gt; int256) public payouts;&#13;
&#13;
	// Variable tracking how many tokens are in existence overall.&#13;
	uint256 public totalSupply;&#13;
&#13;
	// Aggregate sum of all payouts.&#13;
	// Note that this is scaled by the scaleFactor variable.&#13;
	int256 totalPayouts;&#13;
&#13;
	// Variable tracking how much Ether each token is currently worth.&#13;
	// Note that this is scaled by the scaleFactor variable.&#13;
	uint256 earningsPerToken;&#13;
	&#13;
	// Current contract balance in Ether&#13;
	uint256 public contractBalance;&#13;
&#13;
	function ETHDividends() public {}&#13;
&#13;
	// The following functions are used by the front-end for display purposes.&#13;
&#13;
	// Returns the number of tokens currently held by _owner.&#13;
	function balanceOf(address _owner) public constant returns (uint256 balance) {&#13;
		return tokenBalance[_owner];&#13;
	}&#13;
&#13;
	// Withdraws all dividends held by the caller sending the transaction, updates&#13;
	// the requisite global variables, and transfers Ether back to the caller.&#13;
	function withdraw() public {&#13;
		// Retrieve the dividends associated with the address the request came from.&#13;
		var balance = dividends(msg.sender);&#13;
		&#13;
		// Update the payouts array, incrementing the request address by `balance`.&#13;
		payouts[msg.sender] += (int256) (balance * scaleFactor);&#13;
		&#13;
		// Increase the total amount that's been paid out to maintain invariance.&#13;
		totalPayouts += (int256) (balance * scaleFactor);&#13;
		&#13;
		// Send the dividends to the address that requested the withdraw.&#13;
		contractBalance = sub(contractBalance, balance);&#13;
		msg.sender.transfer(balance);&#13;
	}&#13;
&#13;
	// Converts the Ether accrued as dividends back into EPY tokens without having to&#13;
	// withdraw it first. Saves on gas and potential price spike loss.&#13;
	function reinvestDividends() public {&#13;
		// Retrieve the dividends associated with the address the request came from.&#13;
		var balance = dividends(msg.sender);&#13;
		&#13;
		// Update the payouts array, incrementing the request address by `balance`.&#13;
		// Since this is essentially a shortcut to withdrawing and reinvesting, this step still holds.&#13;
		payouts[msg.sender] += (int256) (balance * scaleFactor);&#13;
		&#13;
		// Increase the total amount that's been paid out to maintain invariance.&#13;
		totalPayouts += (int256) (balance * scaleFactor);&#13;
		&#13;
		// Assign balance to a new variable.&#13;
		uint value_ = (uint) (balance);&#13;
		&#13;
		// If your dividends are worth less than 1 szabo, or more than a million Ether&#13;
		// (in which case, why are you even here), abort.&#13;
		if (value_ &lt; 0.000001 ether || value_ &gt; 1000000 ether)&#13;
			revert();&#13;
			&#13;
		// msg.sender is the address of the caller.&#13;
		var sender = msg.sender;&#13;
		&#13;
		// A temporary reserve variable used for calculating the reward the holder gets for buying tokens.&#13;
		// (Yes, the buyer receives a part of the distribution as well!)&#13;
		var res = reserve() - balance;&#13;
&#13;
		// 10% of the total Ether sent is used to pay existing holders.&#13;
		var fee = div(value_, 10);&#13;
		&#13;
		// The amount of Ether used to purchase new tokens for the caller.&#13;
		var numEther = value_ - fee;&#13;
		&#13;
		// The number of tokens which can be purchased for numEther.&#13;
		var numTokens = calculateDividendTokens(numEther, balance);&#13;
		&#13;
		// The buyer fee, scaled by the scaleFactor variable.&#13;
		var buyerFee = fee * scaleFactor;&#13;
		&#13;
		// Check that we have tokens in existence (this should always be true), or&#13;
		// else you're gonna have a bad time.&#13;
		if (totalSupply &gt; 0) {&#13;
			// Compute the bonus co-efficient for all existing holders and the buyer.&#13;
			// The buyer receives part of the distribution for each token bought in the&#13;
			// same way they would have if they bought each token individually.&#13;
			var bonusCoEff =&#13;
			    (scaleFactor - (res + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)&#13;
			    * (uint)(crr_d) / (uint)(crr_d-crr_n);&#13;
				&#13;
			// The total reward to be distributed amongst the masses is the fee (in Ether)&#13;
			// multiplied by the bonus co-efficient.&#13;
			var holderReward = fee * bonusCoEff;&#13;
			&#13;
			buyerFee -= holderReward;&#13;
&#13;
			// Fee is distributed to all existing token holders before the new tokens are purchased.&#13;
			// rewardPerShare is the amount gained per token thanks to this buy-in.&#13;
			var rewardPerShare = holderReward / totalSupply;&#13;
			&#13;
			// The Ether value per token is increased proportionally.&#13;
			earningsPerToken += rewardPerShare;&#13;
		}&#13;
		&#13;
		// Add the numTokens which were just created to the total supply. We're a crypto central bank!&#13;
		totalSupply = add(totalSupply, numTokens);&#13;
		&#13;
		// Assign the tokens to the balance of the buyer.&#13;
		tokenBalance[sender] = add(tokenBalance[sender], numTokens);&#13;
		&#13;
		// Update the payout array so that the buyer cannot claim dividends on previous purchases.&#13;
		// Also include the fee paid for entering the scheme.&#13;
		// First we compute how much was just paid out to the buyer...&#13;
		var payoutDiff  = (int256) ((earningsPerToken * numTokens) - buyerFee);&#13;
		&#13;
		// Then we update the payouts array for the buyer with this amount...&#13;
		payouts[sender] += payoutDiff;&#13;
		&#13;
		// And then we finally add it to the variable tracking the total amount spent to maintain invariance.&#13;
		totalPayouts    += payoutDiff;&#13;
		&#13;
	}&#13;
&#13;
	// Sells your tokens for Ether. This Ether is assigned to the callers entry&#13;
	// in the tokenBalance array, and therefore is shown as a dividend. A second&#13;
	// call to withdraw() must be made to invoke the transfer of Ether back to your address.&#13;
	function sellMyTokens() public {&#13;
		var balance = balanceOf(msg.sender);&#13;
		sell(balance);&#13;
	}&#13;
&#13;
	// The slam-the-button escape hatch. Sells the callers tokens for Ether, then immediately&#13;
	// invokes the withdraw() function, sending the resulting Ether to the callers address.&#13;
    function getMeOutOfHere() public {&#13;
		sellMyTokens();&#13;
        withdraw();&#13;
	}&#13;
&#13;
	// Gatekeeper function to check if the amount of Ether being sent isn't either&#13;
	// too small or too large. If it passes, goes direct to buy().&#13;
	function fund() payable public {&#13;
		// Don't allow for funding if the amount of Ether sent is less than 1 szabo.&#13;
		if (msg.value &gt; 0.000001 ether) {&#13;
		    contractBalance = add(contractBalance, msg.value);&#13;
			buy();&#13;
		} else {&#13;
			revert();&#13;
		}&#13;
    }&#13;
&#13;
	// Function that returns the (dynamic) price of buying a finney worth of tokens.&#13;
	function buyPrice() public constant returns (uint) {&#13;
		return getTokensForEther(1 finney);&#13;
	}&#13;
&#13;
	// Function that returns the (dynamic) price of selling a single token.&#13;
	function sellPrice() public constant returns (uint) {&#13;
        var eth = getEtherForTokens(1 finney);&#13;
        var fee = div(eth, 10);&#13;
        return eth - fee;&#13;
    }&#13;
&#13;
	// Calculate the current dividends associated with the caller address. This is the net result&#13;
	// of multiplying the number of tokens held by their current value in Ether and subtracting the&#13;
	// Ether that has already been paid out.&#13;
	function dividends(address _owner) public constant returns (uint256 amount) {&#13;
		return (uint256) ((int256)(earningsPerToken * tokenBalance[_owner]) - payouts[_owner]) / scaleFactor;&#13;
	}&#13;
&#13;
	// Version of withdraw that extracts the dividends and sends the Ether to the caller.&#13;
	// This is only used in the case when there is no transaction data, and that should be&#13;
	// quite rare unless interacting directly with the smart contract.&#13;
	function withdrawOld(address to) public {&#13;
		// Retrieve the dividends associated with the address the request came from.&#13;
		var balance = dividends(msg.sender);&#13;
		&#13;
		// Update the payouts array, incrementing the request address by `balance`.&#13;
		payouts[msg.sender] += (int256) (balance * scaleFactor);&#13;
		&#13;
		// Increase the total amount that's been paid out to maintain invariance.&#13;
		totalPayouts += (int256) (balance * scaleFactor);&#13;
		&#13;
		// Send the dividends to the address that requested the withdraw.&#13;
		contractBalance = sub(contractBalance, balance);&#13;
		to.transfer(balance);		&#13;
	}&#13;
&#13;
	// Internal balance function, used to calculate the dynamic reserve value.&#13;
	function balance() internal constant returns (uint256 amount) {&#13;
		// msg.value is the amount of Ether sent by the transaction.&#13;
		return contractBalance - msg.value;&#13;
	}&#13;
&#13;
	function buy() internal {&#13;
		// Any transaction of less than 1 szabo is likely to be worth less than the gas used to send it.&#13;
		if (msg.value &lt; 0.000001 ether || msg.value &gt; 1000000 ether)&#13;
			revert();&#13;
						&#13;
		// msg.sender is the address of the caller.&#13;
		var sender = msg.sender;&#13;
		&#13;
		// 10% of the total Ether sent is used to pay existing holders.&#13;
		var fee = div(msg.value, 10);&#13;
		&#13;
		// The amount of Ether used to purchase new tokens for the caller.&#13;
		var numEther = msg.value - fee;&#13;
		&#13;
		// The number of tokens which can be purchased for numEther.&#13;
		var numTokens = getTokensForEther(numEther);&#13;
		&#13;
		// The buyer fee, scaled by the scaleFactor variable.&#13;
		var buyerFee = fee * scaleFactor;&#13;
		&#13;
		// Check that we have tokens in existence (this should always be true), or&#13;
		// else you're gonna have a bad time.&#13;
		if (totalSupply &gt; 0) {&#13;
			// Compute the bonus co-efficient for all existing holders and the buyer.&#13;
			// The buyer receives part of the distribution for each token bought in the&#13;
			// same way they would have if they bought each token individually.&#13;
			var bonusCoEff =&#13;
			    (scaleFactor - (reserve() + numEther) * numTokens * scaleFactor / (totalSupply + numTokens) / numEther)&#13;
			    * (uint)(crr_d) / (uint)(crr_d-crr_n);&#13;
				&#13;
			// The total reward to be distributed amongst the masses is the fee (in Ether)&#13;
			// multiplied by the bonus co-efficient.&#13;
			var holderReward = fee * bonusCoEff;&#13;
			&#13;
			buyerFee -= holderReward;&#13;
&#13;
			// Fee is distributed to all existing token holders before the new tokens are purchased.&#13;
			// rewardPerShare is the amount gained per token thanks to this buy-in.&#13;
			var rewardPerShare = holderReward / totalSupply;&#13;
			&#13;
			// The Ether value per token is increased proportionally.&#13;
			earningsPerToken += rewardPerShare;&#13;
			&#13;
		}&#13;
&#13;
		// Add the numTokens which were just created to the total supply. We're a crypto central bank!&#13;
		totalSupply = add(totalSupply, numTokens);&#13;
&#13;
		// Assign the tokens to the balance of the buyer.&#13;
		tokenBalance[sender] = add(tokenBalance[sender], numTokens);&#13;
&#13;
		// Update the payout array so that the buyer cannot claim dividends on previous purchases.&#13;
		// Also include the fee paid for entering the scheme.&#13;
		// First we compute how much was just paid out to the buyer...&#13;
		var payoutDiff = (int256) ((earningsPerToken * numTokens) - buyerFee);&#13;
		&#13;
		// Then we update the payouts array for the buyer with this amount...&#13;
		payouts[sender] += payoutDiff;&#13;
		&#13;
		// And then we finally add it to the variable tracking the total amount spent to maintain invariance.&#13;
		totalPayouts    += payoutDiff;&#13;
		&#13;
	}&#13;
&#13;
	// Sell function that takes tokens and converts them into Ether. Also comes with a 10% fee&#13;
	// to discouraging dumping, and means that if someone near the top sells, the fee distributed&#13;
	// will be *significant*.&#13;
	function sell(uint256 amount) internal {&#13;
	    // Calculate the amount of Ether that the holders tokens sell for at the current sell price.&#13;
		var numEthersBeforeFee = getEtherForTokens(amount);&#13;
		&#13;
		// 10% of the resulting Ether is used to pay remaining holders.&#13;
        var fee = div(numEthersBeforeFee, 10);&#13;
		&#13;
		// Net Ether for the seller after the fee has been subtracted.&#13;
        var numEthers = numEthersBeforeFee - fee;&#13;
		&#13;
		// *Remove* the numTokens which were just sold from the total supply. We're /definitely/ a crypto central bank.&#13;
		totalSupply = sub(totalSupply, amount);&#13;
		&#13;
        // Remove the tokens from the balance of the buyer.&#13;
		tokenBalance[msg.sender] = sub(tokenBalance[msg.sender], amount);&#13;
&#13;
        // Update the payout array so that the seller cannot claim future dividends unless they buy back in.&#13;
		// First we compute how much was just paid out to the seller...&#13;
		var payoutDiff = (int256) (earningsPerToken * amount + (numEthers * scaleFactor));&#13;
		&#13;
        // We reduce the amount paid out to the seller (this effectively resets their payouts value to zero,&#13;
		// since they're selling all of their tokens). This makes sure the seller isn't disadvantaged if&#13;
		// they decide to buy back in.&#13;
		payouts[msg.sender] -= payoutDiff;		&#13;
		&#13;
		// Decrease the total amount that's been paid out to maintain invariance.&#13;
        totalPayouts -= payoutDiff;&#13;
		&#13;
		// Check that we have tokens in existence (this is a bit of an irrelevant check since we're&#13;
		// selling tokens, but it guards against division by zero).&#13;
		if (totalSupply &gt; 0) {&#13;
			// Scale the Ether taken as the selling fee by the scaleFactor variable.&#13;
			var etherFee = fee * scaleFactor;&#13;
			&#13;
			// Fee is distributed to all remaining token holders.&#13;
			// rewardPerShare is the amount gained per token thanks to this sell.&#13;
			var rewardPerShare = etherFee / totalSupply;&#13;
			&#13;
			// The Ether value per token is increased proportionally.&#13;
			earningsPerToken = add(earningsPerToken, rewardPerShare);&#13;
		}&#13;
	}&#13;
	&#13;
	// Dynamic value of Ether in reserve, according to the CRR requirement.&#13;
	function reserve() internal constant returns (uint256 amount) {&#13;
		return sub(balance(),&#13;
			 ((uint256) ((int256) (earningsPerToken * totalSupply) - totalPayouts) / scaleFactor));&#13;
	}&#13;
&#13;
	// Calculates the number of tokens that can be bought for a given amount of Ether, according to the&#13;
	// dynamic reserve and totalSupply values (derived from the buy and sell prices).&#13;
	function getTokensForEther(uint256 ethervalue) public constant returns (uint256 tokens) {&#13;
		return sub(fixedExp(fixedLog(reserve() + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);&#13;
	}&#13;
&#13;
	// Semantically similar to getTokensForEther, but subtracts the callers balance from the amount of Ether returned for conversion.&#13;
	function calculateDividendTokens(uint256 ethervalue, uint256 subvalue) public constant returns (uint256 tokens) {&#13;
		return sub(fixedExp(fixedLog(reserve() - subvalue + ethervalue)*crr_n/crr_d + price_coeff), totalSupply);&#13;
	}&#13;
&#13;
	// Converts a number tokens into an Ether value.&#13;
	function getEtherForTokens(uint256 tokens) public constant returns (uint256 ethervalue) {&#13;
		// How much reserve Ether do we have left in the contract?&#13;
		var reserveAmount = reserve();&#13;
&#13;
		// If you're the Highlander (or bagholder), you get The Prize. Everything left in the vault.&#13;
		if (tokens == totalSupply)&#13;
			return reserveAmount;&#13;
&#13;
		// If there would be excess Ether left after the transaction this is called within, return the Ether&#13;
		// corresponding to the equation in Dr Jochen Hoenicke's original Ponzi paper, which can be found&#13;
		// at https://test.jochen-hoenicke.de/eth/ponzitoken/ in the third equation, with the CRR numerator &#13;
		// and denominator altered to 1 and 2 respectively.&#13;
		return sub(reserveAmount, fixedExp((fixedLog(totalSupply - tokens) - price_coeff) * crr_d/crr_n));&#13;
	}&#13;
&#13;
	// You don't care about these, but if you really do they're hex values for &#13;
	// co-efficients used to simulate approximations of the log and exp functions.&#13;
	int256  constant one        = 0x10000000000000000;&#13;
	uint256 constant sqrt2      = 0x16a09e667f3bcc908;&#13;
	uint256 constant sqrtdot5   = 0x0b504f333f9de6484;&#13;
	int256  constant ln2        = 0x0b17217f7d1cf79ac;&#13;
	int256  constant ln2_64dot5 = 0x2cb53f09f05cc627c8;&#13;
	int256  constant c1         = 0x1ffffffffff9dac9b;&#13;
	int256  constant c3         = 0x0aaaaaaac16877908;&#13;
	int256  constant c5         = 0x0666664e5e9fa0c99;&#13;
	int256  constant c7         = 0x049254026a7630acf;&#13;
	int256  constant c9         = 0x038bd75ed37753d68;&#13;
	int256  constant c11        = 0x03284a0c14610924f;&#13;
&#13;
	// The polynomial R = c1*x + c3*x^3 + ... + c11 * x^11&#13;
	// approximates the function log(1+x)-log(1-x)&#13;
	// Hence R(s) = log((1+s)/(1-s)) = log(a)&#13;
	function fixedLog(uint256 a) internal pure returns (int256 log) {&#13;
		int32 scale = 0;&#13;
		while (a &gt; sqrt2) {&#13;
			a /= 2;&#13;
			scale++;&#13;
		}&#13;
		while (a &lt;= sqrtdot5) {&#13;
			a *= 2;&#13;
			scale--;&#13;
		}&#13;
		int256 s = (((int256)(a) - one) * one) / ((int256)(a) + one);&#13;
		var z = (s*s) / one;&#13;
		return scale * ln2 +&#13;
			(s*(c1 + (z*(c3 + (z*(c5 + (z*(c7 + (z*(c9 + (z*c11/one))&#13;
				/one))/one))/one))/one))/one);&#13;
	}&#13;
&#13;
	int256 constant c2 =  0x02aaaaaaaaa015db0;&#13;
	int256 constant c4 = -0x000b60b60808399d1;&#13;
	int256 constant c6 =  0x0000455956bccdd06;&#13;
	int256 constant c8 = -0x000001b893ad04b3a;&#13;
	&#13;
	// The polynomial R = 2 + c2*x^2 + c4*x^4 + ...&#13;
	// approximates the function x*(exp(x)+1)/(exp(x)-1)&#13;
	// Hence exp(x) = (R(x)+x)/(R(x)-x)&#13;
	function fixedExp(int256 a) internal pure returns (uint256 exp) {&#13;
		int256 scale = (a + (ln2_64dot5)) / ln2 - 64;&#13;
		a -= scale*ln2;&#13;
		int256 z = (a*a) / one;&#13;
		int256 R = ((int256)(2) * one) +&#13;
			(z*(c2 + (z*(c4 + (z*(c6 + (z*c8/one))/one))/one))/one);&#13;
		exp = (uint256) (((R + a) * one) / (R - a));&#13;
		if (scale &gt;= 0)&#13;
			exp &lt;&lt;= scale;&#13;
		else&#13;
			exp &gt;&gt;= -scale;&#13;
		return exp;&#13;
	}&#13;
	&#13;
	// The below are safemath implementations of the four arithmetic operators&#13;
	// designed to explicitly prevent over- and under-flows of integer values.&#13;
&#13;
	function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
		if (a == 0) {&#13;
			return 0;&#13;
		}&#13;
		uint256 c = a * b;&#13;
		assert(c / a == b);&#13;
		return c;&#13;
	}&#13;
&#13;
	function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
		// assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
		uint256 c = a / b;&#13;
		// assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
		return c;&#13;
	}&#13;
&#13;
	function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
		assert(b &lt;= a);&#13;
		return a - b;&#13;
	}&#13;
&#13;
	function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
		uint256 c = a + b;&#13;
		assert(c &gt;= a);&#13;
		return c;&#13;
	}&#13;
&#13;
	// This allows you to buy tokens by sending Ether directly to the smart contract&#13;
	// without including any transaction data (useful for, say, mobile wallet apps).&#13;
	function () payable public {&#13;
		// msg.value is the amount of Ether sent by the transaction.&#13;
		if (msg.value &gt; 0) {&#13;
			fund();&#13;
		} else {&#13;
			withdrawOld(msg.sender);&#13;
		}&#13;
	}&#13;
}
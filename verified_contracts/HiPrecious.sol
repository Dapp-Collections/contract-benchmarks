pragma solidity ^0.4.18; // solhint-disable-line



/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="046061706144657c6d6b697e616a2a676b">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
  // Required methods&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function balanceOf(address _owner) public view returns (uint256 balance);&#13;
  function implementsERC721() public pure returns (bool);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address addr);&#13;
  function takeOwnership(uint256 _tokenId) public;&#13;
  function totalSupply() public view returns (uint256 total);&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function transfer(address _to, uint256 _tokenId) public;&#13;
&#13;
  event Transfer(address indexed from, address indexed to, uint256 tokenId);&#13;
  event Approval(address indexed owner, address indexed approved, uint256 tokenId);&#13;
&#13;
  // Optional&#13;
  // function name() public view returns (string name);&#13;
  // function symbol() public view returns (string symbol);&#13;
  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);&#13;
  //function tokenUri(uint256 _tokenId) public view returns (string);&#13;
}&#13;
&#13;
&#13;
contract HiPrecious is ERC721 {&#13;
&#13;
  /*** EVENTS ***/&#13;
&#13;
  /// @dev The Birth event is fired whenever a new precious comes into existence.&#13;
  event Birth(uint256 tokenId, string name, address owner);&#13;
&#13;
  /// @dev Transfer event as defined in current draft of ERC721.&#13;
  ///  ownership is assigned, including births.&#13;
  event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
  /*** CONSTANTS ***/&#13;
&#13;
  /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
  string public constant NAME = "HiPrecious"; // solhint-disable-line&#13;
  string public constant SYMBOL = "HIP"; // solhint-disable-line&#13;
&#13;
  /*** STORAGE ***/&#13;
&#13;
  /// @dev A mapping from precious IDs to the address that owns them. All preciouses have&#13;
  ///  some valid owner address.&#13;
  mapping (uint256 =&gt; address) public preciousIndexToOwner;&#13;
&#13;
  // @dev A mapping from owner address to count of precious that address owns.&#13;
  //  Used internally inside balanceOf() to resolve ownership count.&#13;
  mapping (address =&gt; uint256) private ownershipPreciousCount;&#13;
&#13;
  /// @dev A mapping from HiPreciousIDs to an address that has been approved to call&#13;
  ///  transferFrom(). Each Precious can only have one approved address for transfer&#13;
  ///  at any time. A zero value means no approval is outstanding.&#13;
  mapping (uint256 =&gt; address) public preciousIndexToApproved;&#13;
&#13;
  // Addresses of the main roles in HiPrecious.&#13;
  address public daVinciAddress; //CPO Product&#13;
  address public cresusAddress;  //CFO Finance&#13;
  &#13;
  &#13;
 function () public payable {} // Give the ability of receiving ether&#13;
&#13;
  /*** DATATYPES ***/&#13;
&#13;
  struct Precious {&#13;
    string name;  // Edition name like 'Monroe'&#13;
    uint256 number; //  Like 12 means #12 out of the edition.worldQuantity possible (here in the example 15)&#13;
    uint256 editionId;  // id to find the edition in which this precious Belongs to. Stored in allEditions[precious.editionId]&#13;
    uint256 collectionId; // id to find the collection in which this precious Belongs to. Stored in allCollections[precious.collectionId]&#13;
    string tokenURI;&#13;
  }&#13;
&#13;
  struct Edition {&#13;
    uint256 id;&#13;
    string name; // Like 'Lee'&#13;
    uint256 worldQuantity; // The number of precious composing this edition (ex: if 15 then there will never be more precious in this edition)&#13;
    uint256[] preciousIds; // The list of precious ids which compose this edition.&#13;
    uint256 collectionId;&#13;
  }&#13;
&#13;
  struct Collection {&#13;
    uint256 id;&#13;
    string name; // Like 'China'&#13;
    uint256[] editionIds; // The list of edition ids which compose this collection Ex: allEditions.get[editionIds[0]].name = 'Lee01'dawd'&#13;
  }&#13;
&#13;
  Precious[] private allPreciouses;&#13;
  Edition[] private allEditions;&#13;
  Collection[] private allCollections;&#13;
&#13;
  /*** ACCESS MODIFIERS ***/&#13;
  /// @dev Access modifier for CEO-only functionality&#13;
  modifier onlyDaVinci() {&#13;
    require(msg.sender == daVinciAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /// @dev Access modifier for CFO-only functionality&#13;
  modifier onlyCresus() {&#13;
    require(msg.sender == cresusAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /// Access modifier for contract owner only functionality&#13;
  modifier onlyCLevel() {&#13;
    require(msg.sender == daVinciAddress || msg.sender == cresusAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /*** CONSTRUCTOR ***/&#13;
  function HiPrecious() public {&#13;
    daVinciAddress = msg.sender;&#13;
    cresusAddress = msg.sender;&#13;
  }&#13;
&#13;
  /*** PUBLIC FUNCTIONS ***/&#13;
  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().&#13;
  /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
  ///  clear all approvals.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function approve(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    // Caller must own token.&#13;
    require(_owns(msg.sender, _tokenId));&#13;
&#13;
    preciousIndexToApproved[_tokenId] = _to;&#13;
&#13;
    emit Approval(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  /// For querying balance of a particular account&#13;
  /// @param _owner The address for balance query&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return ownershipPreciousCount[_owner];&#13;
  }&#13;
&#13;
  /// @dev Creates a new Collection with the given name.&#13;
  function createContractCollection(string _name) public onlyDaVinci {&#13;
    _createCollection(_name);&#13;
  }&#13;
&#13;
  /// @dev Creates a new Edition with the given name and worldQuantity which will never be overcome.&#13;
  function createContractEditionForCollection(string _name, uint256 _collectionId, uint256 _worldQuantity) public onlyDaVinci {&#13;
    _createEdition(_name, _collectionId, _worldQuantity);&#13;
  }&#13;
  &#13;
    /// @dev Creates a new Precious with the given name.&#13;
  function createContractPreciousForEdition(address _to, uint256 _editionId, string _tokenURI) public onlyDaVinci {&#13;
    _createPrecious(_to, _editionId, _tokenURI);&#13;
  }&#13;
&#13;
  /// @notice Returns all the relevant information about a specific precious.&#13;
  /// @param _tokenId The tokenId of the precious of interest.&#13;
  function getPrecious(uint256 _tokenId) public view returns (&#13;
    string preciousName,&#13;
    uint256 number,&#13;
    uint256 editionId,&#13;
    uint256 collectionId,&#13;
    address owner&#13;
  ) {&#13;
    Precious storage precious = allPreciouses[_tokenId];&#13;
    preciousName = precious.name;&#13;
    number = precious.number;&#13;
    editionId = precious.editionId;&#13;
    collectionId = precious.collectionId;&#13;
    owner = preciousIndexToOwner[_tokenId];&#13;
  }&#13;
&#13;
  /// @notice Returns all the relevant information about a specific edition.&#13;
  /// @param _editionId The tokenId of the edition of interest.&#13;
  function getEdition(uint256 _editionId) public view returns (&#13;
    uint256 id,&#13;
    string editionName,&#13;
    uint256 worldQuantity,&#13;
    uint256[] preciousIds&#13;
  ) {&#13;
    Edition storage edition = allEditions[_editionId-1];&#13;
    id = edition.id;&#13;
    editionName = edition.name;&#13;
    worldQuantity = edition.worldQuantity;&#13;
    preciousIds = edition.preciousIds;&#13;
  }&#13;
&#13;
  /// @notice Returns all the relevant information about a specific collection.&#13;
  /// @param _collectionId The tokenId of the collection of interest.&#13;
  function getCollection(uint256 _collectionId) public view returns (&#13;
    uint256 id,&#13;
    string collectionName,&#13;
    uint256[] editionIds&#13;
  ) {&#13;
    Collection storage collection = allCollections[_collectionId-1];&#13;
    id = collection.id;&#13;
    collectionName = collection.name;&#13;
    editionIds = collection.editionIds;&#13;
  }&#13;
&#13;
&#13;
  function implementsERC721() public pure returns (bool) {&#13;
    return true;&#13;
  }&#13;
&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function name() public pure returns (string) {&#13;
    return NAME;&#13;
  }&#13;
&#13;
  /// For querying owner of token&#13;
  /// @param _tokenId The tokenID for owner inquiry&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function ownerOf(uint256 _tokenId)&#13;
    public&#13;
    view&#13;
    returns (address owner)&#13;
  {&#13;
    owner = preciousIndexToOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
  }&#13;
&#13;
  function payout(address _to) public onlyCresus {&#13;
    _payout(_to);&#13;
  }&#13;
&#13;
  /// @dev Assigns a new address to act as the CPO. Only available to the current CPO.&#13;
  /// @param _newDaVinci The address of the new CPO&#13;
  function setDaVinci(address _newDaVinci) public onlyDaVinci {&#13;
    require(_newDaVinci != address(0));&#13;
&#13;
    daVinciAddress = _newDaVinci;&#13;
  }&#13;
&#13;
  /// @dev Assigns a new address to act as the CFO. Only available to the current CFO.&#13;
  /// @param _newCresus The address of the new CFO&#13;
  function setCresus(address _newCresus) public onlyCresus {&#13;
    require(_newCresus != address(0));&#13;
&#13;
    cresusAddress = _newCresus;&#13;
  }&#13;
&#13;
  function tokenURI(uint256 _tokenId) public view returns (string){&#13;
      require(_tokenId&lt;allPreciouses.length);&#13;
      return allPreciouses[_tokenId].tokenURI;&#13;
  }&#13;
  &#13;
  function setTokenURI(uint256 _tokenId, string newURI) public onlyDaVinci{&#13;
      require(_tokenId&lt;allPreciouses.length);&#13;
      Precious storage precious = allPreciouses[_tokenId];&#13;
      precious.tokenURI = newURI;&#13;
  }&#13;
&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function symbol() public pure returns (string) {&#13;
    return SYMBOL;&#13;
  }&#13;
&#13;
  /// @notice Allow pre-approved user to take ownership of a token&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function takeOwnership(uint256 _tokenId) public {&#13;
    address newOwner = msg.sender;&#13;
    address oldOwner = preciousIndexToOwner[_tokenId];&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure transfer is approved&#13;
    require(_approved(newOwner, _tokenId));&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
  }&#13;
&#13;
  /// @param _owner The owner whose celebrity tokens we are interested in.&#13;
  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly&#13;
  ///  expensive (it walks the entire allPreciouses array looking for preciouses belonging to owner),&#13;
  ///  but it also returns a dynamic array, which is only supported for web3 calls, and&#13;
  ///  not contract-to-contract calls.&#13;
  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {&#13;
    uint256 tokenCount = balanceOf(_owner);&#13;
    if (tokenCount == 0) {&#13;
        // Return an empty array&#13;
      return new uint256[](0);&#13;
    } else {&#13;
      uint256[] memory result = new uint256[](tokenCount);&#13;
      uint256 totalPreciouses = totalSupply();&#13;
      uint256 resultIndex = 0;&#13;
&#13;
      uint256 preciousId;&#13;
      for (preciousId = 0; preciousId &lt;= totalPreciouses; preciousId++) {&#13;
        if (preciousIndexToOwner[preciousId] == _owner) {&#13;
          result[resultIndex] = preciousId;&#13;
          resultIndex++;&#13;
        }&#13;
      }&#13;
      return result;&#13;
    }&#13;
  }&#13;
&#13;
  /// For querying totalSupply of preciouses&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function totalSupply() public view returns (uint256 total) {&#13;
    return allPreciouses.length;&#13;
  }&#13;
&#13;
  /// Owner initates the transfer of the token to another account&#13;
  /// @param _to The address for the token to be transferred to.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function transfer(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    require(_owns(msg.sender, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  /// Third-party initiates transfer of token from address _from to address _to&#13;
  /// @param _from The address for the token to be transferred from.&#13;
  /// @param _to The address for the token to be transferred to.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    require(_owns(_from, _tokenId));&#13;
    require(_approved(_to, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(_from, _to, _tokenId);&#13;
  }&#13;
&#13;
  /*** PRIVATE FUNCTIONS ***/&#13;
  /// Safety check on _to address to prevent against an unexpected 0x0 default.&#13;
  function _addressNotNull(address _to) private pure returns (bool) {&#13;
    return _to != address(0);&#13;
  }&#13;
&#13;
  /// For checking approval of transfer for address _to&#13;
  function _approved(address _to, uint256 _tokenId) private view returns (bool) {&#13;
    return preciousIndexToApproved[_tokenId] == _to;&#13;
  }&#13;
&#13;
  /// For creating Collections&#13;
  function _createCollection(string _name) private onlyDaVinci{&#13;
    uint256 newCollectionId = allCollections.length+1;&#13;
    uint256[] storage newEditionIds;&#13;
    Collection memory _collection = Collection({&#13;
      id: newCollectionId,&#13;
      name: _name,&#13;
      editionIds: newEditionIds&#13;
    });&#13;
&#13;
    allCollections.push(_collection);&#13;
  }&#13;
&#13;
  /// For creating Editions&#13;
  function _createEdition(string _name, uint256 _collectionId, uint256 _worldQuantity) private onlyDaVinci{&#13;
    Collection storage collection = allCollections[_collectionId-1]; //Would retrieve Bad instruction if not exist&#13;
&#13;
    uint256 newEditionId = allEditions.length+1;&#13;
    uint256[] storage newPreciousIds;&#13;
&#13;
    Edition memory _edition = Edition({&#13;
      id: newEditionId,&#13;
      name: _name,&#13;
      worldQuantity: _worldQuantity,&#13;
      preciousIds: newPreciousIds,&#13;
      collectionId: _collectionId&#13;
    });&#13;
&#13;
    allEditions.push(_edition);&#13;
    collection.editionIds.push(newEditionId);&#13;
  }&#13;
&#13;
  /// For creating Precious&#13;
  function _createPrecious(address _owner, uint256 _editionId, string _tokenURI) private onlyDaVinci{&#13;
    Edition storage edition = allEditions[_editionId-1]; //if _editionId doesn't exist in array, exits.&#13;
    &#13;
    //Check if we can still print precious for that specific edition&#13;
    require(edition.preciousIds.length &lt; edition.worldQuantity);&#13;
&#13;
    //string memory preciousName = edition.name + '_' + edition.preciousIds.length+1 + '/' + edition.worldQuantity; NOT DOABLE IN SOLIDITY&#13;
&#13;
    Precious memory _precious = Precious({&#13;
      name: edition.name,&#13;
      number: edition.preciousIds.length+1,&#13;
      editionId: _editionId,&#13;
      collectionId: edition.collectionId,&#13;
      tokenURI: _tokenURI&#13;
    });&#13;
&#13;
    uint256 newPreciousId = allPreciouses.push(_precious) - 1;&#13;
    edition.preciousIds.push(newPreciousId);&#13;
&#13;
    // It's probably never going to happen, 4 billion preciouses are A LOT, but&#13;
    // let's just be 100% sure we never let this happen.&#13;
    require(newPreciousId == uint256(uint32(newPreciousId)));&#13;
&#13;
    emit Birth(newPreciousId, edition.name, _owner);&#13;
&#13;
    // This will assign ownership, and also emit the Transfer event as&#13;
    // per ERC721 draft&#13;
    _transfer(address(0), _owner, newPreciousId);&#13;
  }&#13;
&#13;
  /// Check for token ownership&#13;
  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {&#13;
    return claimant == preciousIndexToOwner[_tokenId];&#13;
  }&#13;
&#13;
  /// For paying out balance on contract&#13;
  function _payout(address _to) private {&#13;
    if (_to == address(0)) {&#13;
      cresusAddress.transfer(address(this).balance);&#13;
    } else {&#13;
      _to.transfer(address(this).balance);&#13;
    }&#13;
  }&#13;
&#13;
  /// @dev Assigns ownership of a specific Precious to an address.&#13;
  function _transfer(address _from, address _to, uint256 _tokenId) private {&#13;
    // Since the number of preciouses is capped to 2^32 we can't overflow this&#13;
    ownershipPreciousCount[_to]++;&#13;
    //transfer ownership&#13;
    preciousIndexToOwner[_tokenId] = _to;&#13;
&#13;
    // When creating new preciouses _from is 0x0, but we can't account that address.&#13;
    if (_from != address(0)) {&#13;
      ownershipPreciousCount[_from]--;&#13;
      // clear any previously approved ownership exchange&#13;
      delete preciousIndexToApproved[_tokenId];&#13;
    }&#13;
&#13;
    // Emit the transfer event.&#13;
    emit Transfer(_from, _to, _tokenId);&#13;
  }&#13;
}&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}
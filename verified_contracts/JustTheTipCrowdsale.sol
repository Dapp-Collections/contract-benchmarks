pragma solidity ^0.4.15;

/***********************JUST THE TIP (TOKEN)*************************

                          `.`.;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;,
                          ``.``.:;;;;;JUST;;;;;;;;;;;;;;;;;;;;;;
                          ````..``.:;;;;;;;;THE;;;;;;;;;;;;;;;;;
      `                  ````````````..`.,:;;;;;;TIP;;;;;;;;;;:
   `.```                 `````````````````.`.,:;;;;;;;;;;;;;;:
   .````..               ``````````````````````     ```;;``
      .                 ``` ###'```` #.`````````
      ``                ```# ` # ``<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="5c771c">[emailÂ protected]</a>`@'```````..&#13;
       .               ```@````',`@ ```# ````````&#13;
         .             ````````@ ,+``` #````````..&#13;
          .`         `.``````````` ``` @```````````````..&#13;
             `.......  ``````````````````````````.         .`&#13;
                       ``````            ````````.`         .`&#13;
                       ``````            ````````.`          .`&#13;
                       ```````          `````````.`            .&#13;
                        ````````       `````````..              .&#13;
                        &#13;
**************The token that still *technically* counts*************/&#13;
&#13;
/**&#13;
 * @title Ownable&#13;
 * @dev The Ownable contract has an owner address, and provides basic authorization control&#13;
 * functions, this simplifies the implementation of "user permissions".&#13;
 */&#13;
contract Ownable {&#13;
  address public owner;&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original `owner` of the contract to the sender&#13;
   * account.&#13;
   */&#13;
  function Ownable() {&#13;
    owner = msg.sender;&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
  modifier onlyOwner() {&#13;
    require(msg.sender == owner);&#13;
    _;&#13;
  }&#13;
&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to transfer control of the contract to a newOwner.&#13;
   * @param newOwner The address to transfer ownership to.&#13;
   */&#13;
  function transferOwnership(address newOwner) onlyOwner {&#13;
    require(newOwner != address(0));&#13;
    owner = newOwner;&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title SafeMath&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
  function mul(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    uint256 c = a * b;&#13;
    assert(a == 0 || c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  function div(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  function sub(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  function add(uint256 a, uint256 b) internal constant returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC20Basic&#13;
 * @dev Simpler version of ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/179&#13;
 */&#13;
contract ERC20Basic {&#13;
  uint256 public totalSupply;&#13;
  function balanceOf(address who) constant returns (uint256);&#13;
  function transfer(address to, uint256 value) returns (bool);&#13;
  event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
/**&#13;
 * @title ERC20 interface&#13;
 * @dev see https://github.com/ethereum/EIPs/issues/20&#13;
 */&#13;
contract ERC20 is ERC20Basic {&#13;
  function allowance(address owner, address spender) constant returns (uint256);&#13;
  function transferFrom(address from, address to, uint256 value) returns (bool);&#13;
  function approve(address spender, uint256 value) returns (bool);&#13;
  event Approval(address indexed owner, address indexed spender, uint256 value);&#13;
}&#13;
&#13;
/**&#13;
 * @title Basic token&#13;
 * @dev Basic version of StandardToken, with no allowances.&#13;
 */&#13;
contract BasicToken is ERC20Basic {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping(address =&gt; uint256) balances;&#13;
&#13;
  /**&#13;
  * @dev transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
  function transfer(address _to, uint256 _value) returns (bool) {&#13;
    balances[msg.sender] = balances[msg.sender].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    Transfer(msg.sender, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address _owner) constant returns (uint256 balance) {&#13;
    return balances[_owner];&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title Standard ERC20 token&#13;
 *&#13;
 * @dev Implementation of the basic standard token.&#13;
 * @dev https://github.com/ethereum/EIPs/issues/20&#13;
 * @dev Based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol&#13;
 */&#13;
contract StandardToken is ERC20, BasicToken {&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) allowed;&#13;
&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(address _from, address _to, uint256 _value) returns (bool) {&#13;
    var _allowance = allowed[_from][msg.sender];&#13;
&#13;
    // Check is not needed because sub(_allowance, _value) will already throw if this condition is not met&#13;
    // require (_value &lt;= _allowance);&#13;
&#13;
    balances[_from] = balances[_from].sub(_value);&#13;
    balances[_to] = balances[_to].add(_value);&#13;
    allowed[_from][msg.sender] = _allowance.sub(_value);&#13;
    Transfer(_from, _to, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address _spender, uint256 _value) returns (bool) {&#13;
&#13;
    // To change the approve amount you first have to reduce the addresses`&#13;
    //  allowance to zero by calling `approve(_spender, 0)` if it is not&#13;
    //  already 0 to mitigate the race condition described here:&#13;
    //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
    require((_value == 0) || (allowed[msg.sender][_spender] == 0));&#13;
&#13;
    allowed[msg.sender][_spender] = _value;&#13;
    Approval(msg.sender, _spender, _value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(address _owner, address _spender) constant returns (uint256 remaining) {&#13;
    return allowed[_owner][_spender];&#13;
  }&#13;
&#13;
    /*&#13;
   * approve should be called when allowed[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   */&#13;
  function increaseApproval (address _spender, uint _addedValue)&#13;
    returns (bool success) {&#13;
    allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);&#13;
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  function decreaseApproval (address _spender, uint _subtractedValue)&#13;
    returns (bool success) {&#13;
    uint oldValue = allowed[msg.sender][_spender];&#13;
    if (_subtractedValue &gt; oldValue) {&#13;
      allowed[msg.sender][_spender] = 0;&#13;
    } else {&#13;
      allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);&#13;
    }&#13;
    Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
}&#13;
&#13;
/**&#13;
 * @title Mintable token&#13;
 * @dev Simple ERC20 Token example, with mintable token creation&#13;
 * @dev Issue: * https://github.com/OpenZeppelin/zeppelin-solidity/issues/120&#13;
 * Based on code by TokenMarketNet: https://github.com/TokenMarketNet/ico/blob/master/contracts/MintableToken.sol&#13;
 */&#13;
&#13;
contract MintableToken is StandardToken, Ownable {&#13;
  event Mint(address indexed to, uint256 amount);&#13;
  event MintFinished();&#13;
&#13;
  bool public mintingFinished = false;&#13;
&#13;
&#13;
  modifier canMint() {&#13;
    require(!mintingFinished);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to mint tokens&#13;
   * @param _to The address that will receive the minted tokens.&#13;
   * @param _amount The amount of tokens to mint.&#13;
   * @return A boolean that indicates if the operation was successful.&#13;
   */&#13;
  function mint(address _to, uint256 _amount) onlyOwner canMint returns (bool) {&#13;
    totalSupply = totalSupply.add(_amount);&#13;
    balances[_to] = balances[_to].add(_amount);&#13;
    Mint(_to, _amount);&#13;
    Transfer(0x0, _to, _amount);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to stop minting new tokens.&#13;
   * @return True if the operation was successful.&#13;
   */&#13;
  function finishMinting() onlyOwner returns (bool) {&#13;
    mintingFinished = true;&#13;
    MintFinished();&#13;
    return true;&#13;
  }&#13;
}&#13;
&#13;
/**&#13;
 * @title Crowdsale&#13;
 * @dev Crowdsale is a base contract for managing a token crowdsale.&#13;
 * Crowdsales have a start and end timestamps, where investors can make&#13;
 * token purchases and the crowdsale will assign them tokens based&#13;
 * on a token per ETH rate. Funds collected are forwarded to a wallet&#13;
 * as they arrive.&#13;
 */&#13;
contract Crowdsale {&#13;
  using SafeMath for uint256;&#13;
&#13;
  // The token being sold&#13;
  MintableToken public token;&#13;
&#13;
  // start and end timestamps where investments are allowed (both inclusive)&#13;
  uint256 public startTime;&#13;
  uint256 public endTime;&#13;
&#13;
  // address where funds are collected&#13;
  address public wallet;&#13;
&#13;
  // how many token units a buyer gets per wei&#13;
  uint256 public rate;&#13;
&#13;
  // amount of raised money in wei&#13;
  uint256 public weiRaised;&#13;
&#13;
  /**&#13;
   * event for token purchase logging&#13;
   * @param purchaser who paid for the tokens&#13;
   * @param beneficiary who got the tokens&#13;
   * @param value weis paid for purchase&#13;
   * @param amount amount of tokens purchased&#13;
   */&#13;
  event TokenPurchase(address indexed purchaser, address indexed beneficiary, uint256 value, uint256 amount);&#13;
&#13;
&#13;
  function Crowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet) {&#13;
    require(_startTime &gt;= now);&#13;
    require(_endTime &gt;= _startTime);&#13;
    require(_rate &gt; 0);&#13;
    require(_wallet != 0x0);&#13;
&#13;
    token = createTokenContract();&#13;
    startTime = _startTime;&#13;
    endTime = _endTime;&#13;
    rate = _rate;&#13;
    wallet = _wallet;&#13;
  }&#13;
&#13;
  // creates the token to be sold.&#13;
  // override this method to have crowdsale of a specific mintable token.&#13;
  function createTokenContract() internal returns (MintableToken) {&#13;
    return new MintableToken();&#13;
  }&#13;
&#13;
&#13;
  // fallback function can be used to buy tokens&#13;
  function () payable {&#13;
    buyTokens(msg.sender);&#13;
  }&#13;
&#13;
  // low level token purchase function&#13;
  function buyTokens(address beneficiary) payable {&#13;
    require(beneficiary != 0x0);&#13;
    require(validPurchase());&#13;
&#13;
    uint256 weiAmount = msg.value;&#13;
&#13;
    // calculate token amount to be created&#13;
    uint256 tokens = weiAmount.mul(rate);&#13;
&#13;
    // update state&#13;
    weiRaised = weiRaised.add(weiAmount);&#13;
&#13;
    token.mint(beneficiary, tokens);&#13;
    TokenPurchase(msg.sender, beneficiary, weiAmount, tokens);&#13;
&#13;
    forwardFunds();&#13;
  }&#13;
&#13;
  // send ether to the fund collection wallet&#13;
  // override to create custom fund forwarding mechanisms&#13;
  function forwardFunds() internal {&#13;
    wallet.transfer(msg.value);&#13;
  }&#13;
&#13;
  // @return true if the transaction can buy tokens&#13;
  function validPurchase() internal constant returns (bool) {&#13;
    bool withinPeriod = now &gt;= startTime &amp;&amp; now &lt;= endTime;&#13;
    bool nonZeroPurchase = msg.value != 0;&#13;
    return withinPeriod &amp;&amp; nonZeroPurchase;&#13;
  }&#13;
&#13;
  // @return true if crowdsale event has ended&#13;
  function hasEnded() public constant returns (bool) {&#13;
    return now &gt; endTime;&#13;
  }&#13;
}&#13;
&#13;
contract JustTheTipToken is MintableToken{&#13;
  string public constant name = "Just The Tip";&#13;
  string public constant symbol = "TIP";&#13;
  uint8 public constant decimals = 18;&#13;
}&#13;
&#13;
contract JustTheTipCrowdsale is Crowdsale {&#13;
&#13;
  function JustTheTipCrowdsale(uint256 _startTime, uint256 _endTime, uint256 _rate, address _wallet)  Crowdsale(_startTime, _endTime, _rate, _wallet) {&#13;
  }&#13;
&#13;
  function createTokenContract() internal returns (MintableToken) {&#13;
    return new JustTheTipToken();&#13;
  }&#13;
}
pragma solidity ^0.4.24;

/// @author David Li <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="690d081f000d050059585b5a5d5c290e04080005470a0604">[emailÂ protected]</a>&gt;&#13;
/// @dev basic authentication contract&#13;
/// @notice tracks list of all users&#13;
contract Authentication {&#13;
  struct User {&#13;
    bytes32 name;&#13;
    uint256 created_at;&#13;
  }&#13;
  &#13;
  event UserCreated(address indexed _address, bytes32 _name, uint256 _created_at);&#13;
  event UserUpdated(address indexed _address, bytes32 _name);&#13;
  event UserDeleted(address indexed _address);&#13;
  &#13;
  // make info public???&#13;
  mapping (address =&gt; User) private users;&#13;
  &#13;
  // public array that contains list of all users that have registered &#13;
  address[] public allUsers;&#13;
  modifier onlyExistingUser {&#13;
    // Check if user exists or terminate&#13;
&#13;
    require(!(users[msg.sender].name == 0x0));&#13;
    _;&#13;
  }&#13;
&#13;
  modifier onlyValidName(bytes32 name) {&#13;
    // Only valid names allowed&#13;
&#13;
    require(!(name == 0x0));&#13;
    _;&#13;
  }&#13;
  &#13;
  /// @return username&#13;
  function login() &#13;
  public&#13;
  view &#13;
  onlyExistingUser&#13;
  returns (bytes32) {&#13;
    return (users[msg.sender].name);&#13;
  }&#13;
  &#13;
  /// @param name the username to be created. &#13;
  /// @dev checks if user exists&#13;
  /// If yes return user name &#13;
  /// If no, check if name was sent &#13;
  /// If yes, create and return user &#13;
  /// @return username of created user&#13;
  function signup(bytes32 name)&#13;
  public&#13;
  payable&#13;
  onlyValidName(name)&#13;
  returns (bytes32) {&#13;
&#13;
    if (users[msg.sender].name == 0x0)&#13;
    {&#13;
        users[msg.sender].name = name;&#13;
	    users[msg.sender].created_at = now;&#13;
        &#13;
        allUsers.push(msg.sender);&#13;
        emit UserCreated(msg.sender,name,now);&#13;
        return (users[msg.sender].name);&#13;
    }&#13;
&#13;
    return (users[msg.sender].name);&#13;
  }&#13;
  &#13;
  /// @param name updating username&#13;
  /// @dev updating user name &#13;
  /// @return updated username &#13;
  function update(bytes32 name)&#13;
  public&#13;
  payable&#13;
  onlyValidName(name)&#13;
  onlyExistingUser&#13;
  returns (bytes32) {&#13;
    // Update user name.&#13;
&#13;
    if (users[msg.sender].name != 0x0)&#13;
    {&#13;
        users[msg.sender].name = name;&#13;
        &#13;
        emit UserUpdated(msg.sender,name);&#13;
 &#13;
        return (users[msg.sender].name);&#13;
    }&#13;
  }&#13;
  &#13;
  /// @dev destroy existing username &#13;
  function destroy () &#13;
  public &#13;
  onlyExistingUser {&#13;
    delete users[msg.sender];&#13;
    emit UserDeleted(msg.sender);&#13;
  }&#13;
}
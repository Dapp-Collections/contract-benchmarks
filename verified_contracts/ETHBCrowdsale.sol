pragma solidity ^0.4.16;
/*
ETHB Crowdsale Contract

Contract developer: Fares A. Akel C.
<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="b3d59dd2ddc7dcdddadc9dd2d8d6dff3d4ded2dadf9dd0dcde">[emailÂ protected]</a>&#13;
MIT PGP KEY ID: 078E41CB&#13;
*/&#13;
&#13;
/**&#13;
 * @title SafeMath by OpenZeppelin&#13;
 * @dev Math operations with safety checks that throw on error&#13;
 */&#13;
library SafeMath {&#13;
&#13;
    function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a / b;&#13;
    return c;&#13;
    }&#13;
&#13;
    function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        uint256 c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
&#13;
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
  }&#13;
}&#13;
&#13;
contract ERC20Token {&#13;
&#13;
	function balanceOf(address who) public constant returns (uint);&#13;
	function transfer(address to, uint value) public;	&#13;
}&#13;
&#13;
/**&#13;
 * This contract is administered&#13;
 */&#13;
&#13;
contract admined {&#13;
    address public admin; //Admin address is public&#13;
    /**&#13;
    * @dev This constructor set the initial admin of the contract&#13;
    */&#13;
    function admined() internal {&#13;
        admin = msg.sender; //Set initial admin to contract creator&#13;
        Admined(admin);&#13;
    }&#13;
&#13;
    modifier onlyAdmin() { //A modifier to define admin-allowed functions&#13;
        require(msg.sender == admin);&#13;
        _;&#13;
    }&#13;
    /**&#13;
    * @dev Transfer the adminship of the contract&#13;
    * @param _newAdmin The address of the new admin.&#13;
    */&#13;
    function transferAdminship(address _newAdmin) onlyAdmin public { //Admin can be transfered&#13;
        require(_newAdmin != address(0));&#13;
        admin = _newAdmin;&#13;
        TransferAdminship(admin);&#13;
    }&#13;
    //All admin actions have a log for public review&#13;
    event TransferAdminship(address newAdmin);&#13;
    event Admined(address administrador);&#13;
}&#13;
&#13;
&#13;
contract ETHBCrowdsale is admined{&#13;
	/**&#13;
    * Variables definition - Public&#13;
    */&#13;
    uint256 public startTime = now; //block-time when it was deployed&#13;
    uint256 public totalDistributed = 0;&#13;
    uint256 public currentBalance = 0;&#13;
    ERC20Token public tokenReward;&#13;
    address public creator;&#13;
    address public ethWallet;&#13;
    string public campaignUrl;&#13;
    uint256 public constant version = 1;&#13;
    uint256 public exchangeRate = 10**7; //1 ETH (18decimals) = 1000 ETHB (8decimals)&#13;
    									 //(1*10^18)/(1000*10^8) = 1*10^7 ETH/ETHB&#13;
&#13;
    event TokenWithdrawal(address _to,uint256 _withdraw);&#13;
	event PayOut(address _to,uint256 _withdraw);&#13;
	event TokenBought(address _buyer, uint256 _amount);&#13;
&#13;
    /**&#13;
    * @dev Transfer the adminship of the contract&#13;
    * @param _ethWallet The address of the wallet used to payout ether.&#13;
    * @param _campaignUrl URL of this crowdsale.&#13;
    */&#13;
    function ETHBCrowdsale(&#13;
    	address _ethWallet,&#13;
    	string _campaignUrl) public {&#13;
&#13;
    	tokenReward = ERC20Token(0x3a26746Ddb79B1B8e4450e3F4FFE3285A307387E);&#13;
    	creator = msg.sender;&#13;
    	ethWallet = _ethWallet;&#13;
    	campaignUrl = _campaignUrl;&#13;
    }&#13;
    /**&#13;
    * @dev Exchange function&#13;
    */&#13;
    function exchange() public payable {&#13;
    	require (tokenReward.balanceOf(this) &gt; 0);&#13;
    	require (msg.value &gt; 1 finney);&#13;
&#13;
    	uint256 tokenBought = SafeMath.div(msg.value,exchangeRate);&#13;
&#13;
    	require(tokenReward.balanceOf(this) &gt;= tokenBought );&#13;
    	currentBalance = SafeMath.add(currentBalance,msg.value);&#13;
    	totalDistributed = SafeMath.add(totalDistributed,tokenBought);&#13;
    	tokenReward.transfer(msg.sender,tokenBought);&#13;
		TokenBought(msg.sender, tokenBought);&#13;
&#13;
    }&#13;
    /**&#13;
    * @dev Withdraw remaining tokens to an specified address&#13;
    * @param _to address to transfer tokens.&#13;
    */&#13;
    function tokenWithdraw (address _to) onlyAdmin public {&#13;
    	require( _to != 0x0 );&#13;
    	require(tokenReward.balanceOf(this)&gt;0);&#13;
    	uint256 withdraw = tokenReward.balanceOf(this);&#13;
    	tokenReward.transfer(_to,withdraw);&#13;
    	TokenWithdrawal(_to,withdraw);&#13;
    }&#13;
    /**&#13;
    * @dev Withdraw collected ether to ethWallet&#13;
    */&#13;
    function ethWithdraw () onlyAdmin public {&#13;
    	require(this.balance &gt; 0);&#13;
    	uint256 withdraw = this.balance;&#13;
    	currentBalance = 0;&#13;
    	require(ethWallet.send(withdraw));&#13;
    	PayOut(ethWallet,withdraw);&#13;
    }&#13;
    /**&#13;
    * @dev callback function to deal with direct transfers&#13;
    */&#13;
    function () public payable{&#13;
        exchange();&#13;
    }&#13;
}
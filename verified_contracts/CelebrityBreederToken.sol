pragma solidity ^0.4.18; // solhint-disable-line



/// @title Interface for contracts conforming to ERC-721: Non-Fungible Tokens
/// @author Dieter Shirley <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="afcbcadbcaefced7c6c0c2d5cac181ccc0">[emailÂ protected]</a>&gt; (https://github.com/dete)&#13;
contract ERC721 {&#13;
  // Required methods&#13;
  function approve(address _to, uint256 _tokenId) public;&#13;
  function balanceOf(address _owner) public view returns (uint256 balance);&#13;
  function implementsERC721() public pure returns (bool);&#13;
  function ownerOf(uint256 _tokenId) public view returns (address addr);&#13;
  function takeOwnership(uint256 _tokenId) public;&#13;
  function totalSupply() public view returns (uint256 total);&#13;
  function transferFrom(address _from, address _to, uint256 _tokenId) public;&#13;
  function transfer(address _to, uint256 _tokenId) public;&#13;
&#13;
  event Transfer(address indexed from, address indexed to, uint256 tokenId);&#13;
  event Approval(address indexed owner, address indexed approved, uint256 tokenId);&#13;
&#13;
  // Optional&#13;
  // function name() public view returns (string name);&#13;
  // function symbol() public view returns (string symbol);&#13;
  // function tokenOfOwnerByIndex(address _owner, uint256 _index) external view returns (uint256 tokenId);&#13;
  // function tokenMetadata(uint256 _tokenId) public view returns (string infoUrl);&#13;
}&#13;
&#13;
&#13;
contract CelebrityToken is ERC721 {&#13;
&#13;
  /*** EVENTS ***/&#13;
&#13;
  /// @dev The Birth event is fired whenever a new person comes into existence.&#13;
  event Birth(uint256 tokenId, string name, address owner);&#13;
&#13;
  /// @dev The TokenSold event is fired whenever a token is sold.&#13;
  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);&#13;
&#13;
  /// @dev Transfer event as defined in current draft of ERC721. &#13;
  ///  ownership is assigned, including births.&#13;
  event Transfer(address from, address to, uint256 tokenId);&#13;
&#13;
  /*** CONSTANTS ***/&#13;
&#13;
  /// @notice Name and symbol of the non fungible token, as defined in ERC721.&#13;
  string public constant NAME = "CryptoCelebrities"; // solhint-disable-line&#13;
  string public constant SYMBOL = "CelebrityToken"; // solhint-disable-line&#13;
&#13;
  uint256 private startingPrice = 0.001 ether;&#13;
  uint256 private constant PROMO_CREATION_LIMIT = 5000;&#13;
  uint256 private firstStepLimit =  0.053613 ether;&#13;
  uint256 private secondStepLimit = 0.564957 ether;&#13;
&#13;
  /*** STORAGE ***/&#13;
&#13;
  /// @dev A mapping from person IDs to the address that owns them. All persons have&#13;
  ///  some valid owner address.&#13;
  mapping (uint256 =&gt; address) public personIndexToOwner;&#13;
&#13;
  // @dev A mapping from owner address to count of tokens that address owns.&#13;
  //  Used internally inside balanceOf() to resolve ownership count.&#13;
  mapping (address =&gt; uint256) private ownershipTokenCount;&#13;
&#13;
  /// @dev A mapping from PersonIDs to an address that has been approved to call&#13;
  ///  transferFrom(). Each Person can only have one approved address for transfer&#13;
  ///  at any time. A zero value means no approval is outstanding.&#13;
  mapping (uint256 =&gt; address) public personIndexToApproved;&#13;
&#13;
  // @dev A mapping from PersonIDs to the price of the token.&#13;
  mapping (uint256 =&gt; uint256) private personIndexToPrice;&#13;
&#13;
  // The addresses of the accounts (or contracts) that can execute actions within each roles.&#13;
  address public ceoAddress;&#13;
  address public cooAddress;&#13;
&#13;
  uint256 public promoCreatedCount;&#13;
&#13;
  /*** DATATYPES ***/&#13;
  struct Person {&#13;
    string name;&#13;
  }&#13;
&#13;
  Person[] private persons;&#13;
&#13;
  /*** ACCESS MODIFIERS ***/&#13;
  /// @dev Access modifier for CEO-only functionality&#13;
  modifier onlyCEO() {&#13;
    require(msg.sender == ceoAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /// @dev Access modifier for COO-only functionality&#13;
  modifier onlyCOO() {&#13;
    require(msg.sender == cooAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  /// Access modifier for contract owner only functionality&#13;
  modifier onlyCLevel() {&#13;
    require(&#13;
      msg.sender == ceoAddress ||&#13;
      msg.sender == cooAddress&#13;
    );&#13;
    _;&#13;
  }&#13;
&#13;
  /*** CONSTRUCTOR ***/&#13;
  function CelebrityToken() public {&#13;
    ceoAddress = msg.sender;&#13;
    cooAddress = msg.sender;&#13;
  }&#13;
&#13;
  /*** PUBLIC FUNCTIONS ***/&#13;
  /// @notice Grant another address the right to transfer token via takeOwnership() and transferFrom().&#13;
  /// @param _to The address to be granted transfer approval. Pass address(0) to&#13;
  ///  clear all approvals.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function approve(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    // Caller must own token.&#13;
    require(_owns(msg.sender, _tokenId));&#13;
&#13;
    personIndexToApproved[_tokenId] = _to;&#13;
&#13;
    Approval(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  /// For querying balance of a particular account&#13;
  /// @param _owner The address for balance query&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return ownershipTokenCount[_owner];&#13;
  }&#13;
&#13;
  /// @dev Creates a new promo Person with the given name, with given _price and assignes it to an address.&#13;
  function createPromoPerson(address _owner, string _name, uint256 _price) public onlyCOO {&#13;
    require(promoCreatedCount &lt; PROMO_CREATION_LIMIT);&#13;
&#13;
    address personOwner = _owner;&#13;
    if (personOwner == address(0)) {&#13;
      personOwner = cooAddress;&#13;
    }&#13;
&#13;
    if (_price &lt;= 0) {&#13;
      _price = startingPrice;&#13;
    }&#13;
&#13;
    promoCreatedCount++;&#13;
    _createPerson(_name, personOwner, _price);&#13;
  }&#13;
&#13;
  /// @dev Creates a new Person with the given name.&#13;
  function createContractPerson(string _name) public onlyCOO {&#13;
    _createPerson(_name, address(this), startingPrice);&#13;
  }&#13;
&#13;
  /// @notice Returns all the relevant information about a specific person.&#13;
  /// @param _tokenId The tokenId of the person of interest.&#13;
  function getPerson(uint256 _tokenId) public view returns (&#13;
    string personName,&#13;
    uint256 sellingPrice,&#13;
    address owner&#13;
  ) {&#13;
    Person storage person = persons[_tokenId];&#13;
    personName = person.name;&#13;
    sellingPrice = personIndexToPrice[_tokenId];&#13;
    owner = personIndexToOwner[_tokenId];&#13;
  }&#13;
&#13;
  function implementsERC721() public pure returns (bool) {&#13;
    return true;&#13;
  }&#13;
&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function name() public pure returns (string) {&#13;
    return NAME;&#13;
  }&#13;
&#13;
  /// For querying owner of token&#13;
  /// @param _tokenId The tokenID for owner inquiry&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function ownerOf(uint256 _tokenId)&#13;
    public&#13;
    view&#13;
    returns (address owner)&#13;
  {&#13;
    owner = personIndexToOwner[_tokenId];&#13;
    require(owner != address(0));&#13;
  }&#13;
&#13;
  function payout(address _to) public onlyCLevel {&#13;
    _payout(_to);&#13;
  }&#13;
&#13;
  // Allows someone to send ether and obtain the token&#13;
  function purchase(uint256 _tokenId) public payable {&#13;
    address oldOwner = personIndexToOwner[_tokenId];&#13;
    address newOwner = msg.sender;&#13;
&#13;
    uint256 sellingPrice = personIndexToPrice[_tokenId];&#13;
&#13;
    // Making sure token owner is not sending to self&#13;
    require(oldOwner != newOwner);&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure sent amount is greater than or equal to the sellingPrice&#13;
    require(msg.value &gt;= sellingPrice);&#13;
&#13;
    uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 94), 100));&#13;
    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);&#13;
&#13;
    // Update prices&#13;
    if (sellingPrice &lt; firstStepLimit) {&#13;
      // first stage&#13;
      personIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 200), 94);&#13;
    } else if (sellingPrice &lt; secondStepLimit) {&#13;
      // second stage&#13;
      personIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 120), 94);&#13;
    } else {&#13;
      // third stage&#13;
      personIndexToPrice[_tokenId] = SafeMath.div(SafeMath.mul(sellingPrice, 115), 94);&#13;
    }&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
&#13;
    // Pay previous tokenOwner if owner is not contract&#13;
    if (oldOwner != address(this)) {&#13;
      oldOwner.transfer(payment); //(1-0.06)&#13;
    }&#13;
&#13;
    TokenSold(_tokenId, sellingPrice, personIndexToPrice[_tokenId], oldOwner, newOwner, persons[_tokenId].name);&#13;
&#13;
    msg.sender.transfer(purchaseExcess);&#13;
  }&#13;
&#13;
  function priceOf(uint256 _tokenId) public view returns (uint256 price) {&#13;
    return personIndexToPrice[_tokenId];&#13;
  }&#13;
&#13;
  /// @dev Assigns a new address to act as the CEO. Only available to the current CEO.&#13;
  /// @param _newCEO The address of the new CEO&#13;
  function setCEO(address _newCEO) public onlyCEO {&#13;
    require(_newCEO != address(0));&#13;
&#13;
    ceoAddress = _newCEO;&#13;
  }&#13;
&#13;
  /// @dev Assigns a new address to act as the COO. Only available to the current COO.&#13;
  /// @param _newCOO The address of the new COO&#13;
  function setCOO(address _newCOO) public onlyCEO {&#13;
    require(_newCOO != address(0));&#13;
&#13;
    cooAddress = _newCOO;&#13;
  }&#13;
&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function symbol() public pure returns (string) {&#13;
    return SYMBOL;&#13;
  }&#13;
&#13;
  /// @notice Allow pre-approved user to take ownership of a token&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function takeOwnership(uint256 _tokenId) public {&#13;
    address newOwner = msg.sender;&#13;
    address oldOwner = personIndexToOwner[_tokenId];&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure transfer is approved&#13;
    require(_approved(newOwner, _tokenId));&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
  }&#13;
&#13;
  /// @param _owner The owner whose celebrity tokens we are interested in.&#13;
  /// @dev This method MUST NEVER be called by smart contract code. First, it's fairly&#13;
  ///  expensive (it walks the entire Persons array looking for persons belonging to owner),&#13;
  ///  but it also returns a dynamic array, which is only supported for web3 calls, and&#13;
  ///  not contract-to-contract calls.&#13;
  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {&#13;
    uint256 tokenCount = balanceOf(_owner);&#13;
    if (tokenCount == 0) {&#13;
        // Return an empty array&#13;
      return new uint256[](0);&#13;
    } else {&#13;
      uint256[] memory result = new uint256[](tokenCount);&#13;
      uint256 totalPersons = totalSupply();&#13;
      uint256 resultIndex = 0;&#13;
&#13;
      uint256 personId;&#13;
      for (personId = 0; personId &lt;= totalPersons; personId++) {&#13;
        if (personIndexToOwner[personId] == _owner) {&#13;
          result[resultIndex] = personId;&#13;
          resultIndex++;&#13;
        }&#13;
      }&#13;
      return result;&#13;
    }&#13;
  }&#13;
&#13;
  /// For querying totalSupply of token&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function totalSupply() public view returns (uint256 total) {&#13;
    return persons.length;&#13;
  }&#13;
&#13;
  /// Owner initates the transfer of the token to another account&#13;
  /// @param _to The address for the token to be transferred to.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function transfer(&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    require(_owns(msg.sender, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(msg.sender, _to, _tokenId);&#13;
  }&#13;
&#13;
  /// Third-party initiates transfer of token from address _from to address _to&#13;
  /// @param _from The address for the token to be transferred from.&#13;
  /// @param _to The address for the token to be transferred to.&#13;
  /// @param _tokenId The ID of the Token that can be transferred if this call succeeds.&#13;
  /// @dev Required for ERC-721 compliance.&#13;
  function transferFrom(&#13;
    address _from,&#13;
    address _to,&#13;
    uint256 _tokenId&#13;
  ) public {&#13;
    require(_owns(_from, _tokenId));&#13;
    require(_approved(_to, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(_from, _to, _tokenId);&#13;
  }&#13;
&#13;
  /*** PRIVATE FUNCTIONS ***/&#13;
  /// Safety check on _to address to prevent against an unexpected 0x0 default.&#13;
  function _addressNotNull(address _to) private pure returns (bool) {&#13;
    return _to != address(0);&#13;
  }&#13;
&#13;
  /// For checking approval of transfer for address _to&#13;
  function _approved(address _to, uint256 _tokenId) private view returns (bool) {&#13;
    return personIndexToApproved[_tokenId] == _to;&#13;
  }&#13;
&#13;
  /// For creating Person&#13;
  function _createPerson(string _name, address _owner, uint256 _price) private {&#13;
    Person memory _person = Person({&#13;
      name: _name&#13;
    });&#13;
    uint256 newPersonId = persons.push(_person) - 1;&#13;
&#13;
    // It's probably never going to happen, 4 billion tokens are A LOT, but&#13;
    // let's just be 100% sure we never let this happen.&#13;
    require(newPersonId == uint256(uint32(newPersonId)));&#13;
&#13;
    Birth(newPersonId, _name, _owner);&#13;
&#13;
    personIndexToPrice[newPersonId] = _price;&#13;
&#13;
    // This will assign ownership, and also emit the Transfer event as&#13;
    // per ERC721 draft&#13;
    _transfer(address(0), _owner, newPersonId);&#13;
  }&#13;
&#13;
  /// Check for token ownership&#13;
  function _owns(address claimant, uint256 _tokenId) private view returns (bool) {&#13;
    return claimant == personIndexToOwner[_tokenId];&#13;
  }&#13;
&#13;
  /// For paying out balance on contract&#13;
  function _payout(address _to) private {&#13;
    if (_to == address(0)) {&#13;
      ceoAddress.transfer(this.balance);&#13;
    } else {&#13;
      _to.transfer(this.balance);&#13;
    }&#13;
  }&#13;
&#13;
  /// @dev Assigns ownership of a specific Person to an address.&#13;
  function _transfer(address _from, address _to, uint256 _tokenId) private {&#13;
    // Since the number of persons is capped to 2^32 we can't overflow this&#13;
    ownershipTokenCount[_to]++;&#13;
    //transfer ownership&#13;
    personIndexToOwner[_tokenId] = _to;&#13;
&#13;
    // When creating new persons _from is 0x0, but we can't account that address.&#13;
    if (_from != address(0)) {&#13;
      ownershipTokenCount[_from]--;&#13;
      // clear any previously approved ownership exchange&#13;
      delete personIndexToApproved[_tokenId];&#13;
    }&#13;
&#13;
    // Emit the transfer event.&#13;
    Transfer(_from, _to, _tokenId);&#13;
  }&#13;
}&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    if (a == 0) {&#13;
      return 0;&#13;
    }&#13;
    uint256 c = a * b;&#13;
    assert(c / a == b);&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
  function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
    uint256 c = a / b;&#13;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
    return c;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Substracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    assert(b &lt;= a);&#13;
    return a - b;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
  function add(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
    uint256 c = a + b;&#13;
    assert(c &gt;= a);&#13;
    return c;&#13;
  }&#13;
}&#13;
&#13;
/// @author Artyom Harutyunyan &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="056477717c6a686d647770717c706b7c646b76456268646c692b666a68">[emailÂ protected]</a>&gt;&#13;
&#13;
contract CelebrityBreederToken is ERC721 {&#13;
  &#13;
   /// @dev The Birth event is fired whenever a new person comes into existence.&#13;
  event Birth(uint256 tokenId, string name, address owner);&#13;
&#13;
  /// @dev The TokenSold event is fired whenever a token is sold.&#13;
  event TokenSold(uint256 tokenId, uint256 oldPrice, uint256 newPrice, address prevOwner, address winner, string name);&#13;
&#13;
  /// @dev Transfer event as defined in current draft of ERC721. &#13;
  ///  ownership is assigned, including births.&#13;
  event Transfer(address from, address to, uint256 tokenId);&#13;
  event Trained(address caller, uint256 tokenId, bool generation);&#13;
  event Beaten(address caller, uint256 tokenId, bool generation);&#13;
  event SiringPriceEvent(address caller, uint256 tokenId, bool generation, uint price);&#13;
  event SellingPriceEvent(address caller, uint256 tokenId, bool generation, uint price);&#13;
  event GenesInitialisedEvent(address caller, uint256 tokenId, bool generation, uint genes);&#13;
  &#13;
  CelebrityToken private CelGen0=CelebrityToken(0xbb5Ed1EdeB5149AF3ab43ea9c7a6963b3C1374F7); //@Artyom Pointing to original CC&#13;
  &#13;
  string public constant NAME = "CryptoCelebrityBreederCards"; &#13;
  string public constant SYMBOL = "CeleBreedCard"; &#13;
&#13;
  uint256 public breedingFee = 0.01 ether;&#13;
  uint256 public initialTraining = 0.00001 ether;&#13;
  uint256 public initialBeating = 0.00002 ether;&#13;
  uint256 private constant CreationLimitGen0 = 5000;&#13;
  uint256 private constant CreationLimitGen1 = 2500000;&#13;
  uint256 public constant MaxValue =  100000000 ether;&#13;
  &#13;
  mapping (uint256 =&gt; address) public personIndexToOwnerGen1;&#13;
  mapping (address =&gt; uint256) private ownershipTokenCountGen1;&#13;
  mapping (uint256 =&gt; address) public personIndexToApprovedGen1;&#13;
  mapping (uint256 =&gt; uint256) private personIndexToPriceGen1;&#13;
  mapping (uint256 =&gt; address) public ExternalAllowdContractGen0;&#13;
  mapping (uint256 =&gt; address) public ExternalAllowdContractGen1; &#13;
  mapping (uint256 =&gt; uint256) public personIndexToSiringPrice0;&#13;
  mapping (uint256 =&gt; uint256) public personIndexToSiringPrice1;&#13;
  address public CeoAddress; &#13;
  address public DevAddress;&#13;
  &#13;
   struct Person {&#13;
    string name;&#13;
    string surname; &#13;
    uint64 genes; &#13;
    uint64 birthTime;&#13;
    uint32 fatherId;&#13;
    uint32 motherId;&#13;
    uint32 readyToBreedWithId;&#13;
    uint32 trainedcount;&#13;
    uint32 beatencount;&#13;
    bool readyToBreedWithGen;&#13;
    bool gender;&#13;
    bool fatherGeneration;&#13;
    bool motherGeneration;&#13;
  }&#13;
  &#13;
  Person[] private PersonsGen0;&#13;
  Person[] private PersonsGen1;&#13;
  &#13;
    modifier onlyCEO() {&#13;
    require(msg.sender == CeoAddress);&#13;
    _;&#13;
  }&#13;
&#13;
  modifier onlyDEV() {&#13;
    require(msg.sender == DevAddress);&#13;
    _;&#13;
  }&#13;
  &#13;
   modifier onlyPlayers() {&#13;
    require(ownershipTokenCountGen1[msg.sender]&gt;0 || CelGen0.balanceOf(msg.sender)&gt;0);&#13;
    _;&#13;
  }&#13;
&#13;
  /// Access modifier for contract owner only functionality&#13;
 /* modifier onlyTopLevel() {&#13;
    require(&#13;
      msg.sender == CeoAddress ||&#13;
      msg.sender == DevAddress&#13;
    );&#13;
    _;&#13;
  }&#13;
  */&#13;
  function CelebrityBreederToken() public { &#13;
      CeoAddress= msg.sender;&#13;
      DevAddress= msg.sender;&#13;
  }&#13;
    function setBreedingFee(uint256 newfee) external onlyCEO{&#13;
      breedingFee=newfee;&#13;
  }&#13;
  function allowexternalContract(address _to, uint256 _tokenId,bool _tokengeneration) public { &#13;
    // Caller must own token.&#13;
    require(_owns(msg.sender, _tokenId, _tokengeneration));&#13;
    &#13;
    if(_tokengeneration) {&#13;
        if(_addressNotNull(_to)) {&#13;
            ExternalAllowdContractGen1[_tokenId]=_to;&#13;
        }&#13;
        else {&#13;
             delete ExternalAllowdContractGen1[_tokenId];&#13;
        }&#13;
    }&#13;
    else {&#13;
       if(_addressNotNull(_to)) {&#13;
            ExternalAllowdContractGen0[_tokenId]=_to;&#13;
        }&#13;
        else {&#13;
             delete ExternalAllowdContractGen0[_tokenId];&#13;
        }&#13;
    }&#13;
&#13;
  }&#13;
  &#13;
  &#13;
  //@Artyom Required for ERC-721 compliance.&#13;
  function approve(address _to, uint256 _tokenId) public { //@Artyom only gen1&#13;
    // Caller must own token.&#13;
    require(_owns(msg.sender, _tokenId, true));&#13;
&#13;
    personIndexToApprovedGen1[_tokenId] = _to;&#13;
&#13;
    Approval(msg.sender, _to, _tokenId);&#13;
  }&#13;
  // @Artyom Required for ERC-721 compliance.&#13;
  //@Artyom only gen1&#13;
   function balanceOf(address _owner) public view returns (uint256 balance) {&#13;
    return ownershipTokenCountGen1[_owner];&#13;
  }&#13;
  &#13;
    function getPerson(uint256 _tokenId,bool generation) public view returns ( string name, string surname, uint64 genes,uint64 birthTime, uint32 readyToBreedWithId, uint32 trainedcount,uint32 beatencount,bool readyToBreedWithGen, bool gender) {&#13;
    Person person;&#13;
    if(generation==false) {&#13;
        person = PersonsGen0[_tokenId];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[_tokenId];&#13;
    }&#13;
         &#13;
    name = person.name;&#13;
    surname=person.surname;&#13;
    genes=person.genes;&#13;
    birthTime=person.birthTime;&#13;
    readyToBreedWithId=person.readyToBreedWithId;&#13;
    trainedcount=person.trainedcount;&#13;
    beatencount=person.beatencount;&#13;
    readyToBreedWithGen=person.readyToBreedWithGen;&#13;
    gender=person.gender;&#13;
&#13;
  }&#13;
   function getPersonParents(uint256 _tokenId, bool generation) public view returns ( uint32 fatherId, uint32 motherId, bool fatherGeneration, bool motherGeneration) {&#13;
    Person person;&#13;
    if(generation==false) {&#13;
        person = PersonsGen0[_tokenId];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[_tokenId];&#13;
    }&#13;
         &#13;
    fatherId=person.fatherId;&#13;
    motherId=person.motherId;&#13;
    fatherGeneration=person.fatherGeneration;&#13;
    motherGeneration=person.motherGeneration;&#13;
  }&#13;
  // @Artyom Required for ERC-721 compliance.&#13;
   function implementsERC721() public pure returns (bool) { &#13;
    return true;&#13;
  }&#13;
&#13;
  // @Artyom Required for ERC-721 compliance.&#13;
  function name() public pure returns (string) {&#13;
    return NAME;&#13;
  }&#13;
&#13;
// @Artyom Required for ERC-721 compliance.&#13;
  function ownerOf(uint256 _tokenId) public view returns (address owner)&#13;
  {&#13;
    owner = personIndexToOwnerGen1[_tokenId];&#13;
    require(_addressNotNull(owner));&#13;
  }&#13;
  &#13;
  //@Artyom only gen1&#13;
   function purchase(uint256 _tokenId) public payable {&#13;
    address oldOwner = personIndexToOwnerGen1[_tokenId];&#13;
    address newOwner = msg.sender;&#13;
&#13;
    uint256 sellingPrice = personIndexToPriceGen1[_tokenId];&#13;
    personIndexToPriceGen1[_tokenId]=MaxValue;&#13;
&#13;
    // Making sure token owner is not sending to self&#13;
    require(oldOwner != newOwner);&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure sent amount is greater than or equal to the sellingPrice&#13;
    require(msg.value &gt;= sellingPrice);&#13;
&#13;
   // uint256 payment = uint256(SafeMath.div(SafeMath.mul(sellingPrice, 94), 100));&#13;
    uint256 purchaseExcess = SafeMath.sub(msg.value, sellingPrice);&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
&#13;
    // Pay previous tokenOwner if owner is not contract&#13;
    if (oldOwner != address(this)) {&#13;
    //  oldOwner.transfer(payment); //(1-0.06) //old code for holding some percents&#13;
    oldOwner.transfer(sellingPrice);&#13;
    }&#13;
    blankbreedingdata(_tokenId,true);&#13;
&#13;
    TokenSold(_tokenId, sellingPrice, personIndexToPriceGen1[_tokenId], oldOwner, newOwner, PersonsGen1[_tokenId].name);&#13;
&#13;
    msg.sender.transfer(purchaseExcess);&#13;
  }&#13;
  &#13;
   //@Artyom only gen1&#13;
   function priceOf(uint256 _tokenId) public view returns (uint256 price) {&#13;
    return personIndexToPriceGen1[_tokenId];&#13;
  }&#13;
&#13;
 &#13;
  function setCEO(address _newCEO) external onlyCEO {&#13;
    require(_addressNotNull(_newCEO));&#13;
&#13;
    CeoAddress = _newCEO;&#13;
  }&#13;
&#13;
 //@Artyom only gen1&#13;
 function setprice(uint256 _tokenId, uint256 _price) public {&#13;
    require(_owns(msg.sender, _tokenId, true));&#13;
    if(_price&lt;=0 || _price&gt;=MaxValue) {&#13;
        personIndexToPriceGen1[_tokenId]=MaxValue;&#13;
    }&#13;
    else {&#13;
        personIndexToPriceGen1[_tokenId]=_price;&#13;
    }&#13;
    SellingPriceEvent(msg.sender,_tokenId,true,_price);&#13;
 }&#13;
 &#13;
  function setDEV(address _newDEV) external onlyDEV {&#13;
    require(_addressNotNull(_newDEV));&#13;
&#13;
    DevAddress = _newDEV;&#13;
  }&#13;
  &#13;
    // @Artyom Required for ERC-721 compliance.&#13;
  function symbol() public pure returns (string) {&#13;
    return SYMBOL;&#13;
  }&#13;
&#13;
&#13;
  // @Artyom Required for ERC-721 compliance.&#13;
   //@Artyom only gen1&#13;
  function takeOwnership(uint256 _tokenId) public {&#13;
    address newOwner = msg.sender;&#13;
    address oldOwner = personIndexToOwnerGen1[_tokenId];&#13;
&#13;
    // Safety check to prevent against an unexpected 0x0 default.&#13;
    require(_addressNotNull(newOwner));&#13;
&#13;
    // Making sure transfer is approved&#13;
    require(_approvedGen1(newOwner, _tokenId));&#13;
&#13;
    _transfer(oldOwner, newOwner, _tokenId);&#13;
  }&#13;
  &#13;
  //@Artyom only gen1&#13;
  function tokensOfOwner(address _owner) public view returns(uint256[] ownerTokens) {&#13;
    uint256 tokenCount = balanceOf(_owner);&#13;
    if (tokenCount == 0) {&#13;
        // Return an empty array&#13;
      return new uint256[](0);&#13;
    } &#13;
    else {&#13;
      uint256[] memory result = new uint256[](tokenCount);&#13;
      uint256 totalPersons = totalSupply();&#13;
      uint256 resultIndex = 0;&#13;
&#13;
      uint256 personId;&#13;
      for (personId = 0; personId &lt;= totalPersons; personId++) {&#13;
        if (personIndexToOwnerGen1[personId] == _owner) {&#13;
          result[resultIndex] = personId;&#13;
          resultIndex++;&#13;
        }&#13;
      }&#13;
      return result;&#13;
    }&#13;
  }&#13;
  &#13;
   // @Artyom Required for ERC-721 compliance.&#13;
   //@Artyom only gen1&#13;
   function totalSupply() public view returns (uint256 total) {&#13;
    return PersonsGen1.length;&#13;
  }&#13;
&#13;
   // @Artyom Required for ERC-721 compliance.&#13;
   //@Artyom only gen1&#13;
  function transfer( address _to, uint256 _tokenId) public {&#13;
    require(_owns(msg.sender, _tokenId, true));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(msg.sender, _to, _tokenId);&#13;
  }&#13;
  &#13;
   // @Artyom Required for ERC-721 compliance.&#13;
   //@Artyom only gen1&#13;
    function transferFrom(address _from, address _to, uint256 _tokenId) public {&#13;
    require(_owns(_from, _tokenId, true));&#13;
    require(_approvedGen1(_to, _tokenId));&#13;
    require(_addressNotNull(_to));&#13;
&#13;
    _transfer(_from, _to, _tokenId);&#13;
  }&#13;
  &#13;
   function _addressNotNull(address _to) private pure returns (bool) {&#13;
    return _to != address(0);&#13;
  }&#13;
&#13;
  /// For checking approval of transfer for address _to&#13;
  function _approvedGen1(address _to, uint256 _tokenId) private view returns (bool) {&#13;
    return personIndexToApprovedGen1[_tokenId] == _to;&#13;
  }&#13;
  //@Artyom only gen0&#13;
   function createPersonGen0(string _name, string _surname,uint64 _genes, bool _gender) external onlyCEO returns(uint256) {&#13;
    return _birthPerson(_name, _surname ,_genes, _gender, false);&#13;
  }&#13;
  function SetGene(uint256 tokenId,bool generation, uint64 newgene) public {&#13;
     require(_owns(msg.sender, tokenId, generation) || msg.sender==CeoAddress);&#13;
     require(newgene&lt;=9999999999 &amp;&amp; newgene&gt;=10);&#13;
     Person person; //@Artyom reference&#13;
    if (generation==false) { &#13;
        person = PersonsGen0[tokenId];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[tokenId];&#13;
    }&#13;
    require(person.genes&lt;=90);&#13;
     &#13;
    uint64 _gene=newgene;&#13;
    uint64 _pointCount=0;&#13;
   &#13;
   &#13;
      for(uint i=0;i&lt;10;i++) {&#13;
           _pointCount+=_gene%10;&#13;
           _gene=_gene/10;&#13;
      }&#13;
    //  log(_pointCount,person.genes);&#13;
    require(_pointCount==person.genes);&#13;
           &#13;
    person.genes=newgene;&#13;
    GenesInitialisedEvent(msg.sender,tokenId,generation,newgene);&#13;
}&#13;
 &#13;
   function breed(uint256 _mypersonid, bool _mypersongeneration, uint256 _withpersonid, bool  _withpersongeneration, string _boyname, string _girlname) public payable { //@Artyom mother&#13;
       require(_owns(msg.sender, _mypersonid, _mypersongeneration));&#13;
       require(CreationLimitGen1&gt;totalSupply()+1);&#13;
    &#13;
    //Mother&#13;
    Person person; //@Artyom reference&#13;
    if(_mypersongeneration==false) { &#13;
        person = PersonsGen0[_mypersonid];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[_mypersonid];&#13;
        require(person.gender==false); //@Artyom checking gender for gen1 to be mother in this case&#13;
    }&#13;
&#13;
    require(person.genes&gt;90);//@Artyom if its unlocked&#13;
    &#13;
    uint64 genes1=person.genes;&#13;
    //Father&#13;
        if(_withpersongeneration==false) { &#13;
        person = PersonsGen0[_withpersonid];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[_withpersonid];&#13;
       &#13;
    }&#13;
     &#13;
   &#13;
     require(readyTobreed(_mypersonid, _mypersongeneration, _withpersonid,  _withpersongeneration));&#13;
     require(breedingFee&lt;=msg.value);&#13;
   &#13;
    &#13;
    delete person.readyToBreedWithId;&#13;
    person.readyToBreedWithGen=false;&#13;
    &#13;
   // uint64 genes2=person.genes;&#13;
    &#13;
       uint64 _generatedGen;&#13;
       bool _gender; &#13;
       (_generatedGen,_gender)=_generateGene(genes1,person.genes,_mypersonid,_withpersonid); &#13;
       &#13;
     if(_gender) {&#13;
       _girlname=_boyname; //@Artyom if gender is true/1 then it should take the boyname&#13;
     }&#13;
       uint newid=_birthPerson(_girlname, person.surname, _generatedGen, _gender, true);&#13;
            PersonsGen1[newid].fatherGeneration=_withpersongeneration; // @ Artyom, did here because stack too deep for function&#13;
            PersonsGen1[newid].motherGeneration=_mypersongeneration;&#13;
            PersonsGen1[newid].fatherId=uint32(_withpersonid); &#13;
            PersonsGen1[newid].motherId=uint32(_mypersonid);&#13;
        &#13;
        &#13;
       _payout();&#13;
  }&#13;
  &#13;
    function breedOnAuction(uint256 _mypersonid, bool _mypersongeneration, uint256 _withpersonid, bool  _withpersongeneration, string _boyname, string _girlname) public payable { //@Artyom mother&#13;
       require(_owns(msg.sender, _mypersonid, _mypersongeneration));&#13;
       require(CreationLimitGen1&gt;totalSupply()+1);&#13;
       require(!(_mypersonid==_withpersonid &amp;&amp; _mypersongeneration==_withpersongeneration));// @Artyom not to breed with self&#13;
       require(!((_mypersonid==0 &amp;&amp; _mypersongeneration==false) || (_withpersonid==0 &amp;&amp; _withpersongeneration==false))); //Not to touch Satoshi&#13;
    //Mother&#13;
    Person person; //@Artyom reference&#13;
    if(_mypersongeneration==false) { &#13;
        person = PersonsGen0[_mypersonid];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[_mypersonid];&#13;
        require(person.gender==false); //@Artyom checking gender for gen1 to be mother in this case&#13;
    }&#13;
    &#13;
    require(person.genes&gt;90);//@Artyom if its unlocked&#13;
    &#13;
    address owneroffather;&#13;
    uint256 _siringprice;&#13;
    uint64 genes1=person.genes;&#13;
    //Father&#13;
        if(_withpersongeneration==false) { &#13;
        person = PersonsGen0[_withpersonid];&#13;
        _siringprice=personIndexToSiringPrice0[_withpersonid];&#13;
        owneroffather=CelGen0.ownerOf(_withpersonid);&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[_withpersonid];&#13;
        _siringprice=personIndexToSiringPrice1[_withpersonid];&#13;
        owneroffather= personIndexToOwnerGen1[_withpersonid];&#13;
    }&#13;
     &#13;
   require(_siringprice&gt;0 &amp;&amp; _siringprice&lt;MaxValue);&#13;
   require((breedingFee+_siringprice)&lt;=msg.value);&#13;
    &#13;
    &#13;
//    uint64 genes2=;&#13;
    &#13;
       uint64 _generatedGen;&#13;
       bool _gender; &#13;
       (_generatedGen,_gender)=_generateGene(genes1,person.genes,_mypersonid,_withpersonid); &#13;
       &#13;
     if(_gender) {&#13;
       _girlname=_boyname; //@Artyom if gender is true/1 then it should take the boyname&#13;
     }&#13;
       uint newid=_birthPerson(_girlname, person.surname, _generatedGen, _gender, true);&#13;
            PersonsGen1[newid].fatherGeneration=_withpersongeneration; // @ Artyom, did here because stack too deep for function&#13;
            PersonsGen1[newid].motherGeneration=_mypersongeneration;&#13;
            PersonsGen1[newid].fatherId=uint32(_withpersonid); &#13;
            PersonsGen1[newid].motherId=uint32(_mypersonid);&#13;
        &#13;
        &#13;
        owneroffather.transfer(_siringprice);&#13;
       _payout();&#13;
  }&#13;
 &#13;
  &#13;
  &#13;
  function prepareToBreed(uint256 _mypersonid, bool _mypersongeneration, uint256 _withpersonid, bool _withpersongeneration, uint256 _siringprice) external { //@Artyom father&#13;
      require(_owns(msg.sender, _mypersonid, _mypersongeneration)); &#13;
      &#13;
       Person person; //@Artyom reference&#13;
    if(_mypersongeneration==false) {&#13;
        person = PersonsGen0[_mypersonid];&#13;
        personIndexToSiringPrice0[_mypersonid]=_siringprice;&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[_mypersonid];&#13;
        &#13;
        require(person.gender==true);//@Artyom for gen1 checking genders to be male&#13;
        personIndexToSiringPrice1[_mypersonid]=_siringprice;&#13;
    }&#13;
      require(person.genes&gt;90);//@Artyom if its unlocked&#13;
&#13;
       person.readyToBreedWithId=uint32(_withpersonid); &#13;
       person.readyToBreedWithGen=_withpersongeneration;&#13;
       SiringPriceEvent(msg.sender,_mypersonid,_mypersongeneration,_siringprice);&#13;
      &#13;
  }&#13;
  &#13;
  function readyTobreed(uint256 _mypersonid, bool _mypersongeneration, uint256 _withpersonid, bool _withpersongeneration) public view returns(bool) {&#13;
&#13;
if (_mypersonid==_withpersonid &amp;&amp; _mypersongeneration==_withpersongeneration) //Not to fuck Themselves &#13;
return false;&#13;
&#13;
if((_mypersonid==0 &amp;&amp; _mypersongeneration==false) || (_withpersonid==0 &amp;&amp; _withpersongeneration==false)) //Not to touch Satoshi&#13;
return false;&#13;
&#13;
    Person withperson; //@Artyom reference&#13;
    if(_withpersongeneration==false) {&#13;
        withperson = PersonsGen0[_withpersonid];&#13;
    }&#13;
    else {&#13;
        withperson = PersonsGen1[_withpersonid];&#13;
    }&#13;
   &#13;
   &#13;
   if(withperson.readyToBreedWithGen==_mypersongeneration) {&#13;
       if(withperson.readyToBreedWithId==_mypersonid) {&#13;
       return true;&#13;
   }&#13;
   }&#13;
  &#13;
    &#13;
    return false;&#13;
    &#13;
  }&#13;
  function _birthPerson(string _name, string _surname, uint64 _genes, bool _gender, bool _generation) private returns(uint256) { // about this steps   &#13;
    Person memory _person = Person({&#13;
        name: _name,&#13;
        surname: _surname,&#13;
        genes: _genes,&#13;
        birthTime: uint64(now),&#13;
        fatherId: 0,&#13;
        motherId: 0,&#13;
        readyToBreedWithId: 0,&#13;
        trainedcount: 0,&#13;
        beatencount: 0,&#13;
        readyToBreedWithGen: false,&#13;
        gender: _gender,&#13;
        fatherGeneration: false,&#13;
        motherGeneration: false&#13;
&#13;
        &#13;
    });&#13;
    &#13;
    uint256 newPersonId;&#13;
    if(_generation==false) {&#13;
         newPersonId = PersonsGen0.push(_person) - 1;&#13;
    }&#13;
    else {&#13;
         newPersonId = PersonsGen1.push(_person) - 1;&#13;
         personIndexToPriceGen1[newPersonId] = MaxValue; //@Artyom indicating not for sale&#13;
          // per ERC721 draft-This will assign ownership, and also emit the Transfer event as&#13;
        _transfer(address(0), msg.sender, newPersonId);&#13;
        &#13;
&#13;
    }&#13;
&#13;
    Birth(newPersonId, _name, msg.sender);&#13;
    return newPersonId;&#13;
  }&#13;
  function _generateGene(uint64 _genes1,uint64 _genes2,uint256 _mypersonid,uint256 _withpersonid) private returns(uint64,bool) {&#13;
       uint64 _gene;&#13;
       uint64 _gene1;&#13;
       uint64 _gene2;&#13;
       uint64 _rand;&#13;
       uint256 _finalGene=0;&#13;
       bool gender=false;&#13;
&#13;
       for(uint i=0;i&lt;10;i++) {&#13;
           _gene1 =_genes1%10;&#13;
           _gene2=_genes2%10;&#13;
           _genes1=_genes1/10;&#13;
           _genes2=_genes2/10;&#13;
           _rand=uint64(keccak256(block.blockhash(block.number), i, now,_mypersonid,_withpersonid))%10000;&#13;
           &#13;
           if(_gene1&gt;=_gene2) {&#13;
               _gene=_gene1-_gene2;&#13;
           }&#13;
           else {&#13;
               _gene=_gene2-_gene1;&#13;
           }&#13;
           &#13;
           if(_rand&lt;26) {&#13;
               _gene-=3;&#13;
           }&#13;
            else if(_rand&lt;455) {&#13;
                _gene-=2;&#13;
           }&#13;
            else if(_rand&lt;3173) {&#13;
                _gene-=1;&#13;
           }&#13;
            else if(_rand&lt;6827) {&#13;
                &#13;
           }&#13;
            else if(_rand&lt;9545) {&#13;
                _gene+=1;&#13;
           }&#13;
            else if(_rand&lt;9974) {&#13;
                _gene+=2;&#13;
           }&#13;
            else if(_rand&lt;1000) {&#13;
                _gene+=3;&#13;
           }&#13;
           &#13;
           if(_gene&gt;12) //@Artyom to avoid negative overflow&#13;
           _gene=0;&#13;
           if(_gene&gt;9)&#13;
           _gene=9;&#13;
           &#13;
           _finalGene+=(uint(10)**i)*_gene;&#13;
       }&#13;
      &#13;
      if(uint64(keccak256(block.blockhash(block.number), 11, now,_mypersonid,_withpersonid))%2&gt;0)&#13;
      gender=true;&#13;
      &#13;
      return(uint64(_finalGene),gender);  &#13;
  } &#13;
  function _owns(address claimant, uint256 _tokenId,bool _tokengeneration) private view returns (bool) {&#13;
   if(_tokengeneration) {&#13;
        return ((claimant == personIndexToOwnerGen1[_tokenId]) || (claimant==ExternalAllowdContractGen1[_tokenId]));&#13;
   }&#13;
   else {&#13;
       return ((claimant == CelGen0.personIndexToOwner(_tokenId)) || (claimant==ExternalAllowdContractGen0[_tokenId]));&#13;
   }&#13;
  }&#13;
      &#13;
  function _payout() private {&#13;
    DevAddress.transfer((this.balance/10)*3);&#13;
    CeoAddress.transfer((this.balance/10)*7); &#13;
  }&#13;
  &#13;
   // @Artyom Required for ERC-721 compliance.&#13;
   //@Artyom only gen1&#13;
   function _transfer(address _from, address _to, uint256 _tokenId) private {&#13;
    // Since the number of persons is capped to 2^32 we can't overflow this&#13;
    ownershipTokenCountGen1[_to]++;&#13;
    //transfer ownership&#13;
    personIndexToOwnerGen1[_tokenId] = _to;&#13;
&#13;
    // When creating new persons _from is 0x0, but we can't account that address.&#13;
    if (_addressNotNull(_from)) {&#13;
      ownershipTokenCountGen1[_from]--;&#13;
      // clear any previously approved ownership exchange&#13;
     blankbreedingdata(_tokenId,true);&#13;
    }&#13;
&#13;
    // Emit the transfer event.&#13;
    Transfer(_from, _to, _tokenId);&#13;
  }&#13;
  function blankbreedingdata(uint256 _personid, bool _persongeneration) private{&#13;
      Person person;&#13;
      if(_persongeneration==false) { &#13;
        person = PersonsGen0[_personid];&#13;
        delete ExternalAllowdContractGen0[_personid];&#13;
        delete personIndexToSiringPrice0[_personid];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[_personid];&#13;
        delete ExternalAllowdContractGen1[_personid];&#13;
        delete personIndexToSiringPrice1[_personid];&#13;
    	delete personIndexToApprovedGen1[_personid];&#13;
    }&#13;
     delete person.readyToBreedWithId;&#13;
     delete person.readyToBreedWithGen; &#13;
  }&#13;
    function train(uint256 personid, bool persongeneration, uint8 gene) external payable onlyPlayers {&#13;
        &#13;
        require(gene&gt;=0 &amp;&amp; gene&lt;10);&#13;
        uint256 trainingPrice=checkTrainingPrice(personid,persongeneration);&#13;
        require(msg.value &gt;= trainingPrice);&#13;
         Person person; &#13;
    if(persongeneration==false) {&#13;
        person = PersonsGen0[personid];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[personid];&#13;
    }&#13;
    &#13;
     require(person.genes&gt;90);//@Artyom if its unlocked&#13;
     uint gensolo=person.genes/(uint(10)**gene);&#13;
    gensolo=gensolo%10;&#13;
    require(gensolo&lt;9); //@Artyom not to train after 9&#13;
    &#13;
          person.genes+=uint64(10)**gene;&#13;
          person.trainedcount++;&#13;
&#13;
    uint256 purchaseExcess = SafeMath.sub(msg.value, trainingPrice);&#13;
    msg.sender.transfer(purchaseExcess);&#13;
    _payout();&#13;
    Trained(msg.sender, personid, persongeneration);&#13;
    }&#13;
    &#13;
     function beat(uint256 personid, bool persongeneration, uint8 gene) external payable onlyPlayers {&#13;
        require(gene&gt;=0 &amp;&amp; gene&lt;10);&#13;
        uint256 beatingPrice=checkBeatingPrice(personid,persongeneration);&#13;
        require(msg.value &gt;= beatingPrice);&#13;
         Person person; &#13;
    if(persongeneration==false) {&#13;
        person = PersonsGen0[personid];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[personid];&#13;
    }&#13;
    &#13;
    require(person.genes&gt;90);//@Artyom if its unlocked&#13;
    uint gensolo=person.genes/(uint(10)**gene);&#13;
    gensolo=gensolo%10;&#13;
    require(gensolo&gt;0);&#13;
          person.genes-=uint64(10)**gene;&#13;
          person.beatencount++;&#13;
&#13;
    uint256 purchaseExcess = SafeMath.sub(msg.value, beatingPrice);&#13;
    msg.sender.transfer(purchaseExcess);&#13;
    _payout();&#13;
    Beaten(msg.sender, personid, persongeneration);    &#13;
    }&#13;
    &#13;
    &#13;
    function checkTrainingPrice(uint256 personid, bool persongeneration) view returns (uint256) {&#13;
         Person person;&#13;
    if(persongeneration==false) {&#13;
        person = PersonsGen0[personid];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[personid];&#13;
    }&#13;
    &#13;
    uint256 _trainingprice= (uint(2)**person.trainedcount) * initialTraining;&#13;
    if (_trainingprice &gt; 5 ether)&#13;
    _trainingprice=5 ether;&#13;
    &#13;
    return _trainingprice;&#13;
    }&#13;
    function checkBeatingPrice(uint256 personid, bool persongeneration) view returns (uint256) {&#13;
         Person person;&#13;
    if(persongeneration==false) {&#13;
        person = PersonsGen0[personid];&#13;
    }&#13;
    else {&#13;
        person = PersonsGen1[personid];&#13;
    }&#13;
    uint256 _beatingprice=(uint(2)**person.beatencount) * initialBeating;&#13;
     if (_beatingprice &gt; 7 ether)&#13;
    _beatingprice=7 ether;&#13;
    return _beatingprice;&#13;
    } &#13;
  &#13;
}
pragma solidity ^0.4.24;

// File: openzeppelin-solidity/contracts/math/SafeMath.sol

/**
 * @title SafeMath
 * @dev Math operations with safety checks that revert on error
 */
library SafeMath {

  /**
  * @dev Multiplies two numbers, reverts on overflow.
  */
  function mul(uint256 a, uint256 b) internal pure returns (uint256) {
    // Gas optimization: this is cheaper than requiring 'a' not being zero, but the
    // benefit is lost if 'b' is also tested.
    // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522
    if (a == 0) {
      return 0;
    }

    uint256 c = a * b;
    require(c / a == b);

    return c;
  }

  /**
  * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.
  */
  function div(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b > 0); // Solidity only automatically asserts when dividing by 0
    uint256 c = a / b;
    // assert(a == b * c + a % b); // There is no case in which this doesn't hold

    return c;
  }

  /**
  * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).
  */
  function sub(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b <= a);
    uint256 c = a - b;

    return c;
  }

  /**
  * @dev Adds two numbers, reverts on overflow.
  */
  function add(uint256 a, uint256 b) internal pure returns (uint256) {
    uint256 c = a + b;
    require(c >= a);

    return c;
  }

  /**
  * @dev Divides two numbers and returns the remainder (unsigned integer modulo),
  * reverts when dividing by zero.
  */
  function mod(uint256 a, uint256 b) internal pure returns (uint256) {
    require(b != 0);
    return a % b;
  }
}

// File: openzeppelin-solidity/contracts/token/ERC20/IERC20.sol

/**
 * @title ERC20 interface
 * @dev see https://github.com/ethereum/EIPs/issues/20
 */
interface IERC20 {
  function totalSupply() external view returns (uint256);

  function balanceOf(address who) external view returns (uint256);

  function allowance(address owner, address spender)
    external view returns (uint256);

  function transfer(address to, uint256 value) external returns (bool);

  function approve(address spender, uint256 value)
    external returns (bool);

  function transferFrom(address from, address to, uint256 value)
    external returns (bool);

  event Transfer(
    address indexed from,
    address indexed to,
    uint256 value
  );

  event Approval(
    address indexed owner,
    address indexed spender,
    uint256 value
  );
}

// File: openzeppelin-solidity/contracts/token/ERC20/SafeERC20.sol

/**
 * @title SafeERC20
 * @dev Wrappers around ERC20 operations that throw on failure.
 * To use this library you can add a `using SafeERC20 for ERC20;` statement to your contract,
 * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.
 */
library SafeERC20 {

  using SafeMath for uint256;

  function safeTransfer(
    IERC20 token,
    address to,
    uint256 value
  )
    internal
  {
    require(token.transfer(to, value));
  }

  function safeTransferFrom(
    IERC20 token,
    address from,
    address to,
    uint256 value
  )
    internal
  {
    require(token.transferFrom(from, to, value));
  }

  function safeApprove(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    // safeApprove should only be called when setting an initial allowance, 
    // or when resetting it to zero. To increase and decrease it, use 
    // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'
    require((value == 0) || (token.allowance(msg.sender, spender) == 0));
    require(token.approve(spender, value));
  }

  function safeIncreaseAllowance(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    uint256 newAllowance = token.allowance(address(this), spender).add(value);
    require(token.approve(spender, newAllowance));
  }

  function safeDecreaseAllowance(
    IERC20 token,
    address spender,
    uint256 value
  )
    internal
  {
    uint256 newAllowance = token.allowance(address(this), spender).sub(value);
    require(token.approve(spender, newAllowance));
  }
}

// File: openzeppelin-solidity/contracts/utils/ReentrancyGuard.sol

/**
 * @title Helps contracts guard against reentrancy attacks.
 * @author Remco Bloemen <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9fedfaf2fcf0dfad">[email protected]</a>π.com&gt;, Eenae &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="aecfc2cbd6cbd7eec3c7d6ccd7dacbdd80c7c1">[email protected]</a>&gt;&#13;
 * @dev If you mark a function `nonReentrant`, you should also&#13;
 * mark it `external`.&#13;
 */&#13;
contract ReentrancyGuard {&#13;
&#13;
  /// @dev counter to allow mutex lock with only one SSTORE operation&#13;
  uint256 private _guardCounter;&#13;
&#13;
  constructor() internal {&#13;
    // The counter starts at one to prevent changing it from zero to a non-zero&#13;
    // value, which is a more expensive operation.&#13;
    _guardCounter = 1;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Prevents a contract from calling itself, directly or indirectly.&#13;
   * Calling a `nonReentrant` function from another `nonReentrant`&#13;
   * function is not supported. It is possible to prevent this from happening&#13;
   * by making the `nonReentrant` function external, and make it call a&#13;
   * `private` function that does the actual work.&#13;
   */&#13;
  modifier nonReentrant() {&#13;
    _guardCounter += 1;&#13;
    uint256 localCounter = _guardCounter;&#13;
    _;&#13;
    require(localCounter == _guardCounter);&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/Crowdsale.sol&#13;
&#13;
/**&#13;
 * @title Crowdsale&#13;
 * @dev Crowdsale is a base contract for managing a token crowdsale,&#13;
 * allowing investors to purchase tokens with ether. This contract implements&#13;
 * such functionality in its most fundamental form and can be extended to provide additional&#13;
 * functionality and/or custom behavior.&#13;
 * The external interface represents the basic interface for purchasing tokens, and conform&#13;
 * the base architecture for crowdsales. They are *not* intended to be modified / overridden.&#13;
 * The internal interface conforms the extensible and modifiable surface of crowdsales. Override&#13;
 * the methods to add functionality. Consider using 'super' where appropriate to concatenate&#13;
 * behavior.&#13;
 */&#13;
contract Crowdsale is ReentrancyGuard {&#13;
  using SafeMath for uint256;&#13;
  using SafeERC20 for IERC20;&#13;
&#13;
  // The token being sold&#13;
  IERC20 private _token;&#13;
&#13;
  // Address where funds are collected&#13;
  address private _wallet;&#13;
&#13;
  // How many token units a buyer gets per wei.&#13;
  // The rate is the conversion between wei and the smallest and indivisible token unit.&#13;
  // So, if you are using a rate of 1 with a ERC20Detailed token with 3 decimals called TOK&#13;
  // 1 wei will give you 1 unit, or 0.001 TOK.&#13;
  uint256 private _rate;&#13;
&#13;
  // Amount of wei raised&#13;
  uint256 private _weiRaised;&#13;
&#13;
  /**&#13;
   * Event for token purchase logging&#13;
   * @param purchaser who paid for the tokens&#13;
   * @param beneficiary who got the tokens&#13;
   * @param value weis paid for purchase&#13;
   * @param amount amount of tokens purchased&#13;
   */&#13;
  event TokensPurchased(&#13;
    address indexed purchaser,&#13;
    address indexed beneficiary,&#13;
    uint256 value,&#13;
    uint256 amount&#13;
  );&#13;
&#13;
  /**&#13;
   * @param rate Number of token units a buyer gets per wei&#13;
   * @dev The rate is the conversion between wei and the smallest and indivisible&#13;
   * token unit. So, if you are using a rate of 1 with a ERC20Detailed token&#13;
   * with 3 decimals called TOK, 1 wei will give you 1 unit, or 0.001 TOK.&#13;
   * @param wallet Address where collected funds will be forwarded to&#13;
   * @param token Address of the token being sold&#13;
   */&#13;
  constructor(uint256 rate, address wallet, IERC20 token) internal {&#13;
    require(rate &gt; 0);&#13;
    require(wallet != address(0));&#13;
    require(token != address(0));&#13;
&#13;
    _rate = rate;&#13;
    _wallet = wallet;&#13;
    _token = token;&#13;
  }&#13;
&#13;
  // -----------------------------------------&#13;
  // Crowdsale external interface&#13;
  // -----------------------------------------&#13;
&#13;
  /**&#13;
   * @dev fallback function ***DO NOT OVERRIDE***&#13;
   * Note that other contracts will transfer fund with a base gas stipend&#13;
   * of 2300, which is not enough to call buyTokens. Consider calling&#13;
   * buyTokens directly when purchasing tokens from a contract.&#13;
   */&#13;
  function () external payable {&#13;
    buyTokens(msg.sender);&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the token being sold.&#13;
   */&#13;
  function token() public view returns(IERC20) {&#13;
    return _token;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the address where funds are collected.&#13;
   */&#13;
  function wallet() public view returns(address) {&#13;
    return _wallet;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the number of token units a buyer gets per wei.&#13;
   */&#13;
  function rate() public view returns(uint256) {&#13;
    return _rate;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the amount of wei raised.&#13;
   */&#13;
  function weiRaised() public view returns (uint256) {&#13;
    return _weiRaised;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev low level token purchase ***DO NOT OVERRIDE***&#13;
   * This function has a non-reentrancy guard, so it shouldn't be called by&#13;
   * another `nonReentrant` function.&#13;
   * @param beneficiary Recipient of the token purchase&#13;
   */&#13;
  function buyTokens(address beneficiary) public nonReentrant payable {&#13;
&#13;
    uint256 weiAmount = msg.value;&#13;
    _preValidatePurchase(beneficiary, weiAmount);&#13;
&#13;
    // calculate token amount to be created&#13;
    uint256 tokens = _getTokenAmount(weiAmount);&#13;
&#13;
    // update state&#13;
    _weiRaised = _weiRaised.add(weiAmount);&#13;
&#13;
    _processPurchase(beneficiary, tokens);&#13;
    emit TokensPurchased(&#13;
      msg.sender,&#13;
      beneficiary,&#13;
      weiAmount,&#13;
      tokens&#13;
    );&#13;
&#13;
    _updatePurchasingState(beneficiary, weiAmount);&#13;
&#13;
    _forwardFunds();&#13;
    _postValidatePurchase(beneficiary, weiAmount);&#13;
  }&#13;
&#13;
  // -----------------------------------------&#13;
  // Internal interface (extensible)&#13;
  // -----------------------------------------&#13;
&#13;
  /**&#13;
   * @dev Validation of an incoming purchase. Use require statements to revert state when conditions are not met. Use `super` in contracts that inherit from Crowdsale to extend their validations.&#13;
   * Example from CappedCrowdsale.sol's _preValidatePurchase method:&#13;
   *   super._preValidatePurchase(beneficiary, weiAmount);&#13;
   *   require(weiRaised().add(weiAmount) &lt;= cap);&#13;
   * @param beneficiary Address performing the token purchase&#13;
   * @param weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _preValidatePurchase(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
    view&#13;
  {&#13;
    require(beneficiary != address(0));&#13;
    require(weiAmount != 0);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Validation of an executed purchase. Observe state and use revert statements to undo rollback when valid conditions are not met.&#13;
   * @param beneficiary Address performing the token purchase&#13;
   * @param weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _postValidatePurchase(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
    view&#13;
  {&#13;
    // optional override&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Source of tokens. Override this method to modify the way in which the crowdsale ultimately gets and sends its tokens.&#13;
   * @param beneficiary Address performing the token purchase&#13;
   * @param tokenAmount Number of tokens to be emitted&#13;
   */&#13;
  function _deliverTokens(&#13;
    address beneficiary,&#13;
    uint256 tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    _token.safeTransfer(beneficiary, tokenAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Executed when a purchase has been validated and is ready to be executed. Doesn't necessarily emit/send tokens.&#13;
   * @param beneficiary Address receiving the tokens&#13;
   * @param tokenAmount Number of tokens to be purchased&#13;
   */&#13;
  function _processPurchase(&#13;
    address beneficiary,&#13;
    uint256 tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    _deliverTokens(beneficiary, tokenAmount);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Override for extensions that require an internal state to check for validity (current user contributions, etc.)&#13;
   * @param beneficiary Address receiving the tokens&#13;
   * @param weiAmount Value in wei involved in the purchase&#13;
   */&#13;
  function _updatePurchasingState(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    // optional override&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Override to extend the way in which ether is converted to tokens.&#13;
   * @param weiAmount Value in wei to be converted into tokens&#13;
   * @return Number of tokens that can be purchased with the specified _weiAmount&#13;
   */&#13;
  function _getTokenAmount(uint256 weiAmount)&#13;
    internal view returns (uint256)&#13;
  {&#13;
    return weiAmount.mul(_rate);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Determines how ETH is stored/forwarded on purchases.&#13;
   */&#13;
  function _forwardFunds() internal {&#13;
    _wallet.transfer(msg.value);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/validation/CappedCrowdsale.sol&#13;
&#13;
/**&#13;
 * @title CappedCrowdsale&#13;
 * @dev Crowdsale with a limit for total contributions.&#13;
 */&#13;
contract CappedCrowdsale is Crowdsale {&#13;
  using SafeMath for uint256;&#13;
&#13;
  uint256 private _cap;&#13;
&#13;
  /**&#13;
   * @dev Constructor, takes maximum amount of wei accepted in the crowdsale.&#13;
   * @param cap Max amount of wei to be contributed&#13;
   */&#13;
  constructor(uint256 cap) internal {&#13;
    require(cap &gt; 0);&#13;
    _cap = cap;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the cap of the crowdsale.&#13;
   */&#13;
  function cap() public view returns(uint256) {&#13;
    return _cap;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether the cap has been reached.&#13;
   * @return Whether the cap was reached&#13;
   */&#13;
  function capReached() public view returns (bool) {&#13;
    return weiRaised() &gt;= _cap;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Extend parent behavior requiring purchase to respect the funding cap.&#13;
   * @param beneficiary Token purchaser&#13;
   * @param weiAmount Amount of wei contributed&#13;
   */&#13;
  function _preValidatePurchase(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
    view&#13;
  {&#13;
    super._preValidatePurchase(beneficiary, weiAmount);&#13;
    require(weiRaised().add(weiAmount) &lt;= _cap);&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/validation/TimedCrowdsale.sol&#13;
&#13;
/**&#13;
 * @title TimedCrowdsale&#13;
 * @dev Crowdsale accepting contributions only within a time frame.&#13;
 */&#13;
contract TimedCrowdsale is Crowdsale {&#13;
  using SafeMath for uint256;&#13;
&#13;
  uint256 private _openingTime;&#13;
  uint256 private _closingTime;&#13;
&#13;
  /**&#13;
   * @dev Reverts if not in crowdsale time range.&#13;
   */&#13;
  modifier onlyWhileOpen {&#13;
    require(isOpen());&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Constructor, takes crowdsale opening and closing times.&#13;
   * @param openingTime Crowdsale opening time&#13;
   * @param closingTime Crowdsale closing time&#13;
   */&#13;
  constructor(uint256 openingTime, uint256 closingTime) internal {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    require(openingTime &gt;= block.timestamp);&#13;
    require(closingTime &gt; openingTime);&#13;
&#13;
    _openingTime = openingTime;&#13;
    _closingTime = closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the crowdsale opening time.&#13;
   */&#13;
  function openingTime() public view returns(uint256) {&#13;
    return _openingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the crowdsale closing time.&#13;
   */&#13;
  function closingTime() public view returns(uint256) {&#13;
    return _closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return true if the crowdsale is open, false otherwise.&#13;
   */&#13;
  function isOpen() public view returns (bool) {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    return block.timestamp &gt;= _openingTime &amp;&amp; block.timestamp &lt;= _closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether the period in which the crowdsale is open has already elapsed.&#13;
   * @return Whether crowdsale period has elapsed&#13;
   */&#13;
  function hasClosed() public view returns (bool) {&#13;
    // solium-disable-next-line security/no-block-members&#13;
    return block.timestamp &gt; _closingTime;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Extend parent behavior requiring to be within contributing period&#13;
   * @param beneficiary Token purchaser&#13;
   * @param weiAmount Amount of wei contributed&#13;
   */&#13;
  function _preValidatePurchase(&#13;
    address beneficiary,&#13;
    uint256 weiAmount&#13;
  )&#13;
    internal&#13;
    onlyWhileOpen&#13;
    view&#13;
  {&#13;
    super._preValidatePurchase(beneficiary, weiAmount);&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/distribution/FinalizableCrowdsale.sol&#13;
&#13;
/**&#13;
 * @title FinalizableCrowdsale&#13;
 * @dev Extension of Crowdsale with a one-off finalization action, where one&#13;
 * can do extra work after finishing.&#13;
 */&#13;
contract FinalizableCrowdsale is TimedCrowdsale {&#13;
  using SafeMath for uint256;&#13;
&#13;
  bool private _finalized;&#13;
&#13;
  event CrowdsaleFinalized();&#13;
&#13;
  constructor() internal {&#13;
    _finalized = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return true if the crowdsale is finalized, false otherwise.&#13;
   */&#13;
  function finalized() public view returns (bool) {&#13;
    return _finalized;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Must be called after crowdsale ends, to do some extra finalization&#13;
   * work. Calls the contract's finalization function.&#13;
   */&#13;
  function finalize() public {&#13;
    require(!_finalized);&#13;
    require(hasClosed());&#13;
&#13;
    _finalized = true;&#13;
&#13;
    _finalization();&#13;
    emit CrowdsaleFinalized();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Can be overridden to add finalization logic. The overriding function&#13;
   * should call super._finalization() to ensure the chain of finalization is&#13;
   * executed entirely.&#13;
   */&#13;
  function _finalization() internal {&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/ownership/Secondary.sol&#13;
&#13;
/**&#13;
 * @title Secondary&#13;
 * @dev A Secondary contract can only be used by its primary account (the one that created it)&#13;
 */&#13;
contract Secondary {&#13;
  address private _primary;&#13;
&#13;
  event PrimaryTransferred(&#13;
    address recipient&#13;
  );&#13;
&#13;
  /**&#13;
   * @dev Sets the primary account to the one that is creating the Secondary contract.&#13;
   */&#13;
  constructor() internal {&#13;
    _primary = msg.sender;&#13;
    emit PrimaryTransferred(_primary);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Reverts if called from any account other than the primary.&#13;
   */&#13;
  modifier onlyPrimary() {&#13;
    require(msg.sender == _primary);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the address of the primary.&#13;
   */&#13;
  function primary() public view returns (address) {&#13;
    return _primary;&#13;
  }&#13;
  &#13;
  /**&#13;
   * @dev Transfers contract to a new primary.&#13;
   * @param recipient The address of new primary. &#13;
   */&#13;
  function transferPrimary(address recipient) public onlyPrimary {&#13;
    require(recipient != address(0));&#13;
    _primary = recipient;&#13;
    emit PrimaryTransferred(_primary);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/payment/escrow/Escrow.sol&#13;
&#13;
/**&#13;
 * @title Escrow&#13;
 * @dev Base escrow contract, holds funds designated for a payee until they&#13;
 * withdraw them.&#13;
 * @dev Intended usage: This contract (and derived escrow contracts) should be a&#13;
 * standalone contract, that only interacts with the contract that instantiated&#13;
 * it. That way, it is guaranteed that all Ether will be handled according to&#13;
 * the Escrow rules, and there is no need to check for payable functions or&#13;
 * transfers in the inheritance tree. The contract that uses the escrow as its&#13;
 * payment method should be its primary, and provide public methods redirecting&#13;
 * to the escrow's deposit and withdraw.&#13;
 */&#13;
contract Escrow is Secondary {&#13;
  using SafeMath for uint256;&#13;
&#13;
  event Deposited(address indexed payee, uint256 weiAmount);&#13;
  event Withdrawn(address indexed payee, uint256 weiAmount);&#13;
&#13;
  mapping(address =&gt; uint256) private _deposits;&#13;
&#13;
  function depositsOf(address payee) public view returns (uint256) {&#13;
    return _deposits[payee];&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Stores the sent amount as credit to be withdrawn.&#13;
  * @param payee The destination address of the funds.&#13;
  */&#13;
  function deposit(address payee) public onlyPrimary payable {&#13;
    uint256 amount = msg.value;&#13;
    _deposits[payee] = _deposits[payee].add(amount);&#13;
&#13;
    emit Deposited(payee, amount);&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Withdraw accumulated balance for a payee.&#13;
  * @param payee The address whose funds will be withdrawn and transferred to.&#13;
  */&#13;
  function withdraw(address payee) public onlyPrimary {&#13;
    uint256 payment = _deposits[payee];&#13;
&#13;
    _deposits[payee] = 0;&#13;
&#13;
    payee.transfer(payment);&#13;
&#13;
    emit Withdrawn(payee, payment);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/payment/escrow/ConditionalEscrow.sol&#13;
&#13;
/**&#13;
 * @title ConditionalEscrow&#13;
 * @dev Base abstract escrow to only allow withdrawal if a condition is met.&#13;
 * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.&#13;
 */&#13;
contract ConditionalEscrow is Escrow {&#13;
  /**&#13;
  * @dev Returns whether an address is allowed to withdraw their funds. To be&#13;
  * implemented by derived contracts.&#13;
  * @param payee The destination address of the funds.&#13;
  */&#13;
  function withdrawalAllowed(address payee) public view returns (bool);&#13;
&#13;
  function withdraw(address payee) public {&#13;
    require(withdrawalAllowed(payee));&#13;
    super.withdraw(payee);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/payment/escrow/RefundEscrow.sol&#13;
&#13;
/**&#13;
 * @title RefundEscrow&#13;
 * @dev Escrow that holds funds for a beneficiary, deposited from multiple&#13;
 * parties.&#13;
 * @dev Intended usage: See Escrow.sol. Same usage guidelines apply here.&#13;
 * @dev The primary account (that is, the contract that instantiates this&#13;
 * contract) may deposit, close the deposit period, and allow for either&#13;
 * withdrawal by the beneficiary, or refunds to the depositors. All interactions&#13;
 * with RefundEscrow will be made through the primary contract. See the&#13;
 * RefundableCrowdsale contract for an example of RefundEscrow’s use.&#13;
 */&#13;
contract RefundEscrow is ConditionalEscrow {&#13;
  enum State { Active, Refunding, Closed }&#13;
&#13;
  event RefundsClosed();&#13;
  event RefundsEnabled();&#13;
&#13;
  State private _state;&#13;
  address private _beneficiary;&#13;
&#13;
  /**&#13;
   * @dev Constructor.&#13;
   * @param beneficiary The beneficiary of the deposits.&#13;
   */&#13;
  constructor(address beneficiary) public {&#13;
    require(beneficiary != address(0));&#13;
    _beneficiary = beneficiary;&#13;
    _state = State.Active;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the current state of the escrow.&#13;
   */&#13;
  function state() public view returns (State) {&#13;
    return _state;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the beneficiary of the escrow.&#13;
   */&#13;
  function beneficiary() public view returns (address) {&#13;
    return _beneficiary;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Stores funds that may later be refunded.&#13;
   * @param refundee The address funds will be sent to if a refund occurs.&#13;
   */&#13;
  function deposit(address refundee) public payable {&#13;
    require(_state == State.Active);&#13;
    super.deposit(refundee);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for the beneficiary to withdraw their funds, rejecting&#13;
   * further deposits.&#13;
   */&#13;
  function close() public onlyPrimary {&#13;
    require(_state == State.Active);&#13;
    _state = State.Closed;&#13;
    emit RefundsClosed();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Allows for refunds to take place, rejecting further deposits.&#13;
   */&#13;
  function enableRefunds() public onlyPrimary {&#13;
    require(_state == State.Active);&#13;
    _state = State.Refunding;&#13;
    emit RefundsEnabled();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Withdraws the beneficiary's funds.&#13;
   */&#13;
  function beneficiaryWithdraw() public {&#13;
    require(_state == State.Closed);&#13;
    _beneficiary.transfer(address(this).balance);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Returns whether refundees can withdraw their deposits (be refunded).&#13;
   */&#13;
  function withdrawalAllowed(address payee) public view returns (bool) {&#13;
    return _state == State.Refunding;&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/distribution/RefundableCrowdsale.sol&#13;
&#13;
/**&#13;
 * @title RefundableCrowdsale&#13;
 * @dev Extension of Crowdsale contract that adds a funding goal, and&#13;
 * the possibility of users getting a refund if goal is not met.&#13;
 * WARNING: note that if you allow tokens to be traded before the goal &#13;
 * is met, then an attack is possible in which the attacker purchases &#13;
 * tokens from the crowdsale and when they sees that the goal is &#13;
 * unlikely to be met, they sell their tokens (possibly at a discount).&#13;
 * The attacker will be refunded when the crowdsale is finalized, and&#13;
 * the users that purchased from them will be left with worthless &#13;
 * tokens. There are many possible ways to avoid this, like making the&#13;
 * the crowdsale inherit from PostDeliveryCrowdsale, or imposing &#13;
 * restrictions on token trading until the crowdsale is finalized.&#13;
 * This is being discussed in &#13;
 * https://github.com/OpenZeppelin/openzeppelin-solidity/issues/877&#13;
 * This contract will be updated when we agree on a general solution&#13;
 * for this problem.&#13;
 */&#13;
contract RefundableCrowdsale is FinalizableCrowdsale {&#13;
  using SafeMath for uint256;&#13;
&#13;
  // minimum amount of funds to be raised in weis&#13;
  uint256 private _goal;&#13;
&#13;
  // refund escrow used to hold funds while crowdsale is running&#13;
  RefundEscrow private _escrow;&#13;
&#13;
  /**&#13;
   * @dev Constructor, creates RefundEscrow.&#13;
   * @param goal Funding goal&#13;
   */&#13;
  constructor(uint256 goal) internal {&#13;
    require(goal &gt; 0);&#13;
    _escrow = new RefundEscrow(wallet());&#13;
    _goal = goal;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return minimum amount of funds to be raised in wei.&#13;
   */&#13;
  function goal() public view returns(uint256) {&#13;
    return _goal;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Investors can claim refunds here if crowdsale is unsuccessful&#13;
   * @param beneficiary Whose refund will be claimed.&#13;
   */&#13;
  function claimRefund(address beneficiary) public {&#13;
    require(finalized());&#13;
    require(!goalReached());&#13;
&#13;
    _escrow.withdraw(beneficiary);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Checks whether funding goal was reached.&#13;
   * @return Whether funding goal was reached&#13;
   */&#13;
  function goalReached() public view returns (bool) {&#13;
    return weiRaised() &gt;= _goal;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev escrow finalization task, called when finalize() is called&#13;
   */&#13;
  function _finalization() internal {&#13;
    if (goalReached()) {&#13;
      _escrow.close();&#13;
      _escrow.beneficiaryWithdraw();&#13;
    } else {&#13;
      _escrow.enableRefunds();&#13;
    }&#13;
&#13;
    super._finalization();&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Overrides Crowdsale fund forwarding, sending funds to escrow.&#13;
   */&#13;
  function _forwardFunds() internal {&#13;
    _escrow.deposit.value(msg.value)(msg.sender);&#13;
  }&#13;
&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20.sol&#13;
&#13;
/**&#13;
 * @title Standard ERC20 token&#13;
 *&#13;
 * @dev Implementation of the basic standard token.&#13;
 * https://github.com/ethereum/EIPs/blob/master/EIPS/eip-20.md&#13;
 * Originally based on code by FirstBlood: https://github.com/Firstbloodio/token/blob/master/smart_contract/FirstBloodToken.sol&#13;
 */&#13;
contract ERC20 is IERC20 {&#13;
  using SafeMath for uint256;&#13;
&#13;
  mapping (address =&gt; uint256) private _balances;&#13;
&#13;
  mapping (address =&gt; mapping (address =&gt; uint256)) private _allowed;&#13;
&#13;
  uint256 private _totalSupply;&#13;
&#13;
  /**&#13;
  * @dev Total number of tokens in existence&#13;
  */&#13;
  function totalSupply() public view returns (uint256) {&#13;
    return _totalSupply;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param owner The address to query the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
  function balanceOf(address owner) public view returns (uint256) {&#13;
    return _balances[owner];&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param owner address The address which owns the funds.&#13;
   * @param spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
  function allowance(&#13;
    address owner,&#13;
    address spender&#13;
   )&#13;
    public&#13;
    view&#13;
    returns (uint256)&#13;
  {&#13;
    return _allowed[owner][spender];&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified address&#13;
  * @param to The address to transfer to.&#13;
  * @param value The amount to be transferred.&#13;
  */&#13;
  function transfer(address to, uint256 value) public returns (bool) {&#13;
    _transfer(msg.sender, to, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param value The amount of tokens to be spent.&#13;
   */&#13;
  function approve(address spender, uint256 value) public returns (bool) {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = value;&#13;
    emit Approval(msg.sender, spender, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param from address The address which you want to send tokens from&#13;
   * @param to address The address which you want to transfer to&#13;
   * @param value uint256 the amount of tokens to be transferred&#13;
   */&#13;
  function transferFrom(&#13;
    address from,&#13;
    address to,&#13;
    uint256 value&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(value &lt;= _allowed[from][msg.sender]);&#13;
&#13;
    _allowed[from][msg.sender] = _allowed[from][msg.sender].sub(value);&#13;
    _transfer(from, to, value);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed_[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
  function increaseAllowance(&#13;
    address spender,&#13;
    uint256 addedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = (&#13;
      _allowed[msg.sender][spender].add(addedValue));&#13;
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed_[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param spender The address which will spend the funds.&#13;
   * @param subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
  function decreaseAllowance(&#13;
    address spender,&#13;
    uint256 subtractedValue&#13;
  )&#13;
    public&#13;
    returns (bool)&#13;
  {&#13;
    require(spender != address(0));&#13;
&#13;
    _allowed[msg.sender][spender] = (&#13;
      _allowed[msg.sender][spender].sub(subtractedValue));&#13;
    emit Approval(msg.sender, spender, _allowed[msg.sender][spender]);&#13;
    return true;&#13;
  }&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified addresses&#13;
  * @param from The address to transfer from.&#13;
  * @param to The address to transfer to.&#13;
  * @param value The amount to be transferred.&#13;
  */&#13;
  function _transfer(address from, address to, uint256 value) internal {&#13;
    require(value &lt;= _balances[from]);&#13;
    require(to != address(0));&#13;
&#13;
    _balances[from] = _balances[from].sub(value);&#13;
    _balances[to] = _balances[to].add(value);&#13;
    emit Transfer(from, to, value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that mints an amount of the token and assigns it to&#13;
   * an account. This encapsulates the modification of balances such that the&#13;
   * proper events are emitted.&#13;
   * @param account The account that will receive the created tokens.&#13;
   * @param value The amount that will be created.&#13;
   */&#13;
  function _mint(address account, uint256 value) internal {&#13;
    require(account != 0);&#13;
    _totalSupply = _totalSupply.add(value);&#13;
    _balances[account] = _balances[account].add(value);&#13;
    emit Transfer(address(0), account, value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that burns an amount of the token of a given&#13;
   * account.&#13;
   * @param account The account whose tokens will be burnt.&#13;
   * @param value The amount that will be burnt.&#13;
   */&#13;
  function _burn(address account, uint256 value) internal {&#13;
    require(account != 0);&#13;
    require(value &lt;= _balances[account]);&#13;
&#13;
    _totalSupply = _totalSupply.sub(value);&#13;
    _balances[account] = _balances[account].sub(value);&#13;
    emit Transfer(account, address(0), value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Internal function that burns an amount of the token of a given&#13;
   * account, deducting from the sender's allowance for said account. Uses the&#13;
   * internal burn function.&#13;
   * @param account The account whose tokens will be burnt.&#13;
   * @param value The amount that will be burnt.&#13;
   */&#13;
  function _burnFrom(address account, uint256 value) internal {&#13;
    require(value &lt;= _allowed[account][msg.sender]);&#13;
&#13;
    // Should https://github.com/OpenZeppelin/zeppelin-solidity/issues/707 be accepted,&#13;
    // this function needs to emit an event with the updated approval.&#13;
    _allowed[account][msg.sender] = _allowed[account][msg.sender].sub(&#13;
      value);&#13;
    _burn(account, value);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/access/Roles.sol&#13;
&#13;
/**&#13;
 * @title Roles&#13;
 * @dev Library for managing addresses assigned to a Role.&#13;
 */&#13;
library Roles {&#13;
  struct Role {&#13;
    mapping (address =&gt; bool) bearer;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev give an account access to this role&#13;
   */&#13;
  function add(Role storage role, address account) internal {&#13;
    require(account != address(0));&#13;
    require(!has(role, account));&#13;
&#13;
    role.bearer[account] = true;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev remove an account's access to this role&#13;
   */&#13;
  function remove(Role storage role, address account) internal {&#13;
    require(account != address(0));&#13;
    require(has(role, account));&#13;
&#13;
    role.bearer[account] = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev check if an account has this role&#13;
   * @return bool&#13;
   */&#13;
  function has(Role storage role, address account)&#13;
    internal&#13;
    view&#13;
    returns (bool)&#13;
  {&#13;
    require(account != address(0));&#13;
    return role.bearer[account];&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/access/roles/MinterRole.sol&#13;
&#13;
contract MinterRole {&#13;
  using Roles for Roles.Role;&#13;
&#13;
  event MinterAdded(address indexed account);&#13;
  event MinterRemoved(address indexed account);&#13;
&#13;
  Roles.Role private minters;&#13;
&#13;
  constructor() internal {&#13;
    _addMinter(msg.sender);&#13;
  }&#13;
&#13;
  modifier onlyMinter() {&#13;
    require(isMinter(msg.sender));&#13;
    _;&#13;
  }&#13;
&#13;
  function isMinter(address account) public view returns (bool) {&#13;
    return minters.has(account);&#13;
  }&#13;
&#13;
  function addMinter(address account) public onlyMinter {&#13;
    _addMinter(account);&#13;
  }&#13;
&#13;
  function renounceMinter() public {&#13;
    _removeMinter(msg.sender);&#13;
  }&#13;
&#13;
  function _addMinter(address account) internal {&#13;
    minters.add(account);&#13;
    emit MinterAdded(account);&#13;
  }&#13;
&#13;
  function _removeMinter(address account) internal {&#13;
    minters.remove(account);&#13;
    emit MinterRemoved(account);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Mintable.sol&#13;
&#13;
/**&#13;
 * @title ERC20Mintable&#13;
 * @dev ERC20 minting logic&#13;
 */&#13;
contract ERC20Mintable is ERC20, MinterRole {&#13;
  /**&#13;
   * @dev Function to mint tokens&#13;
   * @param to The address that will receive the minted tokens.&#13;
   * @param value The amount of tokens to mint.&#13;
   * @return A boolean that indicates if the operation was successful.&#13;
   */&#13;
  function mint(&#13;
    address to,&#13;
    uint256 value&#13;
  )&#13;
    public&#13;
    onlyMinter&#13;
    returns (bool)&#13;
  {&#13;
    _mint(to, value);&#13;
    return true;&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/crowdsale/emission/MintedCrowdsale.sol&#13;
&#13;
/**&#13;
 * @title MintedCrowdsale&#13;
 * @dev Extension of Crowdsale contract whose tokens are minted in each purchase.&#13;
 * Token ownership should be transferred to MintedCrowdsale for minting.&#13;
 */&#13;
contract MintedCrowdsale is Crowdsale {&#13;
  constructor() internal {}&#13;
&#13;
  /**&#13;
   * @dev Overrides delivery by minting tokens upon purchase.&#13;
   * @param beneficiary Token purchaser&#13;
   * @param tokenAmount Number of tokens to be minted&#13;
   */&#13;
  function _deliverTokens(&#13;
    address beneficiary,&#13;
    uint256 tokenAmount&#13;
  )&#13;
    internal&#13;
  {&#13;
    // Potentially dangerous assumption about the type of the token.&#13;
    require(&#13;
      ERC20Mintable(address(token())).mint(beneficiary, tokenAmount));&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Capped.sol&#13;
&#13;
/**&#13;
 * @title Capped token&#13;
 * @dev Mintable token with a token cap.&#13;
 */&#13;
contract ERC20Capped is ERC20Mintable {&#13;
&#13;
  uint256 private _cap;&#13;
&#13;
  constructor(uint256 cap)&#13;
    public&#13;
  {&#13;
    require(cap &gt; 0);&#13;
    _cap = cap;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the cap for the token minting.&#13;
   */&#13;
  function cap() public view returns(uint256) {&#13;
    return _cap;&#13;
  }&#13;
&#13;
  function _mint(address account, uint256 value) internal {&#13;
    require(totalSupply().add(value) &lt;= _cap);&#13;
    super._mint(account, value);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Burnable.sol&#13;
&#13;
/**&#13;
 * @title Burnable Token&#13;
 * @dev Token that can be irreversibly burned (destroyed).&#13;
 */&#13;
contract ERC20Burnable is ERC20 {&#13;
&#13;
  /**&#13;
   * @dev Burns a specific amount of tokens.&#13;
   * @param value The amount of token to be burned.&#13;
   */&#13;
  function burn(uint256 value) public {&#13;
    _burn(msg.sender, value);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Burns a specific amount of tokens from the target address and decrements allowance&#13;
   * @param from address The address which you want to send tokens from&#13;
   * @param value uint256 The amount of token to be burned&#13;
   */&#13;
  function burnFrom(address from, uint256 value) public {&#13;
    _burnFrom(from, value);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/token/ERC20/ERC20Detailed.sol&#13;
&#13;
/**&#13;
 * @title ERC20Detailed token&#13;
 * @dev The decimals are only for visualization purposes.&#13;
 * All the operations are done using the smallest and indivisible token unit,&#13;
 * just as on Ethereum all the operations are done in wei.&#13;
 */&#13;
contract ERC20Detailed is IERC20 {&#13;
  string private _name;&#13;
  string private _symbol;&#13;
  uint8 private _decimals;&#13;
&#13;
  constructor(string name, string symbol, uint8 decimals) public {&#13;
    _name = name;&#13;
    _symbol = symbol;&#13;
    _decimals = decimals;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the name of the token.&#13;
   */&#13;
  function name() public view returns(string) {&#13;
    return _name;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the symbol of the token.&#13;
   */&#13;
  function symbol() public view returns(string) {&#13;
    return _symbol;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return the number of decimals of the token.&#13;
   */&#13;
  function decimals() public view returns(uint8) {&#13;
    return _decimals;&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/access/roles/PauserRole.sol&#13;
&#13;
contract PauserRole {&#13;
  using Roles for Roles.Role;&#13;
&#13;
  event PauserAdded(address indexed account);&#13;
  event PauserRemoved(address indexed account);&#13;
&#13;
  Roles.Role private pausers;&#13;
&#13;
  constructor() internal {&#13;
    _addPauser(msg.sender);&#13;
  }&#13;
&#13;
  modifier onlyPauser() {&#13;
    require(isPauser(msg.sender));&#13;
    _;&#13;
  }&#13;
&#13;
  function isPauser(address account) public view returns (bool) {&#13;
    return pausers.has(account);&#13;
  }&#13;
&#13;
  function addPauser(address account) public onlyPauser {&#13;
    _addPauser(account);&#13;
  }&#13;
&#13;
  function renouncePauser() public {&#13;
    _removePauser(msg.sender);&#13;
  }&#13;
&#13;
  function _addPauser(address account) internal {&#13;
    pausers.add(account);&#13;
    emit PauserAdded(account);&#13;
  }&#13;
&#13;
  function _removePauser(address account) internal {&#13;
    pausers.remove(account);&#13;
    emit PauserRemoved(account);&#13;
  }&#13;
}&#13;
&#13;
// File: openzeppelin-solidity/contracts/lifecycle/Pausable.sol&#13;
&#13;
/**&#13;
 * @title Pausable&#13;
 * @dev Base contract which allows children to implement an emergency stop mechanism.&#13;
 */&#13;
contract Pausable is PauserRole {&#13;
  event Paused(address account);&#13;
  event Unpaused(address account);&#13;
&#13;
  bool private _paused;&#13;
&#13;
  constructor() internal {&#13;
    _paused = false;&#13;
  }&#13;
&#13;
  /**&#13;
   * @return true if the contract is paused, false otherwise.&#13;
   */&#13;
  function paused() public view returns(bool) {&#13;
    return _paused;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is not paused.&#13;
   */&#13;
  modifier whenNotPaused() {&#13;
    require(!_paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev Modifier to make a function callable only when the contract is paused.&#13;
   */&#13;
  modifier whenPaused() {&#13;
    require(_paused);&#13;
    _;&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to pause, triggers stopped state&#13;
   */&#13;
  function pause() public onlyPauser whenNotPaused {&#13;
    _paused = true;&#13;
    emit Paused(msg.sender);&#13;
  }&#13;
&#13;
  /**&#13;
   * @dev called by the owner to unpause, returns to normal state&#13;
   */&#13;
  function unpause() public onlyPauser whenPaused {&#13;
    _paused = false;&#13;
    emit Unpaused(msg.sender);&#13;
  }&#13;
}&#13;
&#13;
// File: contracts\SsenToken.sol&#13;
&#13;
contract SsenToken is ERC20Mintable, ERC20Detailed,  Pausable {&#13;
&#13;
    // define initial coin supply here&#13;
    uint256 public constant INITIAL_SUPPLY = 10000000000 * (10 ** uint256(decimals()));&#13;
&#13;
    /**&#13;
     * @dev Constructor that gives msg.sender all of existing tokens.&#13;
     */&#13;
    constructor () public ERC20Detailed("SSEN Token", "SSEN", 18)    {&#13;
		&#13;
		&#13;
        _mint(msg.sender, INITIAL_SUPPLY);&#13;
    }&#13;
	&#13;
	&#13;
	/**&#13;
     * @dev Burns a specific amount of tokens.&#13;
     * @param value The amount of token to be burned.&#13;
     */&#13;
    function burn(uint256 value) public {&#13;
        _burn(msg.sender, value);&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Burns a specific amount of tokens from the target address and decrements allowance&#13;
     * @param from address The address which you want to send tokens from&#13;
     * @param value uint256 The amount of token to be burned&#13;
     */&#13;
    function burnFrom(address from, uint256 value) public {&#13;
        _burnFrom(from, value);&#13;
    }&#13;
	&#13;
&#13;
	&#13;
	function transfer(address to, uint256 value) public whenNotPaused returns (bool) {&#13;
        return super.transfer(to, value);&#13;
    }&#13;
&#13;
    function transferFrom(address from,address to, uint256 value) public whenNotPaused returns (bool) {&#13;
        return super.transferFrom(from, to, value);&#13;
    }&#13;
&#13;
    function approve(address spender, uint256 value) public whenNotPaused returns (bool) {&#13;
        return super.approve(spender, value);&#13;
    }&#13;
&#13;
    function increaseAllowance(address spender, uint addedValue) public whenNotPaused returns (bool success) {&#13;
        return super.increaseAllowance(spender, addedValue);&#13;
    }&#13;
&#13;
    function decreaseAllowance(address spender, uint subtractedValue) public whenNotPaused returns (bool success) {&#13;
        return super.decreaseAllowance(spender, subtractedValue);&#13;
    }&#13;
	&#13;
}
pragma solidity 0.4.24;
pragma experimental "v0.5.0";
/******************************************************************************\
* Author: Nick Mudge, <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="a6c8cfc5cde6cbc9cdc3c8d588cfc9">[emailÂ protected]</a>&#13;
* Mokens&#13;
* Copyright (c) 2018&#13;
*&#13;
* Functions for querying moken information.&#13;
/******************************************************************************/&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//Storage contracts&#13;
////////////&#13;
//Some delegate contracts are listed with storage contracts they inherit.&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//Mokens&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage0 {&#13;
    // funcId =&gt; delegate contract&#13;
    mapping(bytes4 =&gt; address) internal delegates;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenUpdates&#13;
//MokenOwner&#13;
//QueryMokenDelegates&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage1 is Storage0 {&#13;
    address internal contractOwner;&#13;
    bytes[] internal funcSignatures;&#13;
    // signature =&gt; index+1&#13;
    mapping(bytes =&gt; uint256) internal funcSignatureToIndex;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokensSupportsInterfaces&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage2 is Storage1 {&#13;
    mapping(bytes4 =&gt; bool) internal supportedInterfaces;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenRootOwnerOf&#13;
//MokenERC721Metadata&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage3 is Storage2 {&#13;
    struct Moken {&#13;
        string name;&#13;
        uint256 data;&#13;
        uint256 parentTokenId;&#13;
    }&#13;
    //tokenId =&gt; moken&#13;
    mapping(uint256 =&gt; Moken) internal mokens;&#13;
    uint256 internal mokensLength;&#13;
    // child address =&gt; child tokenId =&gt; tokenId+1&#13;
    mapping(address =&gt; mapping(uint256 =&gt; uint256)) internal childTokenOwner;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC721Enumerable&#13;
//MokenLinkHash&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage4 is Storage3 {&#13;
    // root token owner address =&gt; (tokenId =&gt; approved address)&#13;
    mapping(address =&gt; mapping(uint256 =&gt; address)) internal rootOwnerAndTokenIdToApprovedAddress;&#13;
    // token owner =&gt; (operator address =&gt; bool)&#13;
    mapping(address =&gt; mapping(address =&gt; bool)) internal tokenOwnerToOperators;&#13;
    // Mapping from owner to list of owned token IDs&#13;
    mapping(address =&gt; uint32[]) internal ownedTokens;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC998ERC721TopDown&#13;
//MokenERC998ERC721TopDownBatch&#13;
//MokenERC721&#13;
//MokenERC721Batch&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage5 is Storage4 {&#13;
    // tokenId =&gt; (child address =&gt; array of child tokens)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256[])) internal childTokens;&#13;
    // tokenId =&gt; (child address =&gt; (child token =&gt; child index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; mapping(uint256 =&gt; uint256))) internal childTokenIndex;&#13;
    // tokenId =&gt; (child address =&gt; contract index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) internal childContractIndex;&#13;
    // tokenId =&gt; child contract&#13;
    mapping(uint256 =&gt; address[]) internal childContracts;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC998ERC20TopDown&#13;
//MokenStateChange&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage6 is Storage5 {&#13;
    // tokenId =&gt; token contract&#13;
    mapping(uint256 =&gt; address[]) internal erc20Contracts;&#13;
    // tokenId =&gt; (token contract =&gt; token contract index)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) erc20ContractIndex;&#13;
    // tokenId =&gt; (token contract =&gt; balance)&#13;
    mapping(uint256 =&gt; mapping(address =&gt; uint256)) internal erc20Balances;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenERC998ERC721BottomUp&#13;
//MokenERC998ERC721BottomUpBatch&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage7 is Storage6 {&#13;
    // parent address =&gt; (parent tokenId =&gt; array of child tokenIds)&#13;
    mapping(address =&gt; mapping(uint256 =&gt; uint32[])) internal parentToChildTokenIds;&#13;
    // tokenId =&gt; position in childTokens array&#13;
    mapping(uint256 =&gt; uint256) internal tokenIdToChildTokenIdsIndex;&#13;
}&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
//MokenMinting&#13;
//MokenMintContractManagement&#13;
//MokenEras&#13;
//QueryMokenData&#13;
///////////////////////////////////////////////////////////////////////////////////&#13;
contract Storage8 is Storage7 {&#13;
    // index =&gt; era&#13;
    mapping(uint256 =&gt; bytes32) internal eras;&#13;
    uint256 internal eraLength;&#13;
    // era =&gt; index+1&#13;
    mapping(bytes32 =&gt; uint256) internal eraIndex;&#13;
    uint256 internal mintPriceOffset; // = 0 szabo;&#13;
    uint256 internal mintStepPrice; // = 500 szabo;&#13;
    uint256 internal mintPriceBuffer; // = 5000 szabo;&#13;
    address[] internal mintContracts;&#13;
    mapping(address =&gt; uint256) internal mintContractIndex;&#13;
    //moken name =&gt; tokenId+1&#13;
    mapping(string =&gt; uint256) internal tokenByName_;&#13;
}&#13;
&#13;
contract QueryMokenData is Storage8 {&#13;
&#13;
    uint256 constant UINT16_MASK = 0x000000000000000000000000000000000000000000000000000000000000ffff;&#13;
&#13;
    function validateAndLower(string _s) internal pure returns (string mokenName) {&#13;
        assembly {&#13;
        // get length of _s&#13;
            let len := mload(_s)&#13;
        // get position of _s&#13;
            let p := add(_s, 0x20)&#13;
        // _s cannot be 0 characters&#13;
            if eq(len, 0) {&#13;
                revert(0, 0)&#13;
            }&#13;
        // _s cannot be more than 100 characters&#13;
            if gt(len, 100) {&#13;
                revert(0, 0)&#13;
            }&#13;
        // get first character&#13;
            let b := byte(0, mload(add(_s, 0x20)))&#13;
        // first character cannot be whitespace/unprintable&#13;
            if lt(b, 0x21) {&#13;
                revert(0, 0)&#13;
            }&#13;
        // get last character&#13;
            b := byte(0, mload(add(p, sub(len, 1))))&#13;
        // last character cannot be whitespace/unprintable&#13;
            if lt(b, 0x21) {&#13;
                revert(0, 0)&#13;
            }&#13;
        // loop through _s and lowercase uppercase characters&#13;
            for {let end := add(p, len)}&#13;
            lt(p, end)&#13;
            {p := add(p, 1)}&#13;
            {&#13;
                b := byte(0, mload(p))&#13;
                if lt(b, 0x5b) {&#13;
                    if gt(b, 0x40) {&#13;
                        mstore8(p, add(b, 32))&#13;
                    }&#13;
                }&#13;
            }&#13;
        }&#13;
        return _s;&#13;
    }&#13;
&#13;
    function mokenNameExists(string _mokenName) external view returns (bool) {&#13;
        return tokenByName_[validateAndLower(_mokenName)] != 0;&#13;
    }&#13;
&#13;
    function mokenId(string _mokenName) external view returns (uint256 tokenId) {&#13;
        tokenId = tokenByName_[validateAndLower(_mokenName)];&#13;
        require(tokenId != 0, "No moken exists with this name.");&#13;
        return tokenId - 1;&#13;
    }&#13;
&#13;
    function mokenData(uint256 _tokenId) external view returns (bytes32 data) {&#13;
        data = bytes32(mokens[_tokenId].data);&#13;
        require(data != 0, "The tokenId does not exist.");&#13;
        return data;&#13;
    }&#13;
&#13;
    function eraFromMokenData(bytes32 _data) public view returns (bytes32 era) {&#13;
        return eras[uint256(_data) &gt;&gt; 176 &amp; UINT16_MASK];&#13;
    }&#13;
&#13;
    function eraFromMokenData(uint256 _data) public view returns (bytes32 era) {&#13;
        return eras[_data &gt;&gt; 176 &amp; UINT16_MASK];&#13;
    }&#13;
&#13;
    function mokenEra(uint256 _tokenId) external view returns (bytes32 era) {&#13;
        uint256 data = mokens[_tokenId].data;&#13;
        require(data != 0, "The tokenId does not exist.");&#13;
        return eraFromMokenData(data);&#13;
    }&#13;
&#13;
    function moken(uint256 _tokenId) external view&#13;
    returns (string memory mokenName, bytes32 era, bytes32 data, address tokenOwner) {&#13;
        data = bytes32(mokens[_tokenId].data);&#13;
        require(data != 0, "The tokenId does not exist.");&#13;
        return (&#13;
        mokens[_tokenId].name,&#13;
        eraFromMokenData(data),&#13;
        data,&#13;
        address(data)&#13;
        );&#13;
    }&#13;
&#13;
    function mokenBytes32(uint256 _tokenId) external view&#13;
    returns (bytes32 mokenNameBytes32, bytes32 era, bytes32 data, address tokenOwner) {&#13;
        data = bytes32(mokens[_tokenId].data);&#13;
        require(data != 0, "The tokenId does not exist.");&#13;
        bytes memory mokenNameBytes = bytes(mokens[_tokenId].name);&#13;
        require(mokenNameBytes.length != 0, "The tokenId does not exist.");&#13;
        assembly {&#13;
            mokenNameBytes32 := mload(add(mokenNameBytes, 32))&#13;
        }&#13;
        return (&#13;
        mokenNameBytes32,&#13;
        eraFromMokenData(data),&#13;
        data,&#13;
        address(data)&#13;
        );&#13;
    }&#13;
&#13;
&#13;
    function mokenNoName(uint256 _tokenId) external view&#13;
    returns (bytes32 era, bytes32 data, address tokenOwner) {&#13;
        data = bytes32(mokens[_tokenId].data);&#13;
        require(data != 0, "The tokenId does not exist.");&#13;
        return (&#13;
        eraFromMokenData(data),&#13;
        data,&#13;
        address(data)&#13;
        );&#13;
    }&#13;
&#13;
    function mokenName(uint256 _tokenId) external view returns (string memory mokenName_) {&#13;
        mokenName_ = mokens[_tokenId].name;&#13;
        require(bytes(mokenName_).length != 0, "The tokenId does not exist.");&#13;
        return mokenName_;&#13;
    }&#13;
&#13;
    function mokenNameBytes32(uint256 _tokenId) external view returns (bytes32 mokenNameBytes32_) {&#13;
        bytes memory mokenNameBytes = bytes(mokens[_tokenId].name);&#13;
        require(mokenNameBytes.length != 0, "The tokenId does not exist.");&#13;
        assembly {&#13;
            mokenNameBytes32_ := mload(add(mokenNameBytes, 32))&#13;
        }&#13;
        return mokenNameBytes32_;&#13;
    }&#13;
}
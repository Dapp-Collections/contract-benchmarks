// File: contracts/GodMode.sol

/****************************************************
 *
 * Copyright 2018 BurzNest LLC. All rights reserved.
 *
 * The contents of this file are provided for review
 * and educational purposes ONLY. You MAY NOT use,
 * copy, distribute, or modify this software without
 * explicit written permission from BurzNest LLC.
 *
 ****************************************************/

pragma solidity ^0.4.24;

/// @title God Mode
/// @author Anthony Burzillo <<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="543621262e143621262e3a3127207a373b39">[email protected]</a>&gt;&#13;
/// @dev This contract provides a basic interface for God&#13;
///  in a contract as well as the ability for God to pause&#13;
///  the contract&#13;
contract GodMode {&#13;
    /// @dev Is the contract paused?&#13;
    bool public isPaused;&#13;
&#13;
    /// @dev God's address&#13;
    address public god;&#13;
&#13;
    /// @dev Only God can run this function&#13;
    modifier onlyGod()&#13;
    {&#13;
        require(god == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This function can only be run while the contract&#13;
    ///  is not paused&#13;
    modifier notPaused()&#13;
    {&#13;
        require(!isPaused);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev This event is fired when the contract is paused&#13;
    event GodPaused();&#13;
&#13;
    /// @dev This event is fired when the contract is unpaused&#13;
    event GodUnpaused();&#13;
&#13;
    constructor() public&#13;
    {&#13;
        // Make the creator of the contract God&#13;
        god = msg.sender;&#13;
    }&#13;
&#13;
    /// @dev God can change the address of God&#13;
    /// @param _newGod The new address for God&#13;
    function godChangeGod(address _newGod) public onlyGod&#13;
    {&#13;
        god = _newGod;&#13;
    }&#13;
&#13;
    /// @dev God can pause the game&#13;
    function godPause() public onlyGod&#13;
    {&#13;
        isPaused = true;&#13;
&#13;
        emit GodPaused();&#13;
    }&#13;
&#13;
    /// @dev God can unpause the game&#13;
    function godUnpause() public onlyGod&#13;
    {&#13;
        isPaused = false;&#13;
&#13;
        emit GodUnpaused();&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthAbstractInterface.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
/// @title King of Eth Abstract Interface&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="254750575f654750575f4b4056510b464a48">[email protected]</a>&gt;&#13;
/// @dev Abstract interface contract for titles and taxes&#13;
contract KingOfEthAbstractInterface {&#13;
    /// @dev The address of the current King&#13;
    address public king;&#13;
&#13;
    /// @dev The address of the current Wayfarer&#13;
    address public wayfarer;&#13;
&#13;
    /// @dev Anyone can pay taxes&#13;
    function payTaxes() public payable;&#13;
}&#13;
&#13;
// File: contracts/KingOfEthBlindAuctionsReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth: Blind Auctions Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="422037303802203730382c2731366c212d2f">[email protected]</a>&gt;&#13;
/// @dev This contract provides a reference to the blind auctions contract&#13;
contract KingOfEthBlindAuctionsReferencer is GodMode {&#13;
    /// @dev The address of the blind auctions contract&#13;
    address public blindAuctionsContract;&#13;
&#13;
    /// @dev Only the blind auctions contract can run this&#13;
    modifier onlyBlindAuctionsContract()&#13;
    {&#13;
        require(blindAuctionsContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can set a new blind auctions contract&#13;
    /// @param _blindAuctionsContract the address of the blind auctions&#13;
    ///  contract&#13;
    function godSetBlindAuctionsContract(address _blindAuctionsContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        blindAuctionsContract = _blindAuctionsContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthOpenAuctionsReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth: Open Auctions Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="89ebfcfbf3c9ebfcfbf3e7ecfafda7eae6e4">[email protected]</a>&gt;&#13;
/// @dev This contract provides a reference to the open auctions contract&#13;
contract KingOfEthOpenAuctionsReferencer is GodMode {&#13;
    /// @dev The address of the auctions contract&#13;
    address public openAuctionsContract;&#13;
&#13;
    /// @dev Only the open auctions contract can run this&#13;
    modifier onlyOpenAuctionsContract()&#13;
    {&#13;
        require(openAuctionsContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can set a new auctions contract&#13;
    function godSetOpenAuctionsContract(address _openAuctionsContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        openAuctionsContract = _openAuctionsContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthAuctionsReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
&#13;
/// @title King of Eth: Auctions Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="711304030b311304030b1f1402055f121e1c">[email protected]</a>&gt;&#13;
/// @dev This contract provides a reference to the auctions contracts&#13;
contract KingOfEthAuctionsReferencer is&#13;
      KingOfEthBlindAuctionsReferencer&#13;
    , KingOfEthOpenAuctionsReferencer&#13;
{&#13;
    /// @dev Only an auctions contract can run this&#13;
    modifier onlyAuctionsContract()&#13;
    {&#13;
        require(blindAuctionsContract == msg.sender&#13;
             || openAuctionsContract == msg.sender);&#13;
        _;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthReferencer.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
/// @title King of Eth Referencer&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="9efcebece4defcebece4f0fbedeab0fdf1f3">[email protected]</a>&gt;&#13;
/// @dev Functionality to allow contracts to reference the king contract&#13;
contract KingOfEthReferencer is GodMode {&#13;
    /// @dev The address of the king contract&#13;
    address public kingOfEthContract;&#13;
&#13;
    /// @dev Only the king contract can run this&#13;
    modifier onlyKingOfEthContract()&#13;
    {&#13;
        require(kingOfEthContract == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev God can change the king contract&#13;
    /// @param _kingOfEthContract The new address&#13;
    function godSetKingOfEthContract(address _kingOfEthContract)&#13;
        public&#13;
        onlyGod&#13;
    {&#13;
        kingOfEthContract = _kingOfEthContract;&#13;
    }&#13;
}&#13;
&#13;
// File: contracts/KingOfEthBoard.sol&#13;
&#13;
/****************************************************&#13;
 *&#13;
 * Copyright 2018 BurzNest LLC. All rights reserved.&#13;
 *&#13;
 * The contents of this file are provided for review&#13;
 * and educational purposes ONLY. You MAY NOT use,&#13;
 * copy, distribute, or modify this software without&#13;
 * explicit written permission from BurzNest LLC.&#13;
 *&#13;
 ****************************************************/&#13;
&#13;
pragma solidity ^0.4.24;&#13;
&#13;
&#13;
&#13;
&#13;
&#13;
/// @title King of Eth: Board&#13;
/// @author Anthony Burzillo &lt;<a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="096b7c7b73496b7c7b73676c7a7d276a6664">[email protected]</a>&gt;&#13;
/// @dev Contract for board&#13;
contract KingOfEthBoard is&#13;
      GodMode&#13;
    , KingOfEthAuctionsReferencer&#13;
    , KingOfEthReferencer&#13;
{&#13;
    /// @dev x coordinate of the top left corner of the boundary&#13;
    uint public boundX1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;&#13;
&#13;
    /// @dev y coordinate of the top left corner of the boundary&#13;
    uint public boundY1 = 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffef;&#13;
&#13;
    /// @dev x coordinate of the bottom right corner of the boundary&#13;
    uint public boundX2 = 0x800000000000000000000000000000000000000000000000000000000000000f;&#13;
&#13;
    /// @dev y coordinate of the bottom right corner of the boundary&#13;
    uint public boundY2 = 0x800000000000000000000000000000000000000000000000000000000000000f;&#13;
&#13;
    /// @dev Number used to divide the total number of house locations&#13;
    /// after any expansion to yield the number of auctions that  will be&#13;
    /// available to start for the expansion's duration&#13;
    uint public constant auctionsAvailableDivisor = 10;&#13;
&#13;
    /// @dev Amount of time the King must wait between increasing the board&#13;
    uint public constant kingTimeBetweenIncrease = 2 weeks;&#13;
&#13;
    /// @dev Amount of time the Wayfarer must wait between increasing the board&#13;
    uint public constant wayfarerTimeBetweenIncrease = 3 weeks;&#13;
&#13;
    /// @dev Amount of time that anyone but the King or Wayfarer must wait&#13;
    ///  before increasing the board&#13;
    uint public constant plebTimeBetweenIncrease = 4 weeks;&#13;
&#13;
    /// @dev The last time the board was increased in size&#13;
    uint public lastIncreaseTime;&#13;
&#13;
    /// @dev The direction of the next increase&#13;
    uint8 public nextIncreaseDirection;&#13;
&#13;
    /// @dev The number of auctions that players may choose to start&#13;
    ///  for this expansion&#13;
    uint public auctionsRemaining;&#13;
&#13;
    constructor() public&#13;
    {&#13;
        // Game is paused as God must start it&#13;
        isPaused = true;&#13;
&#13;
        // Set the auctions remaining&#13;
        setAuctionsAvailableForBounds();&#13;
    }&#13;
&#13;
    /// @dev Fired when the board is increased in size&#13;
    event BoardSizeIncreased(&#13;
          address initiator&#13;
        , uint newBoundX1&#13;
        , uint newBoundY1&#13;
        , uint newBoundX2&#13;
        , uint newBoundY2&#13;
        , uint lastIncreaseTime&#13;
        , uint nextIncreaseDirection&#13;
        , uint auctionsRemaining&#13;
    );&#13;
&#13;
    /// @dev Only the King can run this&#13;
    modifier onlyKing()&#13;
    {&#13;
        require(KingOfEthAbstractInterface(kingOfEthContract).king() == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Only the Wayfarer can run this&#13;
    modifier onlyWayfarer()&#13;
    {&#13;
        require(KingOfEthAbstractInterface(kingOfEthContract).wayfarer() == msg.sender);&#13;
        _;&#13;
    }&#13;
&#13;
    /// @dev Set the total auctions available&#13;
    function setAuctionsAvailableForBounds() private&#13;
    {&#13;
        uint boundDiffX = boundX2 - boundX1;&#13;
        uint boundDiffY = boundY2 - boundY1;&#13;
&#13;
        auctionsRemaining = boundDiffX * boundDiffY / 2 / auctionsAvailableDivisor;&#13;
    }&#13;
&#13;
    /// @dev Increase the board's size making sure to keep steady at&#13;
    ///  the maximum outer bounds&#13;
    function increaseBoard() private&#13;
    {&#13;
        // The length of increase&#13;
        uint _increaseLength;&#13;
&#13;
        // If this increase direction is right&#13;
        if(0 == nextIncreaseDirection)&#13;
        {&#13;
            _increaseLength = boundX2 - boundX1;&#13;
            uint _updatedX2 = boundX2 + _increaseLength;&#13;
&#13;
            // Stay within bounds&#13;
            if(_updatedX2 &lt;= boundX2 || _updatedX2 &lt;= _increaseLength)&#13;
            {&#13;
                boundX2 = ~uint(0);&#13;
            }&#13;
            else&#13;
            {&#13;
                boundX2 = _updatedX2;&#13;
            }&#13;
        }&#13;
        // If this increase direction is down&#13;
        else if(1 == nextIncreaseDirection)&#13;
        {&#13;
            _increaseLength = boundY2 - boundY1;&#13;
            uint _updatedY2 = boundY2 + _increaseLength;&#13;
&#13;
            // Stay within bounds&#13;
            if(_updatedY2 &lt;= boundY2 || _updatedY2 &lt;= _increaseLength)&#13;
            {&#13;
                boundY2 = ~uint(0);&#13;
            }&#13;
            else&#13;
            {&#13;
                boundY2 = _updatedY2;&#13;
            }&#13;
        }&#13;
        // If this increase direction is left&#13;
        else if(2 == nextIncreaseDirection)&#13;
        {&#13;
            _increaseLength = boundX2 - boundX1;&#13;
&#13;
            // Stay within bounds&#13;
            if(boundX1 &lt;= _increaseLength)&#13;
            {&#13;
                boundX1 = 0;&#13;
            }&#13;
            else&#13;
            {&#13;
                boundX1 -= _increaseLength;&#13;
            }&#13;
        }&#13;
        // If this increase direction is up&#13;
        else if(3 == nextIncreaseDirection)&#13;
        {&#13;
            _increaseLength = boundY2 - boundY1;&#13;
&#13;
            // Stay within bounds&#13;
            if(boundY1 &lt;= _increaseLength)&#13;
            {&#13;
                boundY1 = 0;&#13;
            }&#13;
            else&#13;
            {&#13;
                boundY1 -= _increaseLength;&#13;
            }&#13;
        }&#13;
&#13;
        // The last increase time is now&#13;
        lastIncreaseTime = now;&#13;
&#13;
        // Set the next increase direction&#13;
        nextIncreaseDirection = (nextIncreaseDirection + 1) % 4;&#13;
&#13;
        // Reset the auctions available&#13;
        setAuctionsAvailableForBounds();&#13;
&#13;
        emit BoardSizeIncreased(&#13;
              msg.sender&#13;
            , boundX1&#13;
            , boundY1&#13;
            , boundX2&#13;
            , boundY2&#13;
            , now&#13;
            , nextIncreaseDirection&#13;
            , auctionsRemaining&#13;
        );&#13;
    }&#13;
&#13;
    /// @dev God can start the game&#13;
    function godStartGame() public onlyGod&#13;
    {&#13;
        // Reset increase times&#13;
        lastIncreaseTime = now;&#13;
&#13;
        // Unpause the game&#13;
        godUnpause();&#13;
    }&#13;
&#13;
    /// @dev The auctions contracts can decrement the number&#13;
    ///  of auctions that are available to be started&#13;
    function auctionsDecrementAuctionsRemaining()&#13;
        public&#13;
        onlyAuctionsContract&#13;
    {&#13;
        auctionsRemaining -= 1;&#13;
    }&#13;
&#13;
    /// @dev The auctions contracts can increment the number&#13;
    ///  of auctions that are available to be started when&#13;
    ///  an auction ends wihout a winner&#13;
    function auctionsIncrementAuctionsRemaining()&#13;
        public&#13;
        onlyAuctionsContract&#13;
    {&#13;
        auctionsRemaining += 1;&#13;
    }&#13;
&#13;
    /// @dev The King can increase the board much faster than the plebs&#13;
    function kingIncreaseBoard()&#13;
        public&#13;
        onlyKing&#13;
    {&#13;
        // Require enough time has passed since the last increase&#13;
        require(lastIncreaseTime + kingTimeBetweenIncrease &lt; now);&#13;
&#13;
        increaseBoard();&#13;
    }&#13;
&#13;
    /// @dev The Wayfarer can increase the board faster than the plebs&#13;
    function wayfarerIncreaseBoard()&#13;
        public&#13;
        onlyWayfarer&#13;
    {&#13;
        // Require enough time has passed since the last increase&#13;
        require(lastIncreaseTime + wayfarerTimeBetweenIncrease &lt; now);&#13;
&#13;
        increaseBoard();&#13;
    }&#13;
&#13;
    /// @dev Any old pleb can increase the board&#13;
    function plebIncreaseBoard() public&#13;
    {&#13;
        // Require enough time has passed since the last increase&#13;
        require(lastIncreaseTime + plebTimeBetweenIncrease &lt; now);&#13;
&#13;
        increaseBoard();&#13;
    }&#13;
}
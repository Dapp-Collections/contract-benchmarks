pragma solidity ^0.4.11;

// copyright <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="d2b1bdbca6b3b1a692b0aba6b7a6bab7a0fcb1bdbf">[emailÂ protected]</a>&#13;
&#13;
contract BytetherOV {&#13;
    enum ResultCode { &#13;
        SUCCESS,&#13;
        ERROR_EXIST,&#13;
        ERROR_NOT_EXIST&#13;
    }&#13;
    struct OwnerShip {&#13;
        address myEther;&#13;
        uint verifyCode;&#13;
        string referCode;&#13;
        uint createTime;&#13;
    }&#13;
    &#13;
    address public owner;&#13;
    address[] public moderators;&#13;
    uint public total = 0;&#13;
    bool public maintaining = false;&#13;
    &#13;
    // bitcoin_address -&gt; OwnerShip list&#13;
    mapping(string =&gt; OwnerShip[]) items;&#13;
&#13;
    // modifier&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
    &#13;
    modifier isActive {&#13;
        require(maintaining != true);&#13;
        _;&#13;
    }&#13;
&#13;
    modifier onlyModerators() {&#13;
        if (msg.sender != owner) {&#13;
            bool found = false;&#13;
            for (uint index = 0; index &lt; moderators.length; index++) {&#13;
                if (moderators[index] == msg.sender) {&#13;
                    found = true;&#13;
                    break;&#13;
                }&#13;
            }&#13;
            require(found);&#13;
        }&#13;
        _;&#13;
    }&#13;
&#13;
    function BytetherOV() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
    // event&#13;
    event LogCreate(bytes32 indexed btcAddress, uint verifyCode, ResultCode result);&#13;
    &#13;
    // owner function&#13;
    function ChangeOwner(address _newOwner) onlyOwner public {&#13;
        if (_newOwner != address(0)) {&#13;
            owner = _newOwner;&#13;
        }&#13;
    }&#13;
    &#13;
    function Kill() onlyOwner public {&#13;
        selfdestruct(owner);&#13;
    }&#13;
    &#13;
    function ToggleMaintenance() onlyModerators public {&#13;
        maintaining = !maintaining;&#13;
    }&#13;
    &#13;
    function AddModerator(address _newModerator) onlyOwner public {&#13;
        for (uint index = 0; index &lt; moderators.length; index++) {&#13;
            if (moderators[index] == _newModerator) {&#13;
                return;&#13;
            }&#13;
        }&#13;
        moderators.push(_newModerator);&#13;
    }&#13;
    &#13;
    function RemoveModerator(address _oldModerator) onlyOwner public {&#13;
        uint foundIndex = 0;&#13;
        for (; foundIndex &lt; moderators.length; foundIndex++) {&#13;
            if (moderators[foundIndex] == _oldModerator) {&#13;
                break;&#13;
            }&#13;
        }&#13;
        if (foundIndex &lt; moderators.length) {&#13;
            moderators[foundIndex] = moderators[moderators.length-1];&#13;
            delete moderators[moderators.length-1];&#13;
            moderators.length--;&#13;
        }&#13;
    }&#13;
    &#13;
    // moderator function&#13;
    function UnclockVerification(string _btcAddress, uint _verifyCode) onlyModerators public returns(ResultCode) {&#13;
        // remove from the verify code list&#13;
        var array = items[_btcAddress];&#13;
        for (uint i = 0; i&lt;array.length; i++){&#13;
            if (array[i].verifyCode == _verifyCode) {&#13;
                if (i != array.length-1) {&#13;
                    array[i] = array[array.length-1];&#13;
                }&#13;
                delete array[array.length-1];&#13;
                array.length--;&#13;
                total--;&#13;
                return ResultCode.SUCCESS;&#13;
            }&#13;
        }&#13;
        return ResultCode.ERROR_NOT_EXIST;&#13;
    }&#13;
    &#13;
    // public function&#13;
    function GetOwnership(string _btcAddress, uint _verifyCode) constant public returns(address, string) {&#13;
        var array = items[_btcAddress];&#13;
        for (uint i=0; i&lt;array.length; i++) {&#13;
            if (array[i].verifyCode == _verifyCode) {&#13;
                var item = array[i];&#13;
                return (item.myEther, item.referCode);&#13;
            }&#13;
        }&#13;
        return (0, "");&#13;
    }&#13;
    &#13;
    function AddOwnership(string _btcAddress, uint _verifyCode, string _referCode) isActive public returns(ResultCode) {&#13;
        bytes32 btcAddressHash = keccak256(_btcAddress);&#13;
        var array = items[_btcAddress];&#13;
        for (uint i=0; i&lt;array.length; i++) {&#13;
            if (array[i].verifyCode == _verifyCode) {&#13;
                LogCreate(btcAddressHash, _verifyCode, ResultCode.ERROR_EXIST);&#13;
                return ResultCode.ERROR_EXIST;&#13;
            }&#13;
        }&#13;
        OwnerShip memory item;&#13;
        item.myEther = msg.sender;&#13;
        item.verifyCode = _verifyCode;&#13;
        item.referCode = _referCode;&#13;
        item.createTime = now;&#13;
&#13;
        total++;&#13;
        array.push(item);&#13;
        LogCreate(btcAddressHash, _verifyCode, ResultCode.SUCCESS);&#13;
        return ResultCode.SUCCESS;&#13;
    }&#13;
    &#13;
    function GetVerifyCodes(string _btcAddress) constant public returns(uint[]) {&#13;
        var array = items[_btcAddress];&#13;
        uint[] memory verifyCodes = new uint[](array.length);&#13;
        for (uint i=0; i&lt;array.length; i++) {&#13;
            verifyCodes[i] = array[i].verifyCode;&#13;
        }&#13;
        return verifyCodes;&#13;
    }&#13;
}
pragma solidity ^0.4.24;

// This is the Alethena Share Token. 
// To learn more, visit https://github.com/Alethena/Alethena-Shares-Token
// Or contact us at <a href="/cdn-cgi/l/email-protection" class="__cf_email__" data-cfemail="dfbcb0b1abbebcab9fbeb3baabb7bab1bef1bcb0b2">[emailÂ protected]</a>&#13;
&#13;
contract ERC20Basic {&#13;
    function totalSupply() public view returns (uint256);&#13;
    function balanceOf(address who) public view returns (uint256);&#13;
    function transfer(address to, uint256 value) public returns (bool);&#13;
    event Transfer(address indexed from, address indexed to, uint256 value);&#13;
}&#13;
&#13;
contract ERC20 is ERC20Basic {&#13;
    function allowance(address owner, address spender)&#13;
        public view returns (uint256);&#13;
&#13;
    function transferFrom(address from, address to, uint256 value)&#13;
        public returns (bool);&#13;
&#13;
    function approve(address spender, uint256 value) public returns (bool);&#13;
    event Approval(&#13;
    address indexed owner,&#13;
    address indexed spender,&#13;
    uint256 value&#13;
    );&#13;
}&#13;
&#13;
contract Ownable {&#13;
    address public owner;&#13;
    address public master = 0x8fED3492dB590ad34ed42b0F509EB3c9626246Fc;&#13;
&#13;
    event OwnershipRenounced(address indexed previousOwner);&#13;
    event OwnershipTransferred(&#13;
        address indexed previousOwner,&#13;
        address indexed newOwner&#13;
    );&#13;
&#13;
&#13;
  /**&#13;
   * @dev The Ownable constructor sets the original 'owner' of the contract to the sender&#13;
   * account.&#13;
   */&#13;
    constructor() public {&#13;
        owner = msg.sender;&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Throws if called by any account other than the owner.&#13;
   */&#13;
    modifier onlyOwner() {&#13;
        require(msg.sender == owner);&#13;
        _;&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Allows the current owner to relinquish control of the contract.&#13;
   */&#13;
    function renounceOwnership() public onlyOwner {&#13;
        emit OwnershipRenounced(owner);&#13;
        owner = address(0);&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Allows the master to transfer control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
    function transferOwnership(address _newOwner) public {&#13;
        require(msg.sender == master);&#13;
        _transferOwnership(_newOwner);&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Transfers control of the contract to a newOwner.&#13;
   * @param _newOwner The address to transfer ownership to.&#13;
   */&#13;
    function _transferOwnership(address _newOwner) internal {&#13;
        require(_newOwner != address(0));&#13;
        emit OwnershipTransferred(owner, _newOwner);&#13;
        owner = _newOwner;&#13;
    }&#13;
}&#13;
&#13;
contract Claimable is ERC20Basic, Ownable {&#13;
&#13;
    using SafeMath for uint256;&#13;
&#13;
    struct Claim {&#13;
        address claimant; // the person who created the claim&#13;
        uint256 collateral; // the amount of wei deposited&#13;
        uint256 timestamp;  // the timestamp of the block in which the claim was made&#13;
    }&#13;
&#13;
    struct PreClaim {&#13;
        bytes32 msghash; // the hash of nonce + address to be claimed&#13;
        uint256 timestamp;  // the timestamp of the block in which the preclaim was made&#13;
    }&#13;
&#13;
    /** @param collateralRate Sets the collateral needed per share to file a claim */&#13;
    uint256 public collateralRate = 5*10**15 wei;&#13;
&#13;
    uint256 public claimPeriod = 60*60*24*180; // In seconds ;&#13;
    uint256 public preClaimPeriod = 60*60*24; // In seconds ;&#13;
&#13;
    mapping(address =&gt; Claim) public claims; // there can be at most one claim per address, here address is claimed address&#13;
    mapping(address =&gt; PreClaim) public preClaims; // there can be at most one preclaim per address, here address is claimer&#13;
&#13;
&#13;
    function setClaimParameters(uint256 _collateralRateInWei, uint256 _claimPeriodInDays) public onlyOwner() {&#13;
        uint256 claimPeriodInSeconds = _claimPeriodInDays*60*60*24;&#13;
        require(_collateralRateInWei &gt; 0);&#13;
        require(_claimPeriodInDays &gt; 90); // must be at least 90 days&#13;
        collateralRate = _collateralRateInWei;&#13;
        claimPeriod = claimPeriodInSeconds;&#13;
        emit ClaimParametersChanged(collateralRate, claimPeriod);&#13;
    }&#13;
&#13;
    event ClaimMade(address indexed _lostAddress, address indexed _claimant, uint256 _balance);&#13;
    event ClaimPrepared(address indexed _claimer);&#13;
    event ClaimCleared(address indexed _lostAddress, uint256 collateral);&#13;
    event ClaimDeleted(address indexed _lostAddress, address indexed _claimant, uint256 collateral);&#13;
    event ClaimResolved(address indexed _lostAddress, address indexed _claimant, uint256 collateral);&#13;
    event ClaimParametersChanged(uint256 _collateralRate, uint256  _claimPeriodInDays);&#13;
&#13;
&#13;
  /** Anyone can declare that the private key to a certain address was lost by calling declareLost&#13;
    * providing a deposit/collateral. There are three possibilities of what can happen with the claim:&#13;
    * 1) The claim period expires and the claimant can get the deposit and the shares back by calling resolveClaim&#13;
    * 2) The "lost" private key is used at any time to call clearClaim. In that case, the claim is deleted and&#13;
    *    the deposit sent to the shareholder (the owner of the private key). It is recommended to call resolveClaim&#13;
    *    whenever someone transfers funds to let claims be resolved automatically when the "lost" private key is&#13;
    *    used again.&#13;
    * 3) The owner deletes the claim and assigns the deposit to the claimant. This is intended to be used to resolve&#13;
    *    disputes. Generally, using this function implies that you have to trust the issuer of the tokens to handle&#13;
    *    the situation well. As a rule of thumb, the contract owner should assume the owner of the lost address to be the&#13;
    *    rightful owner of the deposit.&#13;
    * It is highly recommended that the owner observes the claims made and informs the owners of the claimed addresses&#13;
    * whenever a claim is made for their address (this of course is only possible if they are known to the owner, e.g.&#13;
    * through a shareholder register).&#13;
    * To prevent frontrunning attacks, a claim can only be made if the information revealed when calling "declareLost"&#13;
    * was previously commited using the "prepareClaim" function.&#13;
    */&#13;
&#13;
    function prepareClaim(bytes32 _hashedpackage) public{&#13;
        preClaims[msg.sender] = PreClaim({&#13;
            msghash: _hashedpackage,&#13;
            timestamp: block.timestamp&#13;
        });&#13;
        emit ClaimPrepared(msg.sender);&#13;
    }&#13;
&#13;
    function validateClaim(address _lostAddress, bytes32 _nonce) private view returns (bool){&#13;
        PreClaim memory preClaim = preClaims[msg.sender];&#13;
        require(preClaim.msghash != 0);&#13;
        require(preClaim.timestamp + preClaimPeriod &lt;= block.timestamp);&#13;
        require(preClaim.timestamp + 2*preClaimPeriod &gt;= block.timestamp);&#13;
        return preClaim.msghash == keccak256(abi.encodePacked(_nonce, msg.sender, _lostAddress));&#13;
    }&#13;
&#13;
    function declareLost(address _lostAddress, bytes32 _nonce) public payable{&#13;
        uint256 balance = balanceOf(_lostAddress);&#13;
        require(balance &gt; 0);&#13;
        require(msg.value &gt;= balance.mul(collateralRate));&#13;
        require(claims[_lostAddress].collateral == 0);&#13;
        require(validateClaim(_lostAddress, _nonce));&#13;
&#13;
        claims[_lostAddress] = Claim({&#13;
            claimant: msg.sender,&#13;
            collateral: msg.value,&#13;
            timestamp: block.timestamp&#13;
        });&#13;
        delete preClaims[msg.sender];&#13;
        emit ClaimMade(_lostAddress, msg.sender, balance);&#13;
    }&#13;
&#13;
    function getClaimant(address _lostAddress) public view returns (address){&#13;
        return claims[_lostAddress].claimant;&#13;
    }&#13;
&#13;
    function getCollateral(address _lostAddress) public view returns (uint256){&#13;
        return claims[_lostAddress].collateral;&#13;
    }&#13;
&#13;
    function getTimeStamp(address _lostAddress) public view returns (uint256){&#13;
        return claims[_lostAddress].timestamp;&#13;
    }&#13;
&#13;
    function getPreClaimTimeStamp(address _claimerAddress) public view returns (uint256){&#13;
        return preClaims[_claimerAddress].timestamp;&#13;
    }&#13;
&#13;
    function getMsgHash(address _claimerAddress) public view returns (bytes32){&#13;
        return preClaims[_claimerAddress].msghash;&#13;
    }&#13;
&#13;
    /**&#13;
     * @dev Clears a claim after the key has been found again and assigns the collateral to the "lost" address.&#13;
     */&#13;
    function clearClaim() public returns (uint256){&#13;
        uint256 collateral = claims[msg.sender].collateral;&#13;
        if (collateral != 0){&#13;
            delete claims[msg.sender];&#13;
            msg.sender.transfer(collateral);&#13;
            emit ClaimCleared(msg.sender, collateral);&#13;
            return collateral;&#13;
        } else {&#13;
            return 0;&#13;
        }&#13;
    }&#13;
&#13;
   /**&#13;
    * @dev This function is used to resolve a claim.&#13;
    * @dev After waiting period, the tokens on the lost address and collateral can be transferred.&#13;
   */&#13;
    function resolveClaim(address _lostAddress) public returns (uint256){&#13;
        Claim memory claim = claims[_lostAddress];&#13;
        require(claim.collateral != 0, "No claim found");&#13;
        require(claim.claimant == msg.sender);&#13;
        require(claim.timestamp + claimPeriod &lt;= block.timestamp);&#13;
        address claimant = claim.claimant;&#13;
        delete claims[_lostAddress];&#13;
        claimant.transfer(claim.collateral);&#13;
        internalTransfer(_lostAddress, claimant, balanceOf(_lostAddress));&#13;
        emit ClaimResolved(_lostAddress, claimant, claim.collateral);&#13;
        return claim.collateral;&#13;
    }&#13;
&#13;
    function internalTransfer(address _from, address _to, uint256 _value) internal;&#13;
&#13;
     /** @dev This function is to be executed by the owner only in case a dispute needs to be resolved manually. */&#13;
    function deleteClaim(address _lostAddress) public onlyOwner(){&#13;
        Claim memory claim = claims[_lostAddress];&#13;
        require(claim.collateral != 0, "No claim found");&#13;
        delete claims[_lostAddress];&#13;
        claim.claimant.transfer(claim.collateral);&#13;
        emit ClaimDeleted(_lostAddress, claim.claimant, claim.collateral);&#13;
    }&#13;
&#13;
}&#13;
&#13;
contract AlethenaShares is ERC20, Claimable {&#13;
&#13;
    string public constant name = "Alethena Equity";&#13;
    string public constant symbol = "ALEQ";&#13;
    uint8 public constant decimals = 0; // legally, shares are not divisible&#13;
&#13;
    using SafeMath for uint256;&#13;
&#13;
      /** URL where the source code as well as the terms and conditions can be found. */&#13;
    string public constant termsAndConditions = "shares.alethena.com";&#13;
&#13;
    mapping(address =&gt; uint256) balances;&#13;
    uint256 totalSupply_;        // total number of tokenized shares, sum of all balances&#13;
    uint256 totalShares_ = 1397188; // total number of outstanding shares, maybe not all tokenized&#13;
&#13;
    event Mint(address indexed shareholder, uint256 amount, string message);&#13;
    event Unmint(uint256 amount, string message);&#13;
&#13;
  /** @dev Total number of tokens in existence */&#13;
    function totalSupply() public view returns (uint256) {&#13;
        return totalSupply_;&#13;
    }&#13;
&#13;
  /** @dev Total number of shares in existence, not necessarily all represented by a token.&#13;
    * @dev This could be useful to calculate the total market cap.&#13;
    */&#13;
    function totalShares() public view returns (uint256) {&#13;
        return totalShares_;&#13;
    }&#13;
&#13;
    function setTotalShares(uint256 _newTotalShares) public onlyOwner() {&#13;
        require(_newTotalShares &gt;= totalSupply());&#13;
        totalShares_ = _newTotalShares;&#13;
    }&#13;
&#13;
  /** Increases the number of the tokenized shares. If the shares are newly issued, the share total also needs to be increased. */&#13;
    function mint(address shareholder, uint256 _amount, string _message) public onlyOwner() {&#13;
        require(_amount &gt; 0);&#13;
        require(totalSupply_.add(_amount) &lt;= totalShares_);&#13;
        balances[shareholder] = balances[shareholder].add(_amount);&#13;
        totalSupply_ = totalSupply_ + _amount;&#13;
        emit Mint(shareholder, _amount, _message);&#13;
    }&#13;
&#13;
/** Decrease the number of the tokenized shares. There are two use-cases for this function:&#13;
 *  1) a capital decrease with a destruction of the shares, in which case the law requires that the&#13;
 *     destroyed shares are currently owned by the company.&#13;
 *  2) a shareholder wants to take shares offline. This can only happen with the agreement of the&#13;
 *     the company. To do so, the shares must be transferred to the company first, the company call&#13;
 *     this function and then assigning the untokenized shares back to the shareholder in whatever&#13;
 *     way the new form (e.g. printed certificate) of the shares requires.&#13;
 */&#13;
    function unmint(uint256 _amount, string _message) public onlyOwner() {&#13;
        require(_amount &gt; 0);&#13;
        require(_amount &lt;= balanceOf(owner));&#13;
        balances[owner] = balances[owner].sub(_amount);&#13;
        totalSupply_ = totalSupply_ - _amount;&#13;
        emit Unmint(_amount, _message);&#13;
    }&#13;
&#13;
  /** This contract is pausible.  */&#13;
    bool public isPaused = false;&#13;
&#13;
  /** @dev Function to set pause.&#13;
   *  This could for example be used in case of a fork of the network, in which case all&#13;
   *  "wrong" forked contracts should be paused in their respective fork. Deciding which&#13;
   *  fork is the "right" one is up to the owner of the contract.&#13;
   */&#13;
    function pause(bool _pause, string _message, address _newAddress, uint256 _fromBlock) public onlyOwner() {&#13;
        isPaused = _pause;&#13;
        emit Pause(_pause, _message, _newAddress, _fromBlock);&#13;
    }&#13;
&#13;
    event Pause(bool paused, string message, address newAddress, uint256 fromBlock);&#13;
&#13;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////&#13;
/**&#13;
The next section contains standard ERC20 routines.&#13;
Main change: Transfer functions have an additional post function which resolves claims if applicable.&#13;
 */&#13;
//////////////////////////////////////////////////////////////////////////////////////////////////////////////&#13;
&#13;
  /**&#13;
  * @dev Transfer token for a specified address&#13;
  * @param _to The address to transfer to.&#13;
  * @param _value The amount to be transferred.&#13;
  */&#13;
    function transfer(address _to, uint256 _value) public returns (bool) {&#13;
        clearClaim();&#13;
        internalTransfer(msg.sender, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    function internalTransfer(address _from, address _to, uint256 _value) internal {&#13;
        require(!isPaused);&#13;
        require(_to != address(0));&#13;
        require(_value &lt;= balances[_from]);&#13;
        balances[_from] = balances[_from].sub(_value);&#13;
        balances[_to] = balances[_to].add(_value);&#13;
        emit Transfer(_from, _to, _value);&#13;
    }&#13;
&#13;
  /**&#13;
  * @dev Gets the balance of the specified address.&#13;
  * @param _owner The address to query the the balance of.&#13;
  * @return An uint256 representing the amount owned by the passed address.&#13;
  */&#13;
    function balanceOf(address _owner) public view returns (uint256) {&#13;
        return balances[_owner];&#13;
    }&#13;
&#13;
    mapping (address =&gt; mapping (address =&gt; uint256)) internal allowed;&#13;
&#13;
  /**&#13;
   * @dev Transfer tokens from one address to another&#13;
   * @param _from address The address which you want to send tokens from&#13;
   * @param _to address The address which you want to transfer to&#13;
   * @param _value uint256 the amount of tokens to be transferred&#13;
   */&#13;
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool) {&#13;
        require(_value &lt;= allowed[_from][msg.sender]);&#13;
        allowed[_from][msg.sender] = allowed[_from][msg.sender].sub(_value);&#13;
        internalTransfer(_from, _to, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Approve the passed address to spend the specified amount of tokens on behalf of msg.sender.&#13;
   * Beware that changing an allowance with this method brings the risk that someone may use both the old&#13;
   * and the new allowance by unfortunate transaction ordering. One possible solution to mitigate this&#13;
   * race condition is to first reduce the spender's allowance to 0 and set the desired value afterwards:&#13;
   * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _value The amount of tokens to be spent.&#13;
   */&#13;
    function approve(address _spender, uint256 _value) public returns (bool) {&#13;
        require(!isPaused);&#13;
        allowed[msg.sender][_spender] = _value;&#13;
        emit Approval(msg.sender, _spender, _value);&#13;
        return true;&#13;
    }&#13;
&#13;
    event Approval(address approver, address spender, uint256 value);&#13;
  /**&#13;
   * @dev Function to check the amount of tokens that an owner allowed to a spender.&#13;
   * @param _owner address The address which owns the funds.&#13;
   * @param _spender address The address which will spend the funds.&#13;
   * @return A uint256 specifying the amount of tokens still available for the spender.&#13;
   */&#13;
    function allowance(address _owner, address _spender) public view returns (uint256) {&#13;
        return allowed[_owner][_spender];&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Increase the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed[_spender] == 0. To increment&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _addedValue The amount of tokens to increase the allowance by.&#13;
   */&#13;
    function increaseApproval(address _spender, uint256 _addedValue) public returns (bool) {&#13;
        require(!isPaused);&#13;
        allowed[msg.sender][_spender] = allowed[msg.sender][_spender].add(_addedValue);&#13;
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
        return true;&#13;
    }&#13;
&#13;
  /**&#13;
   * @dev Decrease the amount of tokens that an owner allowed to a spender.&#13;
   * approve should be called when allowed[_spender] == 0. To decrement&#13;
   * allowed value is better to use this function to avoid 2 calls (and wait until&#13;
   * the first transaction is mined)&#13;
   * From MonolithDAO Token.sol&#13;
   * @param _spender The address which will spend the funds.&#13;
   * @param _subtractedValue The amount of tokens to decrease the allowance by.&#13;
   */&#13;
    function decreaseApproval(address _spender, uint256 _subtractedValue) public returns (bool) {&#13;
        require(!isPaused);&#13;
        uint256 oldValue = allowed[msg.sender][_spender];&#13;
        if (_subtractedValue &gt; oldValue) {&#13;
            allowed[msg.sender][_spender] = 0;&#13;
        } else {&#13;
            allowed[msg.sender][_spender] = oldValue.sub(_subtractedValue);&#13;
        }&#13;
        emit Approval(msg.sender, _spender, allowed[msg.sender][_spender]);&#13;
        return true;&#13;
    }&#13;
&#13;
}&#13;
&#13;
library SafeMath {&#13;
&#13;
  /**&#13;
  * @dev Multiplies two numbers, throws on overflow.&#13;
  */&#13;
    function mul(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
        // Gas optimization: this is cheaper than asserting 'a' not being zero, but the&#13;
        // benefit is lost if 'b' is also tested.&#13;
        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522&#13;
        if (a == 0) {&#13;
            return 0;&#13;
        }&#13;
&#13;
        c = a * b;&#13;
        assert(c / a == b);&#13;
        return c;&#13;
    }&#13;
&#13;
  /**&#13;
  * @dev Integer division of two numbers, truncating the quotient.&#13;
  */&#13;
    function div(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        // assert(b &gt; 0); // Solidity automatically throws when dividing by 0&#13;
        // uint256 c = a / b;&#13;
        // assert(a == b * c + a % b); // There is no case in which this doesn't hold&#13;
        return a / b;&#13;
    }&#13;
&#13;
  /**&#13;
  * @dev Subtracts two numbers, throws on overflow (i.e. if subtrahend is greater than minuend).&#13;
  */&#13;
    function sub(uint256 a, uint256 b) internal pure returns (uint256) {&#13;
        assert(b &lt;= a);&#13;
        return a - b;&#13;
    }&#13;
&#13;
  /**&#13;
  * @dev Adds two numbers, throws on overflow.&#13;
  */&#13;
    function add(uint256 a, uint256 b) internal pure returns (uint256 c) {&#13;
        c = a + b;&#13;
        assert(c &gt;= a);&#13;
        return c;&#13;
    }&#13;
}